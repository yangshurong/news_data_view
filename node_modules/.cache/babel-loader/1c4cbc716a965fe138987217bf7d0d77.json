{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LeftPage from \"../components/MainPageLeft.vue\";\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud_3ddata.json\";\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nexport default {\n  data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        region: \"山西\",\n        region_data: \"\"\n      },\n      locate_data_url: {\n        河北: \"hebei.json\",\n        山东: \"shandong.json\",\n        山西: \"shanxi.json\",\n        河南: \"henan.json\",\n        辽宁: \"liaoning.json\",\n        安徽: \"anhui.json\",\n        广东: \"guangdong.json\",\n        广西: \"guangxi.json\",\n        内蒙古: \"neimenggu.json\",\n        新疆: \"xinjiang.json\",\n        西藏: \"xizang.json\"\n      },\n      news_value: 0,\n      news_list: [{\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\"\n      }],\n      width: 576,\n      height: 300,\n      time_select_value: 0,\n      tagsNum: 0,\n      //标签数量\n      RADIUS: 120,\n      //球的半径\n      speedX: Math.PI / 360 / 0.5,\n      //球一帧绕x轴旋转的角度\n      speedY: Math.PI / 360 / 0.5,\n      //球-帧绕y轴旋转的角度\n      tags: [],\n      data: word_cloud_data[\"value\"],\n      timer: null\n    };\n  },\n\n  computed: {\n    CX() {\n      //球心x坐标\n      return this.width / 2;\n    },\n\n    CY() {\n      //球心y坐标\n      return this.height / 2;\n    },\n\n    nowSize() {\n      return function nowSize(val, initWidth = 1920) {\n        let nowClientWidth = document.documentElement.clientWidth;\n        return val * (nowClientWidth / initWidth);\n      };\n    }\n\n  },\n\n  created() {\n    this.cur_info.region = this.$route.params.region;\n    this.initData();\n  },\n\n  mounted() {\n    console.log(this.$route.params.region);\n    this.set_wordcloud();\n    this.runTags();\n    this.set_speed_average();\n    this.set_speed_tag();\n    this.set_speed_region();\n    this.set_num_tag();\n    this.set_speed_region();\n    window.addEventListener(\"resize\", this.screenAdapter);\n    this.screenAdapter();\n  },\n\n  methods: {\n    initData() {\n      //初始化标签位置\n      let tags = [];\n      this.tagsNum = this.data.length;\n\n      for (let i = 0; i < this.data.length; i++) {\n        let tag = {};\n        let k = -1 + (2 * (i + 1) - 1) / this.tagsNum;\n        let a = Math.acos(k);\n        let b = a * Math.sqrt(this.tagsNum * Math.PI); //计算标签相对于球心的角度\n\n        tag.text = this.data[i];\n        tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b); //根据标签角度求出标签的x,y,z坐标\n\n        tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n        tag.z = this.RADIUS * Math.cos(a);\n        tag.id = i; // 给标签添加id\n\n        tag.color = \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n        tags.push(tag); // console.log(tag);\n      }\n\n      this.tags = tags; //让vue替我们完成视图更新\n    },\n\n    // 纵向旋转\n    rotateX(angleX) {\n      var cos = Math.cos(angleX);\n      var sin = Math.sin(angleX);\n\n      for (let tag of this.tags) {\n        var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n        var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n        tag.y = y1;\n        tag.z = z1;\n      }\n    },\n\n    // 横向旋转\n    rotateY(angleY) {\n      var cos = Math.cos(angleY);\n      var sin = Math.sin(angleY);\n\n      for (let tag of this.tags) {\n        var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n        var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n        tag.x = x1;\n        tag.z = z1;\n      }\n    },\n\n    // 运动函数\n    async runTags() {\n      if (typeof this.timer === \"number\") {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n\n      let timer = setInterval(() => {\n        this.rotateX(this.speedX);\n        this.rotateY(this.speedY);\n      }, 17);\n      this.timer = timer;\n    },\n\n    // 监听移入事件\n    listenerMove(e) {\n      if (e.target.id) {\n        clearInterval(this.timer);\n      }\n    },\n\n    // 监听移出事件\n    listenerOut(e) {\n      if (e.target.id) {\n        this.runTags();\n      }\n    },\n\n    // 点击事件\n    clickToPage() {},\n\n    //up----------------------------------------------------------set word_cloud\n    title_change(new_title) {\n      //title变化后\n      this.cur_info.title = new_title;\n\n      if (num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title] == null) {\n        alert(\"这里没有数据\");\n        return;\n      }\n\n      this.set_num_tag();\n      this.set_speed_tag();\n      this.screenAdapter();\n    },\n\n    get_time_change(new_time) {\n      if (num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title] == null) {\n        alert(\"这里没有数据\");\n        return;\n      } //时间变化后\n\n\n      this.cur_info.year = new_time.toString();\n      this.set_num_tag();\n      this.set_speed_tag();\n      this.screenAdapter();\n    },\n\n    async set_num_tag() {\n      // if (!this.num_tag_Chart)\n      if (this.num_tag_Chart) this.num_tag_Chart.clear();else this.num_tag_Chart = this.$echarts.init(this.$refs.num_tag);\n      this.num_tag_Chart.setOption({\n        dataset: {\n          source: num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title]\n        },\n        grid: {\n          containLabel: true\n        },\n        xAxis: {\n          name: \"数量\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          type: \"category\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        visualMap: {\n          orient: \"horizontal\",\n          left: \"center\",\n          min: 0,\n          max: 10,\n          text: [\"慢速响应\", \"快速响应\"],\n          // Map the score column to color\n          dimension: \"avg\",\n          inRange: {\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"]\n          },\n          textStyle: {\n            color: \"#FFFFFF\"\n          }\n        },\n        series: [{\n          type: \"bar\",\n          encode: {\n            x: \"num\",\n            y: \"sub_title\"\n          }\n        }]\n      });\n    },\n\n    async set_wordcloud() {\n      //-------------------------set wordcloud\n      if (!this.word_cloud_Chart) this.word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\n      var maskImage = new Image();\n      maskImage.src = word_cloud_data.image;\n      this.word_cloud_Chart.setOption({\n        series: [{\n          type: \"wordCloud\",\n          shape: \"circle\",\n          keepAspect: false,\n          left: \"center\",\n          top: \"center\",\n          width: \"70%\",\n          height: \"70%\",\n          right: null,\n          bottom: null,\n          //maskImage:maskImage,\n          sizeRange: [12, 30],\n          rotationRange: [-45, 45],\n          rotationStep: 90,\n          // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\n          gridSize: 2,\n          // 允许词太大的时候，超出画布的范围\n          drawOutOfBound: false,\n          // 布局的时候是否有动画\n          layoutAnimation: false,\n          textStyle: {\n            fontWeight: \"bold\",\n            color: function () {\n              return \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n            }\n          },\n          emphasis: {\n            focus: \"self\",\n            textStyle: {\n              textShadowBlur: 10,\n              textShadowColor: \"#333\"\n            }\n          },\n          // Data is an array. Each array item must have name and value property.\n          data: word_cloud_data.value\n        }]\n      });\n    },\n\n    async set_speed_average() {\n      //--------------------set speed_average\n      //-------------------------------------------------------------set scar\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\n      let scar_series = [];\n\n      for (let title_name in scar_data) {\n        scar_series.push({\n          type: \"line\",\n          id: title_name,\n          dataGroupId: title_name,\n          universalTransition: {\n            enabled: true,\n            delay: function (idx, count) {\n              return Math.random() * 400;\n            }\n          },\n          data: scar_data[title_name]\n        });\n      }\n\n      let speed_region_average_scatterOption = {\n        xAxis: {\n          scale: true,\n          name: \"年份\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          scale: true,\n          name: \"响应时间\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        series: scar_series\n      }; //-------------------------------------------------------设置bar\n\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\n      let bar_series = [],\n          bar_x_data = [];\n\n      for (let title_name in bar_data) {\n        bar_x_data.push(title_name);\n        bar_series.push({\n          value: bar_data[title_name],\n          groupId: title_name\n        });\n      }\n\n      let bar_key = bar_x_data;\n      let speed_region_average_barOption = {\n        xAxis: {\n          type: \"category\",\n          data: bar_x_data,\n          name: \"类别\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          name: \"响应时间\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        series: [{\n          type: \"bar\",\n          id: \"total\",\n          data: bar_series,\n          universalTransition: {\n            enabled: true,\n            seriesKey: bar_key,\n            delay: function (idx, count) {\n              return Math.random() * 400;\n            }\n          }\n        }]\n      };\n      if (!this.speed_average_Chart) this.speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\n      let currentOption = speed_region_average_scatterOption,\n          that = this;\n      setInterval(function () {\n        currentOption = currentOption === speed_region_average_scatterOption ? speed_region_average_barOption : speed_region_average_scatterOption;\n        that.speed_average_Chart.setOption(currentOption, true);\n      }, 2000);\n    },\n\n    async set_speed_region() {\n      //--------------------set speed_region\n      //await this.$axios({\n      //  url: 'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json',\n      //  method: \"get\",\n      //}).then((res) => {\n      //  this.cur_info.region_data = res.data;\n      //});\n      this.cur_info.region_data = require(\"../assets/map/province/\" + this.locate_data_url[this.cur_info.region]); // console.log(this.cur_info.region);\n      // console.log(this.cur_info.region_data);\n\n      this.$echarts.registerMap(this.cur_info.region, this.cur_info.region_data);\n      let _data = this.cur_info.region_data.features,\n          scar_data = [];\n\n      for (let i in _data) {\n        let x = _data[i].properties.cp[0],\n            y = _data[i].properties.cp[1],\n            z = _data[i].properties.name;\n        scar_data.push([x, y, z]);\n      }\n\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\n      let speed_region_option = {\n        geo: {\n          map: this.cur_info.region,\n          z: 2,\n          aspectScale: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          zoom: 1,\n          //当前视角的缩放比例\n          scaleLimit: {\n            //滚轮缩放的极限控制\n            min: 1,\n            max: 2\n          },\n          label: {\n            normal: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              }\n            },\n            emphasis: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              }\n            }\n          },\n          itemStyle: {\n            normal: {\n              shadowColor: \"rgba(21,55,112,255)\",\n              shadowOffsetX: 10,\n              shadowOffsetY: 10,\n              areaColor: \"rgba(24,48,82,255)\",\n              borderColor: \"rgba(84,113,166)\",\n              borderWidth: 1.5\n            },\n            emphasis: {\n              areaColor: \"rgba(7,69,162)\"\n            }\n          }\n        },\n        series: [{\n          type: \"map\",\n          mapType: this.cur_info.region,\n          aspectScale: 1,\n          zoom: 1,\n          z: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          label: {\n            normal: {\n              show: false\n            },\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              shadowColor: \"rgba(22,57,89,255)\",\n              shadowOffsetX: 20,\n              shadowOffsetY: 20,\n              //areaColor: \"rgba(22,57,89,255)\",\n              borderColor: \"#4a75ff\",\n              borderWidth: 7\n            },\n            emphasis: {\n              areaColor: \"rgba(22,57,89,0)\"\n            }\n          }\n        }, {\n          show: true,\n          type: \"effectScatter\",\n          rippleEffect: {\n            // 涟漪特效相关配置。\n            scale: 4 // 控制涟漪大小\n\n          },\n          coordinateSystem: \"geo\",\n          // series坐标系类型\n          data: scar_data\n        }]\n      };\n      this.speed_region_Chart.setOption(speed_region_option);\n      let that = this;\n      this.speed_region_Chart.on(\"click\", function (params) {\n        if (that.cur_info.region != \"山西\") return;\n        if (params.name.substring(0, 2) != \"吕梁\" && params.name.substring(0, 2) != \"晋中\" && params.name.substring(0, 2) != \"阳泉\" && params.name.substring(0, 2) != \"朔州\" && params.name.substring(0, 2) != \"太原\") return;\n        that.$router.push({\n          name: \"ShiView\",\n          params: {\n            region: params.name.substring(0, 2)\n          }\n        });\n      });\n    },\n\n    async set_speed_tag() {\n      //--------------------------set speedTag\n      if (this.speed_tag_Chart) this.speed_tag_Chart.clear();else this.speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\n      this.speed_tag_Chart.clear();\n      this.speed_tag_Chart.setOption({\n        dataset: {\n          source: num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title]\n        },\n        polar: {\n          radius: [30, \"70%\"]\n        },\n        radiusAxis: {\n          type: \"category\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          show: false,\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        angleAxis: {\n          startAngle: 75,\n          name: \"响应时间\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        tooltip: {},\n        series: {\n          type: \"bar\",\n          coordinateSystem: \"polar\",\n          encode: {\n            radius: 0,\n            angle: 1\n          },\n          label: {\n            show: false,\n            position: \"middle\"\n          },\n          itemStyle: {\n            color: function (params) {\n              let colors = [\"#4587E7\", \"#35AB33\", \"#F5AD1D\", \"#ff7f50\", \"#da70d6\", \"#32cd32\", \"#6495ed\", \"#F3FA00\"];\n              return colors[params.dataIndex];\n            }\n          }\n        }\n      });\n    },\n\n    screenAdapter() {\n      let that = this;\n      setTimeout(function () {\n        if (that.num_tag_Chart) {\n          let options = {\n            xAxis: {\n              nameTextStyle: {\n                fontSize: that.nowSize(16)\n              },\n              axisLabel: {\n                textStyle: {\n                  fontSize: that.nowSize(16)\n                }\n              }\n            },\n            yAxis: {\n              nameTextStyle: {\n                fontSize: that.nowSize(16)\n              },\n              axisLabel: {\n                textStyle: {\n                  fontSize: that.nowSize(16)\n                }\n              }\n            },\n            visualMap: {\n              textStyle: {\n                fontSize: that.nowSize(16)\n              }\n            }\n          };\n          that.num_tag_Chart.setOption(options);\n          that.num_tag_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_average_Chart) {\n          that.speed_average_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_region_Chart) {\n          let options = {\n            geo: {\n              label: {\n                normal: {\n                  textStyle: {\n                    fontSize: that.nowSize(18)\n                  }\n                },\n                emphasis: {\n                  textStyle: {\n                    fontSize: that.nowSize(18)\n                  }\n                }\n              },\n              itemStyle: {\n                normal: {\n                  shadowOffsetX: that.nowSize(10),\n                  shadowOffsetY: that.nowSize(10),\n                  borderWidth: that.nowSize(1.5)\n                }\n              }\n            },\n            series: [{\n              itemStyle: {\n                normal: {\n                  shadowOffsetX: that.nowSize(20),\n                  shadowOffsetY: that.nowSize(20),\n                  borderWidth: that.nowSize(7)\n                }\n              }\n            }, {\n              rippleEffect: {\n                // 涟漪特效相关配置。\n                scale: that.nowSize(4) // 控制涟漪大小\n\n              }\n            }]\n          };\n          that.speed_region_Chart.setOption(options);\n          that.speed_region_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_tag_Chart) {\n          let options = {\n            polar: {\n              radius: [that.nowSize(30), \"70%\"]\n            }\n          };\n          that.speed_tag_Chart.setOption(options);\n          that.speed_tag_Chart.resize();\n        }\n      }, 300);\n    }\n\n  },\n\n  beforeDestroy() {\n    if (this.speed_region_Chart) {\n      this.speed_region_Chart.dispose();\n      this.speed_region_Chart = null;\n    }\n\n    if (this.detail_chart) {\n      this.detail_chart.dispose();\n      this.detail_chart = null;\n    }\n\n    if (this.word_cloud_Chart) {\n      this.word_cloud_Chart.dispose();\n      this.word_cloud_Chart = null;\n    }\n\n    if (this.num_tag_Chart) {\n      this.num_tag_Chart.dispose();\n      this.num_tag_Chart = null;\n    }\n\n    if (this.speed_average_Chart) {\n      this.speed_average_Chart.dispose();\n      this.speed_average_Chart = null;\n    }\n\n    window.removeEventListener(\"resize\", this.screenAdapter);\n  },\n\n  components: {\n    LeftPage\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;AACA;AACA;AACA;AACAA;AACA;AACAC;AACAC,oBADA;AAEAC,mBAFA;AAGAC,oBAHA;AAIAC;AAJA,OADA;AAOAC;AACAC,wBADA;AAEAC,2BAFA;AAGAC,yBAHA;AAIAC,wBAJA;AAKAC,2BALA;AAMAC,wBANA;AAOAC,4BAPA;AAQAC,0BARA;AASAC,6BATA;AAUAC,2BAVA;AAWAC;AAXA,OAPA;AAoBAC,mBApBA;AAqBAC,kBACA;AACAC;AADA,OADA,EAIA;AACAA;AADA,OAJA,EAOA;AACAA;AADA,OAPA,CArBA;AAgCAC,gBAhCA;AAiCAC,iBAjCA;AAkCAC,0BAlCA;AAmCAC,gBAnCA;AAmCA;AACAC,iBApCA;AAoCA;AACAC,iCArCA;AAqCA;AACAC,iCAtCA;AAsCA;AACAC,cAvCA;AAwCA5B,oCAxCA;AAyCA6B;AAzCA;AA2CA,GA7CA;;AA8CAC;AACAC;AACA;AACA;AACA,KAJA;;AAKAC;AACA;AACA;AACA,KARA;;AASAC;AACA;AACA;AACA;AACA,OAHA;AAIA;;AAdA,GA9CA;;AA8DAC;AACA;AACA;AACA,GAjEA;;AAkEAC;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA,GA7EA;;AA8EAC;AACAC;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,sDAJA,CAIA;;AACAC;AACAA,kEANA,CAMA;;AACAA;AACAA;AACAA,mBATA,CASA;;AACAA,oBACA,SACA,CACAC,+BADA,EAEAA,+BAFA,EAGAA,+BAHA,EAIAC,IAJA,CAIA,GAJA,CADA,GAMA,GAPA;AAQAd,uBAlBA,CAmBA;AACA;;AACA,uBAzBA,CAyBA;AACA,KA3BA;;AA4BA;AACAe;AACA;AACA;;AACA;AACA;AACA;AACAH;AACAA;AACA;AACA,KAtCA;;AAuCA;AACAI;AACA;AACA;;AACA;AACA;AACA;AACAJ;AACAA;AACA;AACA,KAjDA;;AAkDA;AACA;AACA;AACAK;AACA;AACA;;AACA;AACA;AACA;AACA,OAHA,EAGA,EAHA;AAIA;AACA,KA7DA;;AA8DA;AACAC;AACA;AACAD;AACA;AACA,KAnEA;;AAoEA;AACAE;AACA;AACA;AACA;AACA,KAzEA;;AA0EA;AACAC,oBA3EA;;AA4EA;AAEAC;AACA;AACA;;AACA,UACAC,uDACA,mBADA,KAEA,IAHA,EAIA;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA,KA5FA;;AA6FAC;AACA,UACAF,uDACA,mBADA,KAEA,IAHA,EAIA;AACAC;AACA;AACA,OARA,CASA;;;AACA;AACA;AACA;AACA;AACA,KA3GA;;AA4GA;AACA;AACA,8DACA;AAEA;AACAE;AACAC,kBACAJ,uDACA,mBADA;AAFA,SADA;AAOAK;AAAAC;AAAA,SAPA;AAQAC;AACAC,oBADA;AAEAC;AACAC;AADA,WAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,SARA;AAoBAG;AACAC,0BADA;AAEAL;AACAC;AADA,WAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,SApBA;AAgCAK;AACAC,8BADA;AAEAC,wBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,gCALA;AAMA;AACAC,0BAPA;AAQAC;AACAZ;AADA,WARA;AAWAE;AACAF;AADA;AAXA,SAhCA;AA+CAa,iBACA;AACAT,qBADA;AAEAU;AACAC,oBADA;AAEAC;AAFA;AAFA,SADA;AA/CA;AAyDA,KA1KA;;AA2KA;AACA;AACA,kCACA;AACA;AACAC;AACA;AACAJ,iBACA;AACAT,2BADA;AAEAc,yBAFA;AAGAC,2BAHA;AAIAZ,wBAJA;AAKAa,uBALA;AAMA3D,sBANA;AAOAC,uBAPA;AAQA2D,qBARA;AASAC,sBATA;AAUA;AACAC,6BAXA;AAYAC,kCAZA;AAaAC,0BAbA;AAcA;AACAC,qBAfA;AAgBA;AACAC,+BAjBA;AAkBA;AACAC,gCAnBA;AAoBA1B;AACA2B,8BADA;AAEA7B;AACA,qBACA,SACA,CACAnB,+BADA,EAEAA,+BAFA,EAGAA,+BAHA,EAIAC,IAJA,CAIA,GAJA,CADA,GAMA,GAPA;AASA;AAZA,WApBA;AAkCAgD;AACAC,yBADA;AAEA7B;AACA8B,gCADA;AAEAC;AAFA;AAFA,WAlCA;AA0CA;AACA7F;AA3CA,SADA;AADA;AAiDA,KAlOA;;AAmOA;AACA;AACA;AACA;AACA;;AACA;AACA8F;AACA9B,sBADA;AAEA+B,wBAFA;AAGAC,iCAHA;AAIAC;AACAC,yBADA;AAEAC;AACA;AACA;AAJA,WAJA;AAUAnG;AAVA;AAYA;;AACA;AACAyD;AACA2C,qBADA;AAEA1C,oBAFA;AAGAC;AACAC;AADA,WAHA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,SADA;AAcAG;AACAqC,qBADA;AAEA1C,sBAFA;AAGAC;AACAC;AADA,WAHA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,SAdA;AA2BAa;AA3BA,QAnBA,CAgDA;;AACA;AACA;AAAA,UACA4B,eADA;;AAEA;AACAA;AACAC;AACAC,qCADA;AAEAC;AAFA;AAIA;;AACA;AACA;AACA/C;AACAO,0BADA;AAEAhE,0BAFA;AAGA0D,oBAHA;AAIAC;AACAC;AADA,WAJA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,SADA;AAcAG;AACAL,sBADA;AAEAC;AACAC;AADA,WAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,SAdA;AA0BAa,iBACA;AACAT,qBADA;AAEA+B,qBAFA;AAGA/F,0BAHA;AAIAiG;AACAC,yBADA;AAEAO,8BAFA;AAGAN;AACA;AACA;AALA;AAJA,SADA;AA1BA;AAyCA,qCACA;AACA;AAAA,UACAO,WADA;AAEAC;AACAC,wBACAA,uDACAC,8BADA,GAEAC,kCAHA;AAIAJ;AACA,OANA,EAMA,IANA;AAOA,KAnVA;;AAoVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEACA,0CADA,EARA,CAUA;AACA;;AACA,gCACA,oBADA,EAEA,yBAFA;AAIA;AAAA,UACAK,cADA;;AAEA;AACA;AAAA,YACAnC,6BADA;AAAA,YAEAoC,4BAFA;AAGAD;AACA;;AACA;AACA;AACAE;AACAC,mCADA;AAEAF,cAFA;AAGAG,wBAHA;AAIAC,sCAJA;AAIA;AACAC,iBALA;AAKA;AACAC;AACA;AACAlD,kBAFA;AAGAC;AAHA,WANA;AAWAkD;AACAC;AACAC,wBADA;AAEA3D;AACAF,gCADA;AAEA8D;AAFA;AAFA,aADA;AAQAhC;AACA+B,wBADA;AAEA3D;AACAF,gCADA;AAEA8D;AAFA;AAFA;AARA,WAXA;AA2BAC;AACAH;AACAI,gDADA;AAEAC,+BAFA;AAGAC,+BAHA;AAIAC,6CAJA;AAKAC,6CALA;AAMAC;AANA,aADA;AASAvC;AACAqC;AADA;AATA;AA3BA,SADA;AA2CAtD,iBACA;AACAT,qBADA;AAEAkE,uCAFA;AAGAf,wBAHA;AAIAE,iBAJA;AAKAL,cALA;AAMAI,sCANA;AAMA;AACAG;AACAC;AACAC;AADA,aADA;AAIA/B;AACA+B;AADA;AAJA,WAPA;AAeAE;AACAH;AACAI,+CADA;AAEAC,+BAFA;AAGAC,+BAHA;AAIA;AACAE,oCALA;AAMAC;AANA,aADA;AASAvC;AACAqC;AADA;AATA;AAfA,SADA,EA8BA;AACAN,oBADA;AAEAzD,+BAFA;AAGAmE;AACA;AACA/B,oBAFA,CAEA;;AAFA,WAHA;AAOAgC,iCAPA;AAOA;AACApI;AARA,SA9BA;AA3CA;AAqFA;AACA;AACA;AACA;AACA,YACAqI,uCACAA,mCADA,IAEAA,mCAFA,IAGAA,mCAHA,IAIAA,mCALA,EAOA;AAEA3B;AACAhD,yBADA;AAGA2E;AACAjI;AADA;AAHA;AAQA,OAnBA;AAoBA,KAxdA;;AAydA;AACA;AACA,kEACA;AAEA;AACA;AACAiD;AACAC,kBACAJ,uDACA,mBADA;AAFA,SADA;AAOAoF;AACAC;AADA,SAPA;AAUAC;AACAxE,0BADA;AAEAL;AACAC;AADA,WAFA;AAKA6D,qBALA;AAMA5D;AACAC;AACAF;AADA;AADA;AANA,SAVA;AAsBA6E;AACAC,wBADA;AAEAhF,sBAFA;AAGAC;AACAC;AADA,WAHA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,SAtBA;AAmCA+E,mBAnCA;AAoCAlE;AACAT,qBADA;AAEAoE,mCAFA;AAGA1D;AACA6D,qBADA;AAEAK;AAFA,WAHA;AAOArB;AACAE,uBADA;AAEAoB;AAFA,WAPA;AAWAlB;AACA/D;AACA,4BACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,SALA,EAMA,SANA,EAOA,SAPA,EAQA,SARA;AAUA;AACA;AAbA;AAXA;AApCA;AAgEA,KA/hBA;;AAgiBAkF;AACA;AACAC;AACA;AACA;AACAtF;AACAE;AACA+D;AADA,eADA;AAIA7D;AACAC;AACA4D;AADA;AADA;AAJA,aADA;AAWA3D;AACAJ;AACA+D;AADA,eADA;AAIA7D;AACAC;AACA4D;AADA;AADA;AAJA,aAXA;AAqBAzD;AACAH;AACA4D;AADA;AADA;AArBA;AA2BAhB;AACAA;AACA;AACA,OAhCA,EAgCA,GAhCA;AAiCAqC;AACA;AACArC;AACA;AACA,OAJA,EAIA,GAJA;AAKAqC;AACA;AACA;AACA9B;AACAM;AACAC;AACA1D;AACA4D;AADA;AADA,iBADA;AAMAhC;AACA5B;AACA4D;AADA;AADA;AANA,eADA;AAaAC;AACAH;AACAK,iDADA;AAEAC,iDAFA;AAGAG;AAHA;AADA;AAbA,aADA;AAsBAxD,qBACA;AACAkD;AACAH;AACAK,iDADA;AAEAC,iDAFA;AAGAG;AAHA;AADA;AADA,aADA,EAUA;AACAE;AACA;AACA/B,sCAFA,CAEA;;AAFA;AADA,aAVA;AAtBA;AAwCAM;AACAA;AACA;AACA,OA7CA,EA6CA,GA7CA;AA8CAqC;AACA;AACA;AACAT;AACAC;AADA;AADA;AAKA7B;AACAA;AACA;AACA,OAVA,EAUA,GAVA;AAWA;;AAjoBA,GA9EA;;AAitBAsC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA3G;AACA,GAvuBA;;AAwuBA4G;AACAC;AADA;AAxuBA","names":["data","cur_info","year","title","region","region_data","locate_data_url","河北","山东","山西","河南","辽宁","安徽","广东","广西","内蒙古","新疆","西藏","news_value","news_list","url","width","height","time_select_value","tagsNum","RADIUS","speedX","speedY","tags","timer","computed","CX","CY","nowSize","created","mounted","console","window","methods","initData","tag","Math","join","rotateX","rotateY","clearInterval","listenerMove","listenerOut","clickToPage","title_change","num_tag_data","alert","get_time_change","dataset","source","grid","containLabel","xAxis","name","nameTextStyle","color","axisLabel","textStyle","yAxis","type","visualMap","orient","left","min","max","text","dimension","inRange","series","encode","x","y","maskImage","shape","keepAspect","top","right","bottom","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","layoutAnimation","fontWeight","emphasis","focus","textShadowBlur","textShadowColor","scar_series","id","dataGroupId","universalTransition","enabled","delay","scale","bar_x_data","bar_series","value","groupId","seriesKey","that","setInterval","currentOption","speed_region_average_barOption","speed_region_average_scatterOption","scar_data","z","geo","map","aspectScale","layoutCenter","zoom","scaleLimit","label","normal","show","fontSize","itemStyle","shadowColor","shadowOffsetX","shadowOffsetY","areaColor","borderColor","borderWidth","mapType","rippleEffect","coordinateSystem","params","polar","radius","radiusAxis","angleAxis","startAngle","tooltip","angle","position","screenAdapter","setTimeout","beforeDestroy","components","LeftPage"],"sourceRoot":"src/views","sources":["ShengView.vue"],"sourcesContent":["<template>\r\n  <div class=\"ShengBackground\">\r\n    <section class=\"item_left\">\r\n      <LeftPage @title_change=\"title_change\" />\r\n    </section>\r\n    <div class=\"item_right\">\r\n      <div class=\"title\"></div>\r\n      <div class=\"content\">\r\n        <div class=\"left\">\r\n          <div class=\"speed_region\" style=\"display: flex\">\r\n            <div class=\"time_select\">\r\n              <div\r\n                style=\"\r\n                  font-size: 0.3rem;\r\n                  color: #ffffff;\r\n                  margin-bottom: 0.0833rem;\r\n                \"\r\n              >\r\n                2021\r\n              </div>\r\n              <el-slider\r\n                v-model=\"time_select_value\"\r\n                :max=\"2021\"\r\n                :min=\"2017\"\r\n                vertical\r\n                @change=\"get_time_change\"\r\n                height=\"4.2rem\"\r\n                :step=\"1\"\r\n              >\r\n              </el-slider>\r\n              <div\r\n                style=\"font-size: 0.3rem; color: #ffffff; margin-top: 0.1667rem\"\r\n              >\r\n                2017\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"speed_region_chart\"\r\n              ref=\"speed_region\"\r\n              style=\"width: 12.9333rem; height: 8.8333rem; margin-top: 1rem\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"down\">\r\n            <div class=\"news\">\r\n              <Carousel\r\n                autoplay\r\n                v-model=\"news_value\"\r\n                loop\r\n                style=\"width: 100%; height: 100%\"\r\n              >\r\n                <CarouselItem v-for=\"(item, i) in news_list\" :key=\"i\">\r\n                  <!-- <img\r\n                    :src=\"item.url\"\r\n                    alt=\"加载失败\"\r\n                    width=\"6.7833rem\"\r\n                    height=\"3.4833rem\"\r\n                    style=\"margin: 1.4333rem 0 0 1.1667rem\"\r\n                  /> -->\r\n                  <div\r\n                    :style=\"{\r\n                      margin: '1.4333rem 0 0 1.1667rem',\r\n                      height: '3.4833rem',\r\n                      width: '6.8333rem',\r\n                      background: 'url(' + item.url + ') no-repeat',\r\n                      'background-size': '100% 100%',\r\n                    }\"\r\n                  ></div>\r\n                </CarouselItem>\r\n              </Carousel>\r\n            </div>\r\n            <div class=\"speed_average\">\r\n              <div\r\n                ref=\"speed_average\"\r\n                style=\"width: 100%; height: 100%; margin-top: 0.5rem\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"right\">\r\n          <div class=\"num_tag\">\r\n            <div\r\n              ref=\"num_tag\"\r\n              style=\"width: 95%; height: 95%; margin-top: 0.1667rem\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"word_cloud\">\r\n            <svg\r\n              :width=\"nowSize(width)\"\r\n              :height=\"nowSize(height)\"\r\n              style=\"margin-top: 0.8333rem\"\r\n            >\r\n              <a\r\n                class=\"fontA\"\r\n                :style=\"{ fill: tag.color, 'font-weight': 'bold' }\"\r\n                v-for=\"(tag, index) in tags\"\r\n                :key=\"`tag-${index}`\"\r\n              >\r\n                <text\r\n                  :id=\"tag.id\"\r\n                  :x=\"nowSize(tag.x)\"\r\n                  :y=\"nowSize(tag.y)\"\r\n                  :font-size=\"\r\n                    nowSize(20) *\r\n                    (nowSize(600) / (nowSize(600) - nowSize(tag.z)))\r\n                  \"\r\n                  :fill-opacity=\"(nowSize(400) + nowSize(tag.z)) / nowSize(400)\"\r\n                  @mousemove=\"listenerMove($event)\"\r\n                  @mouseout=\"listenerOut($event)\"\r\n                  @click=\"clickToPage\"\r\n                >\r\n                  {{ tag.text }}\r\n                </text>\r\n              </a>\r\n            </svg>\r\n          </div>\r\n          <div class=\"speed_tag\">\r\n            <div\r\n              ref=\"speed_tag\"\r\n              style=\"width: 100%; height: 100%; margin-top: 0.5rem\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport LeftPage from \"../components/MainPageLeft.vue\";\r\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud_3ddata.json\";\r\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        region: \"山西\",\r\n        region_data: \"\",\r\n      },\r\n      locate_data_url: {\r\n        河北: \"hebei.json\",\r\n        山东: \"shandong.json\",\r\n        山西: \"shanxi.json\",\r\n        河南: \"henan.json\",\r\n        辽宁: \"liaoning.json\",\r\n        安徽: \"anhui.json\",\r\n        广东: \"guangdong.json\",\r\n        广西: \"guangxi.json\",\r\n        内蒙古: \"neimenggu.json\",\r\n        新疆: \"xinjiang.json\",\r\n        西藏: \"xizang.json\",\r\n      },\r\n      news_value: 0,\r\n      news_list: [\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\",\r\n        },\r\n      ],\r\n      width: 576,\r\n      height: 300,\r\n      time_select_value: 0,\r\n      tagsNum: 0, //标签数量\r\n      RADIUS: 120, //球的半径\r\n      speedX: Math.PI / 360 / 0.5, //球一帧绕x轴旋转的角度\r\n      speedY: Math.PI / 360 / 0.5, //球-帧绕y轴旋转的角度\r\n      tags: [],\r\n      data: word_cloud_data[\"value\"],\r\n      timer: null,\r\n    };\r\n  },\r\n  computed: {\r\n    CX() {\r\n      //球心x坐标\r\n      return this.width / 2;\r\n    },\r\n    CY() {\r\n      //球心y坐标\r\n      return this.height / 2;\r\n    },\r\n    nowSize() {\r\n      return function nowSize(val, initWidth = 1920) {\r\n        let nowClientWidth = document.documentElement.clientWidth;\r\n        return val * (nowClientWidth / initWidth);\r\n      };\r\n    },\r\n  },\r\n  created() {\r\n    this.cur_info.region = this.$route.params.region;\r\n    this.initData();\r\n  },\r\n  mounted() {\r\n    console.log(this.$route.params.region);\r\n    this.set_wordcloud();\r\n    this.runTags();\r\n    this.set_speed_average();\r\n    this.set_speed_tag();\r\n    this.set_speed_region();\r\n    this.set_num_tag();\r\n    this.set_speed_region();\r\n    window.addEventListener(\"resize\", this.screenAdapter);\r\n    this.screenAdapter();\r\n  },\r\n  methods: {\r\n    initData() {\r\n      //初始化标签位置\r\n      let tags = [];\r\n      this.tagsNum = this.data.length;\r\n      for (let i = 0; i < this.data.length; i++) {\r\n        let tag = {};\r\n        let k = -1 + (2 * (i + 1) - 1) / this.tagsNum;\r\n        let a = Math.acos(k);\r\n        let b = a * Math.sqrt(this.tagsNum * Math.PI); //计算标签相对于球心的角度\r\n        tag.text = this.data[i];\r\n        tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b); //根据标签角度求出标签的x,y,z坐标\r\n        tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\r\n        tag.z = this.RADIUS * Math.cos(a);\r\n        tag.id = i; // 给标签添加id\r\n        tag.color =\r\n          \"rgb(\" +\r\n          [\r\n            Math.round(Math.random() * 254),\r\n            Math.round(Math.random() * 254),\r\n            Math.round(Math.random() * 254),\r\n          ].join(\",\") +\r\n          \")\";\r\n        tags.push(tag);\r\n        // console.log(tag);\r\n      }\r\n      this.tags = tags; //让vue替我们完成视图更新\r\n    },\r\n    // 纵向旋转\r\n    rotateX(angleX) {\r\n      var cos = Math.cos(angleX);\r\n      var sin = Math.sin(angleX);\r\n      for (let tag of this.tags) {\r\n        var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\r\n        var z1 = tag.z * cos + (tag.y - this.CY) * sin;\r\n        tag.y = y1;\r\n        tag.z = z1;\r\n      }\r\n    },\r\n    // 横向旋转\r\n    rotateY(angleY) {\r\n      var cos = Math.cos(angleY);\r\n      var sin = Math.sin(angleY);\r\n      for (let tag of this.tags) {\r\n        var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\r\n        var z1 = tag.z * cos + (tag.x - this.CX) * sin;\r\n        tag.x = x1;\r\n        tag.z = z1;\r\n      }\r\n    },\r\n    // 运动函数\r\n    async runTags() {\r\n      if (typeof this.timer === \"number\") {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n      }\r\n      let timer = setInterval(() => {\r\n        this.rotateX(this.speedX);\r\n        this.rotateY(this.speedY);\r\n      }, 17);\r\n      this.timer = timer;\r\n    },\r\n    // 监听移入事件\r\n    listenerMove(e) {\r\n      if (e.target.id) {\r\n        clearInterval(this.timer);\r\n      }\r\n    },\r\n    // 监听移出事件\r\n    listenerOut(e) {\r\n      if (e.target.id) {\r\n        this.runTags();\r\n      }\r\n    },\r\n    // 点击事件\r\n    clickToPage() {},\r\n    //up----------------------------------------------------------set word_cloud\r\n\r\n    title_change(new_title) {\r\n      //title变化后\r\n      this.cur_info.title = new_title;\r\n      if (\r\n        num_tag_data[this.cur_info.region][this.cur_info.year][\r\n          this.cur_info.title\r\n        ] == null\r\n      ) {\r\n        alert(\"这里没有数据\");\r\n        return;\r\n      }\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n      this.screenAdapter();\r\n    },\r\n    get_time_change(new_time) {\r\n      if (\r\n        num_tag_data[this.cur_info.region][this.cur_info.year][\r\n          this.cur_info.title\r\n        ] == null\r\n      ) {\r\n        alert(\"这里没有数据\");\r\n        return;\r\n      }\r\n      //时间变化后\r\n      this.cur_info.year = new_time.toString();\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n      this.screenAdapter();\r\n    },\r\n    async set_num_tag() {\r\n      // if (!this.num_tag_Chart)\r\n      if (this.num_tag_Chart) this.num_tag_Chart.clear();\r\n      else this.num_tag_Chart = this.$echarts.init(this.$refs.num_tag);\r\n\r\n      this.num_tag_Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        grid: { containLabel: true },\r\n        xAxis: {\r\n          name: \"数量\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        visualMap: {\r\n          orient: \"horizontal\",\r\n          left: \"center\",\r\n          min: 0,\r\n          max: 10,\r\n          text: [\"慢速响应\", \"快速响应\"],\r\n          // Map the score column to color\r\n          dimension: \"avg\",\r\n          inRange: {\r\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"],\r\n          },\r\n          textStyle: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            encode: {\r\n              x: \"num\",\r\n              y: \"sub_title\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_wordcloud() {\r\n      //-------------------------set wordcloud\r\n      if (!this.word_cloud_Chart)\r\n        this.word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\r\n      var maskImage = new Image();\r\n      maskImage.src = word_cloud_data.image;\r\n      this.word_cloud_Chart.setOption({\r\n        series: [\r\n          {\r\n            type: \"wordCloud\",\r\n            shape: \"circle\",\r\n            keepAspect: false,\r\n            left: \"center\",\r\n            top: \"center\",\r\n            width: \"70%\",\r\n            height: \"70%\",\r\n            right: null,\r\n            bottom: null,\r\n            //maskImage:maskImage,\r\n            sizeRange: [12, 30],\r\n            rotationRange: [-45, 45],\r\n            rotationStep: 90,\r\n            // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\r\n            gridSize: 2,\r\n            // 允许词太大的时候，超出画布的范围\r\n            drawOutOfBound: false,\r\n            // 布局的时候是否有动画\r\n            layoutAnimation: false,\r\n            textStyle: {\r\n              fontWeight: \"bold\",\r\n              color: function () {\r\n                return (\r\n                  \"rgb(\" +\r\n                  [\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                  ].join(\",\") +\r\n                  \")\"\r\n                );\r\n              },\r\n            },\r\n            emphasis: {\r\n              focus: \"self\",\r\n              textStyle: {\r\n                textShadowBlur: 10,\r\n                textShadowColor: \"#333\",\r\n              },\r\n            },\r\n\r\n            // Data is an array. Each array item must have name and value property.\r\n            data: word_cloud_data.value,\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_speed_average() {\r\n      //--------------------set speed_average\r\n      //-------------------------------------------------------------set scar\r\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\r\n      let scar_series = [];\r\n      for (let title_name in scar_data) {\r\n        scar_series.push({\r\n          type: \"line\",\r\n          id: title_name,\r\n          dataGroupId: title_name,\r\n          universalTransition: {\r\n            enabled: true,\r\n            delay: function (idx, count) {\r\n              return Math.random() * 400;\r\n            },\r\n          },\r\n          data: scar_data[title_name],\r\n        });\r\n      }\r\n      let speed_region_average_scatterOption = {\r\n        xAxis: {\r\n          scale: true,\r\n          name: \"年份\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          scale: true,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: scar_series,\r\n      };\r\n      //-------------------------------------------------------设置bar\r\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\r\n      let bar_series = [],\r\n        bar_x_data = [];\r\n      for (let title_name in bar_data) {\r\n        bar_x_data.push(title_name);\r\n        bar_series.push({\r\n          value: bar_data[title_name],\r\n          groupId: title_name,\r\n        });\r\n      }\r\n      let bar_key = bar_x_data;\r\n      let speed_region_average_barOption = {\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: bar_x_data,\r\n          name: \"类别\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            id: \"total\",\r\n            data: bar_series,\r\n            universalTransition: {\r\n              enabled: true,\r\n              seriesKey: bar_key,\r\n              delay: function (idx, count) {\r\n                return Math.random() * 400;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      if (!this.speed_average_Chart)\r\n        this.speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\r\n      let currentOption = speed_region_average_scatterOption,\r\n        that = this;\r\n      setInterval(function () {\r\n        currentOption =\r\n          currentOption === speed_region_average_scatterOption\r\n            ? speed_region_average_barOption\r\n            : speed_region_average_scatterOption;\r\n        that.speed_average_Chart.setOption(currentOption, true);\r\n      }, 2000);\r\n    },\r\n    async set_speed_region() {\r\n      //--------------------set speed_region\r\n      //await this.$axios({\r\n      //  url: 'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json',\r\n      //  method: \"get\",\r\n      //}).then((res) => {\r\n      //  this.cur_info.region_data = res.data;\r\n      //});\r\n      this.cur_info.region_data = require(\"../assets/map/province/\" +\r\n        this.locate_data_url[this.cur_info.region]);\r\n      // console.log(this.cur_info.region);\r\n      // console.log(this.cur_info.region_data);\r\n      this.$echarts.registerMap(\r\n        this.cur_info.region,\r\n        this.cur_info.region_data\r\n      );\r\n      let _data = this.cur_info.region_data.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.cp[0],\r\n          y = _data[i].properties.cp[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\r\n      let speed_region_option = {\r\n        geo: {\r\n          map: this.cur_info.region,\r\n          z: 2,\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          zoom: 1, //当前视角的缩放比例\r\n          scaleLimit: {\r\n            //滚轮缩放的极限控制\r\n            min: 1,\r\n            max: 2,\r\n          },\r\n          label: {\r\n            normal: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n            emphasis: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"rgba(21,55,112,255)\",\r\n              shadowOffsetX: 10,\r\n              shadowOffsetY: 10,\r\n              areaColor: \"rgba(24,48,82,255)\",\r\n              borderColor: \"rgba(84,113,166)\",\r\n              borderWidth: 1.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"rgba(7,69,162)\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            mapType: this.cur_info.region,\r\n            aspectScale: 1,\r\n            zoom: 1,\r\n            z: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            label: {\r\n              normal: {\r\n                show: false,\r\n              },\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                shadowColor: \"rgba(22,57,89,255)\",\r\n                shadowOffsetX: 20,\r\n                shadowOffsetY: 20,\r\n                //areaColor: \"rgba(22,57,89,255)\",\r\n                borderColor: \"#4a75ff\",\r\n                borderWidth: 7,\r\n              },\r\n              emphasis: {\r\n                areaColor: \"rgba(22,57,89,0)\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n      this.speed_region_Chart.setOption(speed_region_option);\r\n      let that = this;\r\n      this.speed_region_Chart.on(\"click\", function (params) {\r\n        if (that.cur_info.region != \"山西\") return;\r\n        if (\r\n          params.name.substring(0, 2) != \"吕梁\" &&\r\n          params.name.substring(0, 2) != \"晋中\" &&\r\n          params.name.substring(0, 2) != \"阳泉\" &&\r\n          params.name.substring(0, 2) != \"朔州\" &&\r\n          params.name.substring(0, 2) != \"太原\"\r\n        )\r\n          return;\r\n\r\n        that.$router.push({\r\n          name: \"ShiView\",\r\n\r\n          params: {\r\n            region: params.name.substring(0, 2),\r\n          },\r\n\r\n        });\r\n      });\r\n    },\r\n    async set_speed_tag() {\r\n      //--------------------------set speedTag\r\n      if (this.speed_tag_Chart) this.speed_tag_Chart.clear();\r\n      else this.speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\r\n\r\n      this.speed_tag_Chart.clear();\r\n      this.speed_tag_Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        polar: {\r\n          radius: [30, \"70%\"],\r\n        },\r\n        radiusAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          show: false,\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        angleAxis: {\r\n          startAngle: 75,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        tooltip: {},\r\n        series: {\r\n          type: \"bar\",\r\n          coordinateSystem: \"polar\",\r\n          encode: {\r\n            radius: 0,\r\n            angle: 1,\r\n          },\r\n          label: {\r\n            show: false,\r\n            position: \"middle\",\r\n          },\r\n          itemStyle: {\r\n            color: function (params) {\r\n              let colors = [\r\n                \"#4587E7\",\r\n                \"#35AB33\",\r\n                \"#F5AD1D\",\r\n                \"#ff7f50\",\r\n                \"#da70d6\",\r\n                \"#32cd32\",\r\n                \"#6495ed\",\r\n                \"#F3FA00\",\r\n              ];\r\n              return colors[params.dataIndex];\r\n            },\r\n          },\r\n        },\r\n      });\r\n    },\r\n    screenAdapter() {\r\n      let that = this;\r\n      setTimeout(function () {\r\n        if (that.num_tag_Chart) {\r\n          let options = {\r\n            xAxis: {\r\n              nameTextStyle: {\r\n                fontSize: that.nowSize(16),\r\n              },\r\n              axisLabel: {\r\n                textStyle: {\r\n                  fontSize: that.nowSize(16),\r\n                },\r\n              },\r\n            },\r\n            yAxis: {\r\n              nameTextStyle: {\r\n                fontSize: that.nowSize(16),\r\n              },\r\n              axisLabel: {\r\n                textStyle: {\r\n                  fontSize: that.nowSize(16),\r\n                },\r\n              },\r\n            },\r\n            visualMap: {\r\n              textStyle: {\r\n                fontSize: that.nowSize(16),\r\n              },\r\n            },\r\n          };\r\n          that.num_tag_Chart.setOption(options);\r\n          that.num_tag_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_average_Chart) {\r\n          that.speed_average_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_region_Chart) {\r\n          let options = {\r\n            geo: {\r\n              label: {\r\n                normal: {\r\n                  textStyle: {\r\n                    fontSize: that.nowSize(18),\r\n                  },\r\n                },\r\n                emphasis: {\r\n                  textStyle: {\r\n                    fontSize: that.nowSize(18),\r\n                  },\r\n                },\r\n              },\r\n              itemStyle: {\r\n                normal: {\r\n                  shadowOffsetX: that.nowSize(10),\r\n                  shadowOffsetY: that.nowSize(10),\r\n                  borderWidth: that.nowSize(1.5),\r\n                },\r\n              },\r\n            },\r\n            series: [\r\n              {\r\n                itemStyle: {\r\n                  normal: {\r\n                    shadowOffsetX: that.nowSize(20),\r\n                    shadowOffsetY: that.nowSize(20),\r\n                    borderWidth: that.nowSize(7),\r\n                  },\r\n                },\r\n              },\r\n              {\r\n                rippleEffect: {\r\n                  // 涟漪特效相关配置。\r\n                  scale: that.nowSize(4), // 控制涟漪大小\r\n                },\r\n              },\r\n            ],\r\n          };\r\n          that.speed_region_Chart.setOption(options);\r\n          that.speed_region_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_tag_Chart) {\r\n          let options = {\r\n            polar: {\r\n              radius: [that.nowSize(30), \"70%\"],\r\n            },\r\n          };\r\n          that.speed_tag_Chart.setOption(options);\r\n          that.speed_tag_Chart.resize();\r\n        }\r\n      }, 300);\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    if (this.speed_region_Chart) {\r\n      this.speed_region_Chart.dispose();\r\n      this.speed_region_Chart = null;\r\n    }\r\n    if (this.detail_chart) {\r\n      this.detail_chart.dispose();\r\n      this.detail_chart = null;\r\n    }\r\n    if (this.word_cloud_Chart) {\r\n      this.word_cloud_Chart.dispose();\r\n      this.word_cloud_Chart = null;\r\n    }\r\n    if (this.num_tag_Chart) {\r\n      this.num_tag_Chart.dispose();\r\n      this.num_tag_Chart = null;\r\n    }\r\n    if (this.speed_average_Chart) {\r\n      this.speed_average_Chart.dispose();\r\n      this.speed_average_Chart = null;\r\n    }\r\n    window.removeEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n  components: {\r\n    LeftPage,\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.fontA:hover {\r\n  fill: #ffffff;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n.time_select {\r\n  width: 0.4667rem;\r\n  height: 4.2rem;\r\n  margin-left: 1.8rem;\r\n  margin-top: 4.6167rem;\r\n}\r\n.speed_region {\r\n  width: 17.5167rem;\r\n  height: 9.9667rem;\r\n  //width: 32rem;\r\n  //height: 18rem;\r\n  margin-top: 2.1rem;\r\n  background: url(../assets/Sheng/speed_region.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  justify-content: center;\r\n}\r\n.news {\r\n  width: 9.1rem;\r\n  height: 5.4167rem;\r\n  margin-top: 0.2167rem;\r\n  background: url(../assets/Sheng/news.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_average {\r\n  width: 7.9833rem;\r\n  height: 5.4167rem;\r\n  margin-top: 0.2667rem;\r\n  margin-left: 0.3667rem;\r\n  background: url(../assets/Sheng/speed_average.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.num_tag {\r\n  width: 9.6rem;\r\n  height: 5.6667rem;\r\n  background: url(../assets/Sheng/num_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.word_cloud {\r\n  width: 9.6rem;\r\n  height: 5.6667rem;\r\n  margin-top: 0.1667rem;\r\n\r\n  background: url(../assets/Sheng/word_cloud.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_tag {\r\n  width: 9.6rem;\r\n  height: 5.0333rem;\r\n  margin-top: 0.1667rem;\r\n\r\n  background: url(../assets/Sheng/speed_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.ShengBackground {\r\n  width: 32.2667rem;\r\n  height: 18.05rem;\r\n  background: url(../assets/Sheng/ShengBackground.PNG) no-repeat fixed;\r\n  background-size: 100% 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  //background-position: center top;\r\n  .item_left {\r\n    margin-left: 0rem;\r\n    margin-top: 0rem;\r\n    width: 4.45rem;\r\n    height: 100%;\r\n    line-height: 0.3333rem;\r\n    opacity: 0.89;\r\n    background-color: rgba(29, 76, 170, 100);\r\n    text-align: center;\r\n  }\r\n  .item_right {\r\n    //display: flex;\r\n    //flex-flow: column;\r\n    .title {\r\n      margin-left: 0rem;\r\n      margin-top: 0rem;\r\n      width: 27.8167rem;\r\n      height: 5rem;\r\n      background: url(../assets/main_page_title.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      background-position: center top;\r\n    }\r\n    .content {\r\n      margin-top: -5rem;\r\n      display: flex;\r\n      .left {\r\n        margin-left: 0.7333rem;\r\n        display: flex;\r\n        flex-flow: column;\r\n        height: 100%;\r\n        width: 100%;\r\n        .down {\r\n          display: flex;\r\n        }\r\n      }\r\n      .right {\r\n        display: flex;\r\n        flex-flow: column;\r\n        margin-left: 0.1667rem;\r\n        margin-top: 1rem;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}