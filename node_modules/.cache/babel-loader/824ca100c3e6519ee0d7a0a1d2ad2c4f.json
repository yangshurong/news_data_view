{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LeftPage from \"../components/MainPageLeft.vue\";\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud_3ddata.json\";\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nexport default {\n  data: function data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        region: \"山东\",\n        region_data: \"\"\n      },\n      locate_data_url: {\n        河北: \"hebei.json\",\n        山东: \"shandong.json\",\n        山西: \"shanxi.json\",\n        河南: \"henan.json\",\n        辽宁: \"liaoning.json\",\n        安徽: \"anhui.json\",\n        广东: \"guangdong.json\",\n        广西: \"guangxi.json\",\n        内蒙古: \"neimenggu.json\",\n        新疆: \"xinjiang.json\",\n        西藏: \"xizang.json\"\n      },\n      news_value: 0,\n      news_list: [{\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\"\n      }],\n      width: 576,\n      height: 300,\n      time_select_value: 0,\n      tagsNum: 0,\n      //标签数量\n      RADIUS: 120,\n      //球的半径\n      speedX: Math.PI / 360 / 0.5,\n      //球一帧绕x轴旋转的角度\n      speedY: Math.PI / 360 / 0.5,\n      //球-帧绕y轴旋转的角度\n      tags: [],\n      data: word_cloud_data[\"value\"],\n      timer: null\n    };\n  },\n  computed: {\n    CX: function CX() {\n      //球心x坐标\n      return this.width / 2;\n    },\n    CY: function CY() {\n      //球心y坐标\n      return this.height / 2;\n    },\n    nowSize: function nowSize() {\n      return function nowSize(val) {\n        var initWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1920;\n        var nowClientWidth = document.documentElement.clientWidth;\n        return val * (nowClientWidth / initWidth);\n      };\n    }\n  },\n  created: function created() {\n    this.initData();\n  },\n  mounted: function mounted() {\n    //this.cur_info.region = this.$route.params.region;\n    console.log(this.$route.params.region);\n    this.set_wordcloud();\n    this.runTags();\n    this.set_speed_average();\n    this.set_speed_tag();\n    this.set_speed_region();\n    this.set_num_tag();\n    this.set_speed_region();\n    window.addEventListener(\"resize\", this.screenAdapter);\n    this.screenAdapter();\n  },\n  methods: {\n    initData: function initData() {\n      //初始化标签位置\n      var tags = [];\n      this.tagsNum = this.data.length;\n\n      for (var i = 0; i < this.data.length; i++) {\n        var tag = {};\n        var k = -1 + (2 * (i + 1) - 1) / this.tagsNum;\n        var a = Math.acos(k);\n        var b = a * Math.sqrt(this.tagsNum * Math.PI); //计算标签相对于球心的角度\n\n        tag.text = this.data[i];\n        tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b); //根据标签角度求出标签的x,y,z坐标\n\n        tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n        tag.z = this.RADIUS * Math.cos(a);\n        tag.id = i; // 给标签添加id\n\n        tag.color = \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n        tags.push(tag); // console.log(tag);\n      }\n\n      this.tags = tags; //让vue替我们完成视图更新\n    },\n    // 纵向旋转\n    rotateX: function rotateX(angleX) {\n      var cos = Math.cos(angleX);\n      var sin = Math.sin(angleX);\n\n      var _iterator = _createForOfIteratorHelper(this.tags),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tag = _step.value;\n          var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n          var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n          tag.y = y1;\n          tag.z = z1;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    // 横向旋转\n    rotateY: function rotateY(angleY) {\n      var cos = Math.cos(angleY);\n      var sin = Math.sin(angleY);\n\n      var _iterator2 = _createForOfIteratorHelper(this.tags),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tag = _step2.value;\n          var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n          var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n          tag.x = x1;\n          tag.z = z1;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n    // 运动函数\n    runTags: function runTags() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var timer;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof _this.timer === \"number\") {\n                  clearInterval(_this.timer);\n                  _this.timer = null;\n                }\n\n                timer = setInterval(function () {\n                  _this.rotateX(_this.speedX);\n\n                  _this.rotateY(_this.speedY);\n                }, 17);\n                _this.timer = timer;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听移入事件\n    listenerMove: function listenerMove(e) {\n      if (e.target.id) {\n        clearInterval(this.timer);\n      }\n    },\n    // 监听移出事件\n    listenerOut: function listenerOut(e) {\n      if (e.target.id) {\n        this.runTags();\n      }\n    },\n    // 点击事件\n    clickToPage: function clickToPage() {},\n    //up----------------------------------------------------------set word_cloud\n    title_change: function title_change(new_title) {\n      //title变化后\n      this.cur_info.title = new_title;\n\n      if (num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title] == null) {\n        alert(\"这里没有数据\");\n        return;\n      }\n\n      this.set_num_tag();\n      this.set_speed_tag();\n    },\n    get_time_change: function get_time_change(new_time) {\n      if (num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title] == null) {\n        alert(\"这里没有数据\");\n        return;\n      } //时间变化后\n\n\n      this.cur_info.year = new_time.toString();\n      this.set_num_tag();\n      this.set_speed_tag();\n    },\n    set_num_tag: function set_num_tag() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // if (!this.num_tag_Chart)\n                if (_this2.num_tag_Chart) _this2.num_tag_Chart.clear();else _this2.num_tag_Chart = _this2.$echarts.init(_this2.$refs.num_tag);\n\n                _this2.num_tag_Chart.setOption({\n                  dataset: {\n                    source: num_tag_data[_this2.cur_info.region][_this2.cur_info.year][_this2.cur_info.title]\n                  },\n                  grid: {\n                    containLabel: true\n                  },\n                  xAxis: {\n                    name: \"数量\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    type: \"category\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  visualMap: {\n                    orient: \"horizontal\",\n                    left: \"center\",\n                    min: 0,\n                    max: 10,\n                    text: [\"慢速响应\", \"快速响应\"],\n                    // Map the score column to color\n                    dimension: \"avg\",\n                    inRange: {\n                      color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"]\n                    },\n                    textStyle: {\n                      color: \"#FFFFFF\"\n                    }\n                  },\n                  series: [{\n                    type: \"bar\",\n                    encode: {\n                      x: \"num\",\n                      y: \"sub_title\"\n                    }\n                  }]\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    set_wordcloud: function set_wordcloud() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var maskImage;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //-------------------------set wordcloud\n                if (!_this3.word_cloud_Chart) _this3.word_cloud_Chart = _this3.$echarts.init(_this3.$refs.word_cloud);\n                maskImage = new Image();\n                maskImage.src = word_cloud_data.image;\n\n                _this3.word_cloud_Chart.setOption({\n                  series: [{\n                    type: \"wordCloud\",\n                    shape: \"circle\",\n                    keepAspect: false,\n                    left: \"center\",\n                    top: \"center\",\n                    width: \"70%\",\n                    height: \"70%\",\n                    right: null,\n                    bottom: null,\n                    //maskImage:maskImage,\n                    sizeRange: [12, 30],\n                    rotationRange: [-45, 45],\n                    rotationStep: 90,\n                    // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\n                    gridSize: 2,\n                    // 允许词太大的时候，超出画布的范围\n                    drawOutOfBound: false,\n                    // 布局的时候是否有动画\n                    layoutAnimation: false,\n                    textStyle: {\n                      fontWeight: \"bold\",\n                      color: function color() {\n                        return \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n                      }\n                    },\n                    emphasis: {\n                      focus: \"self\",\n                      textStyle: {\n                        textShadowBlur: 10,\n                        textShadowColor: \"#333\"\n                      }\n                    },\n                    // Data is an array. Each array item must have name and value property.\n                    data: word_cloud_data.value\n                  }]\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    set_speed_average: function set_speed_average() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var scar_data, scar_series, title_name, speed_region_average_scatterOption, bar_data, bar_series, bar_x_data, _title_name, bar_key, speed_region_average_barOption, currentOption, that;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //--------------------set speed_average\n                //-------------------------------------------------------------set scar\n                scar_data = speed_average_data[\"scar\"][_this4.cur_info.region];\n                scar_series = [];\n\n                for (title_name in scar_data) {\n                  scar_series.push({\n                    type: \"line\",\n                    id: title_name,\n                    dataGroupId: title_name,\n                    universalTransition: {\n                      enabled: true,\n                      delay: function delay(idx, count) {\n                        return Math.random() * 400;\n                      }\n                    },\n                    data: scar_data[title_name]\n                  });\n                }\n\n                speed_region_average_scatterOption = {\n                  xAxis: {\n                    scale: true,\n                    name: \"年份\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    scale: true,\n                    name: \"响应时间\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  series: scar_series\n                }; //-------------------------------------------------------设置bar\n\n                bar_data = speed_average_data[\"bar\"][_this4.cur_info.region];\n                bar_series = [], bar_x_data = [];\n\n                for (_title_name in bar_data) {\n                  bar_x_data.push(_title_name);\n                  bar_series.push({\n                    value: bar_data[_title_name],\n                    groupId: _title_name\n                  });\n                }\n\n                bar_key = bar_x_data;\n                speed_region_average_barOption = {\n                  xAxis: {\n                    type: \"category\",\n                    data: bar_x_data,\n                    name: \"类别\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    name: \"响应时间\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  series: [{\n                    type: \"bar\",\n                    id: \"total\",\n                    data: bar_series,\n                    universalTransition: {\n                      enabled: true,\n                      seriesKey: bar_key,\n                      delay: function delay(idx, count) {\n                        return Math.random() * 400;\n                      }\n                    }\n                  }]\n                };\n                if (!_this4.speed_average_Chart) _this4.speed_average_Chart = _this4.$echarts.init(_this4.$refs.speed_average);\n                currentOption = speed_region_average_scatterOption, that = _this4;\n                setInterval(function () {\n                  currentOption = currentOption === speed_region_average_scatterOption ? speed_region_average_barOption : speed_region_average_scatterOption;\n                  that.speed_average_Chart.setOption(currentOption, true);\n                }, 2000);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    set_speed_region: function set_speed_region() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var _data, scar_data, i, x, y, z, speed_region_option;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                //--------------------set speed_region\n                //await this.$axios({\n                //  url: 'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json',\n                //  method: \"get\",\n                //}).then((res) => {\n                //  this.cur_info.region_data = res.data;\n                //});\n                _this5.cur_info.region_data = require(\"../assets/map/province/\" + _this5.locate_data_url[_this5.cur_info.region]);\n                console.log(_this5.cur_info.region);\n                console.log(_this5.cur_info.region_data);\n\n                _this5.$echarts.registerMap(_this5.cur_info.region, _this5.cur_info.region_data);\n\n                _data = _this5.cur_info.region_data.features, scar_data = [];\n\n                for (i in _data) {\n                  x = _data[i].properties.cp[0], y = _data[i].properties.cp[1], z = _data[i].properties.name;\n                  scar_data.push([x, y, z]);\n                }\n\n                _this5.speed_region_Chart = _this5.$echarts.init(_this5.$refs.speed_region);\n                speed_region_option = {\n                  geo: {\n                    map: _this5.cur_info.region,\n                    z: 2,\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    zoom: 1,\n                    //当前视角的缩放比例\n                    scaleLimit: {\n                      //滚轮缩放的极限控制\n                      min: 1,\n                      max: 2\n                    },\n                    label: {\n                      normal: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        }\n                      },\n                      emphasis: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        }\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"rgba(21,55,112,255)\",\n                        shadowOffsetX: 10,\n                        shadowOffsetY: 10,\n                        areaColor: \"rgba(24,48,82,255)\",\n                        borderColor: \"rgba(84,113,166)\",\n                        borderWidth: 1.5\n                      },\n                      emphasis: {\n                        areaColor: \"rgba(7,69,162)\"\n                      }\n                    }\n                  },\n                  series: [{\n                    type: \"map\",\n                    mapType: _this5.cur_info.region,\n                    aspectScale: 1,\n                    zoom: 1,\n                    z: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    label: {\n                      normal: {\n                        show: false\n                      },\n                      emphasis: {\n                        show: false\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"rgba(22,57,89,255)\",\n                        shadowOffsetX: 20,\n                        shadowOffsetY: 20,\n                        //areaColor: \"rgba(22,57,89,255)\",\n                        borderColor: \"#4a75ff\",\n                        borderWidth: 7\n                      },\n                      emphasis: {\n                        areaColor: \"rgba(22,57,89,0)\"\n                      }\n                    }\n                  }, {\n                    show: true,\n                    type: \"effectScatter\",\n                    rippleEffect: {\n                      // 涟漪特效相关配置。\n                      scale: 4 // 控制涟漪大小\n\n                    },\n                    coordinateSystem: \"geo\",\n                    // series坐标系类型\n                    data: scar_data\n                  }]\n                };\n\n                _this5.speed_region_Chart.setOption(speed_region_option);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    set_speed_tag: function set_speed_tag() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                //--------------------------set speedTag\n                if (_this6.speed_tag_Chart) _this6.speed_tag_Chart.clear();else _this6.speed_tag_Chart = _this6.$echarts.init(_this6.$refs.speed_tag);\n\n                _this6.speed_tag_Chart.clear();\n\n                _this6.speed_tag_Chart.setOption({\n                  dataset: {\n                    source: num_tag_data[_this6.cur_info.region][_this6.cur_info.year][_this6.cur_info.title]\n                  },\n                  polar: {\n                    radius: [30, \"70%\"]\n                  },\n                  radiusAxis: {\n                    type: \"category\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    show: false,\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  angleAxis: {\n                    startAngle: 75,\n                    name: \"响应时间\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  tooltip: {},\n                  series: {\n                    type: \"bar\",\n                    coordinateSystem: \"polar\",\n                    encode: {\n                      radius: 0,\n                      angle: 1\n                    },\n                    label: {\n                      show: false,\n                      position: \"middle\"\n                    },\n                    itemStyle: {\n                      color: function color(params) {\n                        var colors = [\"#4587E7\", \"#35AB33\", \"#F5AD1D\", \"#ff7f50\", \"#da70d6\", \"#32cd32\", \"#6495ed\", \"#F3FA00\"];\n                        return colors[params.dataIndex];\n                      }\n                    }\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    screenAdapter: function screenAdapter() {\n      var that = this;\n      setTimeout(function () {\n        if (that.num_tag_Chart) {\n          var options = {};\n          that.num_tag_Chart.setOption(options);\n          that.num_tag_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_average_Chart) {\n          var options = {};\n          that.speed_average_Chart.setOption(options);\n          that.speed_average_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_region_Chart) {\n          var options = {\n            geo: {\n              label: {\n                normal: {\n                  textStyle: {\n                    fontSize: that.nowSize(18)\n                  }\n                },\n                emphasis: {\n                  textStyle: {\n                    fontSize: that.nowSize(18)\n                  }\n                }\n              },\n              itemStyle: {\n                normal: {\n                  shadowOffsetX: that.nowSize(10),\n                  shadowOffsetY: that.nowSize(10),\n                  borderWidth: that.nowSize(1.5)\n                }\n              }\n            },\n            series: [{\n              itemStyle: {\n                normal: {\n                  shadowOffsetX: that.nowSize(20),\n                  shadowOffsetY: that.nowSize(20),\n                  borderWidth: that.nowSize(7)\n                }\n              }\n            }, {\n              rippleEffect: {\n                // 涟漪特效相关配置。\n                scale: that.nowSize(4) // 控制涟漪大小\n\n              }\n            }]\n          };\n          that.speed_region_Chart.setOption(options);\n          that.speed_region_Chart.resize();\n        }\n      }, 300);\n      setTimeout(function () {\n        if (that.speed_tag_Chart) {\n          var options = {\n            polar: {\n              radius: [this.nowSize(30), \"70%\"]\n            }\n          };\n          that.speed_tag_Chart.setOption(options);\n          that.speed_tag_Chart.resize();\n        }\n      }, 300);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.speed_region_Chart) {\n      this.speed_region_Chart.dispose();\n      this.speed_region_Chart = null;\n    }\n\n    if (this.detail_chart) {\n      this.detail_chart.dispose();\n      this.detail_chart = null;\n    }\n\n    if (this.word_cloud_Chart) {\n      this.word_cloud_Chart.dispose();\n      this.word_cloud_Chart = null;\n    }\n\n    if (this.num_tag_Chart) {\n      this.num_tag_Chart.dispose();\n      this.num_tag_Chart = null;\n    }\n\n    if (this.speed_average_Chart) {\n      this.speed_average_Chart.dispose();\n      this.speed_average_Chart = null;\n    }\n  },\n  components: {\n    LeftPage: LeftPage\n  }\n};","map":{"version":3,"mappings":"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ACAtE;AACA,sCACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,SALA,EAMA,SANA,EAOA,SAPA,EAQA,SARA;AAUA;AACA;AAbA;AAXA;AApCA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsEA,KAxgBA;AAygBAyF,iBAzgBA,2BAygBA;AACA;AACAC;AACA;AACA;AACAnC;AACAA;AACA;AACA,OANA,EAMA,GANA;AAOAmC;AACA;AACA;AACAnC;AACAA;AACA;AACA,OANA,EAMA,GANA;AAOAmC;AACA;AACA;AACA9B;AACAM;AACAC;AACAjE;AACAmE;AADA;AADA,iBADA;AAMAtC;AACA7B;AACAmE;AADA;AADA;AANA,eADA;AAaAC;AACAH;AACAK,iDADA;AAEAC,iDAFA;AAGAG;AAHA;AADA;AAbA,aADA;AAsBA/D,qBACA;AACAyD;AACAH;AACAK,iDADA;AAEAC,iDAFA;AAGAG;AAHA;AADA;AADA,aADA,EAUA;AACAE;AACA;AACAjC,sCAFA,CAEA;;AAFA;AADA,aAVA;AAtBA;AAwCAU;AACAA;AACA;AACA,OA7CA,EA6CA,GA7CA;AA8CAmC;AACA;AACA;AACAT;AACAC;AADA;AADA;AAKA3B;AACAA;AACA;AACA,OAVA,EAUA,GAVA;AAWA;AAllBA,GA9EA;AAkqBAoC,eAlqBA,2BAkqBA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,GAvrBA;AAwrBAC;AACAC;AADA;AAxrBA","names":["data","cur_info","year","title","region","region_data","locate_data_url","河北","山东","山西","河南","辽宁","安徽","广东","广西","内蒙古","新疆","西藏","news_value","news_list","url","width","height","time_select_value","tagsNum","RADIUS","speedX","speedY","tags","timer","computed","CX","CY","nowSize","created","mounted","console","window","methods","initData","tag","Math","join","rotateX","angleX","rotateY","angleY","runTags","clearInterval","setInterval","listenerMove","e","listenerOut","clickToPage","title_change","new_title","num_tag_data","alert","get_time_change","new_time","set_num_tag","dataset","source","grid","containLabel","xAxis","name","nameTextStyle","color","axisLabel","textStyle","yAxis","type","visualMap","orient","left","min","max","text","dimension","inRange","series","encode","x","y","set_wordcloud","maskImage","shape","keepAspect","top","right","bottom","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","layoutAnimation","fontWeight","emphasis","focus","textShadowBlur","textShadowColor","set_speed_average","scar_data","speed_average_data","scar_series","id","dataGroupId","universalTransition","enabled","delay","speed_region_average_scatterOption","scale","bar_data","bar_series","bar_x_data","value","groupId","bar_key","speed_region_average_barOption","seriesKey","currentOption","that","set_speed_region","_data","z","speed_region_option","geo","map","aspectScale","layoutCenter","zoom","scaleLimit","label","normal","show","fontSize","itemStyle","shadowColor","shadowOffsetX","shadowOffsetY","areaColor","borderColor","borderWidth","mapType","rippleEffect","coordinateSystem","set_speed_tag","polar","radius","radiusAxis","angleAxis","startAngle","tooltip","angle","position","screenAdapter","setTimeout","beforeDestroy","components","LeftPage"],"sourceRoot":"src/views","sources":["ShengView.vue"],"sourcesContent":["<template>\r\n  <div class=\"ShengBackground\">\r\n    <section class=\"item_left\">\r\n      <LeftPage @title_change=\"title_change\" />\r\n    </section>\r\n    <div class=\"item_right\">\r\n      <div class=\"title\"></div>\r\n      <div class=\"content\">\r\n        <div class=\"left\">\r\n          <div class=\"speed_region\" style=\"display: flex\">\r\n            <div class=\"time_select\">\r\n              <div\r\n                style=\"\r\n                  font-size: 0.3rem;\r\n                  color: #ffffff;\r\n                  margin-bottom: 0.0833rem;\r\n                \"\r\n              >\r\n                2021\r\n              </div>\r\n              <el-slider\r\n                v-model=\"time_select_value\"\r\n                :max=\"2021\"\r\n                :min=\"2017\"\r\n                vertical\r\n                @change=\"get_time_change\"\r\n                height=\"4.2rem\"\r\n                :step=\"1\"\r\n              >\r\n              </el-slider>\r\n              <div\r\n                style=\"font-size: 0.3rem; color: #ffffff; margin-top: 0.1667rem\"\r\n              >\r\n                2017\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"speed_region_chart\"\r\n              ref=\"speed_region\"\r\n              style=\"width: 12.9333rem; height: 8.8333rem; margin-top: 1rem\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"down\">\r\n            <div class=\"news\">\r\n              <Carousel\r\n                autoplay\r\n                v-model=\"news_value\"\r\n                loop\r\n                style=\"width: 100%; height: 100%\"\r\n              >\r\n                <CarouselItem v-for=\"(item, i) in news_list\" :key=\"i\">\r\n                  <!-- <img\r\n                    :src=\"item.url\"\r\n                    alt=\"加载失败\"\r\n                    width=\"6.7833rem\"\r\n                    height=\"3.4833rem\"\r\n                    style=\"margin: 1.4333rem 0 0 1.1667rem\"\r\n                  /> -->\r\n                  <div\r\n                    :style=\"{\r\n                      margin: '1.4333rem 0 0 1.1667rem',\r\n                      height: '3.4833rem',\r\n                      width: '6.8333rem',\r\n                      background: 'url(' + item.url + ') no-repeat',\r\n                      'background-size': '100% 100%',\r\n                    }\"\r\n                  ></div>\r\n                </CarouselItem>\r\n              </Carousel>\r\n            </div>\r\n            <div class=\"speed_average\">\r\n              <div\r\n                ref=\"speed_average\"\r\n                style=\"width: 100%; height: 100%; margin-top: 0.5rem\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"right\">\r\n          <div class=\"num_tag\">\r\n            <div\r\n              ref=\"num_tag\"\r\n              style=\"width: 95%; height: 95%; margin-top: 0.1667rem\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"word_cloud\">\r\n            <svg\r\n              :width=\"nowSize(width)\"\r\n              :height=\"nowSize(height)\"\r\n              style=\"margin-top: 0.8333rem\"\r\n            >\r\n              <a\r\n                class=\"fontA\"\r\n                :style=\"{ fill: tag.color, 'font-weight': 'bold' }\"\r\n                v-for=\"(tag, index) in tags\"\r\n                :key=\"`tag-${index}`\"\r\n              >\r\n                <text\r\n                  :id=\"tag.id\"\r\n                  :x=\"nowSize(tag.x)\"\r\n                  :y=\"nowSize(tag.y)\"\r\n                  :font-size=\"\r\n                    nowSize(20) *\r\n                    (nowSize(600) / (nowSize(600) - nowSize(tag.z)))\r\n                  \"\r\n                  :fill-opacity=\"(nowSize(400) + nowSize(tag.z)) / nowSize(400)\"\r\n                  @mousemove=\"listenerMove($event)\"\r\n                  @mouseout=\"listenerOut($event)\"\r\n                  @click=\"clickToPage\"\r\n                >\r\n                  {{ tag.text }}\r\n                </text>\r\n              </a>\r\n            </svg>\r\n          </div>\r\n          <div class=\"speed_tag\">\r\n            <div\r\n              ref=\"speed_tag\"\r\n              style=\"width: 100%; height: 100%; margin-top: 0.5rem\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport LeftPage from \"../components/MainPageLeft.vue\";\r\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud_3ddata.json\";\r\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        region: \"山东\",\r\n        region_data: \"\",\r\n      },\r\n      locate_data_url: {\r\n        河北: \"hebei.json\",\r\n        山东: \"shandong.json\",\r\n        山西: \"shanxi.json\",\r\n        河南: \"henan.json\",\r\n        辽宁: \"liaoning.json\",\r\n        安徽: \"anhui.json\",\r\n        广东: \"guangdong.json\",\r\n        广西: \"guangxi.json\",\r\n        内蒙古: \"neimenggu.json\",\r\n        新疆: \"xinjiang.json\",\r\n        西藏: \"xizang.json\",\r\n      },\r\n      news_value: 0,\r\n      news_list: [\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\",\r\n        },\r\n      ],\r\n      width: 576,\r\n      height: 300,\r\n      time_select_value: 0,\r\n      tagsNum: 0, //标签数量\r\n      RADIUS: 120, //球的半径\r\n      speedX: Math.PI / 360 / 0.5, //球一帧绕x轴旋转的角度\r\n      speedY: Math.PI / 360 / 0.5, //球-帧绕y轴旋转的角度\r\n      tags: [],\r\n      data: word_cloud_data[\"value\"],\r\n      timer: null,\r\n    };\r\n  },\r\n  computed: {\r\n    CX() {\r\n      //球心x坐标\r\n      return this.width / 2;\r\n    },\r\n    CY() {\r\n      //球心y坐标\r\n      return this.height / 2;\r\n    },\r\n    nowSize() {\r\n      return function nowSize(val, initWidth = 1920) {\r\n        let nowClientWidth = document.documentElement.clientWidth;\r\n        return val * (nowClientWidth / initWidth);\r\n      };\r\n    },\r\n  },\r\n  created() {\r\n    this.initData();\r\n  },\r\n  mounted() {\r\n    //this.cur_info.region = this.$route.params.region;\r\n    console.log(this.$route.params.region);\r\n    this.set_wordcloud();\r\n    this.runTags();\r\n    this.set_speed_average();\r\n    this.set_speed_tag();\r\n    this.set_speed_region();\r\n    this.set_num_tag();\r\n    this.set_speed_region();\r\n    window.addEventListener(\"resize\", this.screenAdapter);\r\n    this.screenAdapter();\r\n  },\r\n  methods: {\r\n    initData() {\r\n      //初始化标签位置\r\n      let tags = [];\r\n      this.tagsNum = this.data.length;\r\n      for (let i = 0; i < this.data.length; i++) {\r\n        let tag = {};\r\n        let k = -1 + (2 * (i + 1) - 1) / this.tagsNum;\r\n        let a = Math.acos(k);\r\n        let b = a * Math.sqrt(this.tagsNum * Math.PI); //计算标签相对于球心的角度\r\n        tag.text = this.data[i];\r\n        tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b); //根据标签角度求出标签的x,y,z坐标\r\n        tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\r\n        tag.z = this.RADIUS * Math.cos(a);\r\n        tag.id = i; // 给标签添加id\r\n        tag.color =\r\n          \"rgb(\" +\r\n          [\r\n            Math.round(Math.random() * 254),\r\n            Math.round(Math.random() * 254),\r\n            Math.round(Math.random() * 254),\r\n          ].join(\",\") +\r\n          \")\";\r\n        tags.push(tag);\r\n        // console.log(tag);\r\n      }\r\n      this.tags = tags; //让vue替我们完成视图更新\r\n    },\r\n    // 纵向旋转\r\n    rotateX(angleX) {\r\n      var cos = Math.cos(angleX);\r\n      var sin = Math.sin(angleX);\r\n      for (let tag of this.tags) {\r\n        var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\r\n        var z1 = tag.z * cos + (tag.y - this.CY) * sin;\r\n        tag.y = y1;\r\n        tag.z = z1;\r\n      }\r\n    },\r\n    // 横向旋转\r\n    rotateY(angleY) {\r\n      var cos = Math.cos(angleY);\r\n      var sin = Math.sin(angleY);\r\n      for (let tag of this.tags) {\r\n        var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\r\n        var z1 = tag.z * cos + (tag.x - this.CX) * sin;\r\n        tag.x = x1;\r\n        tag.z = z1;\r\n      }\r\n    },\r\n    // 运动函数\r\n    async runTags() {\r\n      if (typeof this.timer === \"number\") {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n      }\r\n      let timer = setInterval(() => {\r\n        this.rotateX(this.speedX);\r\n        this.rotateY(this.speedY);\r\n      }, 17);\r\n      this.timer = timer;\r\n    },\r\n    // 监听移入事件\r\n    listenerMove(e) {\r\n      if (e.target.id) {\r\n        clearInterval(this.timer);\r\n      }\r\n    },\r\n    // 监听移出事件\r\n    listenerOut(e) {\r\n      if (e.target.id) {\r\n        this.runTags();\r\n      }\r\n    },\r\n    // 点击事件\r\n    clickToPage() {},\r\n    //up----------------------------------------------------------set word_cloud\r\n\r\n    title_change(new_title) {\r\n      //title变化后\r\n      this.cur_info.title = new_title;\r\n      if (\r\n        num_tag_data[this.cur_info.region][this.cur_info.year][\r\n          this.cur_info.title\r\n        ] == null\r\n      ) {\r\n        alert(\"这里没有数据\");\r\n        return;\r\n      }\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n    },\r\n    get_time_change(new_time) {\r\n      if (\r\n        num_tag_data[this.cur_info.region][this.cur_info.year][\r\n          this.cur_info.title\r\n        ] == null\r\n      ) {\r\n        alert(\"这里没有数据\");\r\n        return;\r\n      }\r\n      //时间变化后\r\n      this.cur_info.year = new_time.toString();\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n    },\r\n    async set_num_tag() {\r\n      // if (!this.num_tag_Chart)\r\n      if (this.num_tag_Chart) this.num_tag_Chart.clear();\r\n      else this.num_tag_Chart = this.$echarts.init(this.$refs.num_tag);\r\n\r\n      this.num_tag_Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        grid: { containLabel: true },\r\n        xAxis: {\r\n          name: \"数量\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        visualMap: {\r\n          orient: \"horizontal\",\r\n          left: \"center\",\r\n          min: 0,\r\n          max: 10,\r\n          text: [\"慢速响应\", \"快速响应\"],\r\n          // Map the score column to color\r\n          dimension: \"avg\",\r\n          inRange: {\r\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"],\r\n          },\r\n          textStyle: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            encode: {\r\n              x: \"num\",\r\n              y: \"sub_title\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_wordcloud() {\r\n      //-------------------------set wordcloud\r\n      if (!this.word_cloud_Chart)\r\n        this.word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\r\n      var maskImage = new Image();\r\n      maskImage.src = word_cloud_data.image;\r\n      this.word_cloud_Chart.setOption({\r\n        series: [\r\n          {\r\n            type: \"wordCloud\",\r\n            shape: \"circle\",\r\n            keepAspect: false,\r\n            left: \"center\",\r\n            top: \"center\",\r\n            width: \"70%\",\r\n            height: \"70%\",\r\n            right: null,\r\n            bottom: null,\r\n            //maskImage:maskImage,\r\n            sizeRange: [12, 30],\r\n            rotationRange: [-45, 45],\r\n            rotationStep: 90,\r\n            // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\r\n            gridSize: 2,\r\n            // 允许词太大的时候，超出画布的范围\r\n            drawOutOfBound: false,\r\n            // 布局的时候是否有动画\r\n            layoutAnimation: false,\r\n            textStyle: {\r\n              fontWeight: \"bold\",\r\n              color: function () {\r\n                return (\r\n                  \"rgb(\" +\r\n                  [\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                  ].join(\",\") +\r\n                  \")\"\r\n                );\r\n              },\r\n            },\r\n            emphasis: {\r\n              focus: \"self\",\r\n              textStyle: {\r\n                textShadowBlur: 10,\r\n                textShadowColor: \"#333\",\r\n              },\r\n            },\r\n\r\n            // Data is an array. Each array item must have name and value property.\r\n            data: word_cloud_data.value,\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_speed_average() {\r\n      //--------------------set speed_average\r\n      //-------------------------------------------------------------set scar\r\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\r\n      let scar_series = [];\r\n      for (let title_name in scar_data) {\r\n        scar_series.push({\r\n          type: \"line\",\r\n          id: title_name,\r\n          dataGroupId: title_name,\r\n          universalTransition: {\r\n            enabled: true,\r\n            delay: function (idx, count) {\r\n              return Math.random() * 400;\r\n            },\r\n          },\r\n          data: scar_data[title_name],\r\n        });\r\n      }\r\n      let speed_region_average_scatterOption = {\r\n        xAxis: {\r\n          scale: true,\r\n          name: \"年份\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          scale: true,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: scar_series,\r\n      };\r\n      //-------------------------------------------------------设置bar\r\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\r\n      let bar_series = [],\r\n        bar_x_data = [];\r\n      for (let title_name in bar_data) {\r\n        bar_x_data.push(title_name);\r\n        bar_series.push({\r\n          value: bar_data[title_name],\r\n          groupId: title_name,\r\n        });\r\n      }\r\n      let bar_key = bar_x_data;\r\n      let speed_region_average_barOption = {\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: bar_x_data,\r\n          name: \"类别\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            id: \"total\",\r\n            data: bar_series,\r\n            universalTransition: {\r\n              enabled: true,\r\n              seriesKey: bar_key,\r\n              delay: function (idx, count) {\r\n                return Math.random() * 400;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      if (!this.speed_average_Chart)\r\n        this.speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\r\n      let currentOption = speed_region_average_scatterOption,\r\n        that = this;\r\n      setInterval(function () {\r\n        currentOption =\r\n          currentOption === speed_region_average_scatterOption\r\n            ? speed_region_average_barOption\r\n            : speed_region_average_scatterOption;\r\n        that.speed_average_Chart.setOption(currentOption, true);\r\n      }, 2000);\r\n    },\r\n    async set_speed_region() {\r\n      //--------------------set speed_region\r\n      //await this.$axios({\r\n      //  url: 'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json',\r\n      //  method: \"get\",\r\n      //}).then((res) => {\r\n      //  this.cur_info.region_data = res.data;\r\n      //});\r\n      this.cur_info.region_data = require(\"../assets/map/province/\" +\r\n        this.locate_data_url[this.cur_info.region]);\r\n      console.log(this.cur_info.region);\r\n      console.log(this.cur_info.region_data);\r\n      this.$echarts.registerMap(\r\n        this.cur_info.region,\r\n        this.cur_info.region_data\r\n      );\r\n      let _data = this.cur_info.region_data.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.cp[0],\r\n          y = _data[i].properties.cp[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\r\n      let speed_region_option = {\r\n        geo: {\r\n          map: this.cur_info.region,\r\n          z: 2,\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          zoom: 1, //当前视角的缩放比例\r\n          scaleLimit: {\r\n            //滚轮缩放的极限控制\r\n            min: 1,\r\n            max: 2,\r\n          },\r\n          label: {\r\n            normal: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n            emphasis: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"rgba(21,55,112,255)\",\r\n              shadowOffsetX: 10,\r\n              shadowOffsetY: 10,\r\n              areaColor: \"rgba(24,48,82,255)\",\r\n              borderColor: \"rgba(84,113,166)\",\r\n              borderWidth: 1.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"rgba(7,69,162)\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            mapType: this.cur_info.region,\r\n            aspectScale: 1,\r\n            zoom: 1,\r\n            z: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            label: {\r\n              normal: {\r\n                show: false,\r\n              },\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                shadowColor: \"rgba(22,57,89,255)\",\r\n                shadowOffsetX: 20,\r\n                shadowOffsetY: 20,\r\n                //areaColor: \"rgba(22,57,89,255)\",\r\n                borderColor: \"#4a75ff\",\r\n                borderWidth: 7,\r\n              },\r\n              emphasis: {\r\n                areaColor: \"rgba(22,57,89,0)\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n      this.speed_region_Chart.setOption(speed_region_option);\r\n    },\r\n    async set_speed_tag() {\r\n      //--------------------------set speedTag\r\n      if (this.speed_tag_Chart) this.speed_tag_Chart.clear();\r\n      else this.speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\r\n\r\n      this.speed_tag_Chart.clear();\r\n      this.speed_tag_Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        polar: {\r\n          radius: [30, \"70%\"],\r\n        },\r\n        radiusAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          show: false,\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        angleAxis: {\r\n          startAngle: 75,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        tooltip: {},\r\n        series: {\r\n          type: \"bar\",\r\n          coordinateSystem: \"polar\",\r\n          encode: {\r\n            radius: 0,\r\n            angle: 1,\r\n          },\r\n          label: {\r\n            show: false,\r\n            position: \"middle\",\r\n          },\r\n          itemStyle: {\r\n            color: function (params) {\r\n              let colors = [\r\n                \"#4587E7\",\r\n                \"#35AB33\",\r\n                \"#F5AD1D\",\r\n                \"#ff7f50\",\r\n                \"#da70d6\",\r\n                \"#32cd32\",\r\n                \"#6495ed\",\r\n                \"#F3FA00\",\r\n              ];\r\n              return colors[params.dataIndex];\r\n            },\r\n          },\r\n        },\r\n      });\r\n    },\r\n    screenAdapter() {\r\n      let that = this;\r\n      setTimeout(function () {\r\n        if (that.num_tag_Chart) {\r\n          let options = {};\r\n          that.num_tag_Chart.setOption(options);\r\n          that.num_tag_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_average_Chart) {\r\n          let options = {};\r\n          that.speed_average_Chart.setOption(options);\r\n          that.speed_average_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_region_Chart) {\r\n          let options = {\r\n            geo: {\r\n              label: {\r\n                normal: {\r\n                  textStyle: {\r\n                    fontSize: that.nowSize(18),\r\n                  },\r\n                },\r\n                emphasis: {\r\n                  textStyle: {\r\n                    fontSize: that.nowSize(18),\r\n                  },\r\n                },\r\n              },\r\n              itemStyle: {\r\n                normal: {\r\n                  shadowOffsetX: that.nowSize(10),\r\n                  shadowOffsetY: that.nowSize(10),\r\n                  borderWidth: that.nowSize(1.5),\r\n                },\r\n              },\r\n            },\r\n            series: [\r\n              {\r\n                itemStyle: {\r\n                  normal: {\r\n                    shadowOffsetX: that.nowSize(20),\r\n                    shadowOffsetY: that.nowSize(20),\r\n                    borderWidth: that.nowSize(7),\r\n                  },\r\n                },\r\n              },\r\n              {\r\n                rippleEffect: {\r\n                  // 涟漪特效相关配置。\r\n                  scale: that.nowSize(4), // 控制涟漪大小\r\n                },\r\n              },\r\n            ],\r\n          };\r\n          that.speed_region_Chart.setOption(options);\r\n          that.speed_region_Chart.resize();\r\n        }\r\n      }, 300);\r\n      setTimeout(function () {\r\n        if (that.speed_tag_Chart) {\r\n          let options = {        \r\n            polar: {\r\n              radius: [this.nowSize(30), \"70%\"],\r\n            },\r\n          };\r\n          that.speed_tag_Chart.setOption(options);\r\n          that.speed_tag_Chart.resize();\r\n        }\r\n      }, 300);\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    if (this.speed_region_Chart) {\r\n      this.speed_region_Chart.dispose();\r\n      this.speed_region_Chart = null;\r\n    }\r\n    if (this.detail_chart) {\r\n      this.detail_chart.dispose();\r\n      this.detail_chart = null;\r\n    }\r\n    if (this.word_cloud_Chart) {\r\n      this.word_cloud_Chart.dispose();\r\n      this.word_cloud_Chart = null;\r\n    }\r\n    if (this.num_tag_Chart) {\r\n      this.num_tag_Chart.dispose();\r\n      this.num_tag_Chart = null;\r\n    }\r\n    if (this.speed_average_Chart) {\r\n      this.speed_average_Chart.dispose();\r\n      this.speed_average_Chart = null;\r\n    }\r\n  },\r\n  components: {\r\n    LeftPage,\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.fontA:hover {\r\n  fill: #ffffff;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n.time_select {\r\n  width: 0.4667rem;\r\n  height: 4.2rem;\r\n  margin-left: 1.8rem;\r\n  margin-top: 4.6167rem;\r\n}\r\n.speed_region {\r\n  width: 17.5167rem;\r\n  height: 9.9667rem;\r\n  //width: 32rem;\r\n  //height: 18rem;\r\n  margin-top: 2.1rem;\r\n  background: url(../assets/Sheng/speed_region.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  justify-content: center;\r\n}\r\n.news {\r\n  width: 9.1rem;\r\n  height: 5.4167rem;\r\n  margin-top: 0.2167rem;\r\n  background: url(../assets/Sheng/news.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_average {\r\n  width: 7.9833rem;\r\n  height: 5.4167rem;\r\n  margin-top: 0.2667rem;\r\n  margin-left: 0.3667rem;\r\n  background: url(../assets/Sheng/speed_average.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.num_tag {\r\n  width: 9.6rem;\r\n  height: 5.6667rem;\r\n  background: url(../assets/Sheng/num_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.word_cloud {\r\n  width: 9.6rem;\r\n  height: 5.6667rem;\r\n  margin-top: 0.1667rem;\r\n\r\n  background: url(../assets/Sheng/word_cloud.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_tag {\r\n  width: 9.6rem;\r\n  height: 5.0333rem;\r\n  margin-top: 0.1667rem;\r\n\r\n  background: url(../assets/Sheng/speed_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.ShengBackground {\r\n  width: 32.2667rem;\r\n  height: 18.05rem;\r\n  background: url(../assets/Sheng/ShengBackground.PNG) no-repeat;\r\n  background-size: 100% 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  //background-position: center top;\r\n  .item_left {\r\n    margin-left: 0rem;\r\n    margin-top: 0rem;\r\n    width: 4.45rem;\r\n    height: 100%;\r\n    line-height: 0.3333rem;\r\n    opacity: 0.89;\r\n    background-color: rgba(29, 76, 170, 100);\r\n    text-align: center;\r\n  }\r\n  .item_right {\r\n    //display: flex;\r\n    //flex-flow: column;\r\n    .title {\r\n      margin-left: 0rem;\r\n      margin-top: 0rem;\r\n      width: 27.8167rem;\r\n      height: 5rem;\r\n      background: url(../assets/main_page_title.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      background-position: center top;\r\n    }\r\n    .content {\r\n      margin-top: -5rem;\r\n      display: flex;\r\n      .left {\r\n        margin-left: 0.7333rem;\r\n        display: flex;\r\n        flex-flow: column;\r\n        height: 100%;\r\n        width: 100%;\r\n        .down {\r\n          display: flex;\r\n        }\r\n      }\r\n      .right {\r\n        display: flex;\r\n        flex-flow: column;\r\n        margin-left: 0.1667rem;\r\n        margin-top: 1rem;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}