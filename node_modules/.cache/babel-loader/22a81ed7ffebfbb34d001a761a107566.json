{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Cartesian3D from './grid3D/Cartesian3D';\nimport Axis3D from './grid3D/Axis3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeCartesian3D(grid3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = grid3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var boxWidth = grid3DModel.get('boxWidth');\n  var boxHeight = grid3DModel.get('boxHeight');\n  var boxDepth = grid3DModel.get('boxDepth');\n\n  if (process.env.NODE_ENV !== 'production') {\n    ['x', 'y', 'z'].forEach(function (dim) {\n      if (!this.getAxis(dim)) {\n        throw new Error('Grid' + grid3DModel.id + ' don\\'t have ' + dim + 'Axis');\n      }\n    }, this);\n  }\n\n  this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2); // From near to far\n\n  this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);\n  this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);\n  this.size = [boxWidth, boxHeight, boxDepth];\n}\n\nfunction updateCartesian3D(ecModel, api) {\n  var dataExtents = {};\n\n  function unionDataExtents(dim, extent) {\n    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];\n    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);\n    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);\n  } // Get data extents for scale.\n\n\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    ['x', 'y', 'z'].forEach(function (coordDim) {\n      data.mapDimensionsAll(coordDim, true).forEach(function (dataDim) {\n        unionDataExtents(coordDim, data.getDataExtent(dataDim, true));\n      });\n    });\n  }, this);\n  ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {\n    ecModel.eachComponent(axisType, function (axisModel) {\n      var dim = axisType.charAt(0);\n      var grid3DModel = axisModel.getReferringComponents('grid3D').models[0];\n      var cartesian3D = grid3DModel.coordinateSystem;\n\n      if (cartesian3D !== this) {\n        return;\n      }\n\n      var axis = cartesian3D.getAxis(dim);\n\n      if (axis) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Can\\'t have two %s in one grid3D', axisType);\n        }\n\n        return;\n      }\n\n      var scale = echarts.helper.createScale(dataExtents[dim] || [Infinity, -Infinity], axisModel);\n      axis = new Axis3D(dim, scale);\n      axis.type = axisModel.get('type');\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse');\n      axisModel.axis = axis;\n      axis.model = axisModel; // override `echarts/coord/Axis#getLabelModel`\n\n      axis.getLabelModel = function () {\n        return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n      }; // override `echarts/coord/Axis#getTickModel`\n\n\n      axis.getTickModel = function () {\n        return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n      };\n\n      cartesian3D.addAxis(axis);\n    }, this);\n  }, this);\n  this.resize(this.model, api);\n}\n\nvar grid3DCreator = {\n  dimensions: Cartesian3D.prototype.dimensions,\n  create: function create(ecModel, api) {\n    var cartesian3DList = [];\n    ecModel.eachComponent('grid3D', function (grid3DModel) {\n      // FIXME\n      grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();\n      var cartesian3D = new Cartesian3D();\n      cartesian3D.model = grid3DModel;\n      cartesian3D.viewGL = grid3DModel.__viewGL;\n      grid3DModel.coordinateSystem = cartesian3D;\n      cartesian3DList.push(cartesian3D); // Inject resize and update\n\n      cartesian3D.resize = resizeCartesian3D;\n      cartesian3D.update = updateCartesian3D;\n    });\n    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];\n\n    function findAxesModels(seriesModel, ecModel) {\n      return axesTypes.map(function (axisType) {\n        var axisModel = seriesModel.getReferringComponents(axisType).models[0];\n\n        if (axisModel == null) {\n          axisModel = ecModel.getComponent(axisType);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!axisModel) {\n            throw new Error(axisType + ' \"' + retrieve.firstNotNull(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '\" not found');\n          }\n        }\n\n        return axisModel;\n      });\n    }\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {\n        return;\n      }\n\n      var firstGridModel = seriesModel.getReferringComponents('grid3D').models[0];\n\n      if (firstGridModel == null) {\n        var axesModels = findAxesModels(seriesModel, ecModel);\n        var firstGridModel = axesModels[0].getCoordSysModel();\n        axesModels.forEach(function (axisModel) {\n          var grid3DModel = axisModel.getCoordSysModel();\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (!grid3DModel) {\n              throw new Error('grid3D \"' + retrieve.firstNotNull(axisModel.get('gridIndex'), axisModel.get('gridId'), 0) + '\" not found');\n            }\n\n            if (grid3DModel !== firstGridModel) {\n              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');\n            }\n          }\n        });\n      }\n\n      var coordSys = firstGridModel.coordinateSystem;\n      seriesModel.coordinateSystem = coordSys;\n    });\n    return cartesian3DList;\n  }\n};\nexport default grid3DCreator;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/coord/grid3DCreator.js"],"names":["Cartesian3D","Axis3D","echarts","getLayoutRect","ViewGL","retrieve","resizeCartesian3D","grid3DModel","api","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","y","viewGL","setViewport","x","getDevicePixelRatio","boxWidth","get","boxHeight","boxDepth","process","env","NODE_ENV","forEach","dim","getAxis","Error","id","setExtent","size","updateCartesian3D","ecModel","dataExtents","unionDataExtents","extent","Infinity","Math","min","max","eachSeries","seriesModel","coordinateSystem","data","getData","coordDim","mapDimensionsAll","dataDim","getDataExtent","axisType","eachComponent","axisModel","charAt","getReferringComponents","models","cartesian3D","axis","console","warn","scale","helper","createScale","type","isCategory","onBand","inverse","model","getLabelModel","getModel","getTickModel","addAxis","resize","grid3DCreator","dimensions","prototype","create","cartesian3DList","__viewGL","push","update","axesTypes","findAxesModels","map","getComponent","firstNotNull","firstGridModel","axesModels","getCoordSysModel","coordSys"],"mappings":"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","sourcesContent":["import Cartesian3D from './grid3D/Cartesian3D';\nimport Axis3D from './grid3D/Axis3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeCartesian3D(grid3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = grid3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var boxWidth = grid3DModel.get('boxWidth');\n  var boxHeight = grid3DModel.get('boxHeight');\n  var boxDepth = grid3DModel.get('boxDepth');\n\n  if (process.env.NODE_ENV !== 'production') {\n    ['x', 'y', 'z'].forEach(function (dim) {\n      if (!this.getAxis(dim)) {\n        throw new Error('Grid' + grid3DModel.id + ' don\\'t have ' + dim + 'Axis');\n      }\n    }, this);\n  }\n\n  this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2); // From near to far\n\n  this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);\n  this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);\n  this.size = [boxWidth, boxHeight, boxDepth];\n}\n\nfunction updateCartesian3D(ecModel, api) {\n  var dataExtents = {};\n\n  function unionDataExtents(dim, extent) {\n    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];\n    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);\n    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);\n  } // Get data extents for scale.\n\n\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    ['x', 'y', 'z'].forEach(function (coordDim) {\n      data.mapDimensionsAll(coordDim, true).forEach(function (dataDim) {\n        unionDataExtents(coordDim, data.getDataExtent(dataDim, true));\n      });\n    });\n  }, this);\n  ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {\n    ecModel.eachComponent(axisType, function (axisModel) {\n      var dim = axisType.charAt(0);\n      var grid3DModel = axisModel.getReferringComponents('grid3D').models[0];\n      var cartesian3D = grid3DModel.coordinateSystem;\n\n      if (cartesian3D !== this) {\n        return;\n      }\n\n      var axis = cartesian3D.getAxis(dim);\n\n      if (axis) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Can\\'t have two %s in one grid3D', axisType);\n        }\n\n        return;\n      }\n\n      var scale = echarts.helper.createScale(dataExtents[dim] || [Infinity, -Infinity], axisModel);\n      axis = new Axis3D(dim, scale);\n      axis.type = axisModel.get('type');\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse');\n      axisModel.axis = axis;\n      axis.model = axisModel; // override `echarts/coord/Axis#getLabelModel`\n\n      axis.getLabelModel = function () {\n        return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n      }; // override `echarts/coord/Axis#getTickModel`\n\n\n      axis.getTickModel = function () {\n        return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n      };\n\n      cartesian3D.addAxis(axis);\n    }, this);\n  }, this);\n  this.resize(this.model, api);\n}\n\nvar grid3DCreator = {\n  dimensions: Cartesian3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var cartesian3DList = [];\n    ecModel.eachComponent('grid3D', function (grid3DModel) {\n      // FIXME\n      grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();\n      var cartesian3D = new Cartesian3D();\n      cartesian3D.model = grid3DModel;\n      cartesian3D.viewGL = grid3DModel.__viewGL;\n      grid3DModel.coordinateSystem = cartesian3D;\n      cartesian3DList.push(cartesian3D); // Inject resize and update\n\n      cartesian3D.resize = resizeCartesian3D;\n      cartesian3D.update = updateCartesian3D;\n    });\n    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];\n\n    function findAxesModels(seriesModel, ecModel) {\n      return axesTypes.map(function (axisType) {\n        var axisModel = seriesModel.getReferringComponents(axisType).models[0];\n\n        if (axisModel == null) {\n          axisModel = ecModel.getComponent(axisType);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!axisModel) {\n            throw new Error(axisType + ' \"' + retrieve.firstNotNull(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '\" not found');\n          }\n        }\n\n        return axisModel;\n      });\n    }\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {\n        return;\n      }\n\n      var firstGridModel = seriesModel.getReferringComponents('grid3D').models[0];\n\n      if (firstGridModel == null) {\n        var axesModels = findAxesModels(seriesModel, ecModel);\n        var firstGridModel = axesModels[0].getCoordSysModel();\n        axesModels.forEach(function (axisModel) {\n          var grid3DModel = axisModel.getCoordSysModel();\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (!grid3DModel) {\n              throw new Error('grid3D \"' + retrieve.firstNotNull(axisModel.get('gridIndex'), axisModel.get('gridId'), 0) + '\" not found');\n            }\n\n            if (grid3DModel !== firstGridModel) {\n              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');\n            }\n          }\n        });\n      }\n\n      var coordSys = firstGridModel.coordinateSystem;\n      seriesModel.coordinateSystem = coordSys;\n    });\n    return cartesian3DList;\n  }\n};\nexport default grid3DCreator;"]},"metadata":{},"sourceType":"module"}