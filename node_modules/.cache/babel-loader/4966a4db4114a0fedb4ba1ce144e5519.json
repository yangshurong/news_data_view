{"ast":null,"code":"// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Grid3DModel from './Grid3DModel';\nimport Grid3DView from './Grid3DView';\nimport grid3DCreator from '../../coord/grid3DCreator';\nimport Axis3DModel from './Axis3DModel';\nimport createAxis3DModel from './createAxis3DModel';\n\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\n\nexport function install(registers) {\n  registers.registerComponentModel(Grid3DModel);\n  registers.registerComponentView(Grid3DView);\n  registers.registerCoordinateSystem('grid3D', grid3DCreator);\n  ['x', 'y', 'z'].forEach(function (dim) {\n    createAxis3DModel(registers, dim, Axis3DModel, getAxisType, {\n      name: dim.toUpperCase()\n    });\n    const AxisView = registers.ComponentView.extend({\n      type: dim + 'Axis3D'\n    });\n    registers.registerComponentView(AxisView);\n  });\n  registers.registerAction({\n    type: 'grid3DChangeCamera',\n    event: 'grid3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'grid3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'grid3DShowAxisPointer',\n    event: 'grid3dshowaxispointer',\n    update: 'grid3D:showAxisPointer'\n  }, function (payload, ecModel) {});\n  registers.registerAction({\n    type: 'grid3DHideAxisPointer',\n    event: 'grid3dhideaxispointer',\n    update: 'grid3D:hideAxisPointer'\n  }, function (payload, ecModel) {});\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/grid3D/install.js"],"names":["Grid3DModel","Grid3DView","grid3DCreator","Axis3DModel","createAxis3DModel","getAxisType","axisDim","option","type","data","install","registers","registerComponentModel","registerComponentView","registerCoordinateSystem","forEach","dim","name","toUpperCase","AxisView","ComponentView","extend","registerAction","event","update","payload","ecModel","eachComponent","mainType","query","componentModel","setView"],"mappings":"AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,MAA9B,EAAsC;AACpC;AACA,SAAOA,MAAM,CAACC,IAAP,KAAgBD,MAAM,CAACE,IAAP,GAAc,UAAd,GAA2B,OAA3C,CAAP;AACD;;AAED,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjCA,EAAAA,SAAS,CAACC,sBAAV,CAAiCZ,WAAjC;AACAW,EAAAA,SAAS,CAACE,qBAAV,CAAgCZ,UAAhC;AACAU,EAAAA,SAAS,CAACG,wBAAV,CAAmC,QAAnC,EAA6CZ,aAA7C;AACA,GAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgBa,OAAhB,CAAwB,UAAUC,GAAV,EAAe;AACrCZ,IAAAA,iBAAiB,CAACO,SAAD,EAAYK,GAAZ,EAAiBb,WAAjB,EAA8BE,WAA9B,EAA2C;AAC1DY,MAAAA,IAAI,EAAED,GAAG,CAACE,WAAJ;AADoD,KAA3C,CAAjB;AAGA,UAAMC,QAAQ,GAAGR,SAAS,CAACS,aAAV,CAAwBC,MAAxB,CAA+B;AAC9Cb,MAAAA,IAAI,EAAEQ,GAAG,GAAG;AADkC,KAA/B,CAAjB;AAGAL,IAAAA,SAAS,CAACE,qBAAV,CAAgCM,QAAhC;AACD,GARD;AASAR,EAAAA,SAAS,CAACW,cAAV,CAAyB;AACvBd,IAAAA,IAAI,EAAE,oBADiB;AAEvBe,IAAAA,KAAK,EAAE,qBAFgB;AAGvBC,IAAAA,MAAM,EAAE;AAHe,GAAzB,EAIG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7BA,IAAAA,OAAO,CAACC,aAAR,CAAsB;AACpBC,MAAAA,QAAQ,EAAE,QADU;AAEpBC,MAAAA,KAAK,EAAEJ;AAFa,KAAtB,EAGG,UAAUK,cAAV,EAA0B;AAC3BA,MAAAA,cAAc,CAACC,OAAf,CAAuBN,OAAvB;AACD,KALD;AAMD,GAXD;AAYAd,EAAAA,SAAS,CAACW,cAAV,CAAyB;AACvBd,IAAAA,IAAI,EAAE,uBADiB;AAEvBe,IAAAA,KAAK,EAAE,uBAFgB;AAGvBC,IAAAA,MAAM,EAAE;AAHe,GAAzB,EAIG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B,CAAE,CAJjC;AAKAf,EAAAA,SAAS,CAACW,cAAV,CAAyB;AACvBd,IAAAA,IAAI,EAAE,uBADiB;AAEvBe,IAAAA,KAAK,EAAE,uBAFgB;AAGvBC,IAAAA,MAAM,EAAE;AAHe,GAAzB,EAIG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B,CAAE,CAJjC;AAKD","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Grid3DModel from './Grid3DModel';\nimport Grid3DView from './Grid3DView';\nimport grid3DCreator from '../../coord/grid3DCreator';\nimport Axis3DModel from './Axis3DModel';\nimport createAxis3DModel from './createAxis3DModel';\n\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\n\nexport function install(registers) {\n  registers.registerComponentModel(Grid3DModel);\n  registers.registerComponentView(Grid3DView);\n  registers.registerCoordinateSystem('grid3D', grid3DCreator);\n  ['x', 'y', 'z'].forEach(function (dim) {\n    createAxis3DModel(registers, dim, Axis3DModel, getAxisType, {\n      name: dim.toUpperCase()\n    });\n    const AxisView = registers.ComponentView.extend({\n      type: dim + 'Axis3D'\n    });\n    registers.registerComponentView(AxisView);\n  });\n  registers.registerAction({\n    type: 'grid3DChangeCamera',\n    event: 'grid3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'grid3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'grid3DShowAxisPointer',\n    event: 'grid3dshowaxispointer',\n    update: 'grid3D:showAxisPointer'\n  }, function (payload, ecModel) {});\n  registers.registerAction({\n    type: 'grid3DHideAxisPointer',\n    event: 'grid3dhideaxispointer',\n    update: 'grid3D:hideAxisPointer'\n  }, function (payload, ecModel) {});\n}"]},"metadata":{},"sourceType":"module"}