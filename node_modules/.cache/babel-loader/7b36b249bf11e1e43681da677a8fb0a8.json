{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nexports.__esModule = true;\nexports.default = parse;\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _input = require('./input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parse(css, opts) {\n  if (opts && opts.safe) {\n    throw new Error('Option safe was removed. ' + 'Use parser: require(\"postcss-safe-parser\")');\n  }\n\n  var input = new _input2.default(css, opts);\n  var parser = new _parser2.default(input);\n\n  try {\n    parser.tokenize();\n    parser.loop();\n  } catch (e) {\n    if (e.name === 'CssSyntaxError' && opts && opts.from) {\n      if (/\\.scss$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';\n      } else if (/\\.sass/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Sass with ' + 'the standard CSS parser; ' + 'try again with the postcss-sass parser';\n      } else if (/\\.less$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';\n      }\n    }\n\n    throw e;\n  }\n\n  return parser.root;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;;;kBAGwBA;;AAHxB;;;;AACA;;;;;;;;;;AAEe,SAASA,KAAT,CAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACrC,MAAKA,QAAQA,KAAKC,IAAlB,EAAyB;AACrB,UAAM,IAAIC,KAAJ,CAAU,8BACA,4CADV,CAAN;AAEH;;AAED,MAAIC,QAAQ,oBAAUJ,GAAV,EAAeC,IAAf,CAAZ;AAEA,MAAII,SAAS,qBAAWD,KAAX,CAAb;;AACA,MAAI;AACAC,WAAOC,QAAPD;AACAA,WAAOE,IAAPF;AAFJ,IAGE,OAAOG,CAAP,EAAU;AACR,QAAKA,EAAEC,IAAFD,KAAW,gBAAXA,IAA+BP,IAA/BO,IAAuCP,KAAKS,IAAjD,EAAwD;AACpD,UAAK,WAAWC,IAAX,CAAgBV,KAAKS,IAArB,CAAL,EAAkC;AAC9BF,UAAEI,OAAFJ,IAAa,oCACA,2BADA,GAEA,wCAFbA;AADJ,aAIO,IAAK,UAAUG,IAAV,CAAeV,KAAKS,IAApB,CAAL,EAAiC;AACpCF,UAAEI,OAAFJ,IAAa,oCACA,2BADA,GAEA,wCAFbA;AADG,aAIA,IAAK,WAAWG,IAAX,CAAgBV,KAAKS,IAArB,CAAL,EAAkC;AACrCF,UAAEI,OAAFJ,IAAa,oCACA,2BADA,GAEA,wCAFbA;AAGH;AACJ;;AACD,UAAMA,CAAN;AACH;;AAED,SAAOH,OAAOQ,IAAd;AACH","names":["parse","css","opts","safe","Error","input","parser","tokenize","loop","e","name","from","test","message","root"],"sources":["parse.es6"],"sourcesContent":["import Parser from './parser';\nimport Input  from './input';\n\nexport default function parse(css, opts) {\n    if ( opts && opts.safe ) {\n        throw new Error('Option safe was removed. ' +\n                        'Use parser: require(\"postcss-safe-parser\")');\n    }\n\n    let input = new Input(css, opts);\n\n    let parser = new Parser(input);\n    try {\n        parser.tokenize();\n        parser.loop();\n    } catch (e) {\n        if ( e.name === 'CssSyntaxError' && opts && opts.from ) {\n            if ( /\\.scss$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse SCSS with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-scss parser';\n            } else if ( /\\.sass/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Sass with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-sass parser';\n            } else if ( /\\.less$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Less with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-less parser';\n            }\n        }\n        throw e;\n    }\n\n    return parser.root;\n}\n"]},"metadata":{},"sourceType":"script"}