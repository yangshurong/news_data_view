{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport ScatterGLSeries from './ScatterGLSeries';\nimport ScatterGLView from './ScatterGLView';\nexport function install(registers) {\n  registers.registerChartView(ScatterGLView);\n  registers.registerSeriesModel(ScatterGLSeries);\n  registers.registerLayout({\n    seriesType: 'scatterGL',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var data = seriesModel.getData();\n      var progress;\n\n      if (coordSys) {\n        var dims = coordSys.dimensions.map(function (dim) {\n          return data.mapDimension(dim);\n        }).slice(0, 2);\n        var pt = [];\n\n        if (dims.length === 1) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var pt = coordSys.dataToPoint(x);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        } else if (dims.length === 2) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var y = data.get(dims[1], idx);\n              pt[0] = x;\n              pt[1] = y;\n              pt = coordSys.dataToPoint(pt);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        }\n      }\n\n      return {\n        progress: progress\n      };\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/scatterGL/install.js"],"names":["ScatterGLSeries","ScatterGLView","install","registers","registerChartView","registerSeriesModel","registerLayout","seriesType","reset","seriesModel","coordSys","coordinateSystem","data","getData","progress","dims","dimensions","map","dim","mapDimension","slice","pt","length","params","points","Float32Array","end","start","idx","offset","x","get","dataToPoint","setLayout","y"],"mappings":"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","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport ScatterGLSeries from './ScatterGLSeries';\nimport ScatterGLView from './ScatterGLView';\nexport function install(registers) {\n  registers.registerChartView(ScatterGLView);\n  registers.registerSeriesModel(ScatterGLSeries);\n  registers.registerLayout({\n    seriesType: 'scatterGL',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var data = seriesModel.getData();\n      var progress;\n\n      if (coordSys) {\n        var dims = coordSys.dimensions.map(function (dim) {\n          return data.mapDimension(dim);\n        }).slice(0, 2);\n        var pt = [];\n\n        if (dims.length === 1) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var pt = coordSys.dataToPoint(x);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        } else if (dims.length === 2) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var y = data.get(dims[1], idx);\n              pt[0] = x;\n              pt[1] = y;\n              pt = coordSys.dataToPoint(pt);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        }\n      }\n\n      return {\n        progress: progress\n      };\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}