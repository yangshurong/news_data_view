{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport SSAOGLSL from './SSAO.glsl.js';\nShader.import(SSAOGLSL);\n\nfunction generateNoiseData(size) {\n  var data = new Uint8Array(size * size * 4);\n  var n = 0;\n  var v3 = new Vector3();\n\n  for (var i = 0; i < size; i++) {\n    for (var j = 0; j < size; j++) {\n      v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();\n      data[n++] = (v3.x * 0.5 + 0.5) * 255;\n      data[n++] = (v3.y * 0.5 + 0.5) * 255;\n      data[n++] = 0;\n      data[n++] = 255;\n    }\n  }\n\n  return data;\n}\n\nfunction generateNoiseTexture(size) {\n  return new Texture2D({\n    pixels: generateNoiseData(size),\n    wrapS: Texture.REPEAT,\n    wrapT: Texture.REPEAT,\n    width: size,\n    height: size\n  });\n}\n\nfunction generateKernel(size, offset, hemisphere) {\n  var kernel = new Float32Array(size * 3);\n  offset = offset || 0;\n\n  for (var i = 0; i < size; i++) {\n    var phi = halton(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;\n    var theta = halton(i + offset, 3) * Math.PI;\n    var r = Math.random();\n    var x = Math.cos(phi) * Math.sin(theta) * r;\n    var y = Math.cos(theta) * r;\n    var z = Math.sin(phi) * Math.sin(theta) * r;\n    kernel[i * 3] = x;\n    kernel[i * 3 + 1] = y;\n    kernel[i * 3 + 2] = z;\n  }\n\n  return kernel; // var kernel = new Float32Array(size * 3);\n  // var v3 = new Vector3();\n  // for (var i = 0; i < size; i++) {\n  //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())\n  //         .normalize().scale(Math.random());\n  //     kernel[i * 3] = v3.x;\n  //     kernel[i * 3 + 1] = v3.y;\n  //     kernel[i * 3 + 2] = v3.z;\n  // }\n  // return kernel;\n}\n\nfunction SSAOPass(opt) {\n  opt = opt || {};\n  this._ssaoPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.estimate')\n  });\n  this._blurPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.blur')\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._ssaoTexture = new Texture2D();\n  this._blurTexture = new Texture2D();\n  this._blurTexture2 = new Texture2D();\n  this._depthTex = opt.depthTexture;\n  this._normalTex = opt.normalTexture;\n  this.setNoiseSize(4);\n  this.setKernelSize(opt.kernelSize || 12);\n\n  if (opt.radius != null) {\n    this.setParameter('radius', opt.radius);\n  }\n\n  if (opt.power != null) {\n    this.setParameter('power', opt.power);\n  }\n\n  if (!this._normalTex) {\n    this._ssaoPass.material.disableTexture('normalTex');\n\n    this._blurPass.material.disableTexture('normalTex');\n  }\n\n  if (!this._depthTex) {\n    this._blurPass.material.disableTexture('depthTex');\n  }\n\n  this._blurPass.material.setUniform('normalTex', this._normalTex);\n\n  this._blurPass.material.setUniform('depthTex', this._depthTex);\n}\n\nSSAOPass.prototype.setDepthTexture = function (depthTex) {\n  this._depthTex = depthTex;\n};\n\nSSAOPass.prototype.setNormalTexture = function (normalTex) {\n  this._normalTex = normalTex;\n\n  this._ssaoPass.material[normalTex ? 'enableTexture' : 'disableTexture']('normalTex'); // Switch between hemisphere and shere kernel.\n\n\n  this.setKernelSize(this._kernelSize);\n};\n\nSSAOPass.prototype.update = function (renderer, camera, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssaoPass = this._ssaoPass;\n  var blurPass = this._blurPass;\n  ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);\n  ssaoPass.setUniform('depthTex', this._depthTex);\n\n  if (this._normalTex != null) {\n    ssaoPass.setUniform('normalTex', this._normalTex);\n  }\n\n  ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);\n  var viewInverseTranspose = new Matrix4();\n  Matrix4.transpose(viewInverseTranspose, camera.worldTransform);\n  ssaoPass.setUniform('projection', camera.projectionMatrix.array);\n  ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose.array);\n  var ssaoTexture = this._ssaoTexture;\n  var blurTexture = this._blurTexture;\n  var blurTexture2 = this._blurTexture2;\n  ssaoTexture.width = width / 2;\n  ssaoTexture.height = height / 2;\n  blurTexture.width = width;\n  blurTexture.height = height;\n  blurTexture2.width = width;\n  blurTexture2.height = height;\n\n  this._framebuffer.attach(ssaoTexture);\n\n  this._framebuffer.bind(renderer);\n\n  renderer.gl.clearColor(1, 1, 1, 1);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  ssaoPass.render(renderer);\n  blurPass.setUniform('textureSize', [width / 2, height / 2]);\n  blurPass.setUniform('projection', camera.projectionMatrix.array);\n\n  this._framebuffer.attach(blurTexture);\n\n  blurPass.setUniform('direction', 0);\n  blurPass.setUniform('ssaoTexture', ssaoTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.attach(blurTexture2);\n\n  blurPass.setUniform('textureSize', [width, height]);\n  blurPass.setUniform('direction', 1);\n  blurPass.setUniform('ssaoTexture', blurTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.unbind(renderer); // Restore clear\n\n\n  var clearColor = renderer.clearColor;\n  renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n};\n\nSSAOPass.prototype.getTargetTexture = function () {\n  return this._blurTexture2;\n};\n\nSSAOPass.prototype.setParameter = function (name, val) {\n  if (name === 'noiseTexSize') {\n    this.setNoiseSize(val);\n  } else if (name === 'kernelSize') {\n    this.setKernelSize(val);\n  } else if (name === 'intensity') {\n    this._ssaoPass.material.set('intensity', val);\n  } else {\n    this._ssaoPass.setUniform(name, val);\n  }\n};\n\nSSAOPass.prototype.setKernelSize = function (size) {\n  this._kernelSize = size;\n\n  this._ssaoPass.material.define('fragment', 'KERNEL_SIZE', size);\n\n  this._kernels = this._kernels || [];\n\n  for (var i = 0; i < 30; i++) {\n    this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);\n  }\n};\n\nSSAOPass.prototype.setNoiseSize = function (size) {\n  var texture = this._ssaoPass.getUniform('noiseTex');\n\n  if (!texture) {\n    texture = generateNoiseTexture(size);\n\n    this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));\n  } else {\n    texture.data = generateNoiseData(size);\n    texture.width = texture.height = size;\n    texture.dirty();\n  }\n\n  this._ssaoPass.setUniform('noiseTexSize', [size, size]);\n};\n\nSSAOPass.prototype.dispose = function (renderer) {\n  this._blurTexture.dispose(renderer);\n\n  this._ssaoTexture.dispose(renderer);\n\n  this._blurTexture2.dispose(renderer);\n};\n\nexport default SSAOPass;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/effect/SSAOPass.js"],"names":["Matrix4","Vector3","Texture2D","Texture","Pass","Shader","FrameBuffer","halton","SSAOGLSL","import","generateNoiseData","size","data","Uint8Array","n","v3","i","j","set","Math","random","normalize","x","y","generateNoiseTexture","pixels","wrapS","REPEAT","wrapT","width","height","generateKernel","offset","hemisphere","kernel","Float32Array","phi","PI","theta","r","cos","sin","z","SSAOPass","opt","_ssaoPass","fragment","source","_blurPass","_framebuffer","depthBuffer","_ssaoTexture","_blurTexture","_blurTexture2","_depthTex","depthTexture","_normalTex","normalTexture","setNoiseSize","setKernelSize","kernelSize","radius","setParameter","power","material","disableTexture","setUniform","prototype","setDepthTexture","depthTex","setNormalTexture","normalTex","_kernelSize","update","renderer","camera","frame","getWidth","getHeight","ssaoPass","blurPass","_kernels","length","viewInverseTranspose","transpose","worldTransform","projectionMatrix","array","invProjectionMatrix","ssaoTexture","blurTexture","blurTexture2","attach","bind","gl","clearColor","clear","COLOR_BUFFER_BIT","render","unbind","getTargetTexture","name","val","define","texture","getUniform","dirty","dispose"],"mappings":"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","sourcesContent":["import Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport SSAOGLSL from './SSAO.glsl.js';\nShader.import(SSAOGLSL);\n\nfunction generateNoiseData(size) {\n  var data = new Uint8Array(size * size * 4);\n  var n = 0;\n  var v3 = new Vector3();\n\n  for (var i = 0; i < size; i++) {\n    for (var j = 0; j < size; j++) {\n      v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();\n      data[n++] = (v3.x * 0.5 + 0.5) * 255;\n      data[n++] = (v3.y * 0.5 + 0.5) * 255;\n      data[n++] = 0;\n      data[n++] = 255;\n    }\n  }\n\n  return data;\n}\n\nfunction generateNoiseTexture(size) {\n  return new Texture2D({\n    pixels: generateNoiseData(size),\n    wrapS: Texture.REPEAT,\n    wrapT: Texture.REPEAT,\n    width: size,\n    height: size\n  });\n}\n\nfunction generateKernel(size, offset, hemisphere) {\n  var kernel = new Float32Array(size * 3);\n  offset = offset || 0;\n\n  for (var i = 0; i < size; i++) {\n    var phi = halton(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;\n    var theta = halton(i + offset, 3) * Math.PI;\n    var r = Math.random();\n    var x = Math.cos(phi) * Math.sin(theta) * r;\n    var y = Math.cos(theta) * r;\n    var z = Math.sin(phi) * Math.sin(theta) * r;\n    kernel[i * 3] = x;\n    kernel[i * 3 + 1] = y;\n    kernel[i * 3 + 2] = z;\n  }\n\n  return kernel; // var kernel = new Float32Array(size * 3);\n  // var v3 = new Vector3();\n  // for (var i = 0; i < size; i++) {\n  //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())\n  //         .normalize().scale(Math.random());\n  //     kernel[i * 3] = v3.x;\n  //     kernel[i * 3 + 1] = v3.y;\n  //     kernel[i * 3 + 2] = v3.z;\n  // }\n  // return kernel;\n}\n\nfunction SSAOPass(opt) {\n  opt = opt || {};\n  this._ssaoPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.estimate')\n  });\n  this._blurPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.blur')\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._ssaoTexture = new Texture2D();\n  this._blurTexture = new Texture2D();\n  this._blurTexture2 = new Texture2D();\n  this._depthTex = opt.depthTexture;\n  this._normalTex = opt.normalTexture;\n  this.setNoiseSize(4);\n  this.setKernelSize(opt.kernelSize || 12);\n\n  if (opt.radius != null) {\n    this.setParameter('radius', opt.radius);\n  }\n\n  if (opt.power != null) {\n    this.setParameter('power', opt.power);\n  }\n\n  if (!this._normalTex) {\n    this._ssaoPass.material.disableTexture('normalTex');\n\n    this._blurPass.material.disableTexture('normalTex');\n  }\n\n  if (!this._depthTex) {\n    this._blurPass.material.disableTexture('depthTex');\n  }\n\n  this._blurPass.material.setUniform('normalTex', this._normalTex);\n\n  this._blurPass.material.setUniform('depthTex', this._depthTex);\n}\n\nSSAOPass.prototype.setDepthTexture = function (depthTex) {\n  this._depthTex = depthTex;\n};\n\nSSAOPass.prototype.setNormalTexture = function (normalTex) {\n  this._normalTex = normalTex;\n\n  this._ssaoPass.material[normalTex ? 'enableTexture' : 'disableTexture']('normalTex'); // Switch between hemisphere and shere kernel.\n\n\n  this.setKernelSize(this._kernelSize);\n};\n\nSSAOPass.prototype.update = function (renderer, camera, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssaoPass = this._ssaoPass;\n  var blurPass = this._blurPass;\n  ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);\n  ssaoPass.setUniform('depthTex', this._depthTex);\n\n  if (this._normalTex != null) {\n    ssaoPass.setUniform('normalTex', this._normalTex);\n  }\n\n  ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);\n  var viewInverseTranspose = new Matrix4();\n  Matrix4.transpose(viewInverseTranspose, camera.worldTransform);\n  ssaoPass.setUniform('projection', camera.projectionMatrix.array);\n  ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose.array);\n  var ssaoTexture = this._ssaoTexture;\n  var blurTexture = this._blurTexture;\n  var blurTexture2 = this._blurTexture2;\n  ssaoTexture.width = width / 2;\n  ssaoTexture.height = height / 2;\n  blurTexture.width = width;\n  blurTexture.height = height;\n  blurTexture2.width = width;\n  blurTexture2.height = height;\n\n  this._framebuffer.attach(ssaoTexture);\n\n  this._framebuffer.bind(renderer);\n\n  renderer.gl.clearColor(1, 1, 1, 1);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  ssaoPass.render(renderer);\n  blurPass.setUniform('textureSize', [width / 2, height / 2]);\n  blurPass.setUniform('projection', camera.projectionMatrix.array);\n\n  this._framebuffer.attach(blurTexture);\n\n  blurPass.setUniform('direction', 0);\n  blurPass.setUniform('ssaoTexture', ssaoTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.attach(blurTexture2);\n\n  blurPass.setUniform('textureSize', [width, height]);\n  blurPass.setUniform('direction', 1);\n  blurPass.setUniform('ssaoTexture', blurTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.unbind(renderer); // Restore clear\n\n\n  var clearColor = renderer.clearColor;\n  renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n};\n\nSSAOPass.prototype.getTargetTexture = function () {\n  return this._blurTexture2;\n};\n\nSSAOPass.prototype.setParameter = function (name, val) {\n  if (name === 'noiseTexSize') {\n    this.setNoiseSize(val);\n  } else if (name === 'kernelSize') {\n    this.setKernelSize(val);\n  } else if (name === 'intensity') {\n    this._ssaoPass.material.set('intensity', val);\n  } else {\n    this._ssaoPass.setUniform(name, val);\n  }\n};\n\nSSAOPass.prototype.setKernelSize = function (size) {\n  this._kernelSize = size;\n\n  this._ssaoPass.material.define('fragment', 'KERNEL_SIZE', size);\n\n  this._kernels = this._kernels || [];\n\n  for (var i = 0; i < 30; i++) {\n    this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);\n  }\n};\n\nSSAOPass.prototype.setNoiseSize = function (size) {\n  var texture = this._ssaoPass.getUniform('noiseTex');\n\n  if (!texture) {\n    texture = generateNoiseTexture(size);\n\n    this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));\n  } else {\n    texture.data = generateNoiseData(size);\n    texture.width = texture.height = size;\n    texture.dirty();\n  }\n\n  this._ssaoPass.setUniform('noiseTexSize', [size, size]);\n};\n\nSSAOPass.prototype.dispose = function (renderer) {\n  this._blurTexture.dispose(renderer);\n\n  this._ssaoTexture.dispose(renderer);\n\n  this._blurTexture2.dispose(renderer);\n};\n\nexport default SSAOPass;"]},"metadata":{},"sourceType":"module"}