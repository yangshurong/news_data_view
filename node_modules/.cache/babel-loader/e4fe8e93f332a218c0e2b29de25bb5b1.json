{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nvar Geo3DModel = echarts.ComponentModel.extend({\n  type: 'geo3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  optionUpdated: function () {\n    var option = this.option;\n    option.regions = this.getFilledRegions(option.regions, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data || [], {\n      coordDimensions: ['value'],\n      encodeDefine: this.get('encode'),\n      dimensionsDefine: this.get('dimensions')\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.regions);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    this._data = list;\n  },\n  getData: function () {\n    return this._data;\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var name = this.getData().getName(idx);\n    var region = this.coordinateSystem.getRegion(name);\n    return region ? region.geometries : [];\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var name = this._data.getName(dataIndex);\n\n    var regionModel = this.getRegionModel(dataIndex);\n    var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);\n\n    if (formatter == null) {\n      formatter = regionModel.get(['label', 'formatter']);\n    }\n\n    var params = {\n      name: name\n    };\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var serName = params.seriesName;\n      return formatter.replace('{a}', serName != null ? serName : '');\n    } else {\n      return name;\n    }\n  },\n  defaultOption: {\n    // itemStyle: {},\n    // height,\n    // label: {}\n    // realisticMaterial\n    regions: []\n  }\n});\necharts.util.merge(Geo3DModel.prototype, geo3DModelMixin);\necharts.util.merge(Geo3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Geo3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Geo3DModel.prototype, componentLightMixin);\necharts.util.merge(Geo3DModel.prototype, componentShadingMixin);\nexport default Geo3DModel;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/geo3D/Geo3DModel.js"],"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","componentShadingMixin","geo3DModelMixin","Geo3DModel","ComponentModel","extend","type","layoutMode","coordinateSystem","optionUpdated","option","regions","getFilledRegions","map","dimensions","helper","createDimensions","data","coordDimensions","encodeDefine","get","dimensionsDefine","list","List","initData","regionModelMap","each","idx","name","getName","itemModel","getItemModel","_regionModelMap","_data","getData","getRegionModel","Model","getRegionPolygonCoords","region","getRegion","geometries","getFormattedLabel","dataIndex","status","regionModel","formatter","params","serName","seriesName","replace","defaultOption","util","merge","prototype"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nvar Geo3DModel = echarts.ComponentModel.extend({\n  type: 'geo3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  optionUpdated: function () {\n    var option = this.option;\n    option.regions = this.getFilledRegions(option.regions, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data || [], {\n      coordDimensions: ['value'],\n      encodeDefine: this.get('encode'),\n      dimensionsDefine: this.get('dimensions')\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.regions);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    this._data = list;\n  },\n  getData: function () {\n    return this._data;\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var name = this.getData().getName(idx);\n    var region = this.coordinateSystem.getRegion(name);\n    return region ? region.geometries : [];\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var name = this._data.getName(dataIndex);\n\n    var regionModel = this.getRegionModel(dataIndex);\n    var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);\n\n    if (formatter == null) {\n      formatter = regionModel.get(['label', 'formatter']);\n    }\n\n    var params = {\n      name: name\n    };\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var serName = params.seriesName;\n      return formatter.replace('{a}', serName != null ? serName : '');\n    } else {\n      return name;\n    }\n  },\n  defaultOption: {\n    // itemStyle: {},\n    // height,\n    // label: {}\n    // realisticMaterial\n    regions: []\n  }\n});\necharts.util.merge(Geo3DModel.prototype, geo3DModelMixin);\necharts.util.merge(Geo3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Geo3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Geo3DModel.prototype, componentLightMixin);\necharts.util.merge(Geo3DModel.prototype, componentShadingMixin);\nexport default Geo3DModel;"]},"metadata":{},"sourceType":"module"}