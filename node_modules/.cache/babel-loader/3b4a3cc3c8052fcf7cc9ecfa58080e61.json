{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n// Cubemap prefilter utility\n// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf\n// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport Texture from '../Texture';\nimport FrameBuffer from '../FrameBuffer';\nimport Pass from '../compositor/Pass';\nimport Material from '../Material';\nimport Shader from '../Shader';\nimport Skybox from '../plugin/Skybox';\nimport Scene from '../Scene';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport vendor from '../core/vendor';\nimport textureUtil from './texture';\nimport integrateBRDFShaderCode from './shader/integrateBRDF.glsl.js';\nimport prefilterFragCode from './shader/prefilter.glsl.js';\nvar cubemapUtil = {};\nvar targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz']; // TODO Downsample\n\n/**\n * @name clay.util.cubemap.prefilterEnvironmentMap\n * @param  {clay.Renderer} renderer\n * @param  {clay.Texture} envMap\n * @param  {Object} [textureOpts]\n * @param  {number} [textureOpts.width=64]\n * @param  {number} [textureOpts.height=64]\n * @param  {number} [textureOpts.type]\n * @param  {boolean} [textureOpts.encodeRGBM=false]\n * @param  {boolean} [textureOpts.decodeRGBM=false]\n * @param  {clay.Texture2D} [normalDistribution]\n * @param  {clay.Texture2D} [brdfLookup]\n */\n\ncubemapUtil.prefilterEnvironmentMap = function (renderer, envMap, textureOpts, normalDistribution, brdfLookup) {\n  // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer\n  // PENDING preserveDrawingBuffer?\n  if (!brdfLookup || !normalDistribution) {\n    normalDistribution = cubemapUtil.generateNormalDistribution();\n    brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);\n  }\n\n  textureOpts = textureOpts || {};\n  var width = textureOpts.width || 64;\n  var height = textureOpts.height || 64;\n  var textureType = textureOpts.type || envMap.type; // Use same type with given envMap\n\n  var prefilteredCubeMap = new TextureCube({\n    width: width,\n    height: height,\n    type: textureType,\n    flipY: false,\n    mipmaps: []\n  });\n\n  if (!prefilteredCubeMap.isPowerOfTwo()) {\n    console.warn('Width and height must be power of two to enable mipmap.');\n  }\n\n  var size = Math.min(width, height);\n  var mipmapNum = Math.log(size) / Math.log(2) + 1;\n  var prefilterMaterial = new Material({\n    shader: new Shader({\n      vertex: Shader.source('clay.skybox.vertex'),\n      fragment: prefilterFragCode\n    })\n  });\n  prefilterMaterial.set('normalDistribution', normalDistribution);\n  textureOpts.encodeRGBM && prefilterMaterial.define('fragment', 'RGBM_ENCODE');\n  textureOpts.decodeRGBM && prefilterMaterial.define('fragment', 'RGBM_DECODE');\n  var dummyScene = new Scene();\n  var skyEnv;\n\n  if (envMap.textureType === 'texture2D') {\n    // Convert panorama to cubemap\n    var envCubemap = new TextureCube({\n      width: width,\n      height: height,\n      // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS\n      type: textureType === Texture.FLOAT ? Texture.HALF_FLOAT : textureType\n    });\n    textureUtil.panoramaToCubeMap(renderer, envMap, envCubemap, {\n      // PENDING encodeRGBM so it can be decoded as RGBM\n      encodeRGBM: textureOpts.decodeRGBM\n    });\n    envMap = envCubemap;\n  }\n\n  skyEnv = new Skybox({\n    scene: dummyScene,\n    material: prefilterMaterial\n  });\n  skyEnv.material.set('environmentMap', envMap);\n  var envMapPass = new EnvironmentMapPass({\n    texture: prefilteredCubeMap\n  }); // Force to be UNSIGNED_BYTE\n\n  if (textureOpts.encodeRGBM) {\n    textureType = prefilteredCubeMap.type = Texture.UNSIGNED_BYTE;\n  }\n\n  var renderTargetTmp = new Texture2D({\n    width: width,\n    height: height,\n    type: textureType\n  });\n  var frameBuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  var ArrayCtor = vendor[textureType === Texture.UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];\n\n  for (var i = 0; i < mipmapNum; i++) {\n    // console.time('prefilter');\n    prefilteredCubeMap.mipmaps[i] = {\n      pixels: {}\n    };\n    skyEnv.material.set('roughness', i / (mipmapNum - 1)); // Tweak fov\n    // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/\n\n    var n = renderTargetTmp.width;\n    var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;\n\n    for (var j = 0; j < targets.length; j++) {\n      var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);\n      frameBuffer.attach(renderTargetTmp);\n      frameBuffer.bind(renderer);\n      var camera = envMapPass.getCamera(targets[j]);\n      camera.fov = fov;\n      renderer.render(dummyScene, camera);\n      renderer.gl.readPixels(0, 0, renderTargetTmp.width, renderTargetTmp.height, Texture.RGBA, textureType, pixels); // var canvas = document.createElement('canvas');\n      // var ctx = canvas.getContext('2d');\n      // canvas.width = renderTargetTmp.width;\n      // canvas.height = renderTargetTmp.height;\n      // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);\n      // for (var k = 0; k < pixels.length; k++) {\n      //     imageData.data[k] = pixels[k];\n      // }\n      // ctx.putImageData(imageData, 0, 0);\n      // document.body.appendChild(canvas);\n\n      frameBuffer.unbind(renderer);\n      prefilteredCubeMap.mipmaps[i].pixels[targets[j]] = pixels;\n    }\n\n    renderTargetTmp.width /= 2;\n    renderTargetTmp.height /= 2;\n    renderTargetTmp.dirty(); // console.timeEnd('prefilter');\n  }\n\n  frameBuffer.dispose(renderer);\n  renderTargetTmp.dispose(renderer);\n  skyEnv.dispose(renderer); // Remove gpu resource allucated in renderer\n\n  normalDistribution.dispose(renderer); // renderer.dispose();\n\n  return {\n    environmentMap: prefilteredCubeMap,\n    brdfLookup: brdfLookup,\n    normalDistribution: normalDistribution,\n    maxMipmapLevel: mipmapNum\n  };\n};\n\ncubemapUtil.integrateBRDF = function (renderer, normalDistribution) {\n  normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();\n  var framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  var pass = new Pass({\n    fragment: integrateBRDFShaderCode\n  });\n  var texture = new Texture2D({\n    width: 512,\n    height: 256,\n    type: Texture.HALF_FLOAT,\n    wrapS: Texture.CLAMP_TO_EDGE,\n    wrapT: Texture.CLAMP_TO_EDGE,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST,\n    useMipmap: false\n  });\n  pass.setUniform('normalDistribution', normalDistribution);\n  pass.setUniform('viewportSize', [512, 256]);\n  pass.attachOutput(texture);\n  pass.render(renderer, framebuffer); // FIXME Only chrome and firefox can readPixels with float type.\n  // framebuffer.bind(renderer);\n  // var pixels = new Float32Array(512 * 256 * 4);\n  // renderer.gl.readPixels(\n  //     0, 0, texture.width, texture.height,\n  //     Texture.RGBA, Texture.FLOAT, pixels\n  // );\n  // texture.pixels = pixels;\n  // texture.flipY = false;\n  // texture.dirty();\n  // framebuffer.unbind(renderer);\n\n  framebuffer.dispose(renderer);\n  return texture;\n};\n\ncubemapUtil.generateNormalDistribution = function (roughnessLevels, sampleSize) {\n  // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n  // GLSL not support bit operation, use lookup instead\n  // V -> i / N, U -> roughness\n  var roughnessLevels = roughnessLevels || 256;\n  var sampleSize = sampleSize || 1024;\n  var normalDistribution = new Texture2D({\n    width: roughnessLevels,\n    height: sampleSize,\n    type: Texture.FLOAT,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST,\n    wrapS: Texture.CLAMP_TO_EDGE,\n    wrapT: Texture.CLAMP_TO_EDGE,\n    useMipmap: false\n  });\n  var pixels = new Float32Array(sampleSize * roughnessLevels * 4);\n  var tmp = []; // function sortFunc(a, b) {\n  //     return Math.abs(b) - Math.abs(a);\n  // }\n\n  for (var j = 0; j < roughnessLevels; j++) {\n    var roughness = j / roughnessLevels;\n    var a = roughness * roughness;\n\n    for (var i = 0; i < sampleSize; i++) {\n      // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\n      // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript\n      // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it\n      var y = (i << 16 | i >>> 16) >>> 0;\n      y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;\n      y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;\n      y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;\n      y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296; // CDF\n\n      var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));\n      tmp[i] = cosTheta;\n    }\n\n    for (var i = 0; i < sampleSize; i++) {\n      var offset = (i * roughnessLevels + j) * 4;\n      var cosTheta = tmp[i];\n      var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n      var x = i / sampleSize;\n      var phi = 2.0 * Math.PI * x;\n      pixels[offset] = sinTheta * Math.cos(phi);\n      pixels[offset + 1] = cosTheta;\n      pixels[offset + 2] = sinTheta * Math.sin(phi);\n      pixels[offset + 3] = 1.0;\n    }\n  }\n\n  normalDistribution.pixels = pixels;\n  return normalDistribution;\n};\n\nexport default cubemapUtil;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/util/cubemap.js"],"names":["Texture2D","TextureCube","Texture","FrameBuffer","Pass","Material","Shader","Skybox","Scene","EnvironmentMapPass","vendor","textureUtil","integrateBRDFShaderCode","prefilterFragCode","cubemapUtil","targets","prefilterEnvironmentMap","renderer","envMap","textureOpts","normalDistribution","brdfLookup","generateNormalDistribution","integrateBRDF","width","height","textureType","type","prefilteredCubeMap","flipY","mipmaps","isPowerOfTwo","console","warn","size","Math","min","mipmapNum","log","prefilterMaterial","shader","vertex","source","fragment","set","encodeRGBM","define","decodeRGBM","dummyScene","skyEnv","envCubemap","FLOAT","HALF_FLOAT","panoramaToCubeMap","scene","material","envMapPass","texture","UNSIGNED_BYTE","renderTargetTmp","frameBuffer","depthBuffer","ArrayCtor","i","pixels","n","fov","atan","PI","j","length","attach","bind","camera","getCamera","render","gl","readPixels","RGBA","unbind","dirty","dispose","environmentMap","maxMipmapLevel","framebuffer","pass","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","NEAREST","magFilter","useMipmap","setUniform","attachOutput","roughnessLevels","sampleSize","Float32Array","tmp","roughness","a","y","cosTheta","sqrt","offset","sinTheta","x","phi","cos","sin"],"mappings":"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","sourcesContent":["// Cubemap prefilter utility\n// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf\n// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport Texture from '../Texture';\nimport FrameBuffer from '../FrameBuffer';\nimport Pass from '../compositor/Pass';\nimport Material from '../Material';\nimport Shader from '../Shader';\nimport Skybox from '../plugin/Skybox';\nimport Scene from '../Scene';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport vendor from '../core/vendor';\nimport textureUtil from './texture';\n\nimport integrateBRDFShaderCode from './shader/integrateBRDF.glsl.js';\nimport prefilterFragCode from './shader/prefilter.glsl.js';\n\nvar cubemapUtil = {};\n\nvar targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n\n// TODO Downsample\n/**\n * @name clay.util.cubemap.prefilterEnvironmentMap\n * @param  {clay.Renderer} renderer\n * @param  {clay.Texture} envMap\n * @param  {Object} [textureOpts]\n * @param  {number} [textureOpts.width=64]\n * @param  {number} [textureOpts.height=64]\n * @param  {number} [textureOpts.type]\n * @param  {boolean} [textureOpts.encodeRGBM=false]\n * @param  {boolean} [textureOpts.decodeRGBM=false]\n * @param  {clay.Texture2D} [normalDistribution]\n * @param  {clay.Texture2D} [brdfLookup]\n */\ncubemapUtil.prefilterEnvironmentMap = function (\n    renderer, envMap, textureOpts, normalDistribution, brdfLookup\n) {\n    // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer\n    // PENDING preserveDrawingBuffer?\n    if (!brdfLookup || !normalDistribution) {\n        normalDistribution = cubemapUtil.generateNormalDistribution();\n        brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);\n    }\n    textureOpts = textureOpts || {};\n\n    var width = textureOpts.width || 64;\n    var height = textureOpts.height || 64;\n\n    var textureType = textureOpts.type || envMap.type;\n\n    // Use same type with given envMap\n    var prefilteredCubeMap = new TextureCube({\n        width: width,\n        height: height,\n        type: textureType,\n        flipY: false,\n        mipmaps: []\n    });\n\n    if (!prefilteredCubeMap.isPowerOfTwo()) {\n        console.warn('Width and height must be power of two to enable mipmap.');\n    }\n\n    var size = Math.min(width, height);\n    var mipmapNum = Math.log(size) / Math.log(2) + 1;\n\n    var prefilterMaterial = new Material({\n        shader: new Shader({\n            vertex: Shader.source('clay.skybox.vertex'),\n            fragment: prefilterFragCode\n        })\n    });\n    prefilterMaterial.set('normalDistribution', normalDistribution);\n\n    textureOpts.encodeRGBM && prefilterMaterial.define('fragment', 'RGBM_ENCODE');\n    textureOpts.decodeRGBM && prefilterMaterial.define('fragment', 'RGBM_DECODE');\n\n    var dummyScene = new Scene();\n    var skyEnv;\n\n    if (envMap.textureType === 'texture2D') {\n        // Convert panorama to cubemap\n        var envCubemap = new TextureCube({\n            width: width,\n            height: height,\n            // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS\n            type: textureType === Texture.FLOAT ?\n                Texture.HALF_FLOAT : textureType\n        });\n        textureUtil.panoramaToCubeMap(renderer, envMap, envCubemap, {\n            // PENDING encodeRGBM so it can be decoded as RGBM\n            encodeRGBM: textureOpts.decodeRGBM\n        });\n        envMap = envCubemap;\n    }\n    skyEnv = new Skybox({\n        scene: dummyScene,\n        material: prefilterMaterial\n    });\n    skyEnv.material.set('environmentMap', envMap);\n\n    var envMapPass = new EnvironmentMapPass({\n        texture: prefilteredCubeMap\n    });\n\n    // Force to be UNSIGNED_BYTE\n    if (textureOpts.encodeRGBM) {\n        textureType = prefilteredCubeMap.type = Texture.UNSIGNED_BYTE;\n    }\n\n    var renderTargetTmp = new Texture2D({\n        width: width,\n        height: height,\n        type: textureType\n    });\n    var frameBuffer = new FrameBuffer({\n        depthBuffer: false\n    });\n    var ArrayCtor = vendor[textureType === Texture.UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];\n    for (var i = 0; i < mipmapNum; i++) {\n        // console.time('prefilter');\n        prefilteredCubeMap.mipmaps[i] = {\n            pixels: {}\n        };\n        skyEnv.material.set('roughness', i / (mipmapNum - 1));\n\n        // Tweak fov\n        // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/\n        var n = renderTargetTmp.width;\n        var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;\n\n        for (var j = 0; j < targets.length; j++) {\n            var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);\n            frameBuffer.attach(renderTargetTmp);\n            frameBuffer.bind(renderer);\n\n            var camera = envMapPass.getCamera(targets[j]);\n            camera.fov = fov;\n            renderer.render(dummyScene, camera);\n            renderer.gl.readPixels(\n                0, 0, renderTargetTmp.width, renderTargetTmp.height,\n                Texture.RGBA, textureType, pixels\n            );\n\n            // var canvas = document.createElement('canvas');\n            // var ctx = canvas.getContext('2d');\n            // canvas.width = renderTargetTmp.width;\n            // canvas.height = renderTargetTmp.height;\n            // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);\n            // for (var k = 0; k < pixels.length; k++) {\n            //     imageData.data[k] = pixels[k];\n            // }\n            // ctx.putImageData(imageData, 0, 0);\n            // document.body.appendChild(canvas);\n\n            frameBuffer.unbind(renderer);\n            prefilteredCubeMap.mipmaps[i].pixels[targets[j]] = pixels;\n        }\n\n        renderTargetTmp.width /= 2;\n        renderTargetTmp.height /= 2;\n        renderTargetTmp.dirty();\n        // console.timeEnd('prefilter');\n    }\n\n    frameBuffer.dispose(renderer);\n    renderTargetTmp.dispose(renderer);\n    skyEnv.dispose(renderer);\n    // Remove gpu resource allucated in renderer\n    normalDistribution.dispose(renderer);\n\n    // renderer.dispose();\n\n    return {\n        environmentMap: prefilteredCubeMap,\n        brdfLookup: brdfLookup,\n        normalDistribution: normalDistribution,\n        maxMipmapLevel: mipmapNum\n    };\n};\n\ncubemapUtil.integrateBRDF = function (renderer, normalDistribution) {\n    normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();\n    var framebuffer = new FrameBuffer({\n        depthBuffer: false\n    });\n    var pass = new Pass({\n        fragment: integrateBRDFShaderCode\n    });\n\n    var texture = new Texture2D({\n        width: 512,\n        height: 256,\n        type: Texture.HALF_FLOAT,\n        wrapS: Texture.CLAMP_TO_EDGE,\n        wrapT: Texture.CLAMP_TO_EDGE,\n        minFilter: Texture.NEAREST,\n        magFilter: Texture.NEAREST,\n        useMipmap: false\n    });\n    pass.setUniform('normalDistribution', normalDistribution);\n    pass.setUniform('viewportSize', [512, 256]);\n    pass.attachOutput(texture);\n    pass.render(renderer, framebuffer);\n\n    // FIXME Only chrome and firefox can readPixels with float type.\n    // framebuffer.bind(renderer);\n    // var pixels = new Float32Array(512 * 256 * 4);\n    // renderer.gl.readPixels(\n    //     0, 0, texture.width, texture.height,\n    //     Texture.RGBA, Texture.FLOAT, pixels\n    // );\n    // texture.pixels = pixels;\n    // texture.flipY = false;\n    // texture.dirty();\n    // framebuffer.unbind(renderer);\n\n    framebuffer.dispose(renderer);\n\n    return texture;\n};\n\ncubemapUtil.generateNormalDistribution = function (roughnessLevels, sampleSize) {\n\n    // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n    // GLSL not support bit operation, use lookup instead\n    // V -> i / N, U -> roughness\n    var roughnessLevels = roughnessLevels || 256;\n    var sampleSize = sampleSize || 1024;\n\n    var normalDistribution = new Texture2D({\n        width: roughnessLevels,\n        height: sampleSize,\n        type: Texture.FLOAT,\n        minFilter: Texture.NEAREST,\n        magFilter: Texture.NEAREST,\n        wrapS: Texture.CLAMP_TO_EDGE,\n        wrapT: Texture.CLAMP_TO_EDGE,\n        useMipmap: false\n    });\n    var pixels = new Float32Array(sampleSize * roughnessLevels * 4);\n    var tmp = [];\n\n    // function sortFunc(a, b) {\n    //     return Math.abs(b) - Math.abs(a);\n    // }\n    for (var j = 0; j < roughnessLevels; j++) {\n        var roughness = j / roughnessLevels;\n        var a = roughness * roughness;\n\n        for (var i = 0; i < sampleSize; i++) {\n            // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\n            // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript\n            // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it\n            var y = (i << 16 | i >>> 16) >>> 0;\n            y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;\n            y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;\n            y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;\n            y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;\n\n            // CDF\n            var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));\n            tmp[i] = cosTheta;\n        }\n\n        for (var i = 0; i < sampleSize; i++) {\n            var offset = (i * roughnessLevels + j) * 4;\n            var cosTheta = tmp[i];\n            var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n            var x = i / sampleSize;\n            var phi = 2.0 * Math.PI * x;\n            pixels[offset] = sinTheta * Math.cos(phi);\n            pixels[offset + 1] = cosTheta;\n            pixels[offset + 2] = sinTheta * Math.sin(phi);\n            pixels[offset + 3] = 1.0;\n        }\n    }\n    normalDistribution.pixels = pixels;\n\n    return normalDistribution;\n};\n\nexport default cubemapUtil;\n"]},"metadata":{},"sourceType":"module"}