{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/**\n * @module echarts-gl/util/geometry/QuadsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/QuadsGeometry\n * @extends clay.Geometry\n */\n\nvar QuadsGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 1,\n\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n\n  /**\n   * @param {number} nQuad\n   */\n  setQuadCount: function (nQuad) {\n    var attributes = this.attributes;\n    var vertexCount = this.getQuadVertexCount() * nQuad;\n    var triangleCount = this.getQuadTriangleCount() * nQuad;\n\n    if (this.vertexCount !== vertexCount) {\n      attributes.position.init(vertexCount);\n      attributes.normal.init(vertexCount);\n      attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  getQuadVertexCount: function () {\n    return 4;\n  },\n  getQuadTriangleCount: function () {\n    return 2;\n  },\n\n  /**\n   * Add a quad, which in following order:\n   * 0-----1\n   * 3-----2\n   */\n  addQuad: function () {\n    var a = vec3.create();\n    var b = vec3.create();\n    var normal = vec3.create();\n    var indices = [0, 3, 1, 3, 2, 1];\n    return function (coords, color) {\n      var positionAttr = this.attributes.position;\n      var normalAttr = this.attributes.normal;\n      var colorAttr = this.attributes.color;\n      vec3.sub(a, coords[1], coords[0]);\n      vec3.sub(b, coords[2], coords[1]);\n      vec3.cross(normal, a, b);\n      vec3.normalize(normal, normal);\n\n      for (var i = 0; i < 4; i++) {\n        positionAttr.set(this._vertexOffset + i, coords[i]);\n        colorAttr.set(this._vertexOffset + i, color);\n        normalAttr.set(this._vertexOffset + i, normal);\n      }\n\n      var idx = this._faceOffset * 3;\n\n      for (var i = 0; i < 6; i++) {\n        this.indices[idx + i] = indices[i] + this._vertexOffset;\n      }\n\n      this._vertexOffset += 4;\n      this._faceOffset += 2;\n    };\n  }()\n});\necharts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);\nexport default QuadsGeometry;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/geometry/Quads.js"],"names":["Geometry","echarts","dynamicConvertMixin","glmatrix","vec3","QuadsGeometry","extend","segmentScale","useNativeLine","attributes","position","Attribute","normal","color","resetOffset","_vertexOffset","_faceOffset","setQuadCount","nQuad","vertexCount","getQuadVertexCount","triangleCount","getQuadTriangleCount","init","indices","Uint32Array","Uint16Array","addQuad","a","create","b","coords","positionAttr","normalAttr","colorAttr","sub","cross","normalize","i","set","idx","util","defaults","prototype"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,IAAIC,IAAI,GAAGD,QAAQ,CAACC,IAApB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAGL,QAAQ,CAACM,MAAT,CAAgB,YAAY;AAC9C,SAAO;AACLC,IAAAA,YAAY,EAAE,CADT;;AAGL;AACJ;AACA;AACIC,IAAAA,aAAa,EAAE,IANV;AAOLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,IAAIV,QAAQ,CAACW,SAAb,CAAuB,UAAvB,EAAmC,OAAnC,EAA4C,CAA5C,EAA+C,UAA/C,CADA;AAEVC,MAAAA,MAAM,EAAE,IAAIZ,QAAQ,CAACW,SAAb,CAAuB,QAAvB,EAAiC,OAAjC,EAA0C,CAA1C,EAA6C,QAA7C,CAFE;AAGVE,MAAAA,KAAK,EAAE,IAAIb,QAAQ,CAACW,SAAb,CAAuB,OAAvB,EAAgC,OAAhC,EAAyC,CAAzC,EAA4C,OAA5C;AAHG;AAPP,GAAP;AAaD,CAdmB;AAepB;AACA;AACE;AACF;AACA;AACEG,EAAAA,WAAW,EAAE,YAAY;AACvB,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACD,GAPH;;AASE;AACF;AACA;AACEC,EAAAA,YAAY,EAAE,UAAUC,KAAV,EAAiB;AAC7B,QAAIT,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIU,WAAW,GAAG,KAAKC,kBAAL,KAA4BF,KAA9C;AACA,QAAIG,aAAa,GAAG,KAAKC,oBAAL,KAA8BJ,KAAlD;;AAEA,QAAI,KAAKC,WAAL,KAAqBA,WAAzB,EAAsC;AACpCV,MAAAA,UAAU,CAACC,QAAX,CAAoBa,IAApB,CAAyBJ,WAAzB;AACAV,MAAAA,UAAU,CAACG,MAAX,CAAkBW,IAAlB,CAAuBJ,WAAvB;AACAV,MAAAA,UAAU,CAACI,KAAX,CAAiBU,IAAjB,CAAsBJ,WAAtB;AACD;;AAED,QAAI,KAAKE,aAAL,KAAuBA,aAA3B,EAA0C;AACxC,WAAKG,OAAL,GAAeL,WAAW,GAAG,MAAd,GAAuB,IAAIM,WAAJ,CAAgBJ,aAAa,GAAG,CAAhC,CAAvB,GAA4D,IAAIK,WAAJ,CAAgBL,aAAa,GAAG,CAAhC,CAA3E;AACD;AACF,GA1BH;AA2BED,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,WAAO,CAAP;AACD,GA7BH;AA8BEE,EAAAA,oBAAoB,EAAE,YAAY;AAChC,WAAO,CAAP;AACD,GAhCH;;AAkCE;AACF;AACA;AACA;AACA;AACEK,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAIC,CAAC,GAAGxB,IAAI,CAACyB,MAAL,EAAR;AACA,QAAIC,CAAC,GAAG1B,IAAI,CAACyB,MAAL,EAAR;AACA,QAAIjB,MAAM,GAAGR,IAAI,CAACyB,MAAL,EAAb;AACA,QAAIL,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAd;AACA,WAAO,UAAUO,MAAV,EAAkBlB,KAAlB,EAAyB;AAC9B,UAAImB,YAAY,GAAG,KAAKvB,UAAL,CAAgBC,QAAnC;AACA,UAAIuB,UAAU,GAAG,KAAKxB,UAAL,CAAgBG,MAAjC;AACA,UAAIsB,SAAS,GAAG,KAAKzB,UAAL,CAAgBI,KAAhC;AACAT,MAAAA,IAAI,CAAC+B,GAAL,CAASP,CAAT,EAAYG,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B;AACA3B,MAAAA,IAAI,CAAC+B,GAAL,CAASL,CAAT,EAAYC,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B;AACA3B,MAAAA,IAAI,CAACgC,KAAL,CAAWxB,MAAX,EAAmBgB,CAAnB,EAAsBE,CAAtB;AACA1B,MAAAA,IAAI,CAACiC,SAAL,CAAezB,MAAf,EAAuBA,MAAvB;;AAEA,WAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BN,QAAAA,YAAY,CAACO,GAAb,CAAiB,KAAKxB,aAAL,GAAqBuB,CAAtC,EAAyCP,MAAM,CAACO,CAAD,CAA/C;AACAJ,QAAAA,SAAS,CAACK,GAAV,CAAc,KAAKxB,aAAL,GAAqBuB,CAAnC,EAAsCzB,KAAtC;AACAoB,QAAAA,UAAU,CAACM,GAAX,CAAe,KAAKxB,aAAL,GAAqBuB,CAApC,EAAuC1B,MAAvC;AACD;;AAED,UAAI4B,GAAG,GAAG,KAAKxB,WAAL,GAAmB,CAA7B;;AAEA,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,aAAKd,OAAL,CAAagB,GAAG,GAAGF,CAAnB,IAAwBd,OAAO,CAACc,CAAD,CAAP,GAAa,KAAKvB,aAA1C;AACD;;AAED,WAAKA,aAAL,IAAsB,CAAtB;AACA,WAAKC,WAAL,IAAoB,CAApB;AACD,KAvBD;AAwBD,GA7BQ;AAvCX,CAhBoB,CAApB;AAsFAf,OAAO,CAACwC,IAAR,CAAaC,QAAb,CAAsBrC,aAAa,CAACsC,SAApC,EAA+CzC,mBAA/C;AACA,eAAeG,aAAf","sourcesContent":["/**\n * @module echarts-gl/util/geometry/QuadsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/QuadsGeometry\n * @extends clay.Geometry\n */\n\nvar QuadsGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 1,\n\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n\n  /**\n   * @param {number} nQuad\n   */\n  setQuadCount: function (nQuad) {\n    var attributes = this.attributes;\n    var vertexCount = this.getQuadVertexCount() * nQuad;\n    var triangleCount = this.getQuadTriangleCount() * nQuad;\n\n    if (this.vertexCount !== vertexCount) {\n      attributes.position.init(vertexCount);\n      attributes.normal.init(vertexCount);\n      attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  getQuadVertexCount: function () {\n    return 4;\n  },\n  getQuadTriangleCount: function () {\n    return 2;\n  },\n\n  /**\n   * Add a quad, which in following order:\n   * 0-----1\n   * 3-----2\n   */\n  addQuad: function () {\n    var a = vec3.create();\n    var b = vec3.create();\n    var normal = vec3.create();\n    var indices = [0, 3, 1, 3, 2, 1];\n    return function (coords, color) {\n      var positionAttr = this.attributes.position;\n      var normalAttr = this.attributes.normal;\n      var colorAttr = this.attributes.color;\n      vec3.sub(a, coords[1], coords[0]);\n      vec3.sub(b, coords[2], coords[1]);\n      vec3.cross(normal, a, b);\n      vec3.normalize(normal, normal);\n\n      for (var i = 0; i < 4; i++) {\n        positionAttr.set(this._vertexOffset + i, coords[i]);\n        colorAttr.set(this._vertexOffset + i, color);\n        normalAttr.set(this._vertexOffset + i, normal);\n      }\n\n      var idx = this._faceOffset * 3;\n\n      for (var i = 0; i < 6; i++) {\n        this.indices[idx + i] = indices[i] + this._vertexOffset;\n      }\n\n      this._vertexOffset += 4;\n      this._faceOffset += 2;\n    };\n  }()\n});\necharts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);\nexport default QuadsGeometry;"]},"metadata":{},"sourceType":"module"}