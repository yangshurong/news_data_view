{"ast":null,"code":"import \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport Base from '../core/Base';\nimport GraphNode from './CompositorNode';\n/**\n * @constructor clay.compositor.Graph\n * @extends clay.core.Base\n */\n\nvar Graph = Base.extend(function () {\n  return (\n    /** @lends clay.compositor.Graph# */\n    {\n      /**\n       * @type {Array.<clay.compositor.CompositorNode>}\n       */\n      nodes: []\n    }\n  );\n},\n/** @lends clay.compositor.Graph.prototype */\n{\n  /**\n   * Mark to update\n   */\n  dirty: function dirty() {\n    this._dirty = true;\n  },\n\n  /**\n   * @param {clay.compositor.CompositorNode} node\n   */\n  addNode: function addNode(node) {\n    if (this.nodes.indexOf(node) >= 0) {\n      return;\n    }\n\n    this.nodes.push(node);\n    this._dirty = true;\n  },\n\n  /**\n   * @param  {clay.compositor.CompositorNode|string} node\n   */\n  removeNode: function removeNode(node) {\n    if (typeof node === 'string') {\n      node = this.getNodeByName(node);\n    }\n\n    var idx = this.nodes.indexOf(node);\n\n    if (idx >= 0) {\n      this.nodes.splice(idx, 1);\n      this._dirty = true;\n    }\n  },\n\n  /**\n   * @param {string} name\n   * @return {clay.compositor.CompositorNode}\n   */\n  getNodeByName: function getNodeByName(name) {\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i].name === name) {\n        return this.nodes[i];\n      }\n    }\n  },\n\n  /**\n   * Update links of graph\n   */\n  update: function update() {\n    for (var i = 0; i < this.nodes.length; i++) {\n      this.nodes[i].clear();\n    } // Traverse all the nodes and build the graph\n\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n\n      if (!node.inputs) {\n        continue;\n      }\n\n      for (var inputName in node.inputs) {\n        if (!node.inputs[inputName]) {\n          continue;\n        }\n\n        if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {\n          console.warn('Pin ' + node.name + '.' + inputName + ' not used.');\n          continue;\n        }\n\n        var fromPinInfo = node.inputs[inputName];\n        var fromPin = this.findPin(fromPinInfo);\n\n        if (fromPin) {\n          node.link(inputName, fromPin.node, fromPin.pin);\n        } else {\n          if (typeof fromPinInfo === 'string') {\n            console.warn('Node ' + fromPinInfo + ' not exist');\n          } else {\n            console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');\n          }\n        }\n      }\n    }\n  },\n  findPin: function findPin(input) {\n    var node; // Try to take input as a directly a node\n\n    if (typeof input === 'string' || input instanceof GraphNode) {\n      input = {\n        node: input\n      };\n    }\n\n    if (typeof input.node === 'string') {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var tmp = this.nodes[i];\n\n        if (tmp.name === input.node) {\n          node = tmp;\n        }\n      }\n    } else {\n      node = input.node;\n    }\n\n    if (node) {\n      var inputPin = input.pin;\n\n      if (!inputPin) {\n        // Use first pin defaultly\n        if (node.outputs) {\n          inputPin = Object.keys(node.outputs)[0];\n        }\n      }\n\n      if (node.outputs[inputPin]) {\n        return {\n          node: node,\n          pin: inputPin\n        };\n      }\n    }\n  }\n});\nexport default Graph;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/compositor/Graph.js"],"names":["Base","GraphNode","Graph","extend","nodes","dirty","_dirty","addNode","node","indexOf","push","removeNode","getNodeByName","idx","splice","name","i","length","update","clear","inputs","inputName","pass","material","isUniformEnabled","console","warn","fromPinInfo","fromPin","findPin","link","pin","input","tmp","inputPin","outputs","Object","keys"],"mappings":"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","sourcesContent":["import Base from '../core/Base';\nimport GraphNode from './CompositorNode';\n\n/**\n * @constructor clay.compositor.Graph\n * @extends clay.core.Base\n */\nvar Graph = Base.extend(function () {\n    return /** @lends clay.compositor.Graph# */ {\n        /**\n         * @type {Array.<clay.compositor.CompositorNode>}\n         */\n        nodes: []\n    };\n},\n/** @lends clay.compositor.Graph.prototype */\n{\n\n    /**\n     * Mark to update\n     */\n    dirty: function () {\n        this._dirty = true;\n    },\n    /**\n     * @param {clay.compositor.CompositorNode} node\n     */\n    addNode: function (node) {\n\n        if (this.nodes.indexOf(node) >= 0) {\n            return;\n        }\n\n        this.nodes.push(node);\n\n        this._dirty = true;\n    },\n    /**\n     * @param  {clay.compositor.CompositorNode|string} node\n     */\n    removeNode: function (node) {\n        if (typeof node === 'string') {\n            node = this.getNodeByName(node);\n        }\n        var idx = this.nodes.indexOf(node);\n        if (idx >= 0) {\n            this.nodes.splice(idx, 1);\n            this._dirty = true;\n        }\n    },\n    /**\n     * @param {string} name\n     * @return {clay.compositor.CompositorNode}\n     */\n    getNodeByName: function (name) {\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].name === name) {\n                return this.nodes[i];\n            }\n        }\n    },\n    /**\n     * Update links of graph\n     */\n    update: function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].clear();\n        }\n        // Traverse all the nodes and build the graph\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n\n            if (!node.inputs) {\n                continue;\n            }\n            for (var inputName in node.inputs) {\n                if (!node.inputs[inputName]) {\n                    continue;\n                }\n                if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {\n                    console.warn('Pin '  + node.name + '.' + inputName + ' not used.');\n                    continue;\n                }\n                var fromPinInfo = node.inputs[inputName];\n\n                var fromPin = this.findPin(fromPinInfo);\n                if (fromPin) {\n                    node.link(inputName, fromPin.node, fromPin.pin);\n                }\n                else {\n                    if (typeof fromPinInfo === 'string') {\n                        console.warn('Node ' + fromPinInfo + ' not exist');\n                    }\n                    else {\n                        console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');\n                    }\n                }\n            }\n        }\n    },\n\n    findPin: function (input) {\n        var node;\n        // Try to take input as a directly a node\n        if (typeof input === 'string' || input instanceof GraphNode) {\n            input = {\n                node: input\n            };\n        }\n\n        if (typeof input.node === 'string') {\n            for (var i = 0; i < this.nodes.length; i++) {\n                var tmp = this.nodes[i];\n                if (tmp.name === input.node) {\n                    node = tmp;\n                }\n            }\n        }\n        else {\n            node = input.node;\n        }\n        if (node) {\n            var inputPin = input.pin;\n            if (!inputPin) {\n                // Use first pin defaultly\n                if (node.outputs) {\n                    inputPin = Object.keys(node.outputs)[0];\n                }\n            }\n            if (node.outputs[inputPin]) {\n                return {\n                    node: node,\n                    pin: inputPin\n                };\n            }\n        }\n    }\n});\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}