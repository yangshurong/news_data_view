{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport * as echarts from 'echarts/lib/echarts';\n\nfunction makeSprite(size, canvas, draw) {\n  // http://simonsarris.com/blog/346-how-you-clear-your-canvas-matters\n  // http://jsperf.com/canvasclear\n  // Set width and height is fast\n  // And use the exist canvas if possible\n  // http://jsperf.com/create-canvas-vs-set-width-height/2\n  var canvas = canvas || document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  draw && draw(ctx);\n  return canvas;\n}\n\nfunction makePath(symbol, symbolSize, style, marginBias) {\n  if (!echarts.util.isArray(symbolSize)) {\n    symbolSize = [symbolSize, symbolSize];\n  }\n\n  var margin = spriteUtil.getMarginByStyle(style, marginBias);\n  var width = symbolSize[0] + margin.left + margin.right;\n  var height = symbolSize[1] + margin.top + margin.bottom;\n  var path = echarts.helper.createSymbol(symbol, 0, 0, symbolSize[0], symbolSize[1]);\n  var size = Math.max(width, height);\n  path.x = margin.left;\n  path.y = margin.top;\n\n  if (width > height) {\n    path.y += (size - height) / 2;\n  } else {\n    path.x += (size - width) / 2;\n  }\n\n  var rect = path.getBoundingRect();\n  path.x -= rect.x;\n  path.y -= rect.y;\n  path.setStyle(style);\n  path.update();\n  path.__size = size;\n  return path;\n} // http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\n\n\nfunction generateSDF(ctx, sourceImageData, range) {\n  var sourceWidth = sourceImageData.width;\n  var sourceHeight = sourceImageData.height;\n  var width = ctx.canvas.width;\n  var height = ctx.canvas.height;\n  var scaleX = sourceWidth / width;\n  var scaleY = sourceHeight / height;\n\n  function sign(r) {\n    return r < 128 ? 1 : -1;\n  }\n\n  function searchMinDistance(x, y) {\n    var minDistSqr = Infinity;\n    x = Math.floor(x * scaleX);\n    y = Math.floor(y * scaleY);\n    var i = y * sourceWidth + x;\n    var r = sourceImageData.data[i * 4];\n    var a = sign(r); // Search for min distance\n\n    for (var y2 = Math.max(y - range, 0); y2 < Math.min(y + range, sourceHeight); y2++) {\n      for (var x2 = Math.max(x - range, 0); x2 < Math.min(x + range, sourceWidth); x2++) {\n        var i = y2 * sourceWidth + x2;\n        var r2 = sourceImageData.data[i * 4];\n        var b = sign(r2);\n        var dx = x2 - x;\n        var dy = y2 - y;\n\n        if (a !== b) {\n          var distSqr = dx * dx + dy * dy;\n\n          if (distSqr < minDistSqr) {\n            minDistSqr = distSqr;\n          }\n        }\n      }\n    }\n\n    return a * Math.sqrt(minDistSqr);\n  }\n\n  var sdfImageData = ctx.createImageData(width, height);\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var dist = searchMinDistance(x, y);\n      var normalized = dist / range * 0.5 + 0.5;\n      var i = (y * width + x) * 4;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = 255;\n    }\n  }\n\n  return sdfImageData;\n}\n\nvar spriteUtil = {\n  getMarginByStyle: function getMarginByStyle(style) {\n    var minMargin = style.minMargin || 0;\n    var lineWidth = 0;\n\n    if (style.stroke && style.stroke !== 'none') {\n      lineWidth = style.lineWidth == null ? 1 : style.lineWidth;\n    }\n\n    var shadowBlurSize = style.shadowBlur || 0;\n    var shadowOffsetX = style.shadowOffsetX || 0;\n    var shadowOffsetY = style.shadowOffsetY || 0;\n    var margin = {};\n    margin.left = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize, minMargin);\n    margin.right = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize, minMargin);\n    margin.top = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize, minMargin);\n    margin.bottom = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize, minMargin);\n    return margin;\n  },\n  // TODO Not consider shadowOffsetX, shadowOffsetY.\n\n  /**\n   * @param {string} symbol\n   * @param {number | Array.<number>} symbolSize\n   * @param {Object} style\n   */\n  createSymbolSprite: function createSymbolSprite(symbol, symbolSize, style, canvas) {\n    var path = makePath(symbol, symbolSize, style);\n    var margin = spriteUtil.getMarginByStyle(style);\n    return {\n      image: makeSprite(path.__size, canvas, function (ctx) {\n        echarts.innerDrawElementOnCanvas(ctx, path);\n      }),\n      margin: margin\n    };\n  },\n  createSDFFromCanvas: function createSDFFromCanvas(canvas, size, range, outCanvas) {\n    // TODO Create a low resolution SDF from high resolution image.\n    return makeSprite(size, outCanvas, function (outCtx) {\n      var ctx = canvas.getContext('2d');\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      outCtx.putImageData(generateSDF(outCtx, imgData, range), 0, 0);\n    });\n  },\n  createSimpleSprite: function createSimpleSprite(size, canvas) {\n    return makeSprite(size, canvas, function (ctx) {\n      var halfSize = size / 2;\n      ctx.beginPath();\n      ctx.arc(halfSize, halfSize, 60, 0, Math.PI * 2, false);\n      ctx.closePath();\n      var gradient = ctx.createRadialGradient(halfSize, halfSize, 0, halfSize, halfSize, halfSize);\n      gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');\n      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n      ctx.fillStyle = gradient;\n      ctx.fill();\n    });\n  }\n};\nexport default spriteUtil;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/sprite.js"],"names":["echarts","makeSprite","size","canvas","draw","document","createElement","width","height","ctx","getContext","makePath","symbol","symbolSize","style","marginBias","util","isArray","margin","spriteUtil","getMarginByStyle","left","right","top","bottom","path","helper","createSymbol","Math","max","x","y","rect","getBoundingRect","setStyle","update","__size","generateSDF","sourceImageData","range","sourceWidth","sourceHeight","scaleX","scaleY","sign","r","searchMinDistance","minDistSqr","Infinity","floor","i","data","a","y2","min","x2","r2","b","dx","dy","distSqr","sqrt","sdfImageData","createImageData","dist","normalized","minMargin","lineWidth","stroke","shadowBlurSize","shadowBlur","shadowOffsetX","shadowOffsetY","createSymbolSprite","image","innerDrawElementOnCanvas","createSDFFromCanvas","outCanvas","outCtx","imgData","getImageData","putImageData","createSimpleSprite","halfSize","beginPath","arc","PI","closePath","gradient","createRadialGradient","addColorStop","fillStyle","fill"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\n\nfunction makeSprite(size, canvas, draw) {\n  // http://simonsarris.com/blog/346-how-you-clear-your-canvas-matters\n  // http://jsperf.com/canvasclear\n  // Set width and height is fast\n  // And use the exist canvas if possible\n  // http://jsperf.com/create-canvas-vs-set-width-height/2\n  var canvas = canvas || document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  draw && draw(ctx);\n  return canvas;\n}\n\nfunction makePath(symbol, symbolSize, style, marginBias) {\n  if (!echarts.util.isArray(symbolSize)) {\n    symbolSize = [symbolSize, symbolSize];\n  }\n\n  var margin = spriteUtil.getMarginByStyle(style, marginBias);\n  var width = symbolSize[0] + margin.left + margin.right;\n  var height = symbolSize[1] + margin.top + margin.bottom;\n  var path = echarts.helper.createSymbol(symbol, 0, 0, symbolSize[0], symbolSize[1]);\n  var size = Math.max(width, height);\n  path.x = margin.left;\n  path.y = margin.top;\n\n  if (width > height) {\n    path.y += (size - height) / 2;\n  } else {\n    path.x += (size - width) / 2;\n  }\n\n  var rect = path.getBoundingRect();\n  path.x -= rect.x;\n  path.y -= rect.y;\n  path.setStyle(style);\n  path.update();\n  path.__size = size;\n  return path;\n} // http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\n\n\nfunction generateSDF(ctx, sourceImageData, range) {\n  var sourceWidth = sourceImageData.width;\n  var sourceHeight = sourceImageData.height;\n  var width = ctx.canvas.width;\n  var height = ctx.canvas.height;\n  var scaleX = sourceWidth / width;\n  var scaleY = sourceHeight / height;\n\n  function sign(r) {\n    return r < 128 ? 1 : -1;\n  }\n\n  function searchMinDistance(x, y) {\n    var minDistSqr = Infinity;\n    x = Math.floor(x * scaleX);\n    y = Math.floor(y * scaleY);\n    var i = y * sourceWidth + x;\n    var r = sourceImageData.data[i * 4];\n    var a = sign(r); // Search for min distance\n\n    for (var y2 = Math.max(y - range, 0); y2 < Math.min(y + range, sourceHeight); y2++) {\n      for (var x2 = Math.max(x - range, 0); x2 < Math.min(x + range, sourceWidth); x2++) {\n        var i = y2 * sourceWidth + x2;\n        var r2 = sourceImageData.data[i * 4];\n        var b = sign(r2);\n        var dx = x2 - x;\n        var dy = y2 - y;\n\n        if (a !== b) {\n          var distSqr = dx * dx + dy * dy;\n\n          if (distSqr < minDistSqr) {\n            minDistSqr = distSqr;\n          }\n        }\n      }\n    }\n\n    return a * Math.sqrt(minDistSqr);\n  }\n\n  var sdfImageData = ctx.createImageData(width, height);\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var dist = searchMinDistance(x, y);\n      var normalized = dist / range * 0.5 + 0.5;\n      var i = (y * width + x) * 4;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = 255;\n    }\n  }\n\n  return sdfImageData;\n}\n\nvar spriteUtil = {\n  getMarginByStyle: function (style) {\n    var minMargin = style.minMargin || 0;\n    var lineWidth = 0;\n\n    if (style.stroke && style.stroke !== 'none') {\n      lineWidth = style.lineWidth == null ? 1 : style.lineWidth;\n    }\n\n    var shadowBlurSize = style.shadowBlur || 0;\n    var shadowOffsetX = style.shadowOffsetX || 0;\n    var shadowOffsetY = style.shadowOffsetY || 0;\n    var margin = {};\n    margin.left = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize, minMargin);\n    margin.right = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize, minMargin);\n    margin.top = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize, minMargin);\n    margin.bottom = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize, minMargin);\n    return margin;\n  },\n  // TODO Not consider shadowOffsetX, shadowOffsetY.\n\n  /**\n   * @param {string} symbol\n   * @param {number | Array.<number>} symbolSize\n   * @param {Object} style\n   */\n  createSymbolSprite: function (symbol, symbolSize, style, canvas) {\n    var path = makePath(symbol, symbolSize, style);\n    var margin = spriteUtil.getMarginByStyle(style);\n    return {\n      image: makeSprite(path.__size, canvas, function (ctx) {\n        echarts.innerDrawElementOnCanvas(ctx, path);\n      }),\n      margin: margin\n    };\n  },\n  createSDFFromCanvas: function (canvas, size, range, outCanvas) {\n    // TODO Create a low resolution SDF from high resolution image.\n    return makeSprite(size, outCanvas, function (outCtx) {\n      var ctx = canvas.getContext('2d');\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      outCtx.putImageData(generateSDF(outCtx, imgData, range), 0, 0);\n    });\n  },\n  createSimpleSprite: function (size, canvas) {\n    return makeSprite(size, canvas, function (ctx) {\n      var halfSize = size / 2;\n      ctx.beginPath();\n      ctx.arc(halfSize, halfSize, 60, 0, Math.PI * 2, false);\n      ctx.closePath();\n      var gradient = ctx.createRadialGradient(halfSize, halfSize, 0, halfSize, halfSize, halfSize);\n      gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');\n      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n      ctx.fillStyle = gradient;\n      ctx.fill();\n    });\n  }\n};\nexport default spriteUtil;"]},"metadata":{},"sourceType":"module"}