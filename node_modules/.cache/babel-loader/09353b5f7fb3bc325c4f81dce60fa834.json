{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/****************************\n * Vector2 math functions\n ***************************/\nfunction forceAtlas2Worker() {\n  var vec2 = {\n    create: function () {\n      return new Float32Array(2);\n    },\n    dist: function (a, b) {\n      var x = b[0] - a[0];\n      var y = b[1] - a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    len: function (a) {\n      var x = a[0];\n      var y = a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    scaleAndAdd: function (out, a, b, scale) {\n      out[0] = a[0] + b[0] * scale;\n      out[1] = a[1] + b[1] * scale;\n      return out;\n    },\n    scale: function (out, a, b) {\n      out[0] = a[0] * b;\n      out[1] = a[1] * b;\n      return out;\n    },\n    add: function (out, a, b) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n      return out;\n    },\n    sub: function (out, a, b) {\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      return out;\n    },\n    normalize: function (out, a) {\n      var x = a[0];\n      var y = a[1];\n      var len = x * x + y * y;\n\n      if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n      }\n\n      return out;\n    },\n    negate: function (out, a) {\n      out[0] = -a[0];\n      out[1] = -a[1];\n      return out;\n    },\n    copy: function (out, a) {\n      out[0] = a[0];\n      out[1] = a[1];\n      return out;\n    },\n    set: function (out, x, y) {\n      out[0] = x;\n      out[1] = y;\n      return out;\n    }\n  };\n  /****************************\n   * Class: Region\n   ***************************/\n\n  function Region() {\n    this.subRegions = [];\n    this.nSubRegions = 0;\n    this.node = null;\n    this.mass = 0;\n    this.centerOfMass = null;\n    this.bbox = new Float32Array(4);\n    this.size = 0;\n  }\n\n  var regionProto = Region.prototype; // Reset before update\n\n  regionProto.beforeUpdate = function () {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].beforeUpdate();\n    }\n\n    this.mass = 0;\n\n    if (this.centerOfMass) {\n      this.centerOfMass[0] = 0;\n      this.centerOfMass[1] = 0;\n    }\n\n    this.nSubRegions = 0;\n    this.node = null;\n  }; // Clear after update\n\n\n  regionProto.afterUpdate = function () {\n    this.subRegions.length = this.nSubRegions;\n\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].afterUpdate();\n    }\n  };\n\n  regionProto.addNode = function (node) {\n    if (this.nSubRegions === 0) {\n      if (this.node == null) {\n        this.node = node;\n        return;\n      } // Already have node, subdivide self.\n      else {\n        this._addNodeToSubRegion(this.node);\n\n        this.node = null;\n      }\n    }\n\n    this._addNodeToSubRegion(node);\n\n    this._updateCenterOfMass(node);\n  };\n\n  regionProto.findSubRegion = function (x, y) {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      var region = this.subRegions[i];\n\n      if (region.contain(x, y)) {\n        return region;\n      }\n    }\n  };\n\n  regionProto.contain = function (x, y) {\n    return this.bbox[0] <= x && this.bbox[2] >= x && this.bbox[1] <= y && this.bbox[3] >= y;\n  };\n\n  regionProto.setBBox = function (minX, minY, maxX, maxY) {\n    // Min\n    this.bbox[0] = minX;\n    this.bbox[1] = minY; // Max\n\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n    this.size = (maxX - minX + maxY - minY) / 2;\n  };\n\n  regionProto._newSubRegion = function () {\n    var subRegion = this.subRegions[this.nSubRegions];\n\n    if (!subRegion) {\n      subRegion = new Region();\n      this.subRegions[this.nSubRegions] = subRegion;\n    }\n\n    this.nSubRegions++;\n    return subRegion;\n  };\n\n  regionProto._addNodeToSubRegion = function (node) {\n    var subRegion = this.findSubRegion(node.position[0], node.position[1]);\n    var bbox = this.bbox;\n\n    if (!subRegion) {\n      var cx = (bbox[0] + bbox[2]) / 2;\n      var cy = (bbox[1] + bbox[3]) / 2;\n      var w = (bbox[2] - bbox[0]) / 2;\n      var h = (bbox[3] - bbox[1]) / 2;\n      var xi = node.position[0] >= cx ? 1 : 0;\n      var yi = node.position[1] >= cy ? 1 : 0;\n\n      var subRegion = this._newSubRegion(); // Min\n\n\n      subRegion.setBBox( // Min\n      xi * w + bbox[0], yi * h + bbox[1], // Max\n      (xi + 1) * w + bbox[0], (yi + 1) * h + bbox[1]);\n    }\n\n    subRegion.addNode(node);\n  };\n\n  regionProto._updateCenterOfMass = function (node) {\n    // Incrementally update\n    if (this.centerOfMass == null) {\n      this.centerOfMass = new Float32Array(2);\n    }\n\n    var x = this.centerOfMass[0] * this.mass;\n    var y = this.centerOfMass[1] * this.mass;\n    x += node.position[0] * node.mass;\n    y += node.position[1] * node.mass;\n    this.mass += node.mass;\n    this.centerOfMass[0] = x / this.mass;\n    this.centerOfMass[1] = y / this.mass;\n  };\n  /****************************\n   * Class: Graph Node\n   ***************************/\n\n\n  function GraphNode() {\n    this.position = new Float32Array(2);\n    this.force = vec2.create();\n    this.forcePrev = vec2.create(); // If repulsionByDegree is true\n    //  mass = inDegree + outDegree + 1\n    // Else\n    //  mass is manually set\n\n    this.mass = 1;\n    this.inDegree = 0;\n    this.outDegree = 0; // Optional\n    // this.size = 1;\n  }\n  /****************************\n   * Class: Graph Edge\n   ***************************/\n\n\n  function GraphEdge(source, target) {\n    this.source = source;\n    this.target = target;\n    this.weight = 1;\n  }\n  /****************************\n   * Class: ForceStlas2\n   ***************************/\n\n\n  function ForceAtlas2() {\n    //-------------\n    // Configs\n    // If auto settings is true\n    //  barnesHutOptimize,\n    //  barnesHutTheta,\n    //  scaling,\n    //  jitterTolerence\n    // Will be set by the system automatically\n    //  preventOverlap will be set false\n    //  if node size is not given\n    this.autoSettings = true; // Barnes Hut\n    // http://arborjs.org/docs/barnes-hut\n\n    this.barnesHutOptimize = true;\n    this.barnesHutTheta = 1.5; // Force Atlas2 Configs\n\n    this.repulsionByDegree = true;\n    this.linLogMode = false;\n    this.strongGravityMode = false;\n    this.gravity = 1.0;\n    this.scaling = 1.0;\n    this.edgeWeightInfluence = 1.0;\n    this.jitterTolerence = 0.1; // TODO\n\n    this.preventOverlap = false;\n    this.dissuadeHubs = false; //\n\n    this.rootRegion = new Region();\n    this.rootRegion.centerOfMass = vec2.create();\n    this.nodes = [];\n    this.edges = [];\n    this.bbox = new Float32Array(4);\n    this.gravityCenter = null;\n    this._massArr = null;\n    this._swingingArr = null;\n    this._sizeArr = null;\n    this._globalSpeed = 0;\n  }\n\n  var forceAtlas2Proto = ForceAtlas2.prototype;\n\n  forceAtlas2Proto.initNodes = function (positionArr, massArr, sizeArr) {\n    var nNodes = massArr.length;\n    this.nodes.length = 0;\n    var haveSize = typeof sizeArr != 'undefined';\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = new GraphNode();\n      node.position[0] = positionArr[i * 2];\n      node.position[1] = positionArr[i * 2 + 1];\n      node.mass = massArr[i];\n\n      if (haveSize) {\n        node.size = sizeArr[i];\n      }\n\n      this.nodes.push(node);\n    }\n\n    this._massArr = massArr;\n    this._swingingArr = new Float32Array(nNodes);\n\n    if (haveSize) {\n      this._sizeArr = sizeArr;\n    }\n  };\n\n  forceAtlas2Proto.initEdges = function (edgeArr, edgeWeightArr) {\n    var nEdges = edgeArr.length / 2;\n    this.edges.length = 0;\n\n    for (var i = 0; i < nEdges; i++) {\n      var sIdx = edgeArr[i * 2];\n      var tIdx = edgeArr[i * 2 + 1];\n      var sNode = this.nodes[sIdx];\n      var tNode = this.nodes[tIdx];\n\n      if (!sNode || !tNode) {\n        console.error('Node not exists, try initNodes before initEdges');\n        return;\n      }\n\n      sNode.outDegree++;\n      tNode.inDegree++;\n      var edge = new GraphEdge(sNode, tNode);\n\n      if (edgeWeightArr) {\n        edge.weight = edgeWeightArr[i];\n      }\n\n      this.edges.push(edge);\n    }\n  };\n\n  forceAtlas2Proto.updateSettings = function () {\n    if (this.repulsionByDegree) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = node.inDegree + node.outDegree + 1;\n      }\n    } else {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = this._massArr[i];\n      }\n    }\n  };\n\n  forceAtlas2Proto.update = function () {\n    var nNodes = this.nodes.length;\n    this.updateSettings();\n    this.updateBBox(); // Update region\n\n    if (this.barnesHutOptimize) {\n      this.rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]);\n      this.rootRegion.beforeUpdate();\n\n      for (var i = 0; i < nNodes; i++) {\n        this.rootRegion.addNode(this.nodes[i]);\n      }\n\n      this.rootRegion.afterUpdate();\n    } // Reset forces\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      vec2.copy(node.forcePrev, node.force);\n      vec2.set(node.force, 0, 0);\n    } // Compute forces\n    // Repulsion\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var na = this.nodes[i];\n\n      if (this.barnesHutOptimize) {\n        this.applyRegionToNodeRepulsion(this.rootRegion, na);\n      } else {\n        for (var j = i + 1; j < nNodes; j++) {\n          var nb = this.nodes[j];\n          this.applyNodeToNodeRepulsion(na, nb, false);\n        }\n      } // Gravity\n\n\n      if (this.gravity > 0) {\n        if (this.strongGravityMode) {\n          this.applyNodeStrongGravity(na);\n        } else {\n          this.applyNodeGravity(na);\n        }\n      }\n    } // Attraction\n\n\n    for (var i = 0; i < this.edges.length; i++) {\n      this.applyEdgeAttraction(this.edges[i]);\n    } // Handle swinging\n\n\n    var swingWeightedSum = 0;\n    var tractionWeightedSum = 0;\n    var tmp = vec2.create();\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = vec2.dist(node.force, node.forcePrev);\n      swingWeightedSum += swing * node.mass;\n      vec2.add(tmp, node.force, node.forcePrev);\n      var traction = vec2.len(tmp) * 0.5;\n      tractionWeightedSum += traction * node.mass; // Save the value for using later\n\n      this._swingingArr[i] = swing;\n    }\n\n    var globalSpeed = this.jitterTolerence * this.jitterTolerence * tractionWeightedSum / swingWeightedSum; // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.\n    // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).\n\n    if (this._globalSpeed > 0) {\n      globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;\n    }\n\n    this._globalSpeed = globalSpeed; // Apply forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = this._swingingArr[i];\n      var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing)); // Additional constraint to prevent local speed gets too high\n\n      var df = vec2.len(node.force);\n\n      if (df > 0) {\n        speed = Math.min(df * speed, 10) / df;\n        vec2.scaleAndAdd(node.position, node.position, node.force, speed);\n      }\n    }\n  };\n\n  forceAtlas2Proto.applyRegionToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyRegionToNodeRepulsion(region, node) {\n      if (region.node) {\n        // Region is a leaf\n        this.applyNodeToNodeRepulsion(region.node, node, true);\n      } else {\n        vec2.sub(v, node.position, region.centerOfMass);\n        var d2 = v[0] * v[0] + v[1] * v[1];\n\n        if (d2 > this.barnesHutTheta * region.size * region.size) {\n          var factor = this.scaling * node.mass * region.mass / d2;\n          vec2.scaleAndAdd(node.force, node.force, v, factor);\n        } else {\n          for (var i = 0; i < region.nSubRegions; i++) {\n            this.applyRegionToNodeRepulsion(region.subRegions[i], node);\n          }\n        }\n      }\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyNodeToNodeRepulsion(na, nb, oneWay) {\n      if (na == nb) {\n        return;\n      }\n\n      vec2.sub(v, na.position, nb.position);\n      var d2 = v[0] * v[0] + v[1] * v[1]; // PENDING\n\n      if (d2 === 0) {\n        return;\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        var d = Math.sqrt(d2);\n        d = d - na.size - nb.size;\n\n        if (d > 0) {\n          factor = this.scaling * na.mass * nb.mass / (d * d);\n        } else if (d < 0) {\n          // A stronger repulsion if overlap\n          factor = this.scaling * 100 * na.mass * nb.mass;\n        } else {\n          // No repulsion\n          return;\n        }\n      } else {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = this.scaling * na.mass * nb.mass / d2;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyEdgeAttraction = function () {\n    var v = vec2.create();\n    return function applyEdgeAttraction(edge) {\n      var na = edge.source;\n      var nb = edge.target;\n      vec2.sub(v, na.position, nb.position);\n      var d = vec2.len(v);\n      var w;\n\n      if (this.edgeWeightInfluence === 0) {\n        w = 1;\n      } else if (this.edgeWeightInfluence === 1) {\n        w = edge.weight;\n      } else {\n        w = Math.pow(edge.weight, this.edgeWeightInfluence);\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        d = d - na.size - nb.size;\n\n        if (d <= 0) {\n          // No attraction\n          return;\n        }\n      }\n\n      if (this.linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = -w * Math.log(d + 1) / (d + 1);\n      } else {\n        factor = -w;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      var d = vec2.len(v);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeStrongGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);\n    };\n  }();\n\n  forceAtlas2Proto.updateBBox = function () {\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      var pos = this.nodes[i].position;\n      minX = Math.min(minX, pos[0]);\n      minY = Math.min(minY, pos[1]);\n      maxX = Math.max(maxX, pos[0]);\n      maxY = Math.max(maxY, pos[1]);\n    }\n\n    this.bbox[0] = minX;\n    this.bbox[1] = minY;\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n  };\n\n  forceAtlas2Proto.getGlobalSpeed = function () {\n    return this._globalSpeed;\n  };\n  /****************************\n   * Main process\n   ***************************/\n\n\n  var forceAtlas2 = null;\n\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        forceAtlas2 = new ForceAtlas2();\n        forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);\n        forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);\n        break;\n\n      case 'updateConfig':\n        if (forceAtlas2) {\n          for (var name in e.data.config) {\n            forceAtlas2[name] = e.data.config[name];\n          }\n        }\n\n        break;\n\n      case 'update':\n        var steps = e.data.steps;\n\n        if (forceAtlas2) {\n          for (var i = 0; i < steps; i++) {\n            forceAtlas2.update();\n          }\n\n          var nNodes = forceAtlas2.nodes.length;\n          var positionArr = new Float32Array(nNodes * 2); // Callback\n\n          for (var i = 0; i < nNodes; i++) {\n            var node = forceAtlas2.nodes[i];\n            positionArr[i * 2] = node.position[0];\n            positionArr[i * 2 + 1] = node.position[1];\n          }\n\n          self.postMessage({\n            buffer: positionArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [positionArr.buffer]);\n        } else {\n          // Not initialzied yet\n          var emptyArr = new Float32Array(); // Post transfer object\n\n          self.postMessage({\n            buffer: emptyArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [emptyArr.buffer]);\n        }\n\n        break;\n    }\n  };\n}\n\nexport default forceAtlas2Worker;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/graphGL/forceAtlas2Worker.js"],"names":["forceAtlas2Worker","vec2","create","Float32Array","dist","a","b","x","y","Math","sqrt","len","scaleAndAdd","out","scale","add","sub","normalize","negate","copy","set","Region","subRegions","nSubRegions","node","mass","centerOfMass","bbox","size","regionProto","prototype","beforeUpdate","i","afterUpdate","length","addNode","_addNodeToSubRegion","_updateCenterOfMass","findSubRegion","region","contain","setBBox","minX","minY","maxX","maxY","_newSubRegion","subRegion","position","cx","cy","w","h","xi","yi","GraphNode","force","forcePrev","inDegree","outDegree","GraphEdge","source","target","weight","ForceAtlas2","autoSettings","barnesHutOptimize","barnesHutTheta","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","rootRegion","nodes","edges","gravityCenter","_massArr","_swingingArr","_sizeArr","_globalSpeed","forceAtlas2Proto","initNodes","positionArr","massArr","sizeArr","nNodes","haveSize","push","initEdges","edgeArr","edgeWeightArr","nEdges","sIdx","tIdx","sNode","tNode","console","error","edge","updateSettings","update","updateBBox","na","applyRegionToNodeRepulsion","j","nb","applyNodeToNodeRepulsion","applyNodeStrongGravity","applyNodeGravity","applyEdgeAttraction","swingWeightedSum","tractionWeightedSum","tmp","swing","traction","globalSpeed","min","speed","df","v","d2","factor","oneWay","d","pow","log","Infinity","pos","max","getGlobalSpeed","forceAtlas2","self","onmessage","e","data","cmd","nodesPosition","nodesMass","nodesSize","edgesWeight","name","config","steps","postMessage","buffer","emptyArr"],"mappings":"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","sourcesContent":["/****************************\n * Vector2 math functions\n ***************************/\nfunction forceAtlas2Worker() {\n  var vec2 = {\n    create: function () {\n      return new Float32Array(2);\n    },\n    dist: function (a, b) {\n      var x = b[0] - a[0];\n      var y = b[1] - a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    len: function (a) {\n      var x = a[0];\n      var y = a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    scaleAndAdd: function (out, a, b, scale) {\n      out[0] = a[0] + b[0] * scale;\n      out[1] = a[1] + b[1] * scale;\n      return out;\n    },\n    scale: function (out, a, b) {\n      out[0] = a[0] * b;\n      out[1] = a[1] * b;\n      return out;\n    },\n    add: function (out, a, b) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n      return out;\n    },\n    sub: function (out, a, b) {\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      return out;\n    },\n    normalize: function (out, a) {\n      var x = a[0];\n      var y = a[1];\n      var len = x * x + y * y;\n\n      if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n      }\n\n      return out;\n    },\n    negate: function (out, a) {\n      out[0] = -a[0];\n      out[1] = -a[1];\n      return out;\n    },\n    copy: function (out, a) {\n      out[0] = a[0];\n      out[1] = a[1];\n      return out;\n    },\n    set: function (out, x, y) {\n      out[0] = x;\n      out[1] = y;\n      return out;\n    }\n  };\n  /****************************\n   * Class: Region\n   ***************************/\n\n  function Region() {\n    this.subRegions = [];\n    this.nSubRegions = 0;\n    this.node = null;\n    this.mass = 0;\n    this.centerOfMass = null;\n    this.bbox = new Float32Array(4);\n    this.size = 0;\n  }\n\n  var regionProto = Region.prototype; // Reset before update\n\n  regionProto.beforeUpdate = function () {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].beforeUpdate();\n    }\n\n    this.mass = 0;\n\n    if (this.centerOfMass) {\n      this.centerOfMass[0] = 0;\n      this.centerOfMass[1] = 0;\n    }\n\n    this.nSubRegions = 0;\n    this.node = null;\n  }; // Clear after update\n\n\n  regionProto.afterUpdate = function () {\n    this.subRegions.length = this.nSubRegions;\n\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].afterUpdate();\n    }\n  };\n\n  regionProto.addNode = function (node) {\n    if (this.nSubRegions === 0) {\n      if (this.node == null) {\n        this.node = node;\n        return;\n      } // Already have node, subdivide self.\n      else {\n          this._addNodeToSubRegion(this.node);\n\n          this.node = null;\n        }\n    }\n\n    this._addNodeToSubRegion(node);\n\n    this._updateCenterOfMass(node);\n  };\n\n  regionProto.findSubRegion = function (x, y) {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      var region = this.subRegions[i];\n\n      if (region.contain(x, y)) {\n        return region;\n      }\n    }\n  };\n\n  regionProto.contain = function (x, y) {\n    return this.bbox[0] <= x && this.bbox[2] >= x && this.bbox[1] <= y && this.bbox[3] >= y;\n  };\n\n  regionProto.setBBox = function (minX, minY, maxX, maxY) {\n    // Min\n    this.bbox[0] = minX;\n    this.bbox[1] = minY; // Max\n\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n    this.size = (maxX - minX + maxY - minY) / 2;\n  };\n\n  regionProto._newSubRegion = function () {\n    var subRegion = this.subRegions[this.nSubRegions];\n\n    if (!subRegion) {\n      subRegion = new Region();\n      this.subRegions[this.nSubRegions] = subRegion;\n    }\n\n    this.nSubRegions++;\n    return subRegion;\n  };\n\n  regionProto._addNodeToSubRegion = function (node) {\n    var subRegion = this.findSubRegion(node.position[0], node.position[1]);\n    var bbox = this.bbox;\n\n    if (!subRegion) {\n      var cx = (bbox[0] + bbox[2]) / 2;\n      var cy = (bbox[1] + bbox[3]) / 2;\n      var w = (bbox[2] - bbox[0]) / 2;\n      var h = (bbox[3] - bbox[1]) / 2;\n      var xi = node.position[0] >= cx ? 1 : 0;\n      var yi = node.position[1] >= cy ? 1 : 0;\n\n      var subRegion = this._newSubRegion(); // Min\n\n\n      subRegion.setBBox( // Min\n      xi * w + bbox[0], yi * h + bbox[1], // Max\n      (xi + 1) * w + bbox[0], (yi + 1) * h + bbox[1]);\n    }\n\n    subRegion.addNode(node);\n  };\n\n  regionProto._updateCenterOfMass = function (node) {\n    // Incrementally update\n    if (this.centerOfMass == null) {\n      this.centerOfMass = new Float32Array(2);\n    }\n\n    var x = this.centerOfMass[0] * this.mass;\n    var y = this.centerOfMass[1] * this.mass;\n    x += node.position[0] * node.mass;\n    y += node.position[1] * node.mass;\n    this.mass += node.mass;\n    this.centerOfMass[0] = x / this.mass;\n    this.centerOfMass[1] = y / this.mass;\n  };\n  /****************************\n   * Class: Graph Node\n   ***************************/\n\n\n  function GraphNode() {\n    this.position = new Float32Array(2);\n    this.force = vec2.create();\n    this.forcePrev = vec2.create(); // If repulsionByDegree is true\n    //  mass = inDegree + outDegree + 1\n    // Else\n    //  mass is manually set\n\n    this.mass = 1;\n    this.inDegree = 0;\n    this.outDegree = 0; // Optional\n    // this.size = 1;\n  }\n  /****************************\n   * Class: Graph Edge\n   ***************************/\n\n\n  function GraphEdge(source, target) {\n    this.source = source;\n    this.target = target;\n    this.weight = 1;\n  }\n  /****************************\n   * Class: ForceStlas2\n   ***************************/\n\n\n  function ForceAtlas2() {\n    //-------------\n    // Configs\n    // If auto settings is true\n    //  barnesHutOptimize,\n    //  barnesHutTheta,\n    //  scaling,\n    //  jitterTolerence\n    // Will be set by the system automatically\n    //  preventOverlap will be set false\n    //  if node size is not given\n    this.autoSettings = true; // Barnes Hut\n    // http://arborjs.org/docs/barnes-hut\n\n    this.barnesHutOptimize = true;\n    this.barnesHutTheta = 1.5; // Force Atlas2 Configs\n\n    this.repulsionByDegree = true;\n    this.linLogMode = false;\n    this.strongGravityMode = false;\n    this.gravity = 1.0;\n    this.scaling = 1.0;\n    this.edgeWeightInfluence = 1.0;\n    this.jitterTolerence = 0.1; // TODO\n\n    this.preventOverlap = false;\n    this.dissuadeHubs = false; //\n\n    this.rootRegion = new Region();\n    this.rootRegion.centerOfMass = vec2.create();\n    this.nodes = [];\n    this.edges = [];\n    this.bbox = new Float32Array(4);\n    this.gravityCenter = null;\n    this._massArr = null;\n    this._swingingArr = null;\n    this._sizeArr = null;\n    this._globalSpeed = 0;\n  }\n\n  var forceAtlas2Proto = ForceAtlas2.prototype;\n\n  forceAtlas2Proto.initNodes = function (positionArr, massArr, sizeArr) {\n    var nNodes = massArr.length;\n    this.nodes.length = 0;\n    var haveSize = typeof sizeArr != 'undefined';\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = new GraphNode();\n      node.position[0] = positionArr[i * 2];\n      node.position[1] = positionArr[i * 2 + 1];\n      node.mass = massArr[i];\n\n      if (haveSize) {\n        node.size = sizeArr[i];\n      }\n\n      this.nodes.push(node);\n    }\n\n    this._massArr = massArr;\n    this._swingingArr = new Float32Array(nNodes);\n\n    if (haveSize) {\n      this._sizeArr = sizeArr;\n    }\n  };\n\n  forceAtlas2Proto.initEdges = function (edgeArr, edgeWeightArr) {\n    var nEdges = edgeArr.length / 2;\n    this.edges.length = 0;\n\n    for (var i = 0; i < nEdges; i++) {\n      var sIdx = edgeArr[i * 2];\n      var tIdx = edgeArr[i * 2 + 1];\n      var sNode = this.nodes[sIdx];\n      var tNode = this.nodes[tIdx];\n\n      if (!sNode || !tNode) {\n        console.error('Node not exists, try initNodes before initEdges');\n        return;\n      }\n\n      sNode.outDegree++;\n      tNode.inDegree++;\n      var edge = new GraphEdge(sNode, tNode);\n\n      if (edgeWeightArr) {\n        edge.weight = edgeWeightArr[i];\n      }\n\n      this.edges.push(edge);\n    }\n  };\n\n  forceAtlas2Proto.updateSettings = function () {\n    if (this.repulsionByDegree) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = node.inDegree + node.outDegree + 1;\n      }\n    } else {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = this._massArr[i];\n      }\n    }\n  };\n\n  forceAtlas2Proto.update = function () {\n    var nNodes = this.nodes.length;\n    this.updateSettings();\n    this.updateBBox(); // Update region\n\n    if (this.barnesHutOptimize) {\n      this.rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]);\n      this.rootRegion.beforeUpdate();\n\n      for (var i = 0; i < nNodes; i++) {\n        this.rootRegion.addNode(this.nodes[i]);\n      }\n\n      this.rootRegion.afterUpdate();\n    } // Reset forces\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      vec2.copy(node.forcePrev, node.force);\n      vec2.set(node.force, 0, 0);\n    } // Compute forces\n    // Repulsion\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var na = this.nodes[i];\n\n      if (this.barnesHutOptimize) {\n        this.applyRegionToNodeRepulsion(this.rootRegion, na);\n      } else {\n        for (var j = i + 1; j < nNodes; j++) {\n          var nb = this.nodes[j];\n          this.applyNodeToNodeRepulsion(na, nb, false);\n        }\n      } // Gravity\n\n\n      if (this.gravity > 0) {\n        if (this.strongGravityMode) {\n          this.applyNodeStrongGravity(na);\n        } else {\n          this.applyNodeGravity(na);\n        }\n      }\n    } // Attraction\n\n\n    for (var i = 0; i < this.edges.length; i++) {\n      this.applyEdgeAttraction(this.edges[i]);\n    } // Handle swinging\n\n\n    var swingWeightedSum = 0;\n    var tractionWeightedSum = 0;\n    var tmp = vec2.create();\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = vec2.dist(node.force, node.forcePrev);\n      swingWeightedSum += swing * node.mass;\n      vec2.add(tmp, node.force, node.forcePrev);\n      var traction = vec2.len(tmp) * 0.5;\n      tractionWeightedSum += traction * node.mass; // Save the value for using later\n\n      this._swingingArr[i] = swing;\n    }\n\n    var globalSpeed = this.jitterTolerence * this.jitterTolerence * tractionWeightedSum / swingWeightedSum; // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.\n    // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).\n\n    if (this._globalSpeed > 0) {\n      globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;\n    }\n\n    this._globalSpeed = globalSpeed; // Apply forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = this._swingingArr[i];\n      var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing)); // Additional constraint to prevent local speed gets too high\n\n      var df = vec2.len(node.force);\n\n      if (df > 0) {\n        speed = Math.min(df * speed, 10) / df;\n        vec2.scaleAndAdd(node.position, node.position, node.force, speed);\n      }\n    }\n  };\n\n  forceAtlas2Proto.applyRegionToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyRegionToNodeRepulsion(region, node) {\n      if (region.node) {\n        // Region is a leaf\n        this.applyNodeToNodeRepulsion(region.node, node, true);\n      } else {\n        vec2.sub(v, node.position, region.centerOfMass);\n        var d2 = v[0] * v[0] + v[1] * v[1];\n\n        if (d2 > this.barnesHutTheta * region.size * region.size) {\n          var factor = this.scaling * node.mass * region.mass / d2;\n          vec2.scaleAndAdd(node.force, node.force, v, factor);\n        } else {\n          for (var i = 0; i < region.nSubRegions; i++) {\n            this.applyRegionToNodeRepulsion(region.subRegions[i], node);\n          }\n        }\n      }\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyNodeToNodeRepulsion(na, nb, oneWay) {\n      if (na == nb) {\n        return;\n      }\n\n      vec2.sub(v, na.position, nb.position);\n      var d2 = v[0] * v[0] + v[1] * v[1]; // PENDING\n\n      if (d2 === 0) {\n        return;\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        var d = Math.sqrt(d2);\n        d = d - na.size - nb.size;\n\n        if (d > 0) {\n          factor = this.scaling * na.mass * nb.mass / (d * d);\n        } else if (d < 0) {\n          // A stronger repulsion if overlap\n          factor = this.scaling * 100 * na.mass * nb.mass;\n        } else {\n          // No repulsion\n          return;\n        }\n      } else {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = this.scaling * na.mass * nb.mass / d2;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyEdgeAttraction = function () {\n    var v = vec2.create();\n    return function applyEdgeAttraction(edge) {\n      var na = edge.source;\n      var nb = edge.target;\n      vec2.sub(v, na.position, nb.position);\n      var d = vec2.len(v);\n      var w;\n\n      if (this.edgeWeightInfluence === 0) {\n        w = 1;\n      } else if (this.edgeWeightInfluence === 1) {\n        w = edge.weight;\n      } else {\n        w = Math.pow(edge.weight, this.edgeWeightInfluence);\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        d = d - na.size - nb.size;\n\n        if (d <= 0) {\n          // No attraction\n          return;\n        }\n      }\n\n      if (this.linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = -w * Math.log(d + 1) / (d + 1);\n      } else {\n        factor = -w;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      var d = vec2.len(v);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeStrongGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);\n    };\n  }();\n\n  forceAtlas2Proto.updateBBox = function () {\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      var pos = this.nodes[i].position;\n      minX = Math.min(minX, pos[0]);\n      minY = Math.min(minY, pos[1]);\n      maxX = Math.max(maxX, pos[0]);\n      maxY = Math.max(maxY, pos[1]);\n    }\n\n    this.bbox[0] = minX;\n    this.bbox[1] = minY;\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n  };\n\n  forceAtlas2Proto.getGlobalSpeed = function () {\n    return this._globalSpeed;\n  };\n  /****************************\n   * Main process\n   ***************************/\n\n\n  var forceAtlas2 = null;\n\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        forceAtlas2 = new ForceAtlas2();\n        forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);\n        forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);\n        break;\n\n      case 'updateConfig':\n        if (forceAtlas2) {\n          for (var name in e.data.config) {\n            forceAtlas2[name] = e.data.config[name];\n          }\n        }\n\n        break;\n\n      case 'update':\n        var steps = e.data.steps;\n\n        if (forceAtlas2) {\n          for (var i = 0; i < steps; i++) {\n            forceAtlas2.update();\n          }\n\n          var nNodes = forceAtlas2.nodes.length;\n          var positionArr = new Float32Array(nNodes * 2); // Callback\n\n          for (var i = 0; i < nNodes; i++) {\n            var node = forceAtlas2.nodes[i];\n            positionArr[i * 2] = node.position[0];\n            positionArr[i * 2 + 1] = node.position[1];\n          }\n\n          self.postMessage({\n            buffer: positionArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [positionArr.buffer]);\n        } else {\n          // Not initialzied yet\n          var emptyArr = new Float32Array(); // Post transfer object\n\n          self.postMessage({\n            buffer: emptyArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [emptyArr.buffer]);\n        }\n\n        break;\n    }\n  };\n}\n\nexport default forceAtlas2Worker;"]},"metadata":{},"sourceType":"module"}