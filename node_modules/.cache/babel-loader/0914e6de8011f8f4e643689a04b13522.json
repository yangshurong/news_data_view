{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nexport default {\n  needsSortVertices: function needsSortVertices() {\n    return this.sortVertices;\n  },\n  needsSortVerticesProgressively: function needsSortVerticesProgressively() {\n    return this.needsSortVertices() && this.vertexCount >= 2e4;\n  },\n  doSortVertices: function doSortVertices(cameraPos, frame) {\n    var indices = this.indices;\n    var p = vec3.create();\n\n    if (!indices) {\n      indices = this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.vertexCount) : new Uint16Array(this.vertexCount);\n\n      for (var i = 0; i < indices.length; i++) {\n        indices[i] = i;\n      }\n    } // Do progressive quick sort.\n\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n      var noneCount = 0;\n\n      if (!this._zList || this._zList.length !== this.vertexCount) {\n        this._zList = new Float32Array(this.vertexCount);\n      }\n\n      var firstZ;\n\n      for (var i = 0; i < this.vertexCount; i++) {\n        posAttr.get(i, p); // Camera position is in object space\n\n        var z = vec3.sqrDist(p, cameraPos);\n\n        if (isNaN(z)) {\n          // Put far away, NaN value may cause sort slow\n          z = 1e7;\n          noneCount++;\n        }\n\n        if (i === 0) {\n          firstZ = z;\n          z = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          z = z - firstZ;\n        }\n\n        this._zList[i] = z;\n      }\n\n      this._noneCount = noneCount;\n    }\n\n    if (this.vertexCount < 2e4) {\n      // Use simple native sort for simple geometries.\n      if (frame === 0) {\n        this._simpleSort(this._noneCount / this.vertexCount > 0.05);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    this.dirtyIndices();\n  },\n  _simpleSort: function _simpleSort(useNativeQuickSort) {\n    var zList = this._zList;\n    var indices = this.indices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return zList[b] - zList[a];\n    } // When too much value are equal, using native quick sort with three partition..\n    // or the simple quick sort will be nearly O(n*n)\n    // http://stackoverflow.com/questions/5126586/quicksort-complexity-when-all-the-elements-are-same\n    // Otherwise simple quicksort is more effecient than v8 native quick sort when data all different.\n\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(indices, compare);\n    } else {\n      ProgressiveQuickSort.sort(indices, compare, 0, indices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function _progressiveQuickSort(frame) {\n    var zList = this._zList;\n    var indices = this.indices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(indices, function (a, b) {\n      return zList[b] - zList[a];\n    }, frame);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/geometry/verticesSortMixin.js"],"names":["ProgressiveQuickSort","glmatrix","vec3","needsSortVertices","sortVertices","needsSortVerticesProgressively","vertexCount","doSortVertices","cameraPos","frame","indices","p","create","Uint32Array","Uint16Array","i","length","posAttr","attributes","position","array","noneCount","_zList","Float32Array","firstZ","get","z","sqrDist","isNaN","_noneCount","_simpleSort","_progressiveQuickSort","dirtyIndices","useNativeQuickSort","zList","compare","a","b","Array","prototype","sort","call","_quickSort","step"],"mappings":"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","sourcesContent":["import ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nexport default {\n  needsSortVertices: function () {\n    return this.sortVertices;\n  },\n  needsSortVerticesProgressively: function () {\n    return this.needsSortVertices() && this.vertexCount >= 2e4;\n  },\n  doSortVertices: function (cameraPos, frame) {\n    var indices = this.indices;\n    var p = vec3.create();\n\n    if (!indices) {\n      indices = this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.vertexCount) : new Uint16Array(this.vertexCount);\n\n      for (var i = 0; i < indices.length; i++) {\n        indices[i] = i;\n      }\n    } // Do progressive quick sort.\n\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n      var noneCount = 0;\n\n      if (!this._zList || this._zList.length !== this.vertexCount) {\n        this._zList = new Float32Array(this.vertexCount);\n      }\n\n      var firstZ;\n\n      for (var i = 0; i < this.vertexCount; i++) {\n        posAttr.get(i, p); // Camera position is in object space\n\n        var z = vec3.sqrDist(p, cameraPos);\n\n        if (isNaN(z)) {\n          // Put far away, NaN value may cause sort slow\n          z = 1e7;\n          noneCount++;\n        }\n\n        if (i === 0) {\n          firstZ = z;\n          z = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          z = z - firstZ;\n        }\n\n        this._zList[i] = z;\n      }\n\n      this._noneCount = noneCount;\n    }\n\n    if (this.vertexCount < 2e4) {\n      // Use simple native sort for simple geometries.\n      if (frame === 0) {\n        this._simpleSort(this._noneCount / this.vertexCount > 0.05);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var zList = this._zList;\n    var indices = this.indices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return zList[b] - zList[a];\n    } // When too much value are equal, using native quick sort with three partition..\n    // or the simple quick sort will be nearly O(n*n)\n    // http://stackoverflow.com/questions/5126586/quicksort-complexity-when-all-the-elements-are-same\n    // Otherwise simple quicksort is more effecient than v8 native quick sort when data all different.\n\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(indices, compare);\n    } else {\n      ProgressiveQuickSort.sort(indices, compare, 0, indices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var zList = this._zList;\n    var indices = this.indices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(indices, function (a, b) {\n      return zList[b] - zList[a];\n    }, frame);\n  }\n};"]},"metadata":{},"sourceType":"module"}