{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../../component/common/componentViewControlMixin';\nimport componentPostEffectMixin from '../../component/common/componentPostEffectMixin';\nimport componentLightMixin from '../../component/common/componentLightMixin';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nimport formatUtil from '../../util/format';\nimport _formatTooltip from '../common/formatTooltip';\nimport geo3DCreator from '../../coord/geo3DCreator';\n\nfunction transformPolygon(mapbox3DCoordSys, poly) {\n  var newPoly = [];\n\n  for (var k = 0; k < poly.length; k++) {\n    newPoly.push(mapbox3DCoordSys.dataToPoint(poly[k]));\n  }\n\n  return newPoly;\n}\n\nvar Map3DSeries = echarts.SeriesModel.extend({\n  type: 'series.map3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  visualStyleAccessPath: 'itemStyle',\n  optionUpdated: function optionUpdated(newOpt) {\n    newOpt = newOpt || {};\n    var coordSysType = this.get('coordinateSystem');\n\n    if (coordSysType == null || coordSysType === 'geo3D') {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var propsNeedToCheck = ['left', 'top', 'width', 'height', 'boxWidth', 'boxDepth', 'boxHeight', 'light', 'viewControl', 'postEffect', 'temporalSuperSampling', 'environment', 'groundPlane'];\n      var ignoredProperties = [];\n      propsNeedToCheck.forEach(function (propName) {\n        if (newOpt[propName] != null) {\n          ignoredProperties.push(propName);\n        }\n      });\n\n      if (ignoredProperties.length) {\n        console.warn('Property %s in map3D series will be ignored if coordinate system is %s', ignoredProperties.join(', '), coordSysType);\n      }\n    }\n\n    if (this.get('groundPlane.show')) {\n      // Force disable groundPlane if map3D has other coordinate systems.\n      this.option.groundPlane.show = false;\n    } // Reset geo.\n\n\n    this._geo = null;\n  },\n  getInitialData: function getInitialData(option) {\n    option.data = this.getFilledRegions(option.data, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data, {\n      coordDimensions: ['value']\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.data);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    return list;\n  },\n  formatTooltip: function formatTooltip(dataIndex) {\n    return _formatTooltip(this, dataIndex);\n  },\n  getRegionModel: function getRegionModel(idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function getRegionPolygonCoords(idx) {\n    var coordSys = this.coordinateSystem;\n    var name = this.getData().getName(idx);\n\n    if (coordSys.transform) {\n      var region = coordSys.getRegion(name);\n      return region ? region.geometries : [];\n    } else {\n      if (!this._geo) {\n        this._geo = geo3DCreator.createGeo3D(this);\n      }\n\n      var region = this._geo.getRegion(name);\n\n      var ret = [];\n\n      for (var k = 0; k < region.geometries.length; k++) {\n        var geo = region.geometries[k];\n        var interiors = [];\n        var exterior = transformPolygon(coordSys, geo.exterior);\n\n        if (interiors && interiors.length) {\n          for (var m = 0; m < geo.interiors.length; m++) {\n            interiors.push(transformPolygon(coordSys, interiors[m]));\n          }\n        }\n\n        ret.push({\n          interiors: interiors,\n          exterior: exterior\n        });\n      }\n\n      return ret;\n    }\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function getFormattedLabel(dataIndex, status) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status);\n\n    if (text == null) {\n      text = this.getData().getName(dataIndex);\n    }\n\n    return text;\n  },\n  defaultOption: {\n    // Support geo3D, mapbox, maptalks3D\n    coordinateSystem: 'geo3D',\n    // itemStyle: {},\n    // height,\n    // label: {}\n    data: null\n  }\n});\necharts.util.merge(Map3DSeries.prototype, geo3DModelMixin);\necharts.util.merge(Map3DSeries.prototype, componentViewControlMixin);\necharts.util.merge(Map3DSeries.prototype, componentPostEffectMixin);\necharts.util.merge(Map3DSeries.prototype, componentLightMixin);\necharts.util.merge(Map3DSeries.prototype, componentShadingMixin);\nexport default Map3DSeries;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/map3D/Map3DSeries.js"],"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","componentShadingMixin","geo3DModelMixin","formatUtil","formatTooltip","geo3DCreator","transformPolygon","mapbox3DCoordSys","poly","newPoly","k","length","push","dataToPoint","Map3DSeries","SeriesModel","extend","type","layoutMode","coordinateSystem","visualStyleAccessPath","optionUpdated","newOpt","coordSysType","get","process","env","NODE_ENV","propsNeedToCheck","ignoredProperties","forEach","propName","console","warn","join","option","groundPlane","show","_geo","getInitialData","data","getFilledRegions","map","dimensions","helper","createDimensions","coordDimensions","list","List","initData","regionModelMap","each","idx","name","getName","itemModel","getItemModel","_regionModelMap","dataIndex","getRegionModel","getData","Model","getRegionPolygonCoords","coordSys","transform","region","getRegion","geometries","createGeo3D","ret","geo","interiors","exterior","m","getFormattedLabel","status","text","defaultOption","util","merge","prototype"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../../component/common/componentViewControlMixin';\nimport componentPostEffectMixin from '../../component/common/componentPostEffectMixin';\nimport componentLightMixin from '../../component/common/componentLightMixin';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nimport formatUtil from '../../util/format';\nimport formatTooltip from '../common/formatTooltip';\nimport geo3DCreator from '../../coord/geo3DCreator';\n\nfunction transformPolygon(mapbox3DCoordSys, poly) {\n  var newPoly = [];\n\n  for (var k = 0; k < poly.length; k++) {\n    newPoly.push(mapbox3DCoordSys.dataToPoint(poly[k]));\n  }\n\n  return newPoly;\n}\n\nvar Map3DSeries = echarts.SeriesModel.extend({\n  type: 'series.map3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  visualStyleAccessPath: 'itemStyle',\n  optionUpdated: function (newOpt) {\n    newOpt = newOpt || {};\n    var coordSysType = this.get('coordinateSystem');\n\n    if (coordSysType == null || coordSysType === 'geo3D') {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var propsNeedToCheck = ['left', 'top', 'width', 'height', 'boxWidth', 'boxDepth', 'boxHeight', 'light', 'viewControl', 'postEffect', 'temporalSuperSampling', 'environment', 'groundPlane'];\n      var ignoredProperties = [];\n      propsNeedToCheck.forEach(function (propName) {\n        if (newOpt[propName] != null) {\n          ignoredProperties.push(propName);\n        }\n      });\n\n      if (ignoredProperties.length) {\n        console.warn('Property %s in map3D series will be ignored if coordinate system is %s', ignoredProperties.join(', '), coordSysType);\n      }\n    }\n\n    if (this.get('groundPlane.show')) {\n      // Force disable groundPlane if map3D has other coordinate systems.\n      this.option.groundPlane.show = false;\n    } // Reset geo.\n\n\n    this._geo = null;\n  },\n  getInitialData: function (option) {\n    option.data = this.getFilledRegions(option.data, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data, {\n      coordDimensions: ['value']\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.data);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    return list;\n  },\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var coordSys = this.coordinateSystem;\n    var name = this.getData().getName(idx);\n\n    if (coordSys.transform) {\n      var region = coordSys.getRegion(name);\n      return region ? region.geometries : [];\n    } else {\n      if (!this._geo) {\n        this._geo = geo3DCreator.createGeo3D(this);\n      }\n\n      var region = this._geo.getRegion(name);\n\n      var ret = [];\n\n      for (var k = 0; k < region.geometries.length; k++) {\n        var geo = region.geometries[k];\n        var interiors = [];\n        var exterior = transformPolygon(coordSys, geo.exterior);\n\n        if (interiors && interiors.length) {\n          for (var m = 0; m < geo.interiors.length; m++) {\n            interiors.push(transformPolygon(coordSys, interiors[m]));\n          }\n        }\n\n        ret.push({\n          interiors: interiors,\n          exterior: exterior\n        });\n      }\n\n      return ret;\n    }\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status);\n\n    if (text == null) {\n      text = this.getData().getName(dataIndex);\n    }\n\n    return text;\n  },\n  defaultOption: {\n    // Support geo3D, mapbox, maptalks3D\n    coordinateSystem: 'geo3D',\n    // itemStyle: {},\n    // height,\n    // label: {}\n    data: null\n  }\n});\necharts.util.merge(Map3DSeries.prototype, geo3DModelMixin);\necharts.util.merge(Map3DSeries.prototype, componentViewControlMixin);\necharts.util.merge(Map3DSeries.prototype, componentPostEffectMixin);\necharts.util.merge(Map3DSeries.prototype, componentLightMixin);\necharts.util.merge(Map3DSeries.prototype, componentShadingMixin);\nexport default Map3DSeries;"]},"metadata":{},"sourceType":"module"}