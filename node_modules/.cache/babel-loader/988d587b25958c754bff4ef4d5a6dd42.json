{"ast":null,"code":"import Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport cubemapUtil from 'claygl/src/util/cubemap';\nimport SSRGLSLCode from './SSR.glsl.js';\nShader.import(SSRGLSLCode);\n\nfunction SSRPass(opt) {\n  opt = opt || {};\n  this._ssrPass = new Pass({\n    fragment: Shader.source('ecgl.ssr.main'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blurPass1 = new Pass({\n    fragment: Shader.source('ecgl.ssr.blur'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blurPass2 = new Pass({\n    fragment: Shader.source('ecgl.ssr.blur'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blendPass = new Pass({\n    fragment: Shader.source('clay.compositor.blend')\n  });\n\n  this._blendPass.material.disableTexturesAll();\n\n  this._blendPass.material.enableTexture(['texture1', 'texture2']);\n\n  this._ssrPass.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._ssrPass.setUniform('gBufferTexture2', opt.depthTexture); // this._ssrPass.setUniform('gBufferTexture3', opt.albedoTexture);\n\n\n  this._blurPass1.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._blurPass1.setUniform('gBufferTexture2', opt.depthTexture);\n\n  this._blurPass2.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._blurPass2.setUniform('gBufferTexture2', opt.depthTexture);\n\n  this._blurPass2.material.define('fragment', 'VERTICAL');\n\n  this._blurPass2.material.define('fragment', 'BLEND');\n\n  this._ssrTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._texture2 = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._texture3 = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._prevTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._currentTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._frameBuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._normalDistribution = null;\n  this._totalSamples = 256;\n  this._samplePerFrame = 4;\n\n  this._ssrPass.material.define('fragment', 'SAMPLE_PER_FRAME', this._samplePerFrame);\n\n  this._ssrPass.material.define('fragment', 'TOTAL_SAMPLES', this._totalSamples);\n\n  this._downScale = 1;\n}\n\nSSRPass.prototype.setAmbientCubemap = function (specularCubemap, specularIntensity) {\n  this._ssrPass.material.set('specularCubemap', specularCubemap);\n\n  this._ssrPass.material.set('specularIntensity', specularIntensity);\n\n  var enableSpecularMap = specularCubemap && specularIntensity;\n\n  this._ssrPass.material[enableSpecularMap ? 'enableTexture' : 'disableTexture']('specularCubemap');\n};\n\nSSRPass.prototype.update = function (renderer, camera, sourceTexture, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssrTexture = this._ssrTexture;\n  var texture2 = this._texture2;\n  var texture3 = this._texture3;\n  ssrTexture.width = this._prevTexture.width = this._currentTexture.width = width / this._downScale;\n  ssrTexture.height = this._prevTexture.height = this._currentTexture.height = height / this._downScale;\n  texture2.width = texture3.width = width;\n  texture2.height = texture3.height = height;\n  var frameBuffer = this._frameBuffer;\n  var ssrPass = this._ssrPass;\n  var blurPass1 = this._blurPass1;\n  var blurPass2 = this._blurPass2;\n  var blendPass = this._blendPass;\n  var toViewSpace = new Matrix4();\n  var toWorldSpace = new Matrix4();\n  Matrix4.transpose(toViewSpace, camera.worldTransform);\n  Matrix4.transpose(toWorldSpace, camera.viewMatrix);\n  ssrPass.setUniform('sourceTexture', sourceTexture);\n  ssrPass.setUniform('projection', camera.projectionMatrix.array);\n  ssrPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssrPass.setUniform('toViewSpace', toViewSpace.array);\n  ssrPass.setUniform('toWorldSpace', toWorldSpace.array);\n  ssrPass.setUniform('nearZ', camera.near);\n  var percent = frame / this._totalSamples * this._samplePerFrame;\n  ssrPass.setUniform('jitterOffset', percent);\n  ssrPass.setUniform('sampleOffset', frame * this._samplePerFrame);\n  blurPass1.setUniform('textureSize', [ssrTexture.width, ssrTexture.height]);\n  blurPass2.setUniform('textureSize', [width, height]);\n  blurPass2.setUniform('sourceTexture', sourceTexture);\n  blurPass1.setUniform('projection', camera.projectionMatrix.array);\n  blurPass2.setUniform('projection', camera.projectionMatrix.array);\n  frameBuffer.attach(ssrTexture);\n  frameBuffer.bind(renderer);\n  ssrPass.render(renderer);\n\n  if (this._physicallyCorrect) {\n    frameBuffer.attach(this._currentTexture);\n    blendPass.setUniform('texture1', this._prevTexture);\n    blendPass.setUniform('texture2', ssrTexture);\n    blendPass.material.set({\n      'weight1': frame >= 1 ? 0.95 : 0,\n      'weight2': frame >= 1 ? 0.05 : 1 // weight1: frame >= 1 ? 1 : 0,\n      // weight2: 1\n\n    });\n    blendPass.render(renderer);\n  }\n\n  frameBuffer.attach(texture2);\n  blurPass1.setUniform('texture', this._physicallyCorrect ? this._currentTexture : ssrTexture);\n  blurPass1.render(renderer);\n  frameBuffer.attach(texture3);\n  blurPass2.setUniform('texture', texture2);\n  blurPass2.render(renderer);\n  frameBuffer.unbind(renderer);\n\n  if (this._physicallyCorrect) {\n    var tmp = this._prevTexture;\n    this._prevTexture = this._currentTexture;\n    this._currentTexture = tmp;\n  }\n};\n\nSSRPass.prototype.getTargetTexture = function () {\n  return this._texture3;\n};\n\nSSRPass.prototype.setParameter = function (name, val) {\n  if (name === 'maxIteration') {\n    this._ssrPass.material.define('fragment', 'MAX_ITERATION', val);\n  } else {\n    this._ssrPass.setUniform(name, val);\n  }\n};\n\nSSRPass.prototype.setPhysicallyCorrect = function (isPhysicallyCorrect) {\n  if (isPhysicallyCorrect) {\n    if (!this._normalDistribution) {\n      this._normalDistribution = cubemapUtil.generateNormalDistribution(64, this._totalSamples);\n    }\n\n    this._ssrPass.material.define('fragment', 'PHYSICALLY_CORRECT');\n\n    this._ssrPass.material.set('normalDistribution', this._normalDistribution);\n\n    this._ssrPass.material.set('normalDistributionSize', [64, this._totalSamples]);\n  } else {\n    this._ssrPass.material.undefine('fragment', 'PHYSICALLY_CORRECT');\n  }\n\n  this._physicallyCorrect = isPhysicallyCorrect;\n};\n\nSSRPass.prototype.setSSAOTexture = function (texture) {\n  var blendPass = this._blurPass2;\n\n  if (texture) {\n    blendPass.material.enableTexture('ssaoTex');\n    blendPass.material.set('ssaoTex', texture);\n  } else {\n    blendPass.material.disableTexture('ssaoTex');\n  }\n};\n\nSSRPass.prototype.isFinished = function (frame) {\n  if (this._physicallyCorrect) {\n    return frame > this._totalSamples / this._samplePerFrame;\n  } else {\n    return true;\n  }\n};\n\nSSRPass.prototype.dispose = function (renderer) {\n  this._ssrTexture.dispose(renderer);\n\n  this._texture2.dispose(renderer);\n\n  this._texture3.dispose(renderer);\n\n  this._prevTexture.dispose(renderer);\n\n  this._currentTexture.dispose(renderer);\n\n  this._frameBuffer.dispose(renderer);\n};\n\nexport default SSRPass;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/effect/SSRPass.js"],"names":["Matrix4","Vector3","Texture2D","Texture","Pass","Shader","FrameBuffer","halton","cubemapUtil","SSRGLSLCode","import","SSRPass","opt","_ssrPass","fragment","source","clearColor","_blurPass1","_blurPass2","_blendPass","material","disableTexturesAll","enableTexture","setUniform","normalTexture","depthTexture","define","_ssrTexture","type","HALF_FLOAT","_texture2","_texture3","_prevTexture","_currentTexture","_frameBuffer","depthBuffer","_normalDistribution","_totalSamples","_samplePerFrame","_downScale","prototype","setAmbientCubemap","specularCubemap","specularIntensity","set","enableSpecularMap","update","renderer","camera","sourceTexture","frame","width","getWidth","height","getHeight","ssrTexture","texture2","texture3","frameBuffer","ssrPass","blurPass1","blurPass2","blendPass","toViewSpace","toWorldSpace","transpose","worldTransform","viewMatrix","projectionMatrix","array","invProjectionMatrix","near","percent","attach","bind","render","_physicallyCorrect","unbind","tmp","getTargetTexture","setParameter","name","val","setPhysicallyCorrect","isPhysicallyCorrect","generateNormalDistribution","undefine","setSSAOTexture","texture","disableTexture","isFinished","dispose"],"mappings":"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","sourcesContent":["import Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport cubemapUtil from 'claygl/src/util/cubemap';\nimport SSRGLSLCode from './SSR.glsl.js';\nShader.import(SSRGLSLCode);\n\nfunction SSRPass(opt) {\n  opt = opt || {};\n  this._ssrPass = new Pass({\n    fragment: Shader.source('ecgl.ssr.main'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blurPass1 = new Pass({\n    fragment: Shader.source('ecgl.ssr.blur'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blurPass2 = new Pass({\n    fragment: Shader.source('ecgl.ssr.blur'),\n    clearColor: [0, 0, 0, 0]\n  });\n  this._blendPass = new Pass({\n    fragment: Shader.source('clay.compositor.blend')\n  });\n\n  this._blendPass.material.disableTexturesAll();\n\n  this._blendPass.material.enableTexture(['texture1', 'texture2']);\n\n  this._ssrPass.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._ssrPass.setUniform('gBufferTexture2', opt.depthTexture); // this._ssrPass.setUniform('gBufferTexture3', opt.albedoTexture);\n\n\n  this._blurPass1.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._blurPass1.setUniform('gBufferTexture2', opt.depthTexture);\n\n  this._blurPass2.setUniform('gBufferTexture1', opt.normalTexture);\n\n  this._blurPass2.setUniform('gBufferTexture2', opt.depthTexture);\n\n  this._blurPass2.material.define('fragment', 'VERTICAL');\n\n  this._blurPass2.material.define('fragment', 'BLEND');\n\n  this._ssrTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._texture2 = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._texture3 = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._prevTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._currentTexture = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._frameBuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._normalDistribution = null;\n  this._totalSamples = 256;\n  this._samplePerFrame = 4;\n\n  this._ssrPass.material.define('fragment', 'SAMPLE_PER_FRAME', this._samplePerFrame);\n\n  this._ssrPass.material.define('fragment', 'TOTAL_SAMPLES', this._totalSamples);\n\n  this._downScale = 1;\n}\n\nSSRPass.prototype.setAmbientCubemap = function (specularCubemap, specularIntensity) {\n  this._ssrPass.material.set('specularCubemap', specularCubemap);\n\n  this._ssrPass.material.set('specularIntensity', specularIntensity);\n\n  var enableSpecularMap = specularCubemap && specularIntensity;\n\n  this._ssrPass.material[enableSpecularMap ? 'enableTexture' : 'disableTexture']('specularCubemap');\n};\n\nSSRPass.prototype.update = function (renderer, camera, sourceTexture, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssrTexture = this._ssrTexture;\n  var texture2 = this._texture2;\n  var texture3 = this._texture3;\n  ssrTexture.width = this._prevTexture.width = this._currentTexture.width = width / this._downScale;\n  ssrTexture.height = this._prevTexture.height = this._currentTexture.height = height / this._downScale;\n  texture2.width = texture3.width = width;\n  texture2.height = texture3.height = height;\n  var frameBuffer = this._frameBuffer;\n  var ssrPass = this._ssrPass;\n  var blurPass1 = this._blurPass1;\n  var blurPass2 = this._blurPass2;\n  var blendPass = this._blendPass;\n  var toViewSpace = new Matrix4();\n  var toWorldSpace = new Matrix4();\n  Matrix4.transpose(toViewSpace, camera.worldTransform);\n  Matrix4.transpose(toWorldSpace, camera.viewMatrix);\n  ssrPass.setUniform('sourceTexture', sourceTexture);\n  ssrPass.setUniform('projection', camera.projectionMatrix.array);\n  ssrPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssrPass.setUniform('toViewSpace', toViewSpace.array);\n  ssrPass.setUniform('toWorldSpace', toWorldSpace.array);\n  ssrPass.setUniform('nearZ', camera.near);\n  var percent = frame / this._totalSamples * this._samplePerFrame;\n  ssrPass.setUniform('jitterOffset', percent);\n  ssrPass.setUniform('sampleOffset', frame * this._samplePerFrame);\n  blurPass1.setUniform('textureSize', [ssrTexture.width, ssrTexture.height]);\n  blurPass2.setUniform('textureSize', [width, height]);\n  blurPass2.setUniform('sourceTexture', sourceTexture);\n  blurPass1.setUniform('projection', camera.projectionMatrix.array);\n  blurPass2.setUniform('projection', camera.projectionMatrix.array);\n  frameBuffer.attach(ssrTexture);\n  frameBuffer.bind(renderer);\n  ssrPass.render(renderer);\n\n  if (this._physicallyCorrect) {\n    frameBuffer.attach(this._currentTexture);\n    blendPass.setUniform('texture1', this._prevTexture);\n    blendPass.setUniform('texture2', ssrTexture);\n    blendPass.material.set({\n      'weight1': frame >= 1 ? 0.95 : 0,\n      'weight2': frame >= 1 ? 0.05 : 1 // weight1: frame >= 1 ? 1 : 0,\n      // weight2: 1\n\n    });\n    blendPass.render(renderer);\n  }\n\n  frameBuffer.attach(texture2);\n  blurPass1.setUniform('texture', this._physicallyCorrect ? this._currentTexture : ssrTexture);\n  blurPass1.render(renderer);\n  frameBuffer.attach(texture3);\n  blurPass2.setUniform('texture', texture2);\n  blurPass2.render(renderer);\n  frameBuffer.unbind(renderer);\n\n  if (this._physicallyCorrect) {\n    var tmp = this._prevTexture;\n    this._prevTexture = this._currentTexture;\n    this._currentTexture = tmp;\n  }\n};\n\nSSRPass.prototype.getTargetTexture = function () {\n  return this._texture3;\n};\n\nSSRPass.prototype.setParameter = function (name, val) {\n  if (name === 'maxIteration') {\n    this._ssrPass.material.define('fragment', 'MAX_ITERATION', val);\n  } else {\n    this._ssrPass.setUniform(name, val);\n  }\n};\n\nSSRPass.prototype.setPhysicallyCorrect = function (isPhysicallyCorrect) {\n  if (isPhysicallyCorrect) {\n    if (!this._normalDistribution) {\n      this._normalDistribution = cubemapUtil.generateNormalDistribution(64, this._totalSamples);\n    }\n\n    this._ssrPass.material.define('fragment', 'PHYSICALLY_CORRECT');\n\n    this._ssrPass.material.set('normalDistribution', this._normalDistribution);\n\n    this._ssrPass.material.set('normalDistributionSize', [64, this._totalSamples]);\n  } else {\n    this._ssrPass.material.undefine('fragment', 'PHYSICALLY_CORRECT');\n  }\n\n  this._physicallyCorrect = isPhysicallyCorrect;\n};\n\nSSRPass.prototype.setSSAOTexture = function (texture) {\n  var blendPass = this._blurPass2;\n\n  if (texture) {\n    blendPass.material.enableTexture('ssaoTex');\n    blendPass.material.set('ssaoTex', texture);\n  } else {\n    blendPass.material.disableTexture('ssaoTex');\n  }\n};\n\nSSRPass.prototype.isFinished = function (frame) {\n  if (this._physicallyCorrect) {\n    return frame > this._totalSamples / this._samplePerFrame;\n  } else {\n    return true;\n  }\n};\n\nSSRPass.prototype.dispose = function (renderer) {\n  this._ssrTexture.dispose(renderer);\n\n  this._texture2.dispose(renderer);\n\n  this._texture3.dispose(renderer);\n\n  this._prevTexture.dispose(renderer);\n\n  this._currentTexture.dispose(renderer);\n\n  this._frameBuffer.dispose(renderer);\n};\n\nexport default SSRPass;"]},"metadata":{},"sourceType":"module"}