{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\n\n/**\n * Geometry collecting sprites\n *\n * @module echarts-gl/util/geometry/Sprites\n * @author Yi Shen(https://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport Geometry from 'claygl/src/Geometry';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nvar squareTriangles = [0, 1, 2, 0, 2, 3];\nvar SpritesGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      texcoord: new Geometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),\n      offset: new Geometry.Attribute('offset', 'float', 2),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n}, {\n  resetOffset: function resetOffset() {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n  setSpriteCount: function setSpriteCount(spriteCount) {\n    this._spriteCount = spriteCount;\n    var vertexCount = spriteCount * 4;\n    var triangleCount = spriteCount * 2;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n      this.attributes.offset.init(vertexCount);\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  setSpriteAlign: function setSpriteAlign(spriteOffset, size, align, verticalAlign, margin) {\n    if (align == null) {\n      align = 'left';\n    }\n\n    if (verticalAlign == null) {\n      verticalAlign = 'top';\n    }\n\n    var leftOffset, topOffset, rightOffset, bottomOffset;\n    margin = margin || 0;\n\n    switch (align) {\n      case 'left':\n        leftOffset = margin;\n        rightOffset = size[0] + margin;\n        break;\n\n      case 'center':\n      case 'middle':\n        leftOffset = -size[0] / 2;\n        rightOffset = size[0] / 2;\n        break;\n\n      case 'right':\n        leftOffset = -size[0] - margin;\n        rightOffset = -margin;\n        break;\n    }\n\n    switch (verticalAlign) {\n      case 'bottom':\n        topOffset = margin;\n        bottomOffset = size[1] + margin;\n        break;\n\n      case 'middle':\n        topOffset = -size[1] / 2;\n        bottomOffset = size[1] / 2;\n        break;\n\n      case 'top':\n        topOffset = -size[1] - margin;\n        bottomOffset = -margin;\n        break;\n    } // 3----2\n    // 0----1\n\n\n    var vertexOffset = spriteOffset * 4;\n    var offsetAttr = this.attributes.offset;\n    offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);\n    offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);\n  },\n\n  /**\n   * Add sprite\n   * @param {Array.<number>} position\n   * @param {Array.<number>} size [width, height]\n   * @param {Array.<Array>} coords [leftBottom, rightTop]\n   * @param {string} [align='left'] 'left' 'center' 'right'\n   * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'\n   * @param {number} [screenMargin=0]\n   */\n  addSprite: function addSprite(position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = this._vertexOffset;\n    this.setSprite(this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin);\n\n    for (var i = 0; i < squareTriangles.length; i++) {\n      this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;\n    }\n\n    this._faceOffset += 2;\n    this._vertexOffset += 4;\n    return vertexOffset / 4;\n  },\n  setSprite: function setSprite(spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = spriteOffset * 4;\n    var attributes = this.attributes;\n\n    for (var i = 0; i < 4; i++) {\n      attributes.position.set(vertexOffset + i, position);\n    } // 3----2\n    // 0----1\n\n\n    var texcoordAttr = attributes.texcoord;\n    texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);\n    texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);\n    this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);\n  }\n});\necharts.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);\nexport default SpritesGeometry;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/util/geometry/Sprites.js"],"names":["echarts","Geometry","dynamicConvertMixin","squareTriangles","SpritesGeometry","extend","attributes","position","Attribute","texcoord","offset","color","resetOffset","_vertexOffset","_faceOffset","setSpriteCount","spriteCount","_spriteCount","vertexCount","triangleCount","init","indices","Uint32Array","Uint16Array","setSpriteAlign","spriteOffset","size","align","verticalAlign","margin","leftOffset","topOffset","rightOffset","bottomOffset","vertexOffset","offsetAttr","set","addSprite","coords","screenMargin","setSprite","i","length","texcoordAttr","util","defaults","prototype"],"mappings":"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","sourcesContent":["/**\n * Geometry collecting sprites\n *\n * @module echarts-gl/util/geometry/Sprites\n * @author Yi Shen(https://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport Geometry from 'claygl/src/Geometry';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nvar squareTriangles = [0, 1, 2, 0, 2, 3];\nvar SpritesGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      texcoord: new Geometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),\n      offset: new Geometry.Attribute('offset', 'float', 2),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n}, {\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n  setSpriteCount: function (spriteCount) {\n    this._spriteCount = spriteCount;\n    var vertexCount = spriteCount * 4;\n    var triangleCount = spriteCount * 2;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n      this.attributes.offset.init(vertexCount);\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  setSpriteAlign: function (spriteOffset, size, align, verticalAlign, margin) {\n    if (align == null) {\n      align = 'left';\n    }\n\n    if (verticalAlign == null) {\n      verticalAlign = 'top';\n    }\n\n    var leftOffset, topOffset, rightOffset, bottomOffset;\n    margin = margin || 0;\n\n    switch (align) {\n      case 'left':\n        leftOffset = margin;\n        rightOffset = size[0] + margin;\n        break;\n\n      case 'center':\n      case 'middle':\n        leftOffset = -size[0] / 2;\n        rightOffset = size[0] / 2;\n        break;\n\n      case 'right':\n        leftOffset = -size[0] - margin;\n        rightOffset = -margin;\n        break;\n    }\n\n    switch (verticalAlign) {\n      case 'bottom':\n        topOffset = margin;\n        bottomOffset = size[1] + margin;\n        break;\n\n      case 'middle':\n        topOffset = -size[1] / 2;\n        bottomOffset = size[1] / 2;\n        break;\n\n      case 'top':\n        topOffset = -size[1] - margin;\n        bottomOffset = -margin;\n        break;\n    } // 3----2\n    // 0----1\n\n\n    var vertexOffset = spriteOffset * 4;\n    var offsetAttr = this.attributes.offset;\n    offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);\n    offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);\n  },\n\n  /**\n   * Add sprite\n   * @param {Array.<number>} position\n   * @param {Array.<number>} size [width, height]\n   * @param {Array.<Array>} coords [leftBottom, rightTop]\n   * @param {string} [align='left'] 'left' 'center' 'right'\n   * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'\n   * @param {number} [screenMargin=0]\n   */\n  addSprite: function (position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = this._vertexOffset;\n    this.setSprite(this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin);\n\n    for (var i = 0; i < squareTriangles.length; i++) {\n      this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;\n    }\n\n    this._faceOffset += 2;\n    this._vertexOffset += 4;\n    return vertexOffset / 4;\n  },\n  setSprite: function (spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = spriteOffset * 4;\n    var attributes = this.attributes;\n\n    for (var i = 0; i < 4; i++) {\n      attributes.position.set(vertexOffset + i, position);\n    } // 3----2\n    // 0----1\n\n\n    var texcoordAttr = attributes.texcoord;\n    texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);\n    texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);\n    this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);\n  }\n});\necharts.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);\nexport default SpritesGeometry;"]},"metadata":{},"sourceType":"module"}