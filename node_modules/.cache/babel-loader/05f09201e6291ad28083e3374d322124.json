{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport Globe from './globe/Globe';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\nimport graphicGL from '../util/graphicGL';\n\nfunction getDisplacementData(img, displacementScale) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var width = img.width;\n  var height = img.height;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.drawImage(img, 0, 0, width, height);\n  var rgbaArr = ctx.getImageData(0, 0, width, height).data;\n  var displacementArr = new Float32Array(rgbaArr.length / 4);\n\n  for (var i = 0; i < rgbaArr.length / 4; i++) {\n    var x = rgbaArr[i * 4];\n    displacementArr[i] = x / 255 * displacementScale;\n  }\n\n  return {\n    data: displacementArr,\n    width: width,\n    height: height\n  };\n}\n\nfunction resizeGlobe(globeModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = globeModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  this.radius = globeModel.get('globeRadius');\n  var outerRadius = globeModel.get('globeOuterRadius');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, outerRadius - this.radius);\n  }\n}\n\nfunction updateGlobe(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nvar globeCreator = {\n  dimensions: Globe.prototype.dimensions,\n  create: function (ecModel, api) {\n    var globeList = [];\n    ecModel.eachComponent('globe', function (globeModel) {\n      // FIXME\n      globeModel.__viewGL = globeModel.__viewGL || new ViewGL();\n      var globe = new Globe();\n      globe.viewGL = globeModel.__viewGL;\n      globeModel.coordinateSystem = globe;\n      globe.model = globeModel;\n      globeList.push(globe); // Inject resize\n\n      globe.resize = resizeGlobe;\n      globe.resize(globeModel, api);\n      globe.update = updateGlobe;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'globe') {\n        var globeModel = seriesModel.getReferringComponents('globe').models[0];\n\n        if (!globeModel) {\n          globeModel = ecModel.getComponent('globe');\n        }\n\n        if (!globeModel) {\n          throw new Error('globe \"' + retrieve.firstNotNull(seriesModel.get('globe3DIndex'), seriesModel.get('globe3DId'), 0) + '\" not found');\n        }\n\n        var coordSys = globeModel.coordinateSystem;\n        seriesModel.coordinateSystem = coordSys;\n      }\n    });\n    ecModel.eachComponent('globe', function (globeModel, idx) {\n      var globe = globeModel.coordinateSystem; // Update displacement data\n\n      var displacementTextureValue = globeModel.getDisplacementTexture();\n      var displacementScale = globeModel.getDisplacemenScale();\n\n      if (globeModel.isDisplacementChanged()) {\n        if (globeModel.hasDisplacement()) {\n          var immediateLoaded = true;\n          graphicGL.loadTexture(displacementTextureValue, api, function (texture) {\n            var img = texture.image;\n            var displacementData = getDisplacementData(img, displacementScale);\n            globeModel.setDisplacementData(displacementData.data, displacementData.width, displacementData.height);\n\n            if (!immediateLoaded) {\n              // Update layouts\n              api.dispatchAction({\n                type: 'globeUpdateDisplacment'\n              });\n            }\n          });\n          immediateLoaded = false;\n        } else {\n          globe.setDisplacementData(null, 0, 0);\n        }\n\n        globe.setDisplacementData(globeModel.displacementData, globeModel.displacementWidth, globeModel.displacementHeight);\n      }\n    });\n    return globeList;\n  }\n};\nexport default globeCreator;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/coord/globeCreator.js"],"names":["Globe","echarts","getLayoutRect","ViewGL","retrieve","graphicGL","getDisplacementData","img","displacementScale","canvas","document","createElement","ctx","getContext","width","height","drawImage","rgbaArr","getImageData","data","displacementArr","Float32Array","length","i","x","resizeGlobe","globeModel","api","boxLayoutOption","getBoxLayoutParams","viewport","getWidth","getHeight","y","viewGL","setViewport","getDevicePixelRatio","radius","get","outerRadius","altitudeAxis","setExtent","updateGlobe","ecModel","altitudeDataExtent","Infinity","eachSeries","seriesModel","coordinateSystem","getData","altDims","coordDimToDataDim","altDim","dataExtent","getDataExtent","Math","min","max","isFinite","scale","helper","createScale","type","Axis","resize","model","globeCreator","dimensions","prototype","create","globeList","eachComponent","__viewGL","globe","push","update","getReferringComponents","models","getComponent","Error","firstNotNull","coordSys","idx","displacementTextureValue","getDisplacementTexture","getDisplacemenScale","isDisplacementChanged","hasDisplacement","immediateLoaded","loadTexture","texture","image","displacementData","setDisplacementData","dispatchAction","displacementWidth","displacementHeight"],"mappings":"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","sourcesContent":["import Globe from './globe/Globe';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\nimport graphicGL from '../util/graphicGL';\n\nfunction getDisplacementData(img, displacementScale) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var width = img.width;\n  var height = img.height;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.drawImage(img, 0, 0, width, height);\n  var rgbaArr = ctx.getImageData(0, 0, width, height).data;\n  var displacementArr = new Float32Array(rgbaArr.length / 4);\n\n  for (var i = 0; i < rgbaArr.length / 4; i++) {\n    var x = rgbaArr[i * 4];\n    displacementArr[i] = x / 255 * displacementScale;\n  }\n\n  return {\n    data: displacementArr,\n    width: width,\n    height: height\n  };\n}\n\nfunction resizeGlobe(globeModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = globeModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  this.radius = globeModel.get('globeRadius');\n  var outerRadius = globeModel.get('globeOuterRadius');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, outerRadius - this.radius);\n  }\n}\n\nfunction updateGlobe(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nvar globeCreator = {\n  dimensions: Globe.prototype.dimensions,\n  create: function (ecModel, api) {\n    var globeList = [];\n    ecModel.eachComponent('globe', function (globeModel) {\n      // FIXME\n      globeModel.__viewGL = globeModel.__viewGL || new ViewGL();\n      var globe = new Globe();\n      globe.viewGL = globeModel.__viewGL;\n      globeModel.coordinateSystem = globe;\n      globe.model = globeModel;\n      globeList.push(globe); // Inject resize\n\n      globe.resize = resizeGlobe;\n      globe.resize(globeModel, api);\n      globe.update = updateGlobe;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'globe') {\n        var globeModel = seriesModel.getReferringComponents('globe').models[0];\n\n        if (!globeModel) {\n          globeModel = ecModel.getComponent('globe');\n        }\n\n        if (!globeModel) {\n          throw new Error('globe \"' + retrieve.firstNotNull(seriesModel.get('globe3DIndex'), seriesModel.get('globe3DId'), 0) + '\" not found');\n        }\n\n        var coordSys = globeModel.coordinateSystem;\n        seriesModel.coordinateSystem = coordSys;\n      }\n    });\n    ecModel.eachComponent('globe', function (globeModel, idx) {\n      var globe = globeModel.coordinateSystem; // Update displacement data\n\n      var displacementTextureValue = globeModel.getDisplacementTexture();\n      var displacementScale = globeModel.getDisplacemenScale();\n\n      if (globeModel.isDisplacementChanged()) {\n        if (globeModel.hasDisplacement()) {\n          var immediateLoaded = true;\n          graphicGL.loadTexture(displacementTextureValue, api, function (texture) {\n            var img = texture.image;\n            var displacementData = getDisplacementData(img, displacementScale);\n            globeModel.setDisplacementData(displacementData.data, displacementData.width, displacementData.height);\n\n            if (!immediateLoaded) {\n              // Update layouts\n              api.dispatchAction({\n                type: 'globeUpdateDisplacment'\n              });\n            }\n          });\n          immediateLoaded = false;\n        } else {\n          globe.setDisplacementData(null, 0, 0);\n        }\n\n        globe.setDisplacementData(globeModel.displacementData, globeModel.displacementWidth, globeModel.displacementHeight);\n      }\n    });\n    return globeList;\n  }\n};\nexport default globeCreator;"]},"metadata":{},"sourceType":"module"}