{"ast":null,"code":"/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n * @alias clay.core.LinkedList\n */\nvar LinkedList = function () {\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n  this.head = null;\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n\n  this.tail = null;\n  this._length = 0;\n};\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\n\n\nLinkedList.prototype.insert = function (val) {\n  var entry = new LinkedList.Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n/**\n * Insert a new value at idx\n * @param {number} idx\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\n\n\nLinkedList.prototype.insertAt = function (idx, val) {\n  if (idx < 0) {\n    return;\n  }\n\n  var next = this.head;\n  var cursor = 0;\n\n  while (next && cursor != idx) {\n    next = next.next;\n    cursor++;\n  }\n\n  if (next) {\n    var entry = new LinkedList.Entry(val);\n    var prev = next.prev;\n\n    if (!prev) {\n      //next is head\n      this.head = entry;\n    } else {\n      prev.next = entry;\n      entry.prev = prev;\n    }\n\n    entry.next = next;\n    next.prev = entry;\n  } else {\n    this.insert(val);\n  }\n};\n\nLinkedList.prototype.insertBeforeEntry = function (val, next) {\n  var entry = new LinkedList.Entry(val);\n  var prev = next.prev;\n\n  if (!prev) {\n    //next is head\n    this.head = entry;\n  } else {\n    prev.next = entry;\n    entry.prev = prev;\n  }\n\n  entry.next = next;\n  next.prev = entry;\n  this._length++;\n};\n/**\n * Insert an entry at the tail\n * @param  {clay.core.LinkedList.Entry} entry\n */\n\n\nLinkedList.prototype.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    this.tail = entry;\n  }\n\n  this._length++;\n};\n/**\n * Remove entry.\n * @param  {clay.core.LinkedList.Entry} entry\n */\n\n\nLinkedList.prototype.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n\n  entry.next = entry.prev = null;\n  this._length--;\n};\n/**\n * Remove entry at index.\n * @param  {number} idx\n * @return {}\n */\n\n\nLinkedList.prototype.removeAt = function (idx) {\n  if (idx < 0) {\n    return;\n  }\n\n  var curr = this.head;\n  var cursor = 0;\n\n  while (curr && cursor != idx) {\n    curr = curr.next;\n    cursor++;\n  }\n\n  if (curr) {\n    this.remove(curr);\n    return curr.value;\n  }\n};\n/**\n * Get head value\n * @return {}\n */\n\n\nLinkedList.prototype.getHead = function () {\n  if (this.head) {\n    return this.head.value;\n  }\n};\n/**\n * Get tail value\n * @return {}\n */\n\n\nLinkedList.prototype.getTail = function () {\n  if (this.tail) {\n    return this.tail.value;\n  }\n};\n/**\n * Get value at idx\n * @param {number} idx\n * @return {}\n */\n\n\nLinkedList.prototype.getAt = function (idx) {\n  if (idx < 0) {\n    return;\n  }\n\n  var curr = this.head;\n  var cursor = 0;\n\n  while (curr && cursor != idx) {\n    curr = curr.next;\n    cursor++;\n  }\n\n  return curr.value;\n};\n/**\n * @param  {} value\n * @return {number}\n */\n\n\nLinkedList.prototype.indexOf = function (value) {\n  var curr = this.head;\n  var cursor = 0;\n\n  while (curr) {\n    if (curr.value === value) {\n      return cursor;\n    }\n\n    curr = curr.next;\n    cursor++;\n  }\n};\n/**\n * @return {number}\n */\n\n\nLinkedList.prototype.length = function () {\n  return this._length;\n};\n/**\n * If list is empty\n */\n\n\nLinkedList.prototype.isEmpty = function () {\n  return this._length === 0;\n};\n/**\n * @param  {Function} cb\n * @param  {} context\n */\n\n\nLinkedList.prototype.forEach = function (cb, context) {\n  var curr = this.head;\n  var idx = 0;\n  var haveContext = typeof context != 'undefined';\n\n  while (curr) {\n    if (haveContext) {\n      cb.call(context, curr.value, idx);\n    } else {\n      cb(curr.value, idx);\n    }\n\n    curr = curr.next;\n    idx++;\n  }\n};\n/**\n * Clear the list\n */\n\n\nLinkedList.prototype.clear = function () {\n  this.tail = this.head = null;\n  this._length = 0;\n};\n/**\n * @constructor\n * @param {} val\n */\n\n\nLinkedList.Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n\n  this.next = null;\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n\n  this.prev = null;\n};\n\nexport default LinkedList;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/core/LinkedList.js"],"names":["LinkedList","head","tail","_length","prototype","insert","val","entry","Entry","insertEntry","insertAt","idx","next","cursor","prev","insertBeforeEntry","remove","removeAt","curr","value","getHead","getTail","getAt","indexOf","length","isEmpty","forEach","cb","context","haveContext","call","clear"],"mappings":"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","sourcesContent":["/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n * @alias clay.core.LinkedList\n */\nvar LinkedList = function () {\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.head = null;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.tail = null;\n\n    this._length = 0;\n};\n\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insert = function (val) {\n    var entry = new LinkedList.Entry(val);\n    this.insertEntry(entry);\n    return entry;\n};\n\n/**\n * Insert a new value at idx\n * @param {number} idx\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insertAt = function (idx, val) {\n    if (idx < 0) {\n        return;\n    }\n    var next = this.head;\n    var cursor = 0;\n    while (next && cursor != idx) {\n        next = next.next;\n        cursor++;\n    }\n    if (next) {\n        var entry = new LinkedList.Entry(val);\n        var prev = next.prev;\n        if (!prev) { //next is head\n            this.head = entry;\n        }\n        else {\n            prev.next = entry;\n            entry.prev = prev;\n        }\n        entry.next = next;\n        next.prev = entry;\n    }\n    else {\n        this.insert(val);\n    }\n};\n\nLinkedList.prototype.insertBeforeEntry = function (val, next) {\n    var entry = new LinkedList.Entry(val);\n    var prev = next.prev;\n    if (!prev) { //next is head\n        this.head = entry;\n    }\n    else {\n        prev.next = entry;\n        entry.prev = prev;\n    }\n    entry.next = next;\n    next.prev = entry;\n\n    this._length++;\n};\n\n/**\n * Insert an entry at the tail\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.insertEntry = function (entry) {\n    if (!this.head) {\n        this.head = this.tail = entry;\n    }\n    else {\n        this.tail.next = entry;\n        entry.prev = this.tail;\n        this.tail = entry;\n    }\n    this._length++;\n};\n\n/**\n * Remove entry.\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.remove = function (entry) {\n    var prev = entry.prev;\n    var next = entry.next;\n    if (prev) {\n        prev.next = next;\n    }\n    else {\n        // Is head\n        this.head = next;\n    }\n    if (next) {\n        next.prev = prev;\n    }\n    else {\n        // Is tail\n        this.tail = prev;\n    }\n    entry.next = entry.prev = null;\n    this._length--;\n};\n\n/**\n * Remove entry at index.\n * @param  {number} idx\n * @return {}\n */\nLinkedList.prototype.removeAt = function (idx) {\n    if (idx < 0) {\n        return;\n    }\n    var curr = this.head;\n    var cursor = 0;\n    while (curr && cursor != idx) {\n        curr = curr.next;\n        cursor++;\n    }\n    if (curr) {\n        this.remove(curr);\n        return curr.value;\n    }\n};\n/**\n * Get head value\n * @return {}\n */\nLinkedList.prototype.getHead = function () {\n    if (this.head) {\n        return this.head.value;\n    }\n};\n/**\n * Get tail value\n * @return {}\n */\nLinkedList.prototype.getTail = function () {\n    if (this.tail) {\n        return this.tail.value;\n    }\n};\n/**\n * Get value at idx\n * @param {number} idx\n * @return {}\n */\nLinkedList.prototype.getAt = function (idx) {\n    if (idx < 0) {\n        return;\n    }\n    var curr = this.head;\n    var cursor = 0;\n    while (curr && cursor != idx) {\n        curr = curr.next;\n        cursor++;\n    }\n    return curr.value;\n};\n\n/**\n * @param  {} value\n * @return {number}\n */\nLinkedList.prototype.indexOf = function (value) {\n    var curr = this.head;\n    var cursor = 0;\n    while (curr) {\n        if (curr.value === value) {\n            return cursor;\n        }\n        curr = curr.next;\n        cursor++;\n    }\n};\n\n/**\n * @return {number}\n */\nLinkedList.prototype.length = function () {\n    return this._length;\n};\n\n/**\n * If list is empty\n */\nLinkedList.prototype.isEmpty = function () {\n    return this._length === 0;\n};\n\n/**\n * @param  {Function} cb\n * @param  {} context\n */\nLinkedList.prototype.forEach = function (cb, context) {\n    var curr = this.head;\n    var idx = 0;\n    var haveContext = typeof(context) != 'undefined';\n    while (curr) {\n        if (haveContext) {\n            cb.call(context, curr.value, idx);\n        }\n        else {\n            cb(curr.value, idx);\n        }\n        curr = curr.next;\n        idx++;\n    }\n};\n\n/**\n * Clear the list\n */\nLinkedList.prototype.clear = function () {\n    this.tail = this.head = null;\n    this._length = 0;\n};\n\n/**\n * @constructor\n * @param {} val\n */\nLinkedList.Entry = function (val) {\n    /**\n     * @type {}\n     */\n    this.value = val;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.next = null;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.prev = null;\n};\n\nexport default LinkedList;\n"]},"metadata":{},"sourceType":"module"}