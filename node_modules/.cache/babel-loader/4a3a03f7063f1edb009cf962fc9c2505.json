{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport graphicGL from '../../util/graphicGL';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport forceAtlas2Code from './forceAtlas2.glsl.js';\ngraphicGL.Shader.import(forceAtlas2Code);\nvar defaultConfigs = {\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nfunction ForceAtlas2GPU(options) {\n  var textureOpt = {\n    type: graphicGL.Texture.FLOAT,\n    minFilter: graphicGL.Texture.NEAREST,\n    magFilter: graphicGL.Texture.NEAREST\n  };\n  this._positionSourceTex = new graphicGL.Texture2D(textureOpt);\n  this._positionSourceTex.flipY = false;\n  this._positionTex = new graphicGL.Texture2D(textureOpt);\n  this._positionPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._forceTex = new graphicGL.Texture2D(textureOpt);\n  this._forcePrevTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex.width = this._weightedSumTex.height = 1;\n  this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedTex.width = this._globalSpeedTex.height = 1;\n  this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;\n  this._nodeRepulsionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')\n  });\n  this._positionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')\n  });\n  this._globalSpeedPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')\n  });\n  this._copyPass = new Pass({\n    fragment: graphicGL.Shader.source('clay.compositor.output')\n  });\n\n  var additiveBlend = function additiveBlend(gl) {\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE);\n  };\n\n  this._edgeForceMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),\n        node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),\n        weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)\n      },\n      dynamic: true,\n      mainAttribute: 'node1'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._weightedSumMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node: new graphicGL.Geometry.Attribute('node', 'float', 2)\n      },\n      dynamic: true,\n      mainAttribute: 'node'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._dummyCamera = new graphicGL.OrthographicCamera({\n    left: -1,\n    right: 1,\n    top: 1,\n    bottom: -1,\n    near: 0,\n    far: 100\n  });\n  this._globalSpeed = 0;\n}\n\nForceAtlas2GPU.prototype.updateOption = function (options) {\n  // Default config\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  } // Config according to data scale\n\n\n  var nNodes = this._nodes.length;\n\n  if (nNodes > 50000) {\n    this.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    this.jitterTolerence = 1;\n  } else {\n    this.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    this.scaling = 2.0;\n  } else {\n    this.scaling = 10.0;\n  } // this.edgeWeightInfluence = 1;\n  // this.gravity = 1;\n  // this.strongGravityMode = false;\n\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        this[name] = options[name];\n      }\n    }\n  }\n\n  if (this.repulsionByDegree) {\n    var positionBuffer = this._positionSourceTex.pixels;\n\n    for (var i = 0; i < this._nodes.length; i++) {\n      positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;\n    }\n  }\n};\n\nForceAtlas2GPU.prototype._updateGravityCenter = function (options) {\n  var nodes = this._nodes;\n  var edges = this._edges;\n\n  if (!this.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } else {\n    this._gravityCenter = this.gravityCenter;\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n};\n/**\n * @param {Array.<Object>} [{ x, y, mass }] nodes\n * @param {Array.<Object>} [{ node1, node2, weight }] edges\n */\n\n\nForceAtlas2GPU.prototype.initData = function (nodes, edges) {\n  this._nodes = nodes;\n  this._edges = edges;\n\n  this._updateGravityCenter();\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);\n\n  this._resize(textureWidth, textureHeight);\n\n  var offset = 0;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionBuffer[offset++] = node.x || 0;\n    positionBuffer[offset++] = node.y || 0;\n    positionBuffer[offset++] = node.mass || 1;\n    positionBuffer[offset++] = node.size || 1;\n  }\n\n  this._positionSourceTex.pixels = positionBuffer;\n  var edgeGeometry = this._edgeForceMesh.geometry;\n  var edgeLen = edges.length;\n  edgeGeometry.attributes.node1.init(edgeLen * 2);\n  edgeGeometry.attributes.node2.init(edgeLen * 2);\n  edgeGeometry.attributes.weight.init(edgeLen * 2);\n  var uv = [];\n\n  for (var i = 0; i < edges.length; i++) {\n    var attributes = edgeGeometry.attributes;\n    var weight = edges[i].weight;\n\n    if (weight == null) {\n      weight = 1;\n    } // Two way.\n\n\n    attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));\n    attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));\n    attributes.weight.set(i, weight);\n    attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));\n    attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));\n    attributes.weight.set(i + edgeLen, weight);\n  }\n\n  var weigtedSumGeo = this._weightedSumMesh.geometry;\n  weigtedSumGeo.attributes.node.init(nodes.length);\n\n  for (var i = 0; i < nodes.length; i++) {\n    weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));\n  }\n\n  edgeGeometry.dirty();\n  weigtedSumGeo.dirty();\n\n  this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);\n\n  this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);\n\n  this._inited = false;\n  this._frame = 0;\n};\n\nForceAtlas2GPU.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2GPU.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2GPU.prototype.step = function (renderer) {\n  if (!this._inited) {\n    this._initFromSource(renderer);\n\n    this._inited = true;\n  }\n\n  this._frame++;\n\n  this._framebuffer.attach(this._forceTex);\n\n  this._framebuffer.bind(renderer);\n\n  var nodeRepulsionPass = this._nodeRepulsionPass; // Calc node repulsion, gravity\n\n  nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);\n  nodeRepulsionPass.setUniform('gravity', this.gravity);\n  nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);\n  nodeRepulsionPass.setUniform('scaling', this.scaling);\n  nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);\n  nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);\n  nodeRepulsionPass.render(renderer); // Calc edge attraction force\n\n  var edgeForceMesh = this._edgeForceMesh;\n  edgeForceMesh.material.set('linLogMode', this.linLogMode);\n  edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);\n  edgeForceMesh.material.set('preventOverlap', this.preventOverlap);\n  edgeForceMesh.material.set('positionTex', this._positionPrevTex);\n  renderer.gl.enable(renderer.gl.BLEND);\n  renderer.renderPass([edgeForceMesh], this._dummyCamera); // Calc weighted sum.\n\n  this._framebuffer.attach(this._weightedSumTex);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  renderer.gl.enable(renderer.gl.BLEND);\n  var weightedSumMesh = this._weightedSumMesh;\n  weightedSumMesh.material.set('positionTex', this._positionPrevTex);\n  weightedSumMesh.material.set('forceTex', this._forceTex);\n  weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);\n  renderer.renderPass([weightedSumMesh], this._dummyCamera); // Calc global speed.\n\n  this._framebuffer.attach(this._globalSpeedTex);\n\n  var globalSpeedPass = this._globalSpeedPass;\n  globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);\n  globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);\n  globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);\n  renderer.gl.disable(renderer.gl.BLEND);\n  globalSpeedPass.render(renderer); // Update position.\n\n  var positionPass = this._positionPass;\n\n  this._framebuffer.attach(this._positionTex);\n\n  positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);\n  positionPass.setUniform('positionTex', this._positionPrevTex);\n  positionPass.setUniform('forceTex', this._forceTex);\n  positionPass.setUniform('forcePrevTex', this._forcePrevTex);\n  positionPass.render(renderer);\n\n  this._framebuffer.unbind(renderer);\n\n  this._swapTexture();\n};\n\nForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n\n  for (var i = 0; i < steps; i++) {\n    this.step(renderer);\n  }\n\n  cb && cb();\n};\n\nForceAtlas2GPU.prototype.getNodePositionTexture = function () {\n  return this._inited // Texture already been swapped.\n  ? this._positionPrevTex : this._positionSourceTex;\n};\n\nForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;\n  return uv;\n};\n\nForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {\n  var positionArr = this._positionArr;\n  var width = this._positionTex.width;\n  var height = this._positionTex.height;\n  var size = width * height;\n\n  if (!positionArr || positionArr.length !== size * 4) {\n    positionArr = this._positionArr = new Float32Array(size * 4);\n  }\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(this._positionPrevTex);\n\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, positionArr);\n\n  this._framebuffer.unbind(renderer);\n\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  for (var i = 0; i < this._nodes.length; i++) {\n    out[i * 2] = positionArr[i * 4];\n    out[i * 2 + 1] = positionArr[i * 4 + 1];\n  }\n\n  return out;\n};\n\nForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {\n  var tex = this['_' + textureName + 'Tex'];\n  var width = tex.width;\n  var height = tex.height;\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(tex);\n\n  var arr = new Float32Array(width * height * 4);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);\n\n  this._framebuffer.unbind(renderer);\n\n  return arr;\n};\n\nForceAtlas2GPU.prototype.getTextureSize = function () {\n  return {\n    width: this._positionTex.width,\n    height: this._positionTex.height\n  };\n};\n\nForceAtlas2GPU.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2GPU.prototype._swapTexture = function () {\n  var tmp = this._positionPrevTex;\n  this._positionPrevTex = this._positionTex;\n  this._positionTex = tmp;\n  var tmp = this._forcePrevTex;\n  this._forcePrevTex = this._forceTex;\n  this._forceTex = tmp;\n  var tmp = this._globalSpeedPrevTex;\n  this._globalSpeedPrevTex = this._globalSpeedTex;\n  this._globalSpeedTex = tmp;\n};\n\nForceAtlas2GPU.prototype._initFromSource = function (renderer) {\n  this._framebuffer.attach(this._positionPrevTex);\n\n  this._framebuffer.bind(renderer);\n\n  this._copyPass.setUniform('texture', this._positionSourceTex);\n\n  this._copyPass.render(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n\n  this._framebuffer.attach(this._forcePrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.attach(this._globalSpeedPrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.unbind(renderer);\n};\n\nForceAtlas2GPU.prototype._resize = function (width, height) {\n  ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {\n    this[texName].width = width;\n    this[texName].height = height;\n    this[texName].dirty();\n  }, this);\n};\n\nForceAtlas2GPU.prototype.dispose = function (renderer) {\n  this._framebuffer.dispose(renderer);\n\n  this._copyPass.dispose(renderer);\n\n  this._nodeRepulsionPass.dispose(renderer);\n\n  this._positionPass.dispose(renderer);\n\n  this._globalSpeedPass.dispose(renderer);\n\n  this._edgeForceMesh.geometry.dispose(renderer);\n\n  this._weightedSumMesh.geometry.dispose(renderer);\n\n  this._positionSourceTex.dispose(renderer);\n\n  this._positionTex.dispose(renderer);\n\n  this._positionPrevTex.dispose(renderer);\n\n  this._forceTex.dispose(renderer);\n\n  this._forcePrevTex.dispose(renderer);\n\n  this._weightedSumTex.dispose(renderer);\n\n  this._globalSpeedTex.dispose(renderer);\n\n  this._globalSpeedPrevTex.dispose(renderer);\n};\n\nexport default ForceAtlas2GPU;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/graphGL/ForceAtlas2GPU.js"],"names":["graphicGL","Pass","FrameBuffer","forceAtlas2Code","Shader","import","defaultConfigs","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","gravityCenter","ForceAtlas2GPU","options","textureOpt","type","Texture","FLOAT","minFilter","NEAREST","magFilter","_positionSourceTex","Texture2D","flipY","_positionTex","_positionPrevTex","_forceTex","_forcePrevTex","_weightedSumTex","width","height","_globalSpeedTex","_globalSpeedPrevTex","_nodeRepulsionPass","fragment","source","_positionPass","_globalSpeedPass","_copyPass","additiveBlend","gl","blendEquation","FUNC_ADD","blendFunc","ONE","_edgeForceMesh","Mesh","geometry","Geometry","attributes","node1","Attribute","node2","weight","dynamic","mainAttribute","material","Material","transparent","shader","createShader","blend","depthMask","depthText","mode","POINTS","_weightedSumMesh","node","_framebuffer","depthBuffer","_dummyCamera","OrthographicCamera","left","right","top","bottom","near","far","_globalSpeed","prototype","updateOption","name","nNodes","_nodes","length","positionBuffer","pixels","i","degree","_updateGravityCenter","nodes","edges","_edges","min","Infinity","max","Math","x","y","_gravityCenter","initData","textureWidth","ceil","sqrt","textureHeight","Float32Array","_resize","offset","mass","size","edgeGeometry","edgeLen","init","uv","set","getNodeUV","weigtedSumGeo","dirty","define","setUniform","_inited","_frame","getNodes","getEdges","step","renderer","_initFromSource","attach","bind","nodeRepulsionPass","render","edgeForceMesh","enable","BLEND","renderPass","clearColor","clear","COLOR_BUFFER_BIT","weightedSumMesh","globalSpeedPass","disable","positionPass","unbind","_swapTexture","update","steps","cb","getNodePositionTexture","nodeIndex","floor","getNodePosition","out","positionArr","_positionArr","readPixels","RGBA","getTextureData","textureName","tex","arr","getTextureSize","isFinished","maxSteps","tmp","forEach","texName","dispose"],"mappings":"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","sourcesContent":["import graphicGL from '../../util/graphicGL';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport forceAtlas2Code from './forceAtlas2.glsl.js';\ngraphicGL.Shader.import(forceAtlas2Code);\nvar defaultConfigs = {\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nfunction ForceAtlas2GPU(options) {\n  var textureOpt = {\n    type: graphicGL.Texture.FLOAT,\n    minFilter: graphicGL.Texture.NEAREST,\n    magFilter: graphicGL.Texture.NEAREST\n  };\n  this._positionSourceTex = new graphicGL.Texture2D(textureOpt);\n  this._positionSourceTex.flipY = false;\n  this._positionTex = new graphicGL.Texture2D(textureOpt);\n  this._positionPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._forceTex = new graphicGL.Texture2D(textureOpt);\n  this._forcePrevTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex.width = this._weightedSumTex.height = 1;\n  this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedTex.width = this._globalSpeedTex.height = 1;\n  this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;\n  this._nodeRepulsionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')\n  });\n  this._positionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')\n  });\n  this._globalSpeedPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')\n  });\n  this._copyPass = new Pass({\n    fragment: graphicGL.Shader.source('clay.compositor.output')\n  });\n\n  var additiveBlend = function (gl) {\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE);\n  };\n\n  this._edgeForceMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),\n        node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),\n        weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)\n      },\n      dynamic: true,\n      mainAttribute: 'node1'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._weightedSumMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node: new graphicGL.Geometry.Attribute('node', 'float', 2)\n      },\n      dynamic: true,\n      mainAttribute: 'node'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._dummyCamera = new graphicGL.OrthographicCamera({\n    left: -1,\n    right: 1,\n    top: 1,\n    bottom: -1,\n    near: 0,\n    far: 100\n  });\n  this._globalSpeed = 0;\n}\n\nForceAtlas2GPU.prototype.updateOption = function (options) {\n  // Default config\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  } // Config according to data scale\n\n\n  var nNodes = this._nodes.length;\n\n  if (nNodes > 50000) {\n    this.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    this.jitterTolerence = 1;\n  } else {\n    this.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    this.scaling = 2.0;\n  } else {\n    this.scaling = 10.0;\n  } // this.edgeWeightInfluence = 1;\n  // this.gravity = 1;\n  // this.strongGravityMode = false;\n\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        this[name] = options[name];\n      }\n    }\n  }\n\n  if (this.repulsionByDegree) {\n    var positionBuffer = this._positionSourceTex.pixels;\n\n    for (var i = 0; i < this._nodes.length; i++) {\n      positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;\n    }\n  }\n};\n\nForceAtlas2GPU.prototype._updateGravityCenter = function (options) {\n  var nodes = this._nodes;\n  var edges = this._edges;\n\n  if (!this.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } else {\n    this._gravityCenter = this.gravityCenter;\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n};\n/**\n * @param {Array.<Object>} [{ x, y, mass }] nodes\n * @param {Array.<Object>} [{ node1, node2, weight }] edges\n */\n\n\nForceAtlas2GPU.prototype.initData = function (nodes, edges) {\n  this._nodes = nodes;\n  this._edges = edges;\n\n  this._updateGravityCenter();\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);\n\n  this._resize(textureWidth, textureHeight);\n\n  var offset = 0;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionBuffer[offset++] = node.x || 0;\n    positionBuffer[offset++] = node.y || 0;\n    positionBuffer[offset++] = node.mass || 1;\n    positionBuffer[offset++] = node.size || 1;\n  }\n\n  this._positionSourceTex.pixels = positionBuffer;\n  var edgeGeometry = this._edgeForceMesh.geometry;\n  var edgeLen = edges.length;\n  edgeGeometry.attributes.node1.init(edgeLen * 2);\n  edgeGeometry.attributes.node2.init(edgeLen * 2);\n  edgeGeometry.attributes.weight.init(edgeLen * 2);\n  var uv = [];\n\n  for (var i = 0; i < edges.length; i++) {\n    var attributes = edgeGeometry.attributes;\n    var weight = edges[i].weight;\n\n    if (weight == null) {\n      weight = 1;\n    } // Two way.\n\n\n    attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));\n    attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));\n    attributes.weight.set(i, weight);\n    attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));\n    attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));\n    attributes.weight.set(i + edgeLen, weight);\n  }\n\n  var weigtedSumGeo = this._weightedSumMesh.geometry;\n  weigtedSumGeo.attributes.node.init(nodes.length);\n\n  for (var i = 0; i < nodes.length; i++) {\n    weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));\n  }\n\n  edgeGeometry.dirty();\n  weigtedSumGeo.dirty();\n\n  this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);\n\n  this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);\n\n  this._inited = false;\n  this._frame = 0;\n};\n\nForceAtlas2GPU.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2GPU.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2GPU.prototype.step = function (renderer) {\n  if (!this._inited) {\n    this._initFromSource(renderer);\n\n    this._inited = true;\n  }\n\n  this._frame++;\n\n  this._framebuffer.attach(this._forceTex);\n\n  this._framebuffer.bind(renderer);\n\n  var nodeRepulsionPass = this._nodeRepulsionPass; // Calc node repulsion, gravity\n\n  nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);\n  nodeRepulsionPass.setUniform('gravity', this.gravity);\n  nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);\n  nodeRepulsionPass.setUniform('scaling', this.scaling);\n  nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);\n  nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);\n  nodeRepulsionPass.render(renderer); // Calc edge attraction force\n\n  var edgeForceMesh = this._edgeForceMesh;\n  edgeForceMesh.material.set('linLogMode', this.linLogMode);\n  edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);\n  edgeForceMesh.material.set('preventOverlap', this.preventOverlap);\n  edgeForceMesh.material.set('positionTex', this._positionPrevTex);\n  renderer.gl.enable(renderer.gl.BLEND);\n  renderer.renderPass([edgeForceMesh], this._dummyCamera); // Calc weighted sum.\n\n  this._framebuffer.attach(this._weightedSumTex);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  renderer.gl.enable(renderer.gl.BLEND);\n  var weightedSumMesh = this._weightedSumMesh;\n  weightedSumMesh.material.set('positionTex', this._positionPrevTex);\n  weightedSumMesh.material.set('forceTex', this._forceTex);\n  weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);\n  renderer.renderPass([weightedSumMesh], this._dummyCamera); // Calc global speed.\n\n  this._framebuffer.attach(this._globalSpeedTex);\n\n  var globalSpeedPass = this._globalSpeedPass;\n  globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);\n  globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);\n  globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);\n  renderer.gl.disable(renderer.gl.BLEND);\n  globalSpeedPass.render(renderer); // Update position.\n\n  var positionPass = this._positionPass;\n\n  this._framebuffer.attach(this._positionTex);\n\n  positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);\n  positionPass.setUniform('positionTex', this._positionPrevTex);\n  positionPass.setUniform('forceTex', this._forceTex);\n  positionPass.setUniform('forcePrevTex', this._forcePrevTex);\n  positionPass.render(renderer);\n\n  this._framebuffer.unbind(renderer);\n\n  this._swapTexture();\n};\n\nForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n\n  for (var i = 0; i < steps; i++) {\n    this.step(renderer);\n  }\n\n  cb && cb();\n};\n\nForceAtlas2GPU.prototype.getNodePositionTexture = function () {\n  return this._inited // Texture already been swapped.\n  ? this._positionPrevTex : this._positionSourceTex;\n};\n\nForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;\n  return uv;\n};\n\nForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {\n  var positionArr = this._positionArr;\n  var width = this._positionTex.width;\n  var height = this._positionTex.height;\n  var size = width * height;\n\n  if (!positionArr || positionArr.length !== size * 4) {\n    positionArr = this._positionArr = new Float32Array(size * 4);\n  }\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(this._positionPrevTex);\n\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, positionArr);\n\n  this._framebuffer.unbind(renderer);\n\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  for (var i = 0; i < this._nodes.length; i++) {\n    out[i * 2] = positionArr[i * 4];\n    out[i * 2 + 1] = positionArr[i * 4 + 1];\n  }\n\n  return out;\n};\n\nForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {\n  var tex = this['_' + textureName + 'Tex'];\n  var width = tex.width;\n  var height = tex.height;\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(tex);\n\n  var arr = new Float32Array(width * height * 4);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);\n\n  this._framebuffer.unbind(renderer);\n\n  return arr;\n};\n\nForceAtlas2GPU.prototype.getTextureSize = function () {\n  return {\n    width: this._positionTex.width,\n    height: this._positionTex.height\n  };\n};\n\nForceAtlas2GPU.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2GPU.prototype._swapTexture = function () {\n  var tmp = this._positionPrevTex;\n  this._positionPrevTex = this._positionTex;\n  this._positionTex = tmp;\n  var tmp = this._forcePrevTex;\n  this._forcePrevTex = this._forceTex;\n  this._forceTex = tmp;\n  var tmp = this._globalSpeedPrevTex;\n  this._globalSpeedPrevTex = this._globalSpeedTex;\n  this._globalSpeedTex = tmp;\n};\n\nForceAtlas2GPU.prototype._initFromSource = function (renderer) {\n  this._framebuffer.attach(this._positionPrevTex);\n\n  this._framebuffer.bind(renderer);\n\n  this._copyPass.setUniform('texture', this._positionSourceTex);\n\n  this._copyPass.render(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n\n  this._framebuffer.attach(this._forcePrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.attach(this._globalSpeedPrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.unbind(renderer);\n};\n\nForceAtlas2GPU.prototype._resize = function (width, height) {\n  ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {\n    this[texName].width = width;\n    this[texName].height = height;\n    this[texName].dirty();\n  }, this);\n};\n\nForceAtlas2GPU.prototype.dispose = function (renderer) {\n  this._framebuffer.dispose(renderer);\n\n  this._copyPass.dispose(renderer);\n\n  this._nodeRepulsionPass.dispose(renderer);\n\n  this._positionPass.dispose(renderer);\n\n  this._globalSpeedPass.dispose(renderer);\n\n  this._edgeForceMesh.geometry.dispose(renderer);\n\n  this._weightedSumMesh.geometry.dispose(renderer);\n\n  this._positionSourceTex.dispose(renderer);\n\n  this._positionTex.dispose(renderer);\n\n  this._positionPrevTex.dispose(renderer);\n\n  this._forceTex.dispose(renderer);\n\n  this._forcePrevTex.dispose(renderer);\n\n  this._weightedSumTex.dispose(renderer);\n\n  this._globalSpeedTex.dispose(renderer);\n\n  this._globalSpeedPrevTex.dispose(renderer);\n};\n\nexport default ForceAtlas2GPU;"]},"metadata":{},"sourceType":"module"}