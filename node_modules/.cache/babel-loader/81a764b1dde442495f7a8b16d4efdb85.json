{"ast":null,"code":"export default {\n  defaultOption: {\n    viewControl: {\n      // perspective, orthographic.\n      // TODO Isometric\n      projection: 'perspective',\n      // If rotate on on init\n      autoRotate: false,\n      // cw or ccw\n      autoRotateDirection: 'cw',\n      // Degree per second\n      autoRotateSpeed: 10,\n      // Start rotating after still for a given time\n      // default is 3 seconds\n      autoRotateAfterStill: 3,\n      // Rotate, zoom damping.\n      damping: 0.8,\n      // Sensitivities for operations.\n      // Can be array to set x,y respectively\n      rotateSensitivity: 1,\n      zoomSensitivity: 1,\n      // Can be array to set x,y respectively\n      panSensitivity: 1,\n      // Which mouse button do rotate or pan\n      panMouseButton: 'middle',\n      rotateMouseButton: 'left',\n      // Distance to the target\n      // Only available when camera is perspective.\n      distance: 150,\n      // Min distance mouse can zoom in\n      minDistance: 40,\n      // Max distance mouse can zoom out\n      maxDistance: 400,\n      // Size of viewing volume.\n      // Only available when camera is orthographic\n      orthographicSize: 150,\n      maxOrthographicSize: 400,\n      minOrthographicSize: 20,\n      // Center view point\n      center: [0, 0, 0],\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 0,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 0,\n      minAlpha: -90,\n      maxAlpha: 90 // minBeta: -Infinity\n      // maxBeta: -Infinity\n\n    }\n  },\n  setView: function setView(opts) {\n    opts = opts || {};\n    this.option.viewControl = this.option.viewControl || {};\n\n    if (opts.alpha != null) {\n      this.option.viewControl.alpha = opts.alpha;\n    }\n\n    if (opts.beta != null) {\n      this.option.viewControl.beta = opts.beta;\n    }\n\n    if (opts.distance != null) {\n      this.option.viewControl.distance = opts.distance;\n    }\n\n    if (opts.center != null) {\n      this.option.viewControl.center = opts.center;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/common/componentViewControlMixin.js"],"names":["defaultOption","viewControl","projection","autoRotate","autoRotateDirection","autoRotateSpeed","autoRotateAfterStill","damping","rotateSensitivity","zoomSensitivity","panSensitivity","panMouseButton","rotateMouseButton","distance","minDistance","maxDistance","orthographicSize","maxOrthographicSize","minOrthographicSize","center","alpha","beta","minAlpha","maxAlpha","setView","opts","option"],"mappings":"AAAA,eAAe;AACbA,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE;AACX;AACA;AACAC,MAAAA,UAAU,EAAE,aAHD;AAIX;AACAC,MAAAA,UAAU,EAAE,KALD;AAMX;AACAC,MAAAA,mBAAmB,EAAE,IAPV;AAQX;AACAC,MAAAA,eAAe,EAAE,EATN;AAUX;AACA;AACAC,MAAAA,oBAAoB,EAAE,CAZX;AAaX;AACAC,MAAAA,OAAO,EAAE,GAdE;AAeX;AACA;AACAC,MAAAA,iBAAiB,EAAE,CAjBR;AAkBXC,MAAAA,eAAe,EAAE,CAlBN;AAmBX;AACAC,MAAAA,cAAc,EAAE,CApBL;AAqBX;AACAC,MAAAA,cAAc,EAAE,QAtBL;AAuBXC,MAAAA,iBAAiB,EAAE,MAvBR;AAwBX;AACA;AACAC,MAAAA,QAAQ,EAAE,GA1BC;AA2BX;AACAC,MAAAA,WAAW,EAAE,EA5BF;AA6BX;AACAC,MAAAA,WAAW,EAAE,GA9BF;AA+BX;AACA;AACAC,MAAAA,gBAAgB,EAAE,GAjCP;AAkCXC,MAAAA,mBAAmB,EAAE,GAlCV;AAmCXC,MAAAA,mBAAmB,EAAE,EAnCV;AAoCX;AACAC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CArCG;AAsCX;AACA;AACAC,MAAAA,KAAK,EAAE,CAxCI;AAyCX;AACA;AACAC,MAAAA,IAAI,EAAE,CA3CK;AA4CXC,MAAAA,QAAQ,EAAE,CAAC,EA5CA;AA6CXC,MAAAA,QAAQ,EAAE,EA7CC,CA6CE;AACb;;AA9CW;AADA,GADF;AAoDbC,EAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgB;AACvBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,SAAKC,MAAL,CAAYzB,WAAZ,GAA0B,KAAKyB,MAAL,CAAYzB,WAAZ,IAA2B,EAArD;;AAEA,QAAIwB,IAAI,CAACL,KAAL,IAAc,IAAlB,EAAwB;AACtB,WAAKM,MAAL,CAAYzB,WAAZ,CAAwBmB,KAAxB,GAAgCK,IAAI,CAACL,KAArC;AACD;;AAED,QAAIK,IAAI,CAACJ,IAAL,IAAa,IAAjB,EAAuB;AACrB,WAAKK,MAAL,CAAYzB,WAAZ,CAAwBoB,IAAxB,GAA+BI,IAAI,CAACJ,IAApC;AACD;;AAED,QAAII,IAAI,CAACZ,QAAL,IAAiB,IAArB,EAA2B;AACzB,WAAKa,MAAL,CAAYzB,WAAZ,CAAwBY,QAAxB,GAAmCY,IAAI,CAACZ,QAAxC;AACD;;AAED,QAAIY,IAAI,CAACN,MAAL,IAAe,IAAnB,EAAyB;AACvB,WAAKO,MAAL,CAAYzB,WAAZ,CAAwBkB,MAAxB,GAAiCM,IAAI,CAACN,MAAtC;AACD;AACF;AAvEY,CAAf","sourcesContent":["export default {\n  defaultOption: {\n    viewControl: {\n      // perspective, orthographic.\n      // TODO Isometric\n      projection: 'perspective',\n      // If rotate on on init\n      autoRotate: false,\n      // cw or ccw\n      autoRotateDirection: 'cw',\n      // Degree per second\n      autoRotateSpeed: 10,\n      // Start rotating after still for a given time\n      // default is 3 seconds\n      autoRotateAfterStill: 3,\n      // Rotate, zoom damping.\n      damping: 0.8,\n      // Sensitivities for operations.\n      // Can be array to set x,y respectively\n      rotateSensitivity: 1,\n      zoomSensitivity: 1,\n      // Can be array to set x,y respectively\n      panSensitivity: 1,\n      // Which mouse button do rotate or pan\n      panMouseButton: 'middle',\n      rotateMouseButton: 'left',\n      // Distance to the target\n      // Only available when camera is perspective.\n      distance: 150,\n      // Min distance mouse can zoom in\n      minDistance: 40,\n      // Max distance mouse can zoom out\n      maxDistance: 400,\n      // Size of viewing volume.\n      // Only available when camera is orthographic\n      orthographicSize: 150,\n      maxOrthographicSize: 400,\n      minOrthographicSize: 20,\n      // Center view point\n      center: [0, 0, 0],\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 0,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 0,\n      minAlpha: -90,\n      maxAlpha: 90 // minBeta: -Infinity\n      // maxBeta: -Infinity\n\n    }\n  },\n  setView: function (opts) {\n    opts = opts || {};\n    this.option.viewControl = this.option.viewControl || {};\n\n    if (opts.alpha != null) {\n      this.option.viewControl.alpha = opts.alpha;\n    }\n\n    if (opts.beta != null) {\n      this.option.viewControl.beta = opts.beta;\n    }\n\n    if (opts.distance != null) {\n      this.option.viewControl.distance = opts.distance;\n    }\n\n    if (opts.center != null) {\n      this.option.viewControl.center = opts.center;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}