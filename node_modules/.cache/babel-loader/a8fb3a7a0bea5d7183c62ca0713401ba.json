{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\n\nfunction defaultId(option, idx) {\n  option.id = option.id || option.name || idx + '';\n}\n\nvar GlobeModel = echarts.ComponentModel.extend({\n  type: 'globe',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  init: function init() {\n    GlobeModel.superApply(this, 'init', arguments);\n    echarts.util.each(this.option.layers, function (layerOption, idx) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n      defaultId(layerOption, idx);\n    }, this);\n  },\n  mergeOption: function mergeOption(option) {\n    // TODO test\n    var oldLayers = this.option.layers;\n    this.option.layers = null;\n    GlobeModel.superApply(this, 'mergeOption', arguments);\n\n    function createLayerMap(layers) {\n      return echarts.util.reduce(layers, function (obj, layerOption, idx) {\n        defaultId(layerOption, idx);\n        obj[layerOption.id] = layerOption;\n        return obj;\n      }, {});\n    }\n\n    if (oldLayers && oldLayers.length) {\n      var newLayerMap = createLayerMap(option.layers);\n      var oldLayerMap = createLayerMap(oldLayers);\n\n      for (var id in newLayerMap) {\n        if (oldLayerMap[id]) {\n          echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);\n        } else {\n          oldLayers.push(option.layers[id]);\n        }\n      } // Copy back\n\n\n      this.option.layers = oldLayers;\n    } // else overwrite\n    // Set default\n\n\n    echarts.util.each(this.option.layers, function (layerOption) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n    }, this);\n  },\n  optionUpdated: function optionUpdated() {\n    this.updateDisplacementHash();\n  },\n  defaultLayerOption: {\n    show: true,\n    type: 'overlay'\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    baseColor: '#fff',\n    // Base albedo texture\n    baseTexture: '',\n    // Height texture for bump mapping and vertex displacement\n    heightTexture: '',\n    // Texture for vertex displacement, default use heightTexture\n    displacementTexture: '',\n    // Scale of vertex displacement, available only if displacementTexture is set.\n    displacementScale: 0,\n    // Detail of displacement. 'low', 'medium', 'high', 'ultra'\n    displacementQuality: 'medium',\n    // Globe radius\n    globeRadius: 100,\n    // Globe outer radius. Which is max of altitude.\n    globeOuterRadius: 150,\n    // Shading of globe\n    shading: 'lambert',\n    // Extend light\n    light: {\n      // Main sun light\n      main: {\n        // Time, default it will use system time\n        time: ''\n      }\n    },\n    // atmosphere\n    atmosphere: {\n      show: false,\n      offset: 5,\n      color: '#ffffff',\n      glowPower: 6.0,\n      innerGlowPower: 2.0\n    },\n    // light\n    // postEffect\n    // temporalSuperSampling\n    viewControl: {\n      autoRotate: true,\n      panSensitivity: 0,\n      targetCoord: null\n    },\n    // {\n    //     show: true,\n    //     name: 'cloud',\n    //     type: 'overlay',\n    //     shading: 'lambert',\n    //     distance: 10,\n    //     texture: ''\n    // }\n    // {\n    //     type: 'blend',\n    //     blendTo: 'albedo'\n    //     blendType: 'source-over'\n    // }\n    layers: []\n  },\n  setDisplacementData: function setDisplacementData(data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  getDisplacementTexture: function getDisplacementTexture() {\n    return this.get('displacementTexture') || this.get('heightTexture');\n  },\n  getDisplacemenScale: function getDisplacemenScale() {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.get('displacementScale');\n\n    if (!displacementTexture || displacementTexture === 'none') {\n      displacementScale = 0;\n    }\n\n    return displacementScale;\n  },\n  hasDisplacement: function hasDisplacement() {\n    return this.getDisplacemenScale() > 0;\n  },\n  _displacementChanged: true,\n  _displacementScale: 0,\n  updateDisplacementHash: function updateDisplacementHash() {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.getDisplacemenScale();\n    this._displacementChanged = this._displacementTexture !== displacementTexture || this._displacementScale !== displacementScale;\n    this._displacementTexture = displacementTexture;\n    this._displacementScale = displacementScale;\n  },\n  isDisplacementChanged: function isDisplacementChanged() {\n    return this._displacementChanged;\n  }\n});\necharts.util.merge(GlobeModel.prototype, componentViewControlMixin);\necharts.util.merge(GlobeModel.prototype, componentPostEffectMixin);\necharts.util.merge(GlobeModel.prototype, componentLightMixin);\necharts.util.merge(GlobeModel.prototype, componentShadingMixin);\nexport default GlobeModel;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/component/globe/GlobeModel.js"],"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","componentShadingMixin","defaultId","option","idx","id","name","GlobeModel","ComponentModel","extend","type","layoutMode","coordinateSystem","init","superApply","arguments","util","each","layers","layerOption","merge","defaultLayerOption","mergeOption","oldLayers","createLayerMap","reduce","obj","length","newLayerMap","oldLayerMap","push","optionUpdated","updateDisplacementHash","show","defaultOption","zlevel","left","top","width","height","environment","baseColor","baseTexture","heightTexture","displacementTexture","displacementScale","displacementQuality","globeRadius","globeOuterRadius","shading","light","main","time","atmosphere","offset","color","glowPower","innerGlowPower","viewControl","autoRotate","panSensitivity","targetCoord","setDisplacementData","data","displacementData","displacementWidth","displacementHeight","getDisplacementTexture","get","getDisplacemenScale","hasDisplacement","_displacementChanged","_displacementScale","_displacementTexture","isDisplacementChanged","prototype"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\n\nfunction defaultId(option, idx) {\n  option.id = option.id || option.name || idx + '';\n}\n\nvar GlobeModel = echarts.ComponentModel.extend({\n  type: 'globe',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  init: function () {\n    GlobeModel.superApply(this, 'init', arguments);\n    echarts.util.each(this.option.layers, function (layerOption, idx) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n      defaultId(layerOption, idx);\n    }, this);\n  },\n  mergeOption: function (option) {\n    // TODO test\n    var oldLayers = this.option.layers;\n    this.option.layers = null;\n    GlobeModel.superApply(this, 'mergeOption', arguments);\n\n    function createLayerMap(layers) {\n      return echarts.util.reduce(layers, function (obj, layerOption, idx) {\n        defaultId(layerOption, idx);\n        obj[layerOption.id] = layerOption;\n        return obj;\n      }, {});\n    }\n\n    if (oldLayers && oldLayers.length) {\n      var newLayerMap = createLayerMap(option.layers);\n      var oldLayerMap = createLayerMap(oldLayers);\n\n      for (var id in newLayerMap) {\n        if (oldLayerMap[id]) {\n          echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);\n        } else {\n          oldLayers.push(option.layers[id]);\n        }\n      } // Copy back\n\n\n      this.option.layers = oldLayers;\n    } // else overwrite\n    // Set default\n\n\n    echarts.util.each(this.option.layers, function (layerOption) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n    }, this);\n  },\n  optionUpdated: function () {\n    this.updateDisplacementHash();\n  },\n  defaultLayerOption: {\n    show: true,\n    type: 'overlay'\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    baseColor: '#fff',\n    // Base albedo texture\n    baseTexture: '',\n    // Height texture for bump mapping and vertex displacement\n    heightTexture: '',\n    // Texture for vertex displacement, default use heightTexture\n    displacementTexture: '',\n    // Scale of vertex displacement, available only if displacementTexture is set.\n    displacementScale: 0,\n    // Detail of displacement. 'low', 'medium', 'high', 'ultra'\n    displacementQuality: 'medium',\n    // Globe radius\n    globeRadius: 100,\n    // Globe outer radius. Which is max of altitude.\n    globeOuterRadius: 150,\n    // Shading of globe\n    shading: 'lambert',\n    // Extend light\n    light: {\n      // Main sun light\n      main: {\n        // Time, default it will use system time\n        time: ''\n      }\n    },\n    // atmosphere\n    atmosphere: {\n      show: false,\n      offset: 5,\n      color: '#ffffff',\n      glowPower: 6.0,\n      innerGlowPower: 2.0\n    },\n    // light\n    // postEffect\n    // temporalSuperSampling\n    viewControl: {\n      autoRotate: true,\n      panSensitivity: 0,\n      targetCoord: null\n    },\n    // {\n    //     show: true,\n    //     name: 'cloud',\n    //     type: 'overlay',\n    //     shading: 'lambert',\n    //     distance: 10,\n    //     texture: ''\n    // }\n    // {\n    //     type: 'blend',\n    //     blendTo: 'albedo'\n    //     blendType: 'source-over'\n    // }\n    layers: []\n  },\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  getDisplacementTexture: function () {\n    return this.get('displacementTexture') || this.get('heightTexture');\n  },\n  getDisplacemenScale: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.get('displacementScale');\n\n    if (!displacementTexture || displacementTexture === 'none') {\n      displacementScale = 0;\n    }\n\n    return displacementScale;\n  },\n  hasDisplacement: function () {\n    return this.getDisplacemenScale() > 0;\n  },\n  _displacementChanged: true,\n  _displacementScale: 0,\n  updateDisplacementHash: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.getDisplacemenScale();\n    this._displacementChanged = this._displacementTexture !== displacementTexture || this._displacementScale !== displacementScale;\n    this._displacementTexture = displacementTexture;\n    this._displacementScale = displacementScale;\n  },\n  isDisplacementChanged: function () {\n    return this._displacementChanged;\n  }\n});\necharts.util.merge(GlobeModel.prototype, componentViewControlMixin);\necharts.util.merge(GlobeModel.prototype, componentPostEffectMixin);\necharts.util.merge(GlobeModel.prototype, componentLightMixin);\necharts.util.merge(GlobeModel.prototype, componentShadingMixin);\nexport default GlobeModel;"]},"metadata":{},"sourceType":"module"}