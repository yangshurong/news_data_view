{"ast":null,"code":"// Temporal Super Sample for static Scene\nimport halton from './halton';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Shader from 'claygl/src/Shader';\nimport Matrix4 from 'claygl/src/math/Matrix4';\n\nfunction TemporalSuperSampling(frames) {\n  var haltonSequence = [];\n\n  for (var i = 0; i < 30; i++) {\n    haltonSequence.push([halton(i, 2), halton(i, 3)]);\n  }\n\n  this._haltonSequence = haltonSequence;\n  this._frame = 0;\n  this._sourceTex = new Texture2D();\n  this._sourceFb = new FrameBuffer();\n\n  this._sourceFb.attach(this._sourceTex); // Frame texture before temporal supersampling\n\n\n  this._prevFrameTex = new Texture2D();\n  this._outputTex = new Texture2D();\n  var blendPass = this._blendPass = new Pass({\n    fragment: Shader.source('clay.compositor.blend')\n  });\n  blendPass.material.disableTexturesAll();\n  blendPass.material.enableTexture(['texture1', 'texture2']);\n  this._blendFb = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._outputPass = new Pass({\n    fragment: Shader.source('clay.compositor.output'),\n    // TODO, alpha is premultiplied?\n    blendWithPrevious: true\n  });\n\n  this._outputPass.material.define('fragment', 'OUTPUT_ALPHA');\n\n  this._outputPass.material.blend = function (_gl) {\n    // FIXME.\n    // Output is premultiplied alpha when BLEND is enabled ?\n    // http://stackoverflow.com/questions/2171085/opengl-blending-with-previous-contents-of-framebuffer\n    _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);\n\n    _gl.blendFuncSeparate(_gl.ONE, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);\n  };\n}\n\nTemporalSuperSampling.prototype = {\n  constructor: TemporalSuperSampling,\n\n  /**\n   * Jitter camera projectionMatrix\n   * @parma {clay.Renderer} renderer\n   * @param {clay.Camera} camera\n   */\n  jitterProjection: function (renderer, camera) {\n    var viewport = renderer.viewport;\n    var dpr = viewport.devicePixelRatio || renderer.getDevicePixelRatio();\n    var width = viewport.width * dpr;\n    var height = viewport.height * dpr;\n    var offset = this._haltonSequence[this._frame % this._haltonSequence.length];\n    var translationMat = new Matrix4();\n    translationMat.array[12] = (offset[0] * 2.0 - 1.0) / width;\n    translationMat.array[13] = (offset[1] * 2.0 - 1.0) / height;\n    Matrix4.mul(camera.projectionMatrix, translationMat, camera.projectionMatrix);\n    Matrix4.invert(camera.invProjectionMatrix, camera.projectionMatrix);\n  },\n\n  /**\n   * Reset accumulating frame\n   */\n  resetFrame: function () {\n    this._frame = 0;\n  },\n\n  /**\n   * Return current frame\n   */\n  getFrame: function () {\n    return this._frame;\n  },\n\n  /**\n   * Get source framebuffer for usage\n   */\n  getSourceFrameBuffer: function () {\n    return this._sourceFb;\n  },\n  getOutputTexture: function () {\n    return this._outputTex;\n  },\n  resize: function (width, height) {\n    this._prevFrameTex.width = width;\n    this._prevFrameTex.height = height;\n    this._outputTex.width = width;\n    this._outputTex.height = height;\n    this._sourceTex.width = width;\n    this._sourceTex.height = height;\n\n    this._prevFrameTex.dirty();\n\n    this._outputTex.dirty();\n\n    this._sourceTex.dirty();\n  },\n  isFinished: function () {\n    return this._frame >= this._haltonSequence.length;\n  },\n  render: function (renderer, sourceTex, notOutput) {\n    var blendPass = this._blendPass;\n\n    if (this._frame === 0) {\n      // Direct output\n      blendPass.setUniform('weight1', 0);\n      blendPass.setUniform('weight2', 1);\n    } else {\n      blendPass.setUniform('weight1', 0.9);\n      blendPass.setUniform('weight2', 0.1);\n    }\n\n    blendPass.setUniform('texture1', this._prevFrameTex);\n    blendPass.setUniform('texture2', sourceTex || this._sourceTex);\n\n    this._blendFb.attach(this._outputTex);\n\n    this._blendFb.bind(renderer);\n\n    blendPass.render(renderer);\n\n    this._blendFb.unbind(renderer);\n\n    if (!notOutput) {\n      this._outputPass.setUniform('texture', this._outputTex);\n\n      this._outputPass.render(renderer);\n    } // Swap texture\n\n\n    var tmp = this._prevFrameTex;\n    this._prevFrameTex = this._outputTex;\n    this._outputTex = tmp;\n    this._frame++;\n  },\n  dispose: function (renderer) {\n    this._sourceFb.dispose(renderer);\n\n    this._blendFb.dispose(renderer);\n\n    this._prevFrameTex.dispose(renderer);\n\n    this._outputTex.dispose(renderer);\n\n    this._sourceTex.dispose(renderer);\n\n    this._outputPass.dispose(renderer);\n\n    this._blendPass.dispose(renderer);\n  }\n};\nexport default TemporalSuperSampling;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/effect/TemporalSuperSampling.js"],"names":["halton","Pass","FrameBuffer","Texture2D","Shader","Matrix4","TemporalSuperSampling","frames","haltonSequence","i","push","_haltonSequence","_frame","_sourceTex","_sourceFb","attach","_prevFrameTex","_outputTex","blendPass","_blendPass","fragment","source","material","disableTexturesAll","enableTexture","_blendFb","depthBuffer","_outputPass","blendWithPrevious","define","blend","_gl","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","ONE_MINUS_SRC_ALPHA","prototype","constructor","jitterProjection","renderer","camera","viewport","dpr","devicePixelRatio","getDevicePixelRatio","width","height","offset","length","translationMat","array","mul","projectionMatrix","invert","invProjectionMatrix","resetFrame","getFrame","getSourceFrameBuffer","getOutputTexture","resize","dirty","isFinished","render","sourceTex","notOutput","setUniform","bind","unbind","tmp","dispose"],"mappings":"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","sourcesContent":["// Temporal Super Sample for static Scene\nimport halton from './halton';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Shader from 'claygl/src/Shader';\nimport Matrix4 from 'claygl/src/math/Matrix4';\n\nfunction TemporalSuperSampling(frames) {\n  var haltonSequence = [];\n\n  for (var i = 0; i < 30; i++) {\n    haltonSequence.push([halton(i, 2), halton(i, 3)]);\n  }\n\n  this._haltonSequence = haltonSequence;\n  this._frame = 0;\n  this._sourceTex = new Texture2D();\n  this._sourceFb = new FrameBuffer();\n\n  this._sourceFb.attach(this._sourceTex); // Frame texture before temporal supersampling\n\n\n  this._prevFrameTex = new Texture2D();\n  this._outputTex = new Texture2D();\n  var blendPass = this._blendPass = new Pass({\n    fragment: Shader.source('clay.compositor.blend')\n  });\n  blendPass.material.disableTexturesAll();\n  blendPass.material.enableTexture(['texture1', 'texture2']);\n  this._blendFb = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._outputPass = new Pass({\n    fragment: Shader.source('clay.compositor.output'),\n    // TODO, alpha is premultiplied?\n    blendWithPrevious: true\n  });\n\n  this._outputPass.material.define('fragment', 'OUTPUT_ALPHA');\n\n  this._outputPass.material.blend = function (_gl) {\n    // FIXME.\n    // Output is premultiplied alpha when BLEND is enabled ?\n    // http://stackoverflow.com/questions/2171085/opengl-blending-with-previous-contents-of-framebuffer\n    _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);\n\n    _gl.blendFuncSeparate(_gl.ONE, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);\n  };\n}\n\nTemporalSuperSampling.prototype = {\n  constructor: TemporalSuperSampling,\n\n  /**\n   * Jitter camera projectionMatrix\n   * @parma {clay.Renderer} renderer\n   * @param {clay.Camera} camera\n   */\n  jitterProjection: function (renderer, camera) {\n    var viewport = renderer.viewport;\n    var dpr = viewport.devicePixelRatio || renderer.getDevicePixelRatio();\n    var width = viewport.width * dpr;\n    var height = viewport.height * dpr;\n    var offset = this._haltonSequence[this._frame % this._haltonSequence.length];\n    var translationMat = new Matrix4();\n    translationMat.array[12] = (offset[0] * 2.0 - 1.0) / width;\n    translationMat.array[13] = (offset[1] * 2.0 - 1.0) / height;\n    Matrix4.mul(camera.projectionMatrix, translationMat, camera.projectionMatrix);\n    Matrix4.invert(camera.invProjectionMatrix, camera.projectionMatrix);\n  },\n\n  /**\n   * Reset accumulating frame\n   */\n  resetFrame: function () {\n    this._frame = 0;\n  },\n\n  /**\n   * Return current frame\n   */\n  getFrame: function () {\n    return this._frame;\n  },\n\n  /**\n   * Get source framebuffer for usage\n   */\n  getSourceFrameBuffer: function () {\n    return this._sourceFb;\n  },\n  getOutputTexture: function () {\n    return this._outputTex;\n  },\n  resize: function (width, height) {\n    this._prevFrameTex.width = width;\n    this._prevFrameTex.height = height;\n    this._outputTex.width = width;\n    this._outputTex.height = height;\n    this._sourceTex.width = width;\n    this._sourceTex.height = height;\n\n    this._prevFrameTex.dirty();\n\n    this._outputTex.dirty();\n\n    this._sourceTex.dirty();\n  },\n  isFinished: function () {\n    return this._frame >= this._haltonSequence.length;\n  },\n  render: function (renderer, sourceTex, notOutput) {\n    var blendPass = this._blendPass;\n\n    if (this._frame === 0) {\n      // Direct output\n      blendPass.setUniform('weight1', 0);\n      blendPass.setUniform('weight2', 1);\n    } else {\n      blendPass.setUniform('weight1', 0.9);\n      blendPass.setUniform('weight2', 0.1);\n    }\n\n    blendPass.setUniform('texture1', this._prevFrameTex);\n    blendPass.setUniform('texture2', sourceTex || this._sourceTex);\n\n    this._blendFb.attach(this._outputTex);\n\n    this._blendFb.bind(renderer);\n\n    blendPass.render(renderer);\n\n    this._blendFb.unbind(renderer);\n\n    if (!notOutput) {\n      this._outputPass.setUniform('texture', this._outputTex);\n\n      this._outputPass.render(renderer);\n    } // Swap texture\n\n\n    var tmp = this._prevFrameTex;\n    this._prevFrameTex = this._outputTex;\n    this._outputTex = tmp;\n    this._frame++;\n  },\n  dispose: function (renderer) {\n    this._sourceFb.dispose(renderer);\n\n    this._blendFb.dispose(renderer);\n\n    this._prevFrameTex.dispose(renderer);\n\n    this._outputTex.dispose(renderer);\n\n    this._sourceTex.dispose(renderer);\n\n    this._outputPass.dispose(renderer);\n\n    this._blendPass.dispose(renderer);\n  }\n};\nexport default TemporalSuperSampling;"]},"metadata":{},"sourceType":"module"}