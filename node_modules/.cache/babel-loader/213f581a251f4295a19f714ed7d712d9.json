{"ast":null,"code":"'use strict';\n\nvar _typeof2 = require(\"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.json.stringify.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n};\n\nvar _jsBase = require('js-base64');\n\nvar _sourceMap = require('source-map');\n\nvar _sourceMap2 = _interopRequireDefault(_sourceMap);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\n\n\nvar PreviousMap = function () {\n  /**\n   * @param {string}         css    - input CSS source\n   * @param {processOptions} [opts] - {@link Processor#process} options\n   */\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n\n    this.loadAnnotation(css);\n    /**\n     * @member {boolean} - Was source map inlined by data-uri to input CSS.\n     */\n\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} object with source map information\n   */\n\n\n  PreviousMap.prototype.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap2.default.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  };\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present\n   */\n\n\n  PreviousMap.prototype.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n\n  PreviousMap.prototype.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n\n  PreviousMap.prototype.loadAnnotation = function loadAnnotation(css) {\n    var match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n    if (match) this.annotation = match[1].trim();\n  };\n\n  PreviousMap.prototype.decodeInline = function decodeInline(text) {\n    var utfd64 = 'data:application/json;charset=utf-8;base64,';\n    var utf64 = 'data:application/json;charset=utf8;base64,';\n    var b64 = 'data:application/json;base64,';\n    var uri = 'data:application/json,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    } else if (this.startWith(text, b64)) {\n      return _jsBase.Base64.decode(text.substr(b64.length));\n    } else if (this.startWith(text, utf64)) {\n      return _jsBase.Base64.decode(text.substr(utf64.length));\n    } else if (this.startWith(text, utfd64)) {\n      return _jsBase.Base64.decode(text.substr(utfd64.length));\n    } else {\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  };\n\n  PreviousMap.prototype.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n\n        if (prevPath && _fs2.default.existsSync && _fs2.default.existsSync(prevPath)) {\n          return _fs2.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap2.default.SourceMapConsumer) {\n        return _sourceMap2.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap2.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path2.default.join(_path2.default.dirname(file), map);\n      this.root = _path2.default.dirname(map);\n\n      if (_fs2.default.existsSync && _fs2.default.existsSync(map)) {\n        return _fs2.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n\n  PreviousMap.prototype.isMap = function isMap(map) {\n    if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n\n  return PreviousMap;\n}();\n\nexports.default = PreviousMap;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["PreviousMap","css","opts","_classCallCheck","loadAnnotation","inline","startWith","annotation","prev","map","undefined","text","loadMap","from","consumer","consumerCache","_sourceMap2","SourceMapConsumer","withContent","sourcesContent","length","string","start","substr","match","trim","decodeInline","utfd64","utf64","b64","uri","decodeURIComponent","_jsBase","decode","encoding","Error","file","prevPath","_fs2","existsSync","readFileSync","toString","SourceMapGenerator","fromSourceMap","isMap","JSON","stringify","_path2","join","dirname","root","mappings","_mappings"],"sources":["previous-map.es6"],"sourcesContent":["import { Base64 } from 'js-base64';\nimport   mozilla  from 'source-map';\nimport   path     from 'path';\nimport   fs       from 'fs';\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n\n    /**\n     * @param {string}         css    - input CSS source\n     * @param {processOptions} [opts] - {@link Processor#process} options\n     */\n    constructor(css, opts) {\n        this.loadAnnotation(css);\n        /**\n         * @member {boolean} - Was source map inlined by data-uri to input CSS.\n         */\n        this.inline = this.startWith(this.annotation, 'data:');\n\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if ( text ) this.text = text;\n    }\n\n    /**\n     * Create a instance of `SourceMapGenerator` class\n     * from the `source-map` library to work with source map information.\n     *\n     * It is lazy method, so it will create object only on first call\n     * and then it will use cache.\n     *\n     * @return {SourceMapGenerator} object with source map information\n     */\n    consumer() {\n        if ( !this.consumerCache ) {\n            this.consumerCache = new mozilla.SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n\n    /**\n     * Does source map contains `sourcesContent` with input source text.\n     *\n     * @return {boolean} Is `sourcesContent` present\n     */\n    withContent() {\n        return !!(this.consumer().sourcesContent &&\n                  this.consumer().sourcesContent.length > 0);\n    }\n\n    startWith(string, start) {\n        if ( !string ) return false;\n        return string.substr(0, start.length) === start;\n    }\n\n    loadAnnotation(css) {\n        let match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n        if ( match ) this.annotation = match[1].trim();\n    }\n\n    decodeInline(text) {\n        let utfd64 = 'data:application/json;charset=utf-8;base64,';\n        let utf64  = 'data:application/json;charset=utf8;base64,';\n        let b64    = 'data:application/json;base64,';\n        let uri    = 'data:application/json,';\n\n        if ( this.startWith(text, uri) ) {\n            return decodeURIComponent( text.substr(uri.length) );\n\n        } else if ( this.startWith(text, b64) ) {\n            return Base64.decode( text.substr(b64.length) );\n\n        } else if ( this.startWith(text, utf64) ) {\n            return Base64.decode( text.substr(utf64.length) );\n\n        } else if ( this.startWith(text, utfd64) ) {\n            return Base64.decode( text.substr(utfd64.length) );\n\n        } else {\n            let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n            throw new Error('Unsupported source map encoding ' + encoding);\n        }\n    }\n\n    loadMap(file, prev) {\n        if ( prev === false ) return false;\n\n        if ( prev ) {\n            if ( typeof prev === 'string' ) {\n                return prev;\n            } else if ( typeof prev === 'function' ) {\n                let prevPath = prev(file);\n                if ( prevPath && fs.existsSync && fs.existsSync(prevPath) ) {\n                    return fs.readFileSync(prevPath, 'utf-8').toString().trim();\n                } else {\n                    throw new Error('Unable to load previous source map: ' +\n                    prevPath.toString());\n                }\n            } else if ( prev instanceof mozilla.SourceMapConsumer ) {\n                return mozilla.SourceMapGenerator\n                    .fromSourceMap(prev).toString();\n            } else if ( prev instanceof mozilla.SourceMapGenerator ) {\n                return prev.toString();\n            } else if ( this.isMap(prev) ) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error('Unsupported previous source map format: ' +\n                    prev.toString());\n            }\n\n        } else if ( this.inline ) {\n            return this.decodeInline(this.annotation);\n\n        } else if ( this.annotation ) {\n            let map = this.annotation;\n            if ( file ) map = path.join(path.dirname(file), map);\n\n            this.root = path.dirname(map);\n            if ( fs.existsSync && fs.existsSync(map) ) {\n                return fs.readFileSync(map, 'utf-8').toString().trim();\n            } else {\n                return false;\n            }\n        }\n    }\n\n    isMap(map) {\n        if ( typeof map !== 'object' ) return false;\n        return typeof map.mappings === 'string' ||\n               typeof map._mappings === 'string';\n    }\n}\n\nexport default PreviousMap;\n"]},"metadata":{},"sourceType":"script"}