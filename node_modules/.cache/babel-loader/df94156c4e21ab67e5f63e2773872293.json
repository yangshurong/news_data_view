{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport mat2d from '../glmatrix/mat2d';\n/**\n * @constructor\n * @alias clay.Matrix2d\n */\n\nvar Matrix2d = function Matrix2d() {\n  /**\n   * Storage of Matrix2d\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix2d#\n   */\n  this.array = mat2d.create();\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix2d#\n   */\n\n  this._dirty = true;\n};\n\nMatrix2d.prototype = {\n  constructor: Matrix2d,\n\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function setArray(arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Matrix2d\n   * @return {clay.Matrix2d}\n   */\n  clone: function clone() {\n    return new Matrix2d().copy(this);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  copy: function copy(b) {\n    mat2d.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function determinant() {\n    return mat2d.determinant(this.array);\n  },\n\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix2d}\n   */\n  identity: function identity() {\n    mat2d.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Invert self\n   * @return {clay.Matrix2d}\n   */\n  invert: function invert() {\n    mat2d.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  mul: function mul(b) {\n    mat2d.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix2d}\n   */\n  mulLeft: function mulLeft(b) {\n    mat2d.mul(this.array, b.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  multiply: function multiply(b) {\n    mat2d.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix2d}\n   */\n  multiplyLeft: function multiplyLeft(b) {\n    mat2d.multiply(this.array, b.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian\n   * @param  {number}   rad\n   * @return {clay.Matrix2d}\n   */\n  rotate: function rotate(rad) {\n    mat2d.rotate(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self by s\n   * @param  {clay.Vector2}  s\n   * @return {clay.Matrix2d}\n   */\n  scale: function scale(s) {\n    mat2d.scale(this.array, this.array, s.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Translate self by v\n   * @param  {clay.Vector2}  v\n   * @return {clay.Matrix2d}\n   */\n  translate: function translate(v) {\n    mat2d.translate(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\n\nMatrix2d.copy = function (out, a) {\n  mat2d.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2d} a\n * @return {number}\n */\n\n\nMatrix2d.determinant = function (a) {\n  return mat2d.determinant(a.array);\n};\n/**\n * @param  {clay.Matrix2d} out\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.identity = function (out) {\n  mat2d.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.invert = function (out, a) {\n  mat2d.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.mul = function (out, a, b) {\n  mat2d.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.multiply = Matrix2d.mul;\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {number}   rad\n * @return {clay.Matrix2d}\n */\n\nMatrix2d.rotate = function (out, a, rad) {\n  mat2d.rotate(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.scale = function (out, a, v) {\n  mat2d.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\n\n\nMatrix2d.translate = function (out, a, v) {\n  mat2d.translate(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Matrix2d;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/math/Matrix2d.js"],"names":["mat2d","Matrix2d","array","create","_dirty","prototype","constructor","setArray","arr","i","length","clone","copy","b","determinant","identity","invert","mul","mulLeft","multiply","multiplyLeft","rotate","rad","scale","s","translate","v","toString","Array","join","call","toArray","slice","out","a"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,GAAW;AACtB;AACJ;AACA;AACA;AACA;AACA;AACI,OAAKC,KAAL,GAAaF,KAAK,CAACG,MAAN,EAAb;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,MAAL,GAAc,IAAd;AACH,CAfD;;AAiBAH,QAAQ,CAACI,SAAT,GAAqB;AAEjBC,EAAAA,WAAW,EAAEL,QAFI;;AAIjB;AACJ;AACA;AACA;AACIM,EAAAA,QAAQ,EAAE,kBAAUC,GAAV,EAAe;AACrB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,KAAL,CAAWQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,WAAKP,KAAL,CAAWO,CAAX,IAAgBD,GAAG,CAACC,CAAD,CAAnB;AACH;;AACD,SAAKL,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAdgB;;AAejB;AACJ;AACA;AACA;AACIO,EAAAA,KAAK,EAAE,iBAAW;AACd,WAAQ,IAAIV,QAAJ,EAAD,CAAiBW,IAAjB,CAAsB,IAAtB,CAAP;AACH,GArBgB;;AAuBjB;AACJ;AACA;AACA;AACA;AACIA,EAAAA,IAAI,EAAE,cAASC,CAAT,EAAY;AACdb,IAAAA,KAAK,CAACY,IAAN,CAAW,KAAKV,KAAhB,EAAuBW,CAAC,CAACX,KAAzB;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAhCgB;;AAkCjB;AACJ;AACA;AACA;AACIU,EAAAA,WAAW,EAAE,uBAAW;AACpB,WAAOd,KAAK,CAACc,WAAN,CAAkB,KAAKZ,KAAvB,CAAP;AACH,GAxCgB;;AA0CjB;AACJ;AACA;AACA;AACIa,EAAAA,QAAQ,EAAE,oBAAW;AACjBf,IAAAA,KAAK,CAACe,QAAN,CAAe,KAAKb,KAApB;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAlDgB;;AAoDjB;AACJ;AACA;AACA;AACIY,EAAAA,MAAM,EAAE,kBAAW;AACfhB,IAAAA,KAAK,CAACgB,MAAN,CAAa,KAAKd,KAAlB,EAAyB,KAAKA,KAA9B;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GA5DgB;;AA8DjB;AACJ;AACA;AACA;AACA;AACIa,EAAAA,GAAG,EAAE,aAASJ,CAAT,EAAY;AACbb,IAAAA,KAAK,CAACiB,GAAN,CAAU,KAAKf,KAAf,EAAsB,KAAKA,KAA3B,EAAkCW,CAAC,CAACX,KAApC;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAvEgB;;AAyEjB;AACJ;AACA;AACA;AACA;AACIc,EAAAA,OAAO,EAAE,iBAASL,CAAT,EAAY;AACjBb,IAAAA,KAAK,CAACiB,GAAN,CAAU,KAAKf,KAAf,EAAsBW,CAAC,CAACX,KAAxB,EAA+B,KAAKA,KAApC;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAlFgB;;AAoFjB;AACJ;AACA;AACA;AACA;AACIe,EAAAA,QAAQ,EAAE,kBAASN,CAAT,EAAY;AAClBb,IAAAA,KAAK,CAACmB,QAAN,CAAe,KAAKjB,KAApB,EAA2B,KAAKA,KAAhC,EAAuCW,CAAC,CAACX,KAAzC;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GA7FgB;;AA+FjB;AACJ;AACA;AACA;AACA;AACIgB,EAAAA,YAAY,EAAE,sBAASP,CAAT,EAAY;AACtBb,IAAAA,KAAK,CAACmB,QAAN,CAAe,KAAKjB,KAApB,EAA2BW,CAAC,CAACX,KAA7B,EAAoC,KAAKA,KAAzC;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAxGgB;;AA0GjB;AACJ;AACA;AACA;AACA;AACIiB,EAAAA,MAAM,EAAE,gBAASC,GAAT,EAAc;AAClBtB,IAAAA,KAAK,CAACqB,MAAN,CAAa,KAAKnB,KAAlB,EAAyB,KAAKA,KAA9B,EAAqCoB,GAArC;AACA,SAAKlB,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAnHgB;;AAqHjB;AACJ;AACA;AACA;AACA;AACImB,EAAAA,KAAK,EAAE,eAASC,CAAT,EAAY;AACfxB,IAAAA,KAAK,CAACuB,KAAN,CAAY,KAAKrB,KAAjB,EAAwB,KAAKA,KAA7B,EAAoCsB,CAAC,CAACtB,KAAtC;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GA9HgB;;AAgIjB;AACJ;AACA;AACA;AACA;AACIqB,EAAAA,SAAS,EAAE,mBAASC,CAAT,EAAY;AACnB1B,IAAAA,KAAK,CAACyB,SAAN,CAAgB,KAAKvB,KAArB,EAA4B,KAAKA,KAAjC,EAAwCwB,CAAC,CAACxB,KAA1C;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,WAAO,IAAP;AACH,GAzIgB;AA2IjBuB,EAAAA,QAAQ,EAAE,oBAAW;AACjB,WAAO,MAAMC,KAAK,CAACvB,SAAN,CAAgBwB,IAAhB,CAAqBC,IAArB,CAA0B,KAAK5B,KAA/B,EAAsC,GAAtC,CAAN,GAAmD,GAA1D;AACH,GA7IgB;AA+IjB6B,EAAAA,OAAO,EAAE,mBAAY;AACjB,WAAOH,KAAK,CAACvB,SAAN,CAAgB2B,KAAhB,CAAsBF,IAAtB,CAA2B,KAAK5B,KAAhC,CAAP;AACH;AAjJgB,CAArB;AAoJA;AACA;AACA;AACA;AACA;;AACAD,QAAQ,CAACW,IAAT,GAAgB,UAASqB,GAAT,EAAcC,CAAd,EAAiB;AAC7BlC,EAAAA,KAAK,CAACY,IAAN,CAAWqB,GAAG,CAAC/B,KAAf,EAAsBgC,CAAC,CAAChC,KAAxB;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACa,WAAT,GAAuB,UAASoB,CAAT,EAAY;AAC/B,SAAOlC,KAAK,CAACc,WAAN,CAAkBoB,CAAC,CAAChC,KAApB,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;;;AACAD,QAAQ,CAACc,QAAT,GAAoB,UAASkB,GAAT,EAAc;AAC9BjC,EAAAA,KAAK,CAACe,QAAN,CAAekB,GAAG,CAAC/B,KAAnB;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACe,MAAT,GAAkB,UAASiB,GAAT,EAAcC,CAAd,EAAiB;AAC/BlC,EAAAA,KAAK,CAACgB,MAAN,CAAaiB,GAAG,CAAC/B,KAAjB,EAAwBgC,CAAC,CAAChC,KAA1B;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACgB,GAAT,GAAe,UAASgB,GAAT,EAAcC,CAAd,EAAiBrB,CAAjB,EAAoB;AAC/Bb,EAAAA,KAAK,CAACiB,GAAN,CAAUgB,GAAG,CAAC/B,KAAd,EAAqBgC,CAAC,CAAChC,KAAvB,EAA8BW,CAAC,CAACX,KAAhC;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACkB,QAAT,GAAoBlB,QAAQ,CAACgB,GAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAhB,QAAQ,CAACoB,MAAT,GAAkB,UAASY,GAAT,EAAcC,CAAd,EAAiBZ,GAAjB,EAAsB;AACpCtB,EAAAA,KAAK,CAACqB,MAAN,CAAaY,GAAG,CAAC/B,KAAjB,EAAwBgC,CAAC,CAAChC,KAA1B,EAAiCoB,GAAjC;AACAW,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACsB,KAAT,GAAiB,UAASU,GAAT,EAAcC,CAAd,EAAiBR,CAAjB,EAAoB;AACjC1B,EAAAA,KAAK,CAACuB,KAAN,CAAYU,GAAG,CAAC/B,KAAhB,EAAuBgC,CAAC,CAAChC,KAAzB,EAAgCwB,CAAC,CAACxB,KAAlC;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,QAAQ,CAACwB,SAAT,GAAqB,UAASQ,GAAT,EAAcC,CAAd,EAAiBR,CAAjB,EAAoB;AACrC1B,EAAAA,KAAK,CAACyB,SAAN,CAAgBQ,GAAG,CAAC/B,KAApB,EAA2BgC,CAAC,CAAChC,KAA7B,EAAoCwB,CAAC,CAACxB,KAAtC;AACA+B,EAAAA,GAAG,CAAC7B,MAAJ,GAAa,IAAb;AACA,SAAO6B,GAAP;AACH,CAJD;;AAMA,eAAehC,QAAf","sourcesContent":["import mat2d from '../glmatrix/mat2d';\n\n/**\n * @constructor\n * @alias clay.Matrix2d\n */\nvar Matrix2d = function() {\n    /**\n     * Storage of Matrix2d\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix2d#\n     */\n    this.array = mat2d.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix2d#\n     */\n    this._dirty = true;\n};\n\nMatrix2d.prototype = {\n\n    constructor: Matrix2d,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Clone a new Matrix2d\n     * @return {clay.Matrix2d}\n     */\n    clone: function() {\n        return (new Matrix2d()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    copy: function(b) {\n        mat2d.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function() {\n        return mat2d.determinant(this.array);\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix2d}\n     */\n    identity: function() {\n        mat2d.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix2d}\n     */\n    invert: function() {\n        mat2d.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    mul: function(b) {\n        mat2d.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix2d}\n     */\n    mulLeft: function(b) {\n        mat2d.mul(this.array, b.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    multiply: function(b) {\n        mat2d.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix2d}\n     */\n    multiplyLeft: function(b) {\n        mat2d.multiply(this.array, b.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian\n     * @param  {number}   rad\n     * @return {clay.Matrix2d}\n     */\n    rotate: function(rad) {\n        mat2d.rotate(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * @param  {clay.Vector2}  s\n     * @return {clay.Matrix2d}\n     */\n    scale: function(s) {\n        mat2d.scale(this.array, this.array, s.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Translate self by v\n     * @param  {clay.Vector2}  v\n     * @return {clay.Matrix2d}\n     */\n    translate: function(v) {\n        mat2d.translate(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.copy = function(out, a) {\n    mat2d.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} a\n * @return {number}\n */\nMatrix2d.determinant = function(a) {\n    return mat2d.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @return {clay.Matrix2d}\n */\nMatrix2d.identity = function(out) {\n    mat2d.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.invert = function(out, a) {\n    mat2d.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.mul = function(out, a, b) {\n    mat2d.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.multiply = Matrix2d.mul;\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {number}   rad\n * @return {clay.Matrix2d}\n */\nMatrix2d.rotate = function(out, a, rad) {\n    mat2d.rotate(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.scale = function(out, a, v) {\n    mat2d.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.translate = function(out, a, v) {\n    mat2d.translate(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix2d;\n"]},"metadata":{},"sourceType":"module"}