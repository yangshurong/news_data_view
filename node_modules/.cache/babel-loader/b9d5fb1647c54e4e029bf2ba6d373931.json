{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Scatter3DSeries from './Scatter3DSeries';\nimport Scatter3DView from './Scatter3DView';\nexport function install(registers) {\n  registers.registerChartView(Scatter3DView);\n  registers.registerSeriesModel(Scatter3DSeries);\n  registers.registerLayout({\n    seriesType: 'scatter3D',\n    reset: function reset(seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        var coordDims = coordSys.dimensions;\n\n        if (coordDims.length < 3) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('scatter3D needs 3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        var item = [];\n        var out = [];\n        return {\n          progress: function progress(params, data) {\n            var points = new Float32Array((params.end - params.start) * 3);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var idx3 = (idx - params.start) * 3;\n              item[0] = data.get(dims[0], idx);\n              item[1] = data.get(dims[1], idx);\n              item[2] = data.get(dims[2], idx);\n              coordSys.dataToPoint(item, out);\n              points[idx3] = out[0];\n              points[idx3 + 1] = out[1];\n              points[idx3 + 2] = out[2];\n            }\n\n            data.setLayout('points', points);\n          }\n        };\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/scatter3D/install.js"],"names":["Scatter3DSeries","Scatter3DView","install","registers","registerChartView","registerSeriesModel","registerLayout","seriesType","reset","seriesModel","coordSys","coordinateSystem","coordDims","dimensions","length","process","env","NODE_ENV","console","error","dims","map","coordDim","coordDimToDataDim","item","out","progress","params","data","points","Float32Array","end","start","idx","idx3","get","dataToPoint","setLayout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjCA,EAAAA,SAAS,CAACC,iBAAV,CAA4BH,aAA5B;AACAE,EAAAA,SAAS,CAACE,mBAAV,CAA8BL,eAA9B;AACAG,EAAAA,SAAS,CAACG,cAAV,CAAyB;AACvBC,IAAAA,UAAU,EAAE,WADW;AAEvBC,IAAAA,KAAK,EAAE,eAAUC,WAAV,EAAuB;AAC5B,UAAIC,QAAQ,GAAGD,WAAW,CAACE,gBAA3B;;AAEA,UAAID,QAAJ,EAAc;AACZ,YAAIE,SAAS,GAAGF,QAAQ,CAACG,UAAzB;;AAEA,YAAID,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,YAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;AACD;;AAED;AACD;;AAED,YAAIC,IAAI,GAAGR,SAAS,CAACS,GAAV,CAAc,UAAUC,QAAV,EAAoB;AAC3C,iBAAOb,WAAW,CAACc,iBAAZ,CAA8BD,QAA9B,EAAwC,CAAxC,CAAP;AACD,SAFU,CAAX;AAGA,YAAIE,IAAI,GAAG,EAAX;AACA,YAAIC,GAAG,GAAG,EAAV;AACA,eAAO;AACLC,UAAAA,QAAQ,EAAE,kBAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAChC,gBAAIC,MAAM,GAAG,IAAIC,YAAJ,CAAiB,CAACH,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,KAArB,IAA8B,CAA/C,CAAb;;AAEA,iBAAK,IAAIC,GAAG,GAAGN,MAAM,CAACK,KAAtB,EAA6BC,GAAG,GAAGN,MAAM,CAACI,GAA1C,EAA+CE,GAAG,EAAlD,EAAsD;AACpD,kBAAIC,IAAI,GAAG,CAACD,GAAG,GAAGN,MAAM,CAACK,KAAd,IAAuB,CAAlC;AACAR,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,IAAI,CAACO,GAAL,CAASf,IAAI,CAAC,CAAD,CAAb,EAAkBa,GAAlB,CAAV;AACAT,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,IAAI,CAACO,GAAL,CAASf,IAAI,CAAC,CAAD,CAAb,EAAkBa,GAAlB,CAAV;AACAT,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,IAAI,CAACO,GAAL,CAASf,IAAI,CAAC,CAAD,CAAb,EAAkBa,GAAlB,CAAV;AACAvB,cAAAA,QAAQ,CAAC0B,WAAT,CAAqBZ,IAArB,EAA2BC,GAA3B;AACAI,cAAAA,MAAM,CAACK,IAAD,CAAN,GAAeT,GAAG,CAAC,CAAD,CAAlB;AACAI,cAAAA,MAAM,CAACK,IAAI,GAAG,CAAR,CAAN,GAAmBT,GAAG,CAAC,CAAD,CAAtB;AACAI,cAAAA,MAAM,CAACK,IAAI,GAAG,CAAR,CAAN,GAAmBT,GAAG,CAAC,CAAD,CAAtB;AACD;;AAEDG,YAAAA,IAAI,CAACS,SAAL,CAAe,QAAf,EAAyBR,MAAzB;AACD;AAhBI,SAAP;AAkBD;AACF;AAxCsB,GAAzB;AA0CD","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Scatter3DSeries from './Scatter3DSeries';\nimport Scatter3DView from './Scatter3DView';\nexport function install(registers) {\n  registers.registerChartView(Scatter3DView);\n  registers.registerSeriesModel(Scatter3DSeries);\n  registers.registerLayout({\n    seriesType: 'scatter3D',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        var coordDims = coordSys.dimensions;\n\n        if (coordDims.length < 3) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('scatter3D needs 3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        var item = [];\n        var out = [];\n        return {\n          progress: function (params, data) {\n            var points = new Float32Array((params.end - params.start) * 3);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var idx3 = (idx - params.start) * 3;\n              item[0] = data.get(dims[0], idx);\n              item[1] = data.get(dims[1], idx);\n              item[2] = data.get(dims[2], idx);\n              coordSys.dataToPoint(item, out);\n              points[idx3] = out[0];\n              points[idx3 + 1] = out[1];\n              points[idx3 + 2] = out[2];\n            }\n\n            data.setLayout('points', points);\n          }\n        };\n      }\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}