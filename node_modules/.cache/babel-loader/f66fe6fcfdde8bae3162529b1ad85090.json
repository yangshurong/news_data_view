{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\n\nfunction swap(arr, a, b) {\n  var tmp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = tmp;\n}\n\nfunction partition(arr, pivot, left, right, compare) {\n  var storeIndex = left;\n  var pivotValue = arr[pivot]; // put the pivot on the right\n\n  swap(arr, pivot, right); // go through the rest\n\n  for (var v = left; v < right; v++) {\n    if (compare(arr[v], pivotValue) < 0) {\n      swap(arr, v, storeIndex);\n      storeIndex++;\n    }\n  } // finally put the pivot in the correct place\n\n\n  swap(arr, right, storeIndex);\n  return storeIndex;\n}\n\nfunction quickSort(array, compare, left, right) {\n  if (left < right) {\n    var pivot = Math.floor((left + right) / 2);\n    var newPivot = partition(array, pivot, left, right, compare);\n    quickSort(array, compare, left, newPivot - 1);\n    quickSort(array, compare, newPivot + 1, right);\n  }\n} // TODO Test.\n\n\nfunction ProgressiveQuickSort() {\n  // this._pivotList = new LinkedList();\n  this._parts = [];\n}\n\nProgressiveQuickSort.prototype.step = function (arr, compare, frame) {\n  var len = arr.length;\n\n  if (frame === 0) {\n    this._parts = [];\n    this._sorted = false; // Pick a start pivot;\n\n    var pivot = Math.floor(len / 2);\n\n    this._parts.push({\n      pivot: pivot,\n      left: 0,\n      right: len - 1\n    });\n\n    this._currentSortPartIdx = 0;\n  }\n\n  if (this._sorted) {\n    return;\n  }\n\n  var parts = this._parts;\n\n  if (parts.length === 0) {\n    this._sorted = true; // Already finished.\n\n    return true;\n  } else if (parts.length < 512) {\n    // Sort large parts in about 10 frames.\n    for (var i = 0; i < parts.length; i++) {\n      // Partition and Modify the pivot index.\n      parts[i].pivot = partition(arr, parts[i].pivot, parts[i].left, parts[i].right, compare);\n    }\n\n    var subdividedParts = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Subdivide left\n      var left = parts[i].left;\n      var right = parts[i].pivot - 1;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      } // Subdivide right\n\n\n      var left = parts[i].pivot + 1;\n      var right = parts[i].right;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      }\n    }\n\n    parts = this._parts = subdividedParts;\n  } else {\n    // console.time('sort');\n    // Finally quick sort each parts in 10 frames.\n    for (var i = 0; i < Math.floor(parts.length / 10); i++) {\n      // Sort near parts first.\n      var idx = parts.length - 1 - this._currentSortPartIdx;\n      quickSort(arr, compare, parts[idx].left, parts[idx].right);\n      this._currentSortPartIdx++; // Finish sort\n\n      if (this._currentSortPartIdx === parts.length) {\n        this._sorted = true;\n        return true;\n      }\n    } // console.timeEnd('sort');\n\n  }\n\n  return false;\n};\n\nProgressiveQuickSort.sort = quickSort;\nexport default ProgressiveQuickSort;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/util/ProgressiveQuickSort.js"],"names":["swap","arr","a","b","tmp","partition","pivot","left","right","compare","storeIndex","pivotValue","v","quickSort","array","Math","floor","newPivot","ProgressiveQuickSort","_parts","prototype","step","frame","len","length","_sorted","push","_currentSortPartIdx","parts","i","subdividedParts","idx","sort"],"mappings":"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","sourcesContent":["function swap(arr, a, b) {\n  var tmp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = tmp;\n}\n\nfunction partition(arr, pivot, left, right, compare) {\n  var storeIndex = left;\n  var pivotValue = arr[pivot]; // put the pivot on the right\n\n  swap(arr, pivot, right); // go through the rest\n\n  for (var v = left; v < right; v++) {\n    if (compare(arr[v], pivotValue) < 0) {\n      swap(arr, v, storeIndex);\n      storeIndex++;\n    }\n  } // finally put the pivot in the correct place\n\n\n  swap(arr, right, storeIndex);\n  return storeIndex;\n}\n\nfunction quickSort(array, compare, left, right) {\n  if (left < right) {\n    var pivot = Math.floor((left + right) / 2);\n    var newPivot = partition(array, pivot, left, right, compare);\n    quickSort(array, compare, left, newPivot - 1);\n    quickSort(array, compare, newPivot + 1, right);\n  }\n} // TODO Test.\n\n\nfunction ProgressiveQuickSort() {\n  // this._pivotList = new LinkedList();\n  this._parts = [];\n}\n\nProgressiveQuickSort.prototype.step = function (arr, compare, frame) {\n  var len = arr.length;\n\n  if (frame === 0) {\n    this._parts = [];\n    this._sorted = false; // Pick a start pivot;\n\n    var pivot = Math.floor(len / 2);\n\n    this._parts.push({\n      pivot: pivot,\n      left: 0,\n      right: len - 1\n    });\n\n    this._currentSortPartIdx = 0;\n  }\n\n  if (this._sorted) {\n    return;\n  }\n\n  var parts = this._parts;\n\n  if (parts.length === 0) {\n    this._sorted = true; // Already finished.\n\n    return true;\n  } else if (parts.length < 512) {\n    // Sort large parts in about 10 frames.\n    for (var i = 0; i < parts.length; i++) {\n      // Partition and Modify the pivot index.\n      parts[i].pivot = partition(arr, parts[i].pivot, parts[i].left, parts[i].right, compare);\n    }\n\n    var subdividedParts = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Subdivide left\n      var left = parts[i].left;\n      var right = parts[i].pivot - 1;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      } // Subdivide right\n\n\n      var left = parts[i].pivot + 1;\n      var right = parts[i].right;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      }\n    }\n\n    parts = this._parts = subdividedParts;\n  } else {\n    // console.time('sort');\n    // Finally quick sort each parts in 10 frames.\n    for (var i = 0; i < Math.floor(parts.length / 10); i++) {\n      // Sort near parts first.\n      var idx = parts.length - 1 - this._currentSortPartIdx;\n      quickSort(arr, compare, parts[idx].left, parts[idx].right);\n      this._currentSortPartIdx++; // Finish sort\n\n      if (this._currentSortPartIdx === parts.length) {\n        this._sorted = true;\n        return true;\n      }\n    } // console.timeEnd('sort');\n\n  }\n\n  return false;\n};\n\nProgressiveQuickSort.sort = quickSort;\nexport default ProgressiveQuickSort;"]},"metadata":{},"sourceType":"module"}