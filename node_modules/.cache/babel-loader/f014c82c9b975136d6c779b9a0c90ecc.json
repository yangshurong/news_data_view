{"ast":null,"code":"/*\n (c) 2011-2014, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/mooon position and light phases.\n https://github.com/mourner/suncalc\n*/\n// shortcuts for easier to read formulas\nvar PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) {\n  return date.valueOf() / dayMs - 0.5 + J1970;\n}\n\nfunction toDays(date) {\n  return toJulian(date) - J2000;\n} // general calculations for position\n\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\n\nfunction declination(l, b) {\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth(H, phi, dec) {\n  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\n\nfunction altitude(H, phi, dec) {\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime(d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n} // general sun calculations\n\n\nfunction solarMeanAnomaly(d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude(M) {\n  var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n      // equation of center\n  P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n  var M = solarMeanAnomaly(d),\n      L = eclipticLongitude(M);\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\n\nvar SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n  var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = sunCoords(d),\n      H = siderealTime(d, lw) - c.ra;\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n};\n\nexport default SunCalc;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/sunCalc.js"],"names":["PI","Math","sin","cos","tan","asin","atan","atan2","rad","dayMs","J1970","J2000","toJulian","date","valueOf","toDays","e","rightAscension","l","b","declination","azimuth","H","phi","dec","altitude","siderealTime","d","lw","solarMeanAnomaly","eclipticLongitude","M","C","P","sunCoords","L","ra","SunCalc","getPosition","lat","lng","c"],"mappings":"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","sourcesContent":["/*\n (c) 2011-2014, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/mooon position and light phases.\n https://github.com/mourner/suncalc\n*/\n// shortcuts for easier to read formulas\nvar PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) {\n  return date.valueOf() / dayMs - 0.5 + J1970;\n}\n\nfunction toDays(date) {\n  return toJulian(date) - J2000;\n} // general calculations for position\n\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\n\nfunction declination(l, b) {\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth(H, phi, dec) {\n  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\n\nfunction altitude(H, phi, dec) {\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime(d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n} // general sun calculations\n\n\nfunction solarMeanAnomaly(d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude(M) {\n  var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n      // equation of center\n  P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n  var M = solarMeanAnomaly(d),\n      L = eclipticLongitude(M);\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\n\nvar SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n  var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = sunCoords(d),\n      H = siderealTime(d, lw) - c.ra;\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n};\n\nexport default SunCalc;"]},"metadata":{},"sourceType":"module"}