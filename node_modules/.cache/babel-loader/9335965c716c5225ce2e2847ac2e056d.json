{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _declaration = require('./declaration');\n\nvar _declaration2 = _interopRequireDefault(_declaration);\n\nvar _processor = require('./processor');\n\nvar _processor2 = _interopRequireDefault(_processor);\n\nvar _stringify = require('./stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _comment = require('./comment');\n\nvar _comment2 = _interopRequireDefault(_comment);\n\nvar _atRule = require('./at-rule');\n\nvar _atRule2 = _interopRequireDefault(_atRule);\n\nvar _vendor = require('./vendor');\n\nvar _vendor2 = _interopRequireDefault(_vendor);\n\nvar _parse = require('./parse');\n\nvar _parse2 = _interopRequireDefault(_parse);\n\nvar _list = require('./list');\n\nvar _list2 = _interopRequireDefault(_list);\n\nvar _rule = require('./rule');\n\nvar _rule2 = _interopRequireDefault(_rule);\n\nvar _root = require('./root');\n\nvar _root2 = _interopRequireDefault(_root);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a new {@link Processor} instance that will apply `plugins`\n * as CSS processors.\n *\n * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS\n *        plugins. See {@link Processor#use} for plugin format.\n *\n * @return {Processor} Processor to process multiple CSS\n *\n * @example\n * import postcss from 'postcss';\n *\n * postcss(plugins).process(css, { from, to }).then(result => {\n *   console.log(result.css);\n * });\n *\n * @namespace postcss\n */\n\n\nfunction postcss() {\n  for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0];\n  }\n\n  return new _processor2.default(plugins);\n}\n/**\n * Creates a PostCSS plugin with a standard API.\n *\n * The newly-wrapped function will provide both the name and PostCSS\n * version of the plugin.\n *\n * ```js\n *  const processor = postcss([replace]);\n *  processor.plugins[0].postcssPlugin  //=> 'postcss-replace'\n *  processor.plugins[0].postcssVersion //=> '5.1.0'\n * ```\n *\n * The plugin function receives 2 arguments: {@link Root}\n * and {@link Result} instance. The function should mutate the provided\n * `Root` node. Alternatively, you can create a new `Root` node\n * and override the `result.root` property.\n *\n * ```js\n * const cleaner = postcss.plugin('postcss-cleaner', () => {\n *   return (root, result) => {\n *     result.root = postcss.root();\n *   };\n * });\n * ```\n *\n * As a convenience, plugins also expose a `process` method so that you can use\n * them as standalone tools.\n *\n * ```js\n * cleaner.process(css, options);\n * // This is equivalent to:\n * postcss([ cleaner(options) ]).process(css);\n * ```\n *\n * Asynchronous plugins should return a `Promise` instance.\n *\n * ```js\n * postcss.plugin('postcss-import', () => {\n *   return (root, result) => {\n *     return new Promise( (resolve, reject) => {\n *       fs.readFile('base.css', (base) => {\n *         root.prepend(base);\n *         resolve();\n *       });\n *     });\n *   };\n * });\n * ```\n *\n * Add warnings using the {@link Node#warn} method.\n * Send data to other plugins using the {@link Result#messages} array.\n *\n * ```js\n * postcss.plugin('postcss-caniuse-test', () => {\n *   return (root, result) => {\n *     css.walkDecls(decl => {\n *       if ( !caniuse.support(decl.prop) ) {\n *         decl.warn(result, 'Some browsers do not support ' + decl.prop);\n *       }\n *     });\n *   };\n * });\n * ```\n *\n * @param {string} name          - PostCSS plugin name. Same as in `name`\n *                                 property in `package.json`. It will be saved\n *                                 in `plugin.postcssPlugin` property.\n * @param {function} initializer - will receive plugin options\n *                                 and should return {@link pluginFunction}\n *\n * @return {Plugin} PostCSS plugin\n */\n\n\npostcss.plugin = function plugin(name, initializer) {\n  var creator = function creator() {\n    var transformer = initializer.apply(undefined, arguments);\n    transformer.postcssPlugin = name;\n    transformer.postcssVersion = new _processor2.default().version;\n    return transformer;\n  };\n\n  var cache = void 0;\n  Object.defineProperty(creator, 'postcss', {\n    get: function get() {\n      if (!cache) cache = creator();\n      return cache;\n    }\n  });\n\n  creator.process = function (root, opts) {\n    return postcss([creator(opts)]).process(root, opts);\n  };\n\n  return creator;\n};\n/**\n * Default function to convert a node tree into a CSS string.\n *\n * @param {Node} node       - start node for stringifing. Usually {@link Root}.\n * @param {builder} builder - function to concatenate CSS from nodeâ€™s parts\n *                            or generate string and source map\n *\n * @return {void}\n *\n * @function\n */\n\n\npostcss.stringify = _stringify2.default;\n/**\n * Parses source css and returns a new {@link Root} node,\n * which contains the source CSS nodes.\n *\n * @param {string|toString} css   - string with input CSS or any object\n *                                  with toString() method, like a Buffer\n * @param {processOptions} [opts] - options with only `from` and `map` keys\n *\n * @return {Root} PostCSS AST\n *\n * @example\n * // Simple CSS concatenation with source map support\n * const root1 = postcss.parse(css1, { from: file1 });\n * const root2 = postcss.parse(css2, { from: file2 });\n * root1.append(root2).toResult().css;\n *\n * @function\n */\n\npostcss.parse = _parse2.default;\n/**\n * @member {vendor} - Contains the {@link vendor} module.\n *\n * @example\n * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']\n */\n\npostcss.vendor = _vendor2.default;\n/**\n * @member {list} - Contains the {@link list} module.\n *\n * @example\n * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']\n */\n\npostcss.list = _list2.default;\n/**\n * Creates a new {@link Comment} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Comment} new Comment node\n *\n * @example\n * postcss.comment({ text: 'test' })\n */\n\npostcss.comment = function (defaults) {\n  return new _comment2.default(defaults);\n};\n/**\n * Creates a new {@link AtRule} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {AtRule} new AtRule node\n *\n * @example\n * postcss.atRule({ name: 'charset' }).toString() //=> \"@charset\"\n */\n\n\npostcss.atRule = function (defaults) {\n  return new _atRule2.default(defaults);\n};\n/**\n * Creates a new {@link Declaration} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Declaration} new Declaration node\n *\n * @example\n * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> \"color: red\"\n */\n\n\npostcss.decl = function (defaults) {\n  return new _declaration2.default(defaults);\n};\n/**\n * Creates a new {@link Rule} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {AtRule} new Rule node\n *\n * @example\n * postcss.rule({ selector: 'a' }).toString() //=> \"a {\\n}\"\n */\n\n\npostcss.rule = function (defaults) {\n  return new _rule2.default(defaults);\n};\n/**\n * Creates a new {@link Root} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Root} new Root node\n *\n * @example\n * postcss.root({ after: '\\n' }).toString() //=> \"\\n\"\n */\n\n\npostcss.root = function (defaults) {\n  return new _root2.default(defaults);\n};\n\nexports.default = postcss;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,OAAT,GAA6B;AAAA,oCAATC,OAAS;AAATA,WAAS,MAATA,GAASC,eAATD;AAAS;;AACzB,MAAKA,QAAQE,MAARF,KAAmB,CAAnBA,IAAwBG,MAAMC,OAAND,CAAcH,QAAQ,CAARA,CAAdG,CAA7B,EAAyD;AACrDH,cAAUA,QAAQ,CAARA,CAAVA;AACH;;AACD,SAAO,wBAAcA,OAAd,CAAP;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEAD,QAAQM,MAARN,GAAiB,SAASM,MAAT,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmC;AAChD,MAAIC,UAAU,SAAVA,OAAU,GAAmB;AAC7B,QAAIC,cAAcF,uCAAlB;AACAE,gBAAYC,aAAZD,GAA6BH,IAA7BG;AACAA,gBAAYE,cAAZF,GAA8B,0BAAiBG,OAA/CH;AACA,WAAOA,WAAP;AAJJ;;AAOA,MAAII,cAAJ;AACAC,SAAOC,cAAPD,CAAsBN,OAAtBM,EAA+B,SAA/BA,EAA0C;AACtCE,OADsC,iBAChC;AACF,UAAK,CAACH,KAAN,EAAcA,QAAQL,SAARK;AACd,aAAOA,KAAP;AACH;AAJqC,GAA1CC;;AAOAN,UAAQS,OAART,GAAkB,UAAUU,IAAV,EAAgBC,IAAhB,EAAsB;AACpC,WAAOpB,QAAQ,CAAES,QAAQW,IAARX,CAAF,CAART,EAA2BkB,OAA3BlB,CAAmCmB,IAAnCnB,EAAyCoB,IAAzCpB,CAAP;AADJ;;AAIA,SAAOS,OAAP;AApBJ;AAuBA;;;;;;;;;;;;;AAWAT,QAAQqB,SAARrB;AAEA;;;;;;;;;;;;;;;;;;;AAkBAA,QAAQsB,KAARtB;AAEA;;;;;;;AAMAA,QAAQuB,MAARvB;AAEA;;;;;;;AAMAA,QAAQwB,IAARxB;AAEA;;;;;;;;;;;AAUAA,QAAQyB,OAARzB,GAAkB;AAAA,SAAY,sBAAY0B,QAAZ,CAAZ;AAAlB;AAEA;;;;;;;;;;;;AAUA1B,QAAQ2B,MAAR3B,GAAiB;AAAA,SAAY,qBAAW0B,QAAX,CAAZ;AAAjB;AAEA;;;;;;;;;;;;AAUA1B,QAAQ4B,IAAR5B,GAAe;AAAA,SAAY,0BAAgB0B,QAAhB,CAAZ;AAAf;AAEA;;;;;;;;;;;;AAUA1B,QAAQ6B,IAAR7B,GAAe;AAAA,SAAY,mBAAS0B,QAAT,CAAZ;AAAf;AAEA;;;;;;;;;;;;AAUA1B,QAAQmB,IAARnB,GAAe;AAAA,SAAY,mBAAS0B,QAAT,CAAZ;AAAf;;kBAEe1B","names":["postcss","plugins","arguments","length","Array","isArray","plugin","name","initializer","creator","transformer","postcssPlugin","postcssVersion","version","cache","Object","defineProperty","get","process","root","opts","stringify","parse","vendor","list","comment","defaults","atRule","decl","rule"],"sources":["postcss.es6"],"sourcesContent":["import Declaration from './declaration';\nimport Processor   from './processor';\nimport stringify   from './stringify';\nimport Comment     from './comment';\nimport AtRule      from './at-rule';\nimport vendor      from './vendor';\nimport parse       from './parse';\nimport list        from './list';\nimport Rule        from './rule';\nimport Root        from './root';\n\n/**\n * Create a new {@link Processor} instance that will apply `plugins`\n * as CSS processors.\n *\n * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS\n *        plugins. See {@link Processor#use} for plugin format.\n *\n * @return {Processor} Processor to process multiple CSS\n *\n * @example\n * import postcss from 'postcss';\n *\n * postcss(plugins).process(css, { from, to }).then(result => {\n *   console.log(result.css);\n * });\n *\n * @namespace postcss\n */\nfunction postcss(...plugins) {\n    if ( plugins.length === 1 && Array.isArray(plugins[0]) ) {\n        plugins = plugins[0];\n    }\n    return new Processor(plugins);\n}\n\n/**\n * Creates a PostCSS plugin with a standard API.\n *\n * The newly-wrapped function will provide both the name and PostCSS\n * version of the plugin.\n *\n * ```js\n *  const processor = postcss([replace]);\n *  processor.plugins[0].postcssPlugin  //=> 'postcss-replace'\n *  processor.plugins[0].postcssVersion //=> '5.1.0'\n * ```\n *\n * The plugin function receives 2 arguments: {@link Root}\n * and {@link Result} instance. The function should mutate the provided\n * `Root` node. Alternatively, you can create a new `Root` node\n * and override the `result.root` property.\n *\n * ```js\n * const cleaner = postcss.plugin('postcss-cleaner', () => {\n *   return (root, result) => {\n *     result.root = postcss.root();\n *   };\n * });\n * ```\n *\n * As a convenience, plugins also expose a `process` method so that you can use\n * them as standalone tools.\n *\n * ```js\n * cleaner.process(css, options);\n * // This is equivalent to:\n * postcss([ cleaner(options) ]).process(css);\n * ```\n *\n * Asynchronous plugins should return a `Promise` instance.\n *\n * ```js\n * postcss.plugin('postcss-import', () => {\n *   return (root, result) => {\n *     return new Promise( (resolve, reject) => {\n *       fs.readFile('base.css', (base) => {\n *         root.prepend(base);\n *         resolve();\n *       });\n *     });\n *   };\n * });\n * ```\n *\n * Add warnings using the {@link Node#warn} method.\n * Send data to other plugins using the {@link Result#messages} array.\n *\n * ```js\n * postcss.plugin('postcss-caniuse-test', () => {\n *   return (root, result) => {\n *     css.walkDecls(decl => {\n *       if ( !caniuse.support(decl.prop) ) {\n *         decl.warn(result, 'Some browsers do not support ' + decl.prop);\n *       }\n *     });\n *   };\n * });\n * ```\n *\n * @param {string} name          - PostCSS plugin name. Same as in `name`\n *                                 property in `package.json`. It will be saved\n *                                 in `plugin.postcssPlugin` property.\n * @param {function} initializer - will receive plugin options\n *                                 and should return {@link pluginFunction}\n *\n * @return {Plugin} PostCSS plugin\n */\npostcss.plugin = function plugin(name, initializer) {\n    let creator = function (...args) {\n        let transformer = initializer(...args);\n        transformer.postcssPlugin  = name;\n        transformer.postcssVersion = (new Processor()).version;\n        return transformer;\n    };\n\n    let cache;\n    Object.defineProperty(creator, 'postcss', {\n        get() {\n            if ( !cache ) cache = creator();\n            return cache;\n        }\n    });\n\n    creator.process = function (root, opts) {\n        return postcss([ creator(opts) ]).process(root, opts);\n    };\n\n    return creator;\n};\n\n/**\n * Default function to convert a node tree into a CSS string.\n *\n * @param {Node} node       - start node for stringifing. Usually {@link Root}.\n * @param {builder} builder - function to concatenate CSS from nodeâ€™s parts\n *                            or generate string and source map\n *\n * @return {void}\n *\n * @function\n */\npostcss.stringify = stringify;\n\n/**\n * Parses source css and returns a new {@link Root} node,\n * which contains the source CSS nodes.\n *\n * @param {string|toString} css   - string with input CSS or any object\n *                                  with toString() method, like a Buffer\n * @param {processOptions} [opts] - options with only `from` and `map` keys\n *\n * @return {Root} PostCSS AST\n *\n * @example\n * // Simple CSS concatenation with source map support\n * const root1 = postcss.parse(css1, { from: file1 });\n * const root2 = postcss.parse(css2, { from: file2 });\n * root1.append(root2).toResult().css;\n *\n * @function\n */\npostcss.parse = parse;\n\n/**\n * @member {vendor} - Contains the {@link vendor} module.\n *\n * @example\n * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']\n */\npostcss.vendor = vendor;\n\n/**\n * @member {list} - Contains the {@link list} module.\n *\n * @example\n * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']\n */\npostcss.list = list;\n\n/**\n * Creates a new {@link Comment} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Comment} new Comment node\n *\n * @example\n * postcss.comment({ text: 'test' })\n */\npostcss.comment = defaults => new Comment(defaults);\n\n/**\n * Creates a new {@link AtRule} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {AtRule} new AtRule node\n *\n * @example\n * postcss.atRule({ name: 'charset' }).toString() //=> \"@charset\"\n */\npostcss.atRule = defaults => new AtRule(defaults);\n\n/**\n * Creates a new {@link Declaration} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Declaration} new Declaration node\n *\n * @example\n * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> \"color: red\"\n */\npostcss.decl = defaults => new Declaration(defaults);\n\n/**\n * Creates a new {@link Rule} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {AtRule} new Rule node\n *\n * @example\n * postcss.rule({ selector: 'a' }).toString() //=> \"a {\\n}\"\n */\npostcss.rule = defaults => new Rule(defaults);\n\n/**\n * Creates a new {@link Root} node.\n *\n * @param {object} [defaults] - properties for the new node.\n *\n * @return {Root} new Root node\n *\n * @example\n * postcss.root({ after: '\\n' }).toString() //=> \"\\n\"\n */\npostcss.root = defaults => new Root(defaults);\n\nexport default postcss;\n"]},"metadata":{},"sourceType":"script"}