{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport LinesGeometry from '../../util/geometry/Lines3D'; // import TrailMesh from './TrailMesh';\n\nimport TrailMesh2 from './TrailMesh2';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction getCoordSysSize(coordSys) {\n  if (coordSys.radius != null) {\n    return coordSys.radius;\n  }\n\n  if (coordSys.size != null) {\n    return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);\n  } else {\n    return 100;\n  }\n}\n\nexport default echarts.ChartView.extend({\n  type: 'lines3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._meshLinesMaterial = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      transparent: true,\n      depthMask: false\n    });\n    this._linesMesh = new graphicGL.Mesh({\n      geometry: new LinesGeometry(),\n      material: this._meshLinesMaterial,\n      $ignorePicking: true\n    }); // this._trailMesh = new TrailMesh();\n\n    this._trailMesh = new TrailMesh2();\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._linesMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var data = seriesModel.getData();\n\n    if (coordSys && coordSys.viewGL) {\n      var viewGL = coordSys.viewGL;\n      viewGL.add(this.groupGL);\n\n      this._updateLines(seriesModel, ecModel, api);\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');\n\n      this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    var trailMesh = this._trailMesh;\n    trailMesh.stopAnimation();\n\n    if (seriesModel.get('effect.show')) {\n      this.groupGL.add(trailMesh);\n      trailMesh.updateData(data, api, this._linesMesh.geometry);\n      trailMesh.__time = trailMesh.__time || 0;\n      var time = 3600 * 1000; // 1hour\n\n      this._curveEffectsAnimator = trailMesh.animate('', {\n        loop: true\n      }).when(time, {\n        __time: time\n      }).during(function () {\n        trailMesh.setAnimationTime(trailMesh.__time);\n      }).start();\n    } else {\n      this.groupGL.remove(trailMesh);\n      this._curveEffectsAnimator = null;\n    }\n\n    this._linesMesh.material.blend = this._trailMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n  },\n  pauseEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.pause();\n    }\n  },\n  resumeEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.resume();\n    }\n  },\n  toggleEffect: function () {\n    var animator = this._curveEffectsAnimator;\n\n    if (animator) {\n      animator.isPaused() ? animator.resume() : animator.pause();\n    }\n  },\n  _updateLines: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var geometry = this._linesMesh.geometry;\n    var isPolyline = seriesModel.get('polyline');\n    geometry.expandLine = true;\n    var size = getCoordSysSize(coordSys);\n    geometry.segmentScale = size / 20;\n    var lineWidthQueryPath = 'lineStyle.width'.split('.');\n    var dpr = api.getDevicePixelRatio();\n    var maxLineWidth = 0;\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var lineWidth = itemModel.get(lineWidthQueryPath);\n\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n\n      data.setItemVisual(idx, 'lineWidth', lineWidth);\n      maxLineWidth = Math.max(lineWidth, maxLineWidth);\n    }); // Must set useNativeLine before calling any other methods\n\n    geometry.useNativeLine = false;\n    var nVertex = 0;\n    var nTriangle = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n\n      if (isPolyline) {\n        nVertex += geometry.getPolylineVertexCount(pts);\n        nTriangle += geometry.getPolylineTriangleCount(pts);\n      } else {\n        nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n        nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);\n      }\n    });\n    geometry.setVertexCount(nVertex);\n    geometry.setTriangleCount(nTriangle);\n    geometry.resetOffset();\n    var colorArr = [];\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n\n      if (isPolyline) {\n        geometry.addPolyline(pts, colorArr, lineWidth);\n      } else {\n        geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);\n      }\n    });\n    geometry.dirty();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/lines3D/Lines3DView.js"],"names":["echarts","graphicGL","LinesGeometry","TrailMesh2","getItemVisualColor","getItemVisualOpacity","lines3DGLSL","Shader","import","getCoordSysSize","coordSys","radius","size","Math","max","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_meshLinesMaterial","Material","shader","createShader","transparent","depthMask","_linesMesh","Mesh","geometry","material","$ignorePicking","_trailMesh","render","seriesModel","add","coordinateSystem","data","getData","viewGL","_updateLines","methodName","isLinearSpace","trailMesh","stopAnimation","get","updateData","__time","time","_curveEffectsAnimator","animate","loop","when","during","setAnimationTime","start","remove","blend","additiveBlend","pauseEffect","pause","resumeEffect","resume","toggleEffect","animator","isPaused","isPolyline","expandLine","segmentScale","lineWidthQueryPath","split","dpr","getDevicePixelRatio","maxLineWidth","each","idx","itemModel","getItemModel","lineWidth","setItemVisual","useNativeLine","nVertex","nTriangle","pts","getItemLayout","getPolylineVertexCount","getPolylineTriangleCount","getCubicCurveVertexCount","getCubicCurveTriangleCount","setVertexCount","setTriangleCount","resetOffset","colorArr","color","opacity","getItemVisual","parseColor","addPolyline","addCubicCurve","dirty","removeAll","dispose"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CAAyD;;AAEzD,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,QAAyD,mBAAzD;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACAL,SAAS,CAACM,MAAV,CAAiBC,MAAjB,CAAwBF,WAAxB;;AAEA,SAASG,eAAT,CAAyBC,QAAzB,EAAmC;AACjC,MAAIA,QAAQ,CAACC,MAAT,IAAmB,IAAvB,EAA6B;AAC3B,WAAOD,QAAQ,CAACC,MAAhB;AACD;;AAED,MAAID,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACzB,WAAOC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAT,EAA2BF,QAAQ,CAACE,IAAT,CAAc,CAAd,CAA3B,EAA6CF,QAAQ,CAACE,IAAT,CAAc,CAAd,CAA7C,CAAP;AACD,GAFD,MAEO;AACL,WAAO,GAAP;AACD;AACF;;AAED,eAAeZ,OAAO,CAACe,SAAR,CAAkBC,MAAlB,CAAyB;AACtCC,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,QAAQ,EAAE,IAF4B;AAGtCC,EAAAA,IAAI,EAAE,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC5B,SAAKC,OAAL,GAAe,IAAIrB,SAAS,CAACsB,IAAd,EAAf;AACA,SAAKC,kBAAL,GAA0B,IAAIvB,SAAS,CAACwB,QAAd,CAAuB;AAC/CC,MAAAA,MAAM,EAAEzB,SAAS,CAAC0B,YAAV,CAAuB,kBAAvB,CADuC;AAE/CC,MAAAA,WAAW,EAAE,IAFkC;AAG/CC,MAAAA,SAAS,EAAE;AAHoC,KAAvB,CAA1B;AAKA,SAAKC,UAAL,GAAkB,IAAI7B,SAAS,CAAC8B,IAAd,CAAmB;AACnCC,MAAAA,QAAQ,EAAE,IAAI9B,aAAJ,EADyB;AAEnC+B,MAAAA,QAAQ,EAAE,KAAKT,kBAFoB;AAGnCU,MAAAA,cAAc,EAAE;AAHmB,KAAnB,CAAlB,CAP4B,CAWxB;;AAEJ,SAAKC,UAAL,GAAkB,IAAIhC,UAAJ,EAAlB;AACD,GAjBqC;AAkBtCiC,EAAAA,MAAM,EAAE,UAAUC,WAAV,EAAuBjB,OAAvB,EAAgCC,GAAhC,EAAqC;AAC3C,SAAKC,OAAL,CAAagB,GAAb,CAAiB,KAAKR,UAAtB;AACA,QAAIpB,QAAQ,GAAG2B,WAAW,CAACE,gBAA3B;AACA,QAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,EAAX;;AAEA,QAAI/B,QAAQ,IAAIA,QAAQ,CAACgC,MAAzB,EAAiC;AAC/B,UAAIA,MAAM,GAAGhC,QAAQ,CAACgC,MAAtB;AACAA,MAAAA,MAAM,CAACJ,GAAP,CAAW,KAAKhB,OAAhB;;AAEA,WAAKqB,YAAL,CAAkBN,WAAlB,EAA+BjB,OAA/B,EAAwCC,GAAxC;;AAEA,UAAIuB,UAAU,GAAGlC,QAAQ,CAACgC,MAAT,CAAgBG,aAAhB,KAAkC,QAAlC,GAA6C,UAA9D;;AAEA,WAAKf,UAAL,CAAgBG,QAAhB,CAAyBW,UAAzB,EAAqC,UAArC,EAAiD,aAAjD;;AAEA,WAAKT,UAAL,CAAgBF,QAAhB,CAAyBW,UAAzB,EAAqC,UAArC,EAAiD,aAAjD;AACD;;AAED,QAAIE,SAAS,GAAG,KAAKX,UAArB;AACAW,IAAAA,SAAS,CAACC,aAAV;;AAEA,QAAIV,WAAW,CAACW,GAAZ,CAAgB,aAAhB,CAAJ,EAAoC;AAClC,WAAK1B,OAAL,CAAagB,GAAb,CAAiBQ,SAAjB;AACAA,MAAAA,SAAS,CAACG,UAAV,CAAqBT,IAArB,EAA2BnB,GAA3B,EAAgC,KAAKS,UAAL,CAAgBE,QAAhD;AACAc,MAAAA,SAAS,CAACI,MAAV,GAAmBJ,SAAS,CAACI,MAAV,IAAoB,CAAvC;AACA,UAAIC,IAAI,GAAG,OAAO,IAAlB,CAJkC,CAIV;;AAExB,WAAKC,qBAAL,GAA6BN,SAAS,CAACO,OAAV,CAAkB,EAAlB,EAAsB;AACjDC,QAAAA,IAAI,EAAE;AAD2C,OAAtB,EAE1BC,IAF0B,CAErBJ,IAFqB,EAEf;AACZD,QAAAA,MAAM,EAAEC;AADI,OAFe,EAI1BK,MAJ0B,CAInB,YAAY;AACpBV,QAAAA,SAAS,CAACW,gBAAV,CAA2BX,SAAS,CAACI,MAArC;AACD,OAN4B,EAM1BQ,KAN0B,EAA7B;AAOD,KAbD,MAaO;AACL,WAAKpC,OAAL,CAAaqC,MAAb,CAAoBb,SAApB;AACA,WAAKM,qBAAL,GAA6B,IAA7B;AACD;;AAED,SAAKtB,UAAL,CAAgBG,QAAhB,CAAyB2B,KAAzB,GAAiC,KAAKzB,UAAL,CAAgBF,QAAhB,CAAyB2B,KAAzB,GAAiCvB,WAAW,CAACW,GAAZ,CAAgB,WAAhB,MAAiC,SAAjC,GAA6C/C,SAAS,CAAC4D,aAAvD,GAAuE,IAAzI;AACD,GA1DqC;AA2DtCC,EAAAA,WAAW,EAAE,YAAY;AACvB,QAAI,KAAKV,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL,CAA2BW,KAA3B;AACD;AACF,GA/DqC;AAgEtCC,EAAAA,YAAY,EAAE,YAAY;AACxB,QAAI,KAAKZ,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL,CAA2Ba,MAA3B;AACD;AACF,GApEqC;AAqEtCC,EAAAA,YAAY,EAAE,YAAY;AACxB,QAAIC,QAAQ,GAAG,KAAKf,qBAApB;;AAEA,QAAIe,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACC,QAAT,KAAsBD,QAAQ,CAACF,MAAT,EAAtB,GAA0CE,QAAQ,CAACJ,KAAT,EAA1C;AACD;AACF,GA3EqC;AA4EtCpB,EAAAA,YAAY,EAAE,UAAUN,WAAV,EAAuBjB,OAAvB,EAAgCC,GAAhC,EAAqC;AACjD,QAAImB,IAAI,GAAGH,WAAW,CAACI,OAAZ,EAAX;AACA,QAAI/B,QAAQ,GAAG2B,WAAW,CAACE,gBAA3B;AACA,QAAIP,QAAQ,GAAG,KAAKF,UAAL,CAAgBE,QAA/B;AACA,QAAIqC,UAAU,GAAGhC,WAAW,CAACW,GAAZ,CAAgB,UAAhB,CAAjB;AACAhB,IAAAA,QAAQ,CAACsC,UAAT,GAAsB,IAAtB;AACA,QAAI1D,IAAI,GAAGH,eAAe,CAACC,QAAD,CAA1B;AACAsB,IAAAA,QAAQ,CAACuC,YAAT,GAAwB3D,IAAI,GAAG,EAA/B;AACA,QAAI4D,kBAAkB,GAAG,kBAAkBC,KAAlB,CAAwB,GAAxB,CAAzB;AACA,QAAIC,GAAG,GAAGrD,GAAG,CAACsD,mBAAJ,EAAV;AACA,QAAIC,YAAY,GAAG,CAAnB;AACApC,IAAAA,IAAI,CAACqC,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,UAAIC,SAAS,GAAGvC,IAAI,CAACwC,YAAL,CAAkBF,GAAlB,CAAhB;AACA,UAAIG,SAAS,GAAGF,SAAS,CAAC/B,GAAV,CAAcwB,kBAAd,CAAhB;;AAEA,UAAIS,SAAS,IAAI,IAAjB,EAAuB;AACrBA,QAAAA,SAAS,GAAG,CAAZ;AACD;;AAEDzC,MAAAA,IAAI,CAAC0C,aAAL,CAAmBJ,GAAnB,EAAwB,WAAxB,EAAqCG,SAArC;AACAL,MAAAA,YAAY,GAAG/D,IAAI,CAACC,GAAL,CAASmE,SAAT,EAAoBL,YAApB,CAAf;AACD,KAVD,EAXiD,CAqB7C;;AAEJ5C,IAAAA,QAAQ,CAACmD,aAAT,GAAyB,KAAzB;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA7C,IAAAA,IAAI,CAACqC,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,UAAIQ,GAAG,GAAG9C,IAAI,CAAC+C,aAAL,CAAmBT,GAAnB,CAAV;;AAEA,UAAIT,UAAJ,EAAgB;AACde,QAAAA,OAAO,IAAIpD,QAAQ,CAACwD,sBAAT,CAAgCF,GAAhC,CAAX;AACAD,QAAAA,SAAS,IAAIrD,QAAQ,CAACyD,wBAAT,CAAkCH,GAAlC,CAAb;AACD,OAHD,MAGO;AACLF,QAAAA,OAAO,IAAIpD,QAAQ,CAAC0D,wBAAT,CAAkCJ,GAAG,CAAC,CAAD,CAArC,EAA0CA,GAAG,CAAC,CAAD,CAA7C,EAAkDA,GAAG,CAAC,CAAD,CAArD,EAA0DA,GAAG,CAAC,CAAD,CAA7D,CAAX;AACAD,QAAAA,SAAS,IAAIrD,QAAQ,CAAC2D,0BAAT,CAAoCL,GAAG,CAAC,CAAD,CAAvC,EAA4CA,GAAG,CAAC,CAAD,CAA/C,EAAoDA,GAAG,CAAC,CAAD,CAAvD,EAA4DA,GAAG,CAAC,CAAD,CAA/D,CAAb;AACD;AACF,KAVD;AAWAtD,IAAAA,QAAQ,CAAC4D,cAAT,CAAwBR,OAAxB;AACApD,IAAAA,QAAQ,CAAC6D,gBAAT,CAA0BR,SAA1B;AACArD,IAAAA,QAAQ,CAAC8D,WAAT;AACA,QAAIC,QAAQ,GAAG,EAAf;AACAvD,IAAAA,IAAI,CAACqC,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,UAAIQ,GAAG,GAAG9C,IAAI,CAAC+C,aAAL,CAAmBT,GAAnB,CAAV;AACA,UAAIkB,KAAK,GAAG5F,kBAAkB,CAACoC,IAAD,EAAOsC,GAAP,CAA9B;AACA,UAAImB,OAAO,GAAG5F,oBAAoB,CAACmC,IAAD,EAAOsC,GAAP,CAAlC;AACA,UAAIG,SAAS,GAAGzC,IAAI,CAAC0D,aAAL,CAAmBpB,GAAnB,EAAwB,WAAxB,IAAuCJ,GAAvD;;AAEA,UAAIuB,OAAO,IAAI,IAAf,EAAqB;AACnBA,QAAAA,OAAO,GAAG,CAAV;AACD;;AAEDF,MAAAA,QAAQ,GAAG9F,SAAS,CAACkG,UAAV,CAAqBH,KAArB,EAA4BD,QAA5B,CAAX;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeE,OAAf;;AAEA,UAAI5B,UAAJ,EAAgB;AACdrC,QAAAA,QAAQ,CAACoE,WAAT,CAAqBd,GAArB,EAA0BS,QAA1B,EAAoCd,SAApC;AACD,OAFD,MAEO;AACLjD,QAAAA,QAAQ,CAACqE,aAAT,CAAuBf,GAAG,CAAC,CAAD,CAA1B,EAA+BA,GAAG,CAAC,CAAD,CAAlC,EAAuCA,GAAG,CAAC,CAAD,CAA1C,EAA+CA,GAAG,CAAC,CAAD,CAAlD,EAAuDS,QAAvD,EAAiEd,SAAjE;AACD;AACF,KAlBD;AAmBAjD,IAAAA,QAAQ,CAACsE,KAAT;AACD,GAzIqC;AA0ItC3C,EAAAA,MAAM,EAAE,YAAY;AAClB,SAAKrC,OAAL,CAAaiF,SAAb;AACD,GA5IqC;AA6ItCC,EAAAA,OAAO,EAAE,YAAY;AACnB,SAAKlF,OAAL,CAAaiF,SAAb;AACD;AA/IqC,CAAzB,CAAf","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport LinesGeometry from '../../util/geometry/Lines3D'; // import TrailMesh from './TrailMesh';\n\nimport TrailMesh2 from './TrailMesh2';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction getCoordSysSize(coordSys) {\n  if (coordSys.radius != null) {\n    return coordSys.radius;\n  }\n\n  if (coordSys.size != null) {\n    return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);\n  } else {\n    return 100;\n  }\n}\n\nexport default echarts.ChartView.extend({\n  type: 'lines3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._meshLinesMaterial = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      transparent: true,\n      depthMask: false\n    });\n    this._linesMesh = new graphicGL.Mesh({\n      geometry: new LinesGeometry(),\n      material: this._meshLinesMaterial,\n      $ignorePicking: true\n    }); // this._trailMesh = new TrailMesh();\n\n    this._trailMesh = new TrailMesh2();\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._linesMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var data = seriesModel.getData();\n\n    if (coordSys && coordSys.viewGL) {\n      var viewGL = coordSys.viewGL;\n      viewGL.add(this.groupGL);\n\n      this._updateLines(seriesModel, ecModel, api);\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');\n\n      this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    var trailMesh = this._trailMesh;\n    trailMesh.stopAnimation();\n\n    if (seriesModel.get('effect.show')) {\n      this.groupGL.add(trailMesh);\n      trailMesh.updateData(data, api, this._linesMesh.geometry);\n      trailMesh.__time = trailMesh.__time || 0;\n      var time = 3600 * 1000; // 1hour\n\n      this._curveEffectsAnimator = trailMesh.animate('', {\n        loop: true\n      }).when(time, {\n        __time: time\n      }).during(function () {\n        trailMesh.setAnimationTime(trailMesh.__time);\n      }).start();\n    } else {\n      this.groupGL.remove(trailMesh);\n      this._curveEffectsAnimator = null;\n    }\n\n    this._linesMesh.material.blend = this._trailMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n  },\n  pauseEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.pause();\n    }\n  },\n  resumeEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.resume();\n    }\n  },\n  toggleEffect: function () {\n    var animator = this._curveEffectsAnimator;\n\n    if (animator) {\n      animator.isPaused() ? animator.resume() : animator.pause();\n    }\n  },\n  _updateLines: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var geometry = this._linesMesh.geometry;\n    var isPolyline = seriesModel.get('polyline');\n    geometry.expandLine = true;\n    var size = getCoordSysSize(coordSys);\n    geometry.segmentScale = size / 20;\n    var lineWidthQueryPath = 'lineStyle.width'.split('.');\n    var dpr = api.getDevicePixelRatio();\n    var maxLineWidth = 0;\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var lineWidth = itemModel.get(lineWidthQueryPath);\n\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n\n      data.setItemVisual(idx, 'lineWidth', lineWidth);\n      maxLineWidth = Math.max(lineWidth, maxLineWidth);\n    }); // Must set useNativeLine before calling any other methods\n\n    geometry.useNativeLine = false;\n    var nVertex = 0;\n    var nTriangle = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n\n      if (isPolyline) {\n        nVertex += geometry.getPolylineVertexCount(pts);\n        nTriangle += geometry.getPolylineTriangleCount(pts);\n      } else {\n        nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n        nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);\n      }\n    });\n    geometry.setVertexCount(nVertex);\n    geometry.setTriangleCount(nTriangle);\n    geometry.resetOffset();\n    var colorArr = [];\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n\n      if (isPolyline) {\n        geometry.addPolyline(pts, colorArr, lineWidth);\n      } else {\n        geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);\n      }\n    });\n    geometry.dirty();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});"]},"metadata":{},"sourceType":"module"}