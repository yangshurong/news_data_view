{"ast":null,"code":"// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/\nimport Light from '../Light';\nimport cubemapUtil from '../util/cubemap';\n/**\n * Ambient cubemap light provides specular parts of Image Based Lighting.\n * Which is a basic requirement for Physically Based Rendering\n * @constructor clay.light.AmbientCubemap\n * @extends clay.Light\n */\n\nvar AmbientCubemapLight = Light.extend({\n  /**\n   * @type {clay.TextureCube}\n   * @memberOf clay.light.AmbientCubemap#\n   */\n  cubemap: null,\n  // TODO\n  // range: 100,\n  castShadow: false,\n  _normalDistribution: null,\n  _brdfLookup: null\n},\n/** @lends clay.light.AmbientCubemap# */\n{\n  type: 'AMBIENT_CUBEMAP_LIGHT',\n\n  /**\n   * Do prefitering the cubemap\n   * @param {clay.Renderer} renderer\n   * @param {number} [size=32]\n   */\n  prefilter: function prefilter(renderer, size) {\n    if (!renderer.getGLExtension('EXT_shader_texture_lod')) {\n      console.warn('Device not support textureCubeLodEXT');\n      return;\n    }\n\n    if (!this._brdfLookup) {\n      this._normalDistribution = cubemapUtil.generateNormalDistribution();\n      this._brdfLookup = cubemapUtil.integrateBRDF(renderer, this._normalDistribution);\n    }\n\n    var cubemap = this.cubemap;\n\n    if (cubemap.__prefiltered) {\n      return;\n    }\n\n    var result = cubemapUtil.prefilterEnvironmentMap(renderer, cubemap, {\n      encodeRGBM: true,\n      width: size,\n      height: size\n    }, this._normalDistribution, this._brdfLookup);\n    this.cubemap = result.environmentMap;\n    this.cubemap.__prefiltered = true;\n    cubemap.dispose(renderer);\n  },\n  getBRDFLookup: function getBRDFLookup() {\n    return this._brdfLookup;\n  },\n  uniformTemplates: {\n    ambientCubemapLightColor: {\n      type: '3f',\n      value: function value(instance) {\n        var color = instance.color;\n        var intensity = instance.intensity;\n        return [color[0] * intensity, color[1] * intensity, color[2] * intensity];\n      }\n    },\n    ambientCubemapLightCubemap: {\n      type: 't',\n      value: function value(instance) {\n        return instance.cubemap;\n      }\n    },\n    ambientCubemapLightBRDFLookup: {\n      type: 't',\n      value: function value(instance) {\n        return instance._brdfLookup;\n      }\n    }\n  }\n  /**\n   * @function\n   * @name clone\n   * @return {clay.light.AmbientCubemap}\n   * @memberOf clay.light.AmbientCubemap.prototype\n   */\n\n});\nexport default AmbientCubemapLight;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/light/AmbientCubemap.js"],"names":["Light","cubemapUtil","AmbientCubemapLight","extend","cubemap","castShadow","_normalDistribution","_brdfLookup","type","prefilter","renderer","size","getGLExtension","console","warn","generateNormalDistribution","integrateBRDF","__prefiltered","result","prefilterEnvironmentMap","encodeRGBM","width","height","environmentMap","dispose","getBRDFLookup","uniformTemplates","ambientCubemapLightColor","value","instance","color","intensity","ambientCubemapLightCubemap","ambientCubemapLightBRDFLookup"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAGF,KAAK,CAACG,MAAN,CAAa;AAEnC;AACJ;AACA;AACA;AACIC,EAAAA,OAAO,EAAE,IAN0B;AAQnC;AACA;AAEAC,EAAAA,UAAU,EAAE,KAXuB;AAanCC,EAAAA,mBAAmB,EAAE,IAbc;AAcnCC,EAAAA,WAAW,EAAE;AAdsB,CAAb;AAgBvB;AAAyC;AAExCC,EAAAA,IAAI,EAAE,uBAFkC;;AAIxC;AACJ;AACA;AACA;AACA;AACIC,EAAAA,SAAS,EAAE,mBAAUC,QAAV,EAAoBC,IAApB,EAA0B;AACjC,QAAI,CAACD,QAAQ,CAACE,cAAT,CAAwB,wBAAxB,CAAL,EAAwD;AACpDC,MAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb;AACA;AACH;;AACD,QAAI,CAAC,KAAKP,WAAV,EAAuB;AACnB,WAAKD,mBAAL,GAA2BL,WAAW,CAACc,0BAAZ,EAA3B;AACA,WAAKR,WAAL,GAAmBN,WAAW,CAACe,aAAZ,CAA0BN,QAA1B,EAAoC,KAAKJ,mBAAzC,CAAnB;AACH;;AACD,QAAIF,OAAO,GAAG,KAAKA,OAAnB;;AACA,QAAIA,OAAO,CAACa,aAAZ,EAA2B;AACvB;AACH;;AAED,QAAIC,MAAM,GAAGjB,WAAW,CAACkB,uBAAZ,CACTT,QADS,EACCN,OADD,EACU;AACfgB,MAAAA,UAAU,EAAE,IADG;AAEfC,MAAAA,KAAK,EAAEV,IAFQ;AAGfW,MAAAA,MAAM,EAAEX;AAHO,KADV,EAKN,KAAKL,mBALC,EAKoB,KAAKC,WALzB,CAAb;AAOA,SAAKH,OAAL,GAAec,MAAM,CAACK,cAAtB;AACA,SAAKnB,OAAL,CAAaa,aAAb,GAA6B,IAA7B;AAEAb,IAAAA,OAAO,CAACoB,OAAR,CAAgBd,QAAhB;AACH,GAlCuC;AAoCxCe,EAAAA,aAAa,EAAE,yBAAY;AACvB,WAAO,KAAKlB,WAAZ;AACH,GAtCuC;AAwCxCmB,EAAAA,gBAAgB,EAAE;AACdC,IAAAA,wBAAwB,EAAE;AACtBnB,MAAAA,IAAI,EAAE,IADgB;AAEtBoB,MAAAA,KAAK,EAAE,eAAUC,QAAV,EAAoB;AACvB,YAAIC,KAAK,GAAGD,QAAQ,CAACC,KAArB;AACA,YAAIC,SAAS,GAAGF,QAAQ,CAACE,SAAzB;AACA,eAAO,CAACD,KAAK,CAAC,CAAD,CAAL,GAASC,SAAV,EAAqBD,KAAK,CAAC,CAAD,CAAL,GAASC,SAA9B,EAAyCD,KAAK,CAAC,CAAD,CAAL,GAASC,SAAlD,CAAP;AACH;AANqB,KADZ;AAUdC,IAAAA,0BAA0B,EAAE;AACxBxB,MAAAA,IAAI,EAAE,GADkB;AAExBoB,MAAAA,KAAK,EAAE,eAAUC,QAAV,EAAoB;AACvB,eAAOA,QAAQ,CAACzB,OAAhB;AACH;AAJuB,KAVd;AAiBd6B,IAAAA,6BAA6B,EAAE;AAC3BzB,MAAAA,IAAI,EAAE,GADqB;AAE3BoB,MAAAA,KAAK,EAAE,eAAUC,QAAV,EAAoB;AACvB,eAAOA,QAAQ,CAACtB,WAAhB;AACH;AAJ0B;AAjBjB;AAwBlB;AACJ;AACA;AACA;AACA;AACA;;AArE4C,CAhBlB,CAA1B;AAwFA,eAAeL,mBAAf","sourcesContent":["// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/\nimport Light from '../Light';\nimport cubemapUtil from '../util/cubemap';\n\n/**\n * Ambient cubemap light provides specular parts of Image Based Lighting.\n * Which is a basic requirement for Physically Based Rendering\n * @constructor clay.light.AmbientCubemap\n * @extends clay.Light\n */\nvar AmbientCubemapLight = Light.extend({\n\n    /**\n     * @type {clay.TextureCube}\n     * @memberOf clay.light.AmbientCubemap#\n     */\n    cubemap: null,\n\n    // TODO\n    // range: 100,\n\n    castShadow: false,\n\n    _normalDistribution: null,\n    _brdfLookup: null\n\n}, /** @lends clay.light.AmbientCubemap# */ {\n\n    type: 'AMBIENT_CUBEMAP_LIGHT',\n\n    /**\n     * Do prefitering the cubemap\n     * @param {clay.Renderer} renderer\n     * @param {number} [size=32]\n     */\n    prefilter: function (renderer, size) {\n        if (!renderer.getGLExtension('EXT_shader_texture_lod')) {\n            console.warn('Device not support textureCubeLodEXT');\n            return;\n        }\n        if (!this._brdfLookup) {\n            this._normalDistribution = cubemapUtil.generateNormalDistribution();\n            this._brdfLookup = cubemapUtil.integrateBRDF(renderer, this._normalDistribution);\n        }\n        var cubemap = this.cubemap;\n        if (cubemap.__prefiltered) {\n            return;\n        }\n\n        var result = cubemapUtil.prefilterEnvironmentMap(\n            renderer, cubemap, {\n                encodeRGBM: true,\n                width: size,\n                height: size\n            }, this._normalDistribution, this._brdfLookup\n        );\n        this.cubemap = result.environmentMap;\n        this.cubemap.__prefiltered = true;\n\n        cubemap.dispose(renderer);\n    },\n\n    getBRDFLookup: function () {\n        return this._brdfLookup;\n    },\n\n    uniformTemplates: {\n        ambientCubemapLightColor: {\n            type: '3f',\n            value: function (instance) {\n                var color = instance.color;\n                var intensity = instance.intensity;\n                return [color[0]*intensity, color[1]*intensity, color[2]*intensity];\n            }\n        },\n\n        ambientCubemapLightCubemap: {\n            type: 't',\n            value: function (instance) {\n                return instance.cubemap;\n            }\n        },\n\n        ambientCubemapLightBRDFLookup: {\n            type: 't',\n            value: function (instance) {\n                return instance._brdfLookup;\n            }\n        }\n    }\n    /**\n     * @function\n     * @name clone\n     * @return {clay.light.AmbientCubemap}\n     * @memberOf clay.light.AmbientCubemap.prototype\n     */\n});\n\nexport default AmbientCubemapLight;\n"]},"metadata":{},"sourceType":"module"}