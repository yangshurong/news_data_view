{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Graph from 'echarts/lib/data/Graph';\nimport linkList from 'echarts/lib/data/helper/linkList';\nimport retrieve from '../../util/retrieve';\nexport default function (nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(retrieve.firstNotNull( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var nodeData; // FIXME, support more coordinate systems.\n\n  var dimensionNames = echarts.helper.createDimensions(nodes, {\n    coordDimensions: ['value']\n  });\n  nodeData = new echarts.List(dimensionNames, hostModel);\n  nodeData.initData(nodes);\n  var edgeData = new echarts.List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/graphGL/createGraphFromNodeEdge.js"],"names":["echarts","Graph","linkList","retrieve","nodes","edges","hostModel","directed","beforeLink","graph","i","length","addNode","firstNotNull","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","nodeData","dimensionNames","helper","createDimensions","coordDimensions","List","initData","edgeData","mainData","struct","structAttr","datas","node","edge","datasAttr","update"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,eAAe,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,UAA7C,EAAyD;AACtE,MAAIC,KAAK,GAAG,IAAIR,KAAJ,CAAUM,QAAV,CAAZ;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,KAAK,CAACG,OAAN,CAAcT,QAAQ,CAACU,YAAT,EAAuB;AACrCT,IAAAA,KAAK,CAACM,CAAD,CAAL,CAASI,EADK,EACDV,KAAK,CAACM,CAAD,CAAL,CAASK,IADR,EACcL,CADd,CAAd,EACgCA,CADhC;AAED;;AAED,MAAIM,YAAY,GAAG,EAAnB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,CAAhB;;AAEA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIS,IAAI,GAAGd,KAAK,CAACK,CAAD,CAAhB;AACA,QAAIU,MAAM,GAAGD,IAAI,CAACC,MAAlB;AACA,QAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB,CAHqC,CAGX;;AAE1B,QAAIZ,KAAK,CAACa,OAAN,CAAcF,MAAd,EAAsBC,MAAtB,EAA8BH,SAA9B,CAAJ,EAA8C;AAC5CD,MAAAA,UAAU,CAACM,IAAX,CAAgBJ,IAAhB;AACAH,MAAAA,YAAY,CAACO,IAAb,CAAkBpB,QAAQ,CAACU,YAAT,CAAsBM,IAAI,CAACL,EAA3B,EAA+BM,MAAM,GAAG,KAAT,GAAiBC,MAAhD,CAAlB;AACAH,MAAAA,SAAS;AACV;AACF;;AAED,MAAIM,QAAJ,CAxBsE,CAwBxD;;AAEd,MAAIC,cAAc,GAAGzB,OAAO,CAAC0B,MAAR,CAAeC,gBAAf,CAAgCvB,KAAhC,EAAuC;AAC1DwB,IAAAA,eAAe,EAAE,CAAC,OAAD;AADyC,GAAvC,CAArB;AAGAJ,EAAAA,QAAQ,GAAG,IAAIxB,OAAO,CAAC6B,IAAZ,CAAiBJ,cAAjB,EAAiCnB,SAAjC,CAAX;AACAkB,EAAAA,QAAQ,CAACM,QAAT,CAAkB1B,KAAlB;AACA,MAAI2B,QAAQ,GAAG,IAAI/B,OAAO,CAAC6B,IAAZ,CAAiB,CAAC,OAAD,CAAjB,EAA4BvB,SAA5B,CAAf;AACAyB,EAAAA,QAAQ,CAACD,QAAT,CAAkBb,UAAlB,EAA8BD,YAA9B;AACAR,EAAAA,UAAU,IAAIA,UAAU,CAACgB,QAAD,EAAWO,QAAX,CAAxB;AACA7B,EAAAA,QAAQ,CAAC;AACP8B,IAAAA,QAAQ,EAAER,QADH;AAEPS,IAAAA,MAAM,EAAExB,KAFD;AAGPyB,IAAAA,UAAU,EAAE,OAHL;AAIPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEZ,QADD;AAELa,MAAAA,IAAI,EAAEN;AAFD,KAJA;AAQPO,IAAAA,SAAS,EAAE;AACTF,MAAAA,IAAI,EAAE,MADG;AAETC,MAAAA,IAAI,EAAE;AAFG;AARJ,GAAD,CAAR,CAlCsE,CA8ClE;;AAEJ5B,EAAAA,KAAK,CAAC8B,MAAN;AACA,SAAO9B,KAAP;AACD;AACD","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Graph from 'echarts/lib/data/Graph';\nimport linkList from 'echarts/lib/data/helper/linkList';\nimport retrieve from '../../util/retrieve';\nexport default function (nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(retrieve.firstNotNull( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var nodeData; // FIXME, support more coordinate systems.\n\n  var dimensionNames = echarts.helper.createDimensions(nodes, {\n    coordDimensions: ['value']\n  });\n  nodeData = new echarts.List(dimensionNames, hostModel);\n  nodeData.initData(nodes);\n  var edgeData = new echarts.List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n;"]},"metadata":{},"sourceType":"module"}