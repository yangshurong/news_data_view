{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction Grid3DAxis(dim, linesMaterial) {\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    renderOrder: 2\n  });\n  var axisLabelsMesh = new LabelsMesh();\n  axisLabelsMesh.material.depthMask = false;\n  var rootNode = new graphicGL.Node();\n  rootNode.add(linesMesh);\n  rootNode.add(axisLabelsMesh);\n  this.rootNode = rootNode;\n  this.dim = dim;\n  this.linesMesh = linesMesh;\n  this.labelsMesh = axisLabelsMesh;\n  this.axisLineCoords = null;\n  this.labelElements = [];\n}\n\nvar otherDim = {\n  x: 'y',\n  y: 'x',\n  z: 'y'\n};\n\nGrid3DAxis.prototype.update = function (grid3DModel, axisLabelSurface, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axis = cartesian.getAxis(this.dim);\n  var linesGeo = this.linesMesh.geometry;\n  var labelsGeo = this.labelsMesh.geometry;\n  linesGeo.convertToDynamicArray(true);\n  labelsGeo.convertToDynamicArray(true);\n  var axisModel = axis.model;\n  var extent = axis.getExtent();\n  var dpr = api.getDevicePixelRatio();\n  var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));\n  var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n  var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n  var axisLineColor = axisLineModel.get('lineStyle.color'); // Render axisLine\n\n  if (axisLineModel.get('show')) {\n    var axisLineStyleModel = axisLineModel.getModel('lineStyle');\n    var p0 = [0, 0, 0];\n    var p1 = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    p0[idx] = extent[0];\n    p1[idx] = extent[1]; // Save some useful info.\n\n    this.axisLineCoords = [p0, p1];\n    var color = graphicGL.parseColor(axisLineColor);\n    var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);\n    var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);\n    color[3] *= opacity;\n    linesGeo.addLine(p0, p1, color, lineWidth * dpr);\n  } // Render axis ticksCoords\n\n\n  if (axisTickModel.get('show')) {\n    var lineStyleModel = axisTickModel.getModel('lineStyle');\n    var lineColor = graphicGL.parseColor(firstNotNull(lineStyleModel.get('color'), axisLineColor));\n    var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n    lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);\n    var ticksCoords = axis.getTicksCoords();\n    var tickLength = axisTickModel.get('length');\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = ticksCoords[i].coord;\n      var p0 = [0, 0, 0];\n      var p1 = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p0[idx] = p1[idx] = tickCoord;\n      p1[otherIdx] = tickLength;\n      linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);\n    }\n  }\n\n  this.labelElements = [];\n  var dpr = api.getDevicePixelRatio();\n\n  if (axisLabelModel.get('show')) {\n    var ticksCoords = axis.getTicksCoords();\n    var categoryData = axisModel.get('data');\n    var labelMargin = axisLabelModel.get('margin');\n    var labels = axis.getViewLabels();\n\n    for (var i = 0; i < labels.length; i++) {\n      var tickValue = labels[i].tickValue;\n      var formattedLabel = labels[i].formattedLabel;\n      var rawLabel = labels[i].rawLabel;\n      var tickCoord = axis.dataToCoord(tickValue);\n      var p = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p[idx] = p[idx] = tickCoord;\n      p[otherIdx] = labelMargin;\n      var itemTextStyleModel = axisLabelModel;\n\n      if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {\n        itemTextStyleModel = new echarts.Model(categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel);\n      }\n\n      var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(itemTextStyleModel, {\n          text: formattedLabel,\n          fill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original\n          // index of axis.data. So tick should not be exposed to user\n          // in category axis.\n          // (2) Compatible with previous version, which always returns labelStr.\n          // But in interval scale labelStr is like '223,445', which maked\n          // user repalce ','. So we modify it to return original val but remain\n          // it as 'string' to avoid error in replacing.\n          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, i) : textColor,\n          verticalAlign: 'top',\n          align: 'left'\n        })\n      });\n      var coords = axisLabelSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n      this.labelElements.push(textEl);\n    }\n  }\n\n  if (axisModel.get('name')) {\n    var nameTextStyleModel = axisModel.getModel('nameTextStyle');\n    var p = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    var otherIdx = dimIndicesMap[otherDim[axis.dim]];\n    var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);\n    var strokeColor = nameTextStyleModel.get('borderColor');\n    var lineWidth = nameTextStyleModel.get('borderWidth'); // TODO start and end\n\n    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;\n    p[otherIdx] = axisModel.get('nameGap');\n    var textEl = new echarts.graphic.Text({\n      style: createTextStyle(nameTextStyleModel, {\n        text: axisModel.get('name'),\n        fill: labelColor,\n        stroke: strokeColor,\n        lineWidth: lineWidth\n      })\n    });\n    var coords = axisLabelSurface.add(textEl);\n    var rect = textEl.getBoundingRect();\n    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n    textEl.__idx = this.labelElements.length;\n    this.nameLabelElement = textEl;\n  }\n\n  this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());\n  this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());\n  linesGeo.convertToTypedArray();\n  labelsGeo.convertToTypedArray();\n};\n\nGrid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {\n  var dpr = api.getDevicePixelRatio();\n  var labelGeo = this.labelsMesh.geometry;\n\n  for (var i = 0; i < this.labelElements.length; i++) {\n    var labelEl = this.labelElements[i];\n    var rect = labelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n  } // name label\n\n\n  var nameLabelEl = this.nameLabelElement;\n\n  if (nameLabelEl) {\n    var rect = nameLabelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n    labelGeo.dirty();\n  }\n\n  this.textAlign = textAlign;\n  this.textVerticalAlign = textVerticalAlign;\n};\n\nexport default Grid3DAxis;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/component/grid3D/Grid3DAxis.js"],"names":["echarts","createTextStyle","graphicGL","Lines3DGeometry","retrieve","LabelsMesh","firstNotNull","dimIndicesMap","x","y","z","Grid3DAxis","dim","linesMaterial","linesMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","renderOrder","axisLabelsMesh","depthMask","rootNode","Node","add","labelsMesh","axisLineCoords","labelElements","otherDim","prototype","update","grid3DModel","axisLabelSurface","api","cartesian","coordinateSystem","axis","getAxis","linesGeo","labelsGeo","convertToDynamicArray","axisModel","model","extent","getExtent","dpr","getDevicePixelRatio","axisLineModel","getModel","axisTickModel","axisLabelModel","axisLineColor","get","axisLineStyleModel","p0","p1","idx","color","parseColor","lineWidth","opacity","addLine","lineStyleModel","lineColor","ticksCoords","getTicksCoords","tickLength","i","length","tickCoord","coord","otherIdx","categoryData","labelMargin","labels","getViewLabels","tickValue","formattedLabel","rawLabel","dataToCoord","p","itemTextStyleModel","textStyle","Model","ecModel","textColor","textEl","graphic","Text","style","text","fill","type","verticalAlign","align","coords","rect","getBoundingRect","addSprite","width","height","push","nameTextStyleModel","labelColor","strokeColor","stroke","__idx","nameLabelElement","set","getTexture","getCoordsScale","convertToTypedArray","setSpriteAlign","textAlign","textVerticalAlign","labelGeo","labelEl","nameLabelEl","dirty"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,IAAIC,YAAY,GAAGF,QAAQ,CAACE,YAA5B;AACA,IAAIC,aAAa,GAAG;AAClB;AACAC,EAAAA,CAAC,EAAE,CAFe;AAGlB;AACAC,EAAAA,CAAC,EAAE,CAJe;AAKlB;AACAC,EAAAA,CAAC,EAAE;AANe,CAApB;;AASA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,aAAzB,EAAwC;AACtC,MAAIC,SAAS,GAAG,IAAIZ,SAAS,CAACa,IAAd,CAAmB;AACjCC,IAAAA,QAAQ,EAAE,IAAIb,eAAJ,CAAoB;AAC5Bc,MAAAA,aAAa,EAAE;AADa,KAApB,CADuB;AAIjCC,IAAAA,QAAQ,EAAEL,aAJuB;AAKjCM,IAAAA,UAAU,EAAE,KALqB;AAMjCC,IAAAA,aAAa,EAAE,IANkB;AAOjCC,IAAAA,WAAW,EAAE;AAPoB,GAAnB,CAAhB;AASA,MAAIC,cAAc,GAAG,IAAIjB,UAAJ,EAArB;AACAiB,EAAAA,cAAc,CAACJ,QAAf,CAAwBK,SAAxB,GAAoC,KAApC;AACA,MAAIC,QAAQ,GAAG,IAAItB,SAAS,CAACuB,IAAd,EAAf;AACAD,EAAAA,QAAQ,CAACE,GAAT,CAAaZ,SAAb;AACAU,EAAAA,QAAQ,CAACE,GAAT,CAAaJ,cAAb;AACA,OAAKE,QAAL,GAAgBA,QAAhB;AACA,OAAKZ,GAAL,GAAWA,GAAX;AACA,OAAKE,SAAL,GAAiBA,SAAjB;AACA,OAAKa,UAAL,GAAkBL,cAAlB;AACA,OAAKM,cAAL,GAAsB,IAAtB;AACA,OAAKC,aAAL,GAAqB,EAArB;AACD;;AAED,IAAIC,QAAQ,GAAG;AACbtB,EAAAA,CAAC,EAAE,GADU;AAEbC,EAAAA,CAAC,EAAE,GAFU;AAGbC,EAAAA,CAAC,EAAE;AAHU,CAAf;;AAMAC,UAAU,CAACoB,SAAX,CAAqBC,MAArB,GAA8B,UAAUC,WAAV,EAAuBC,gBAAvB,EAAyCC,GAAzC,EAA8C;AAC1E,MAAIC,SAAS,GAAGH,WAAW,CAACI,gBAA5B;AACA,MAAIC,IAAI,GAAGF,SAAS,CAACG,OAAV,CAAkB,KAAK3B,GAAvB,CAAX;AACA,MAAI4B,QAAQ,GAAG,KAAK1B,SAAL,CAAeE,QAA9B;AACA,MAAIyB,SAAS,GAAG,KAAKd,UAAL,CAAgBX,QAAhC;AACAwB,EAAAA,QAAQ,CAACE,qBAAT,CAA+B,IAA/B;AACAD,EAAAA,SAAS,CAACC,qBAAV,CAAgC,IAAhC;AACA,MAAIC,SAAS,GAAGL,IAAI,CAACM,KAArB;AACA,MAAIC,MAAM,GAAGP,IAAI,CAACQ,SAAL,EAAb;AACA,MAAIC,GAAG,GAAGZ,GAAG,CAACa,mBAAJ,EAAV;AACA,MAAIC,aAAa,GAAGN,SAAS,CAACO,QAAV,CAAmB,UAAnB,EAA+BjB,WAAW,CAACiB,QAAZ,CAAqB,UAArB,CAA/B,CAApB;AACA,MAAIC,aAAa,GAAGR,SAAS,CAACO,QAAV,CAAmB,UAAnB,EAA+BjB,WAAW,CAACiB,QAAZ,CAAqB,UAArB,CAA/B,CAApB;AACA,MAAIE,cAAc,GAAGT,SAAS,CAACO,QAAV,CAAmB,WAAnB,EAAgCjB,WAAW,CAACiB,QAAZ,CAAqB,WAArB,CAAhC,CAArB;AACA,MAAIG,aAAa,GAAGJ,aAAa,CAACK,GAAd,CAAkB,iBAAlB,CAApB,CAb0E,CAahB;;AAE1D,MAAIL,aAAa,CAACK,GAAd,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,QAAIC,kBAAkB,GAAGN,aAAa,CAACC,QAAd,CAAuB,WAAvB,CAAzB;AACA,QAAIM,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,QAAIC,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,QAAIC,GAAG,GAAGnD,aAAa,CAAC+B,IAAI,CAAC1B,GAAN,CAAvB;AACA4C,IAAAA,EAAE,CAACE,GAAD,CAAF,GAAUb,MAAM,CAAC,CAAD,CAAhB;AACAY,IAAAA,EAAE,CAACC,GAAD,CAAF,GAAUb,MAAM,CAAC,CAAD,CAAhB,CAN6B,CAMR;;AAErB,SAAKjB,cAAL,GAAsB,CAAC4B,EAAD,EAAKC,EAAL,CAAtB;AACA,QAAIE,KAAK,GAAGzD,SAAS,CAAC0D,UAAV,CAAqBP,aAArB,CAAZ;AACA,QAAIQ,SAAS,GAAGvD,YAAY,CAACiD,kBAAkB,CAACD,GAAnB,CAAuB,OAAvB,CAAD,EAAkC,GAAlC,CAA5B;AACA,QAAIQ,OAAO,GAAGxD,YAAY,CAACiD,kBAAkB,CAACD,GAAnB,CAAuB,SAAvB,CAAD,EAAoC,GAApC,CAA1B;AACAK,IAAAA,KAAK,CAAC,CAAD,CAAL,IAAYG,OAAZ;AACAtB,IAAAA,QAAQ,CAACuB,OAAT,CAAiBP,EAAjB,EAAqBC,EAArB,EAAyBE,KAAzB,EAAgCE,SAAS,GAAGd,GAA5C;AACD,GA7ByE,CA6BxE;;;AAGF,MAAII,aAAa,CAACG,GAAd,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,QAAIU,cAAc,GAAGb,aAAa,CAACD,QAAd,CAAuB,WAAvB,CAArB;AACA,QAAIe,SAAS,GAAG/D,SAAS,CAAC0D,UAAV,CAAqBtD,YAAY,CAAC0D,cAAc,CAACV,GAAf,CAAmB,OAAnB,CAAD,EAA8BD,aAA9B,CAAjC,CAAhB;AACA,QAAIQ,SAAS,GAAGvD,YAAY,CAAC0D,cAAc,CAACV,GAAf,CAAmB,OAAnB,CAAD,EAA8B,GAA9B,CAA5B;AACAW,IAAAA,SAAS,CAAC,CAAD,CAAT,IAAgB3D,YAAY,CAAC0D,cAAc,CAACV,GAAf,CAAmB,SAAnB,CAAD,EAAgC,GAAhC,CAA5B;AACA,QAAIY,WAAW,GAAG5B,IAAI,CAAC6B,cAAL,EAAlB;AACA,QAAIC,UAAU,GAAGjB,aAAa,CAACG,GAAd,CAAkB,QAAlB,CAAjB;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAIE,SAAS,GAAGL,WAAW,CAACG,CAAD,CAAX,CAAeG,KAA/B;AACA,UAAIhB,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,UAAIC,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,UAAIC,GAAG,GAAGnD,aAAa,CAAC+B,IAAI,CAAC1B,GAAN,CAAvB;AACA,UAAI6D,QAAQ,GAAGlE,aAAa,CAACuB,QAAQ,CAACQ,IAAI,CAAC1B,GAAN,CAAT,CAA5B,CAL2C,CAKO;;AAElD4C,MAAAA,EAAE,CAACE,GAAD,CAAF,GAAUD,EAAE,CAACC,GAAD,CAAF,GAAUa,SAApB;AACAd,MAAAA,EAAE,CAACgB,QAAD,CAAF,GAAeL,UAAf;AACA5B,MAAAA,QAAQ,CAACuB,OAAT,CAAiBP,EAAjB,EAAqBC,EAArB,EAAyBQ,SAAzB,EAAoCJ,SAAS,GAAGd,GAAhD;AACD;AACF;;AAED,OAAKlB,aAAL,GAAqB,EAArB;AACA,MAAIkB,GAAG,GAAGZ,GAAG,CAACa,mBAAJ,EAAV;;AAEA,MAAII,cAAc,CAACE,GAAf,CAAmB,MAAnB,CAAJ,EAAgC;AAC9B,QAAIY,WAAW,GAAG5B,IAAI,CAAC6B,cAAL,EAAlB;AACA,QAAIO,YAAY,GAAG/B,SAAS,CAACW,GAAV,CAAc,MAAd,CAAnB;AACA,QAAIqB,WAAW,GAAGvB,cAAc,CAACE,GAAf,CAAmB,QAAnB,CAAlB;AACA,QAAIsB,MAAM,GAAGtC,IAAI,CAACuC,aAAL,EAAb;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,MAAM,CAACN,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIS,SAAS,GAAGF,MAAM,CAACP,CAAD,CAAN,CAAUS,SAA1B;AACA,UAAIC,cAAc,GAAGH,MAAM,CAACP,CAAD,CAAN,CAAUU,cAA/B;AACA,UAAIC,QAAQ,GAAGJ,MAAM,CAACP,CAAD,CAAN,CAAUW,QAAzB;AACA,UAAIT,SAAS,GAAGjC,IAAI,CAAC2C,WAAL,CAAiBH,SAAjB,CAAhB;AACA,UAAII,CAAC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR;AACA,UAAIxB,GAAG,GAAGnD,aAAa,CAAC+B,IAAI,CAAC1B,GAAN,CAAvB;AACA,UAAI6D,QAAQ,GAAGlE,aAAa,CAACuB,QAAQ,CAACQ,IAAI,CAAC1B,GAAN,CAAT,CAA5B,CAPsC,CAOY;;AAElDsE,MAAAA,CAAC,CAACxB,GAAD,CAAD,GAASwB,CAAC,CAACxB,GAAD,CAAD,GAASa,SAAlB;AACAW,MAAAA,CAAC,CAACT,QAAD,CAAD,GAAcE,WAAd;AACA,UAAIQ,kBAAkB,GAAG/B,cAAzB;;AAEA,UAAIsB,YAAY,IAAIA,YAAY,CAACI,SAAD,CAA5B,IAA2CJ,YAAY,CAACI,SAAD,CAAZ,CAAwBM,SAAvE,EAAkF;AAChFD,QAAAA,kBAAkB,GAAG,IAAInF,OAAO,CAACqF,KAAZ,CAAkBX,YAAY,CAACI,SAAD,CAAZ,CAAwBM,SAA1C,EAAqDhC,cAArD,EAAqET,SAAS,CAAC2C,OAA/E,CAArB;AACD;;AAED,UAAIC,SAAS,GAAGjF,YAAY,CAAC6E,kBAAkB,CAAC7B,GAAnB,CAAuB,OAAvB,CAAD,EAAkCD,aAAlC,CAA5B;AACA,UAAImC,MAAM,GAAG,IAAIxF,OAAO,CAACyF,OAAR,CAAgBC,IAApB,CAAyB;AACpCC,QAAAA,KAAK,EAAE1F,eAAe,CAACkF,kBAAD,EAAqB;AACzCS,UAAAA,IAAI,EAAEb,cADmC;AAEzCc,UAAAA,IAAI,EAAE,OAAON,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACAjD,UAAAA,IAAI,CAACwD,IAAL,KAAc,UAAd,GAA2Bd,QAA3B,GAAsC1C,IAAI,CAACwD,IAAL,KAAc,OAAd,GAAwBhB,SAAS,GAAG,EAApC,GAAyCA,SAP9B,EAOyCT,CAPzC,CAA3C,GAOyFkB,SATtD;AAUzCQ,UAAAA,aAAa,EAAE,KAV0B;AAWzCC,UAAAA,KAAK,EAAE;AAXkC,SAArB;AADc,OAAzB,CAAb;AAeA,UAAIC,MAAM,GAAG/D,gBAAgB,CAACR,GAAjB,CAAqB8D,MAArB,CAAb;AACA,UAAIU,IAAI,GAAGV,MAAM,CAACW,eAAP,EAAX;AACA1D,MAAAA,SAAS,CAAC2D,SAAV,CAAoBlB,CAApB,EAAuB,CAACgB,IAAI,CAACG,KAAL,GAAatD,GAAd,EAAmBmD,IAAI,CAACI,MAAL,GAAcvD,GAAjC,CAAvB,EAA8DkD,MAA9D;AACA,WAAKpE,aAAL,CAAmB0E,IAAnB,CAAwBf,MAAxB;AACD;AACF;;AAED,MAAI7C,SAAS,CAACW,GAAV,CAAc,MAAd,CAAJ,EAA2B;AACzB,QAAIkD,kBAAkB,GAAG7D,SAAS,CAACO,QAAV,CAAmB,eAAnB,CAAzB;AACA,QAAIgC,CAAC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR;AACA,QAAIxB,GAAG,GAAGnD,aAAa,CAAC+B,IAAI,CAAC1B,GAAN,CAAvB;AACA,QAAI6D,QAAQ,GAAGlE,aAAa,CAACuB,QAAQ,CAACQ,IAAI,CAAC1B,GAAN,CAAT,CAA5B;AACA,QAAI6F,UAAU,GAAGnG,YAAY,CAACkG,kBAAkB,CAAClD,GAAnB,CAAuB,OAAvB,CAAD,EAAkCD,aAAlC,CAA7B;AACA,QAAIqD,WAAW,GAAGF,kBAAkB,CAAClD,GAAnB,CAAuB,aAAvB,CAAlB;AACA,QAAIO,SAAS,GAAG2C,kBAAkB,CAAClD,GAAnB,CAAuB,aAAvB,CAAhB,CAPyB,CAO8B;;AAEvD4B,IAAAA,CAAC,CAACxB,GAAD,CAAD,GAASwB,CAAC,CAACxB,GAAD,CAAD,GAAS,CAACb,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAnB,IAA0B,CAA5C;AACAqC,IAAAA,CAAC,CAACT,QAAD,CAAD,GAAc9B,SAAS,CAACW,GAAV,CAAc,SAAd,CAAd;AACA,QAAIkC,MAAM,GAAG,IAAIxF,OAAO,CAACyF,OAAR,CAAgBC,IAApB,CAAyB;AACpCC,MAAAA,KAAK,EAAE1F,eAAe,CAACuG,kBAAD,EAAqB;AACzCZ,QAAAA,IAAI,EAAEjD,SAAS,CAACW,GAAV,CAAc,MAAd,CADmC;AAEzCuC,QAAAA,IAAI,EAAEY,UAFmC;AAGzCE,QAAAA,MAAM,EAAED,WAHiC;AAIzC7C,QAAAA,SAAS,EAAEA;AAJ8B,OAArB;AADc,KAAzB,CAAb;AAQA,QAAIoC,MAAM,GAAG/D,gBAAgB,CAACR,GAAjB,CAAqB8D,MAArB,CAAb;AACA,QAAIU,IAAI,GAAGV,MAAM,CAACW,eAAP,EAAX;AACA1D,IAAAA,SAAS,CAAC2D,SAAV,CAAoBlB,CAApB,EAAuB,CAACgB,IAAI,CAACG,KAAL,GAAatD,GAAd,EAAmBmD,IAAI,CAACI,MAAL,GAAcvD,GAAjC,CAAvB,EAA8DkD,MAA9D;AACAT,IAAAA,MAAM,CAACoB,KAAP,GAAe,KAAK/E,aAAL,CAAmByC,MAAlC;AACA,SAAKuC,gBAAL,GAAwBrB,MAAxB;AACD;;AAED,OAAK7D,UAAL,CAAgBT,QAAhB,CAAyB4F,GAAzB,CAA6B,cAA7B,EAA6C5E,gBAAgB,CAAC6E,UAAjB,EAA7C;AACA,OAAKpF,UAAL,CAAgBT,QAAhB,CAAyB4F,GAAzB,CAA6B,SAA7B,EAAwC5E,gBAAgB,CAAC8E,cAAjB,EAAxC;AACAxE,EAAAA,QAAQ,CAACyE,mBAAT;AACAxE,EAAAA,SAAS,CAACwE,mBAAV;AACD,CApID;;AAsIAtG,UAAU,CAACoB,SAAX,CAAqBmF,cAArB,GAAsC,UAAUC,SAAV,EAAqBC,iBAArB,EAAwCjF,GAAxC,EAA6C;AACjF,MAAIY,GAAG,GAAGZ,GAAG,CAACa,mBAAJ,EAAV;AACA,MAAIqE,QAAQ,GAAG,KAAK1F,UAAL,CAAgBX,QAA/B;;AAEA,OAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxC,aAAL,CAAmByC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,QAAIiD,OAAO,GAAG,KAAKzF,aAAL,CAAmBwC,CAAnB,CAAd;AACA,QAAI6B,IAAI,GAAGoB,OAAO,CAACnB,eAAR,EAAX;AACAkB,IAAAA,QAAQ,CAACH,cAAT,CAAwB7C,CAAxB,EAA2B,CAAC6B,IAAI,CAACG,KAAL,GAAatD,GAAd,EAAmBmD,IAAI,CAACI,MAAL,GAAcvD,GAAjC,CAA3B,EAAkEoE,SAAlE,EAA6EC,iBAA7E;AACD,GARgF,CAQ/E;;;AAGF,MAAIG,WAAW,GAAG,KAAKV,gBAAvB;;AAEA,MAAIU,WAAJ,EAAiB;AACf,QAAIrB,IAAI,GAAGqB,WAAW,CAACpB,eAAZ,EAAX;AACAkB,IAAAA,QAAQ,CAACH,cAAT,CAAwBK,WAAW,CAACX,KAApC,EAA2C,CAACV,IAAI,CAACG,KAAL,GAAatD,GAAd,EAAmBmD,IAAI,CAACI,MAAL,GAAcvD,GAAjC,CAA3C,EAAkFoE,SAAlF,EAA6FC,iBAA7F;AACAC,IAAAA,QAAQ,CAACG,KAAT;AACD;;AAED,OAAKL,SAAL,GAAiBA,SAAjB;AACA,OAAKC,iBAAL,GAAyBA,iBAAzB;AACD,CArBD;;AAuBA,eAAezG,UAAf","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction Grid3DAxis(dim, linesMaterial) {\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    renderOrder: 2\n  });\n  var axisLabelsMesh = new LabelsMesh();\n  axisLabelsMesh.material.depthMask = false;\n  var rootNode = new graphicGL.Node();\n  rootNode.add(linesMesh);\n  rootNode.add(axisLabelsMesh);\n  this.rootNode = rootNode;\n  this.dim = dim;\n  this.linesMesh = linesMesh;\n  this.labelsMesh = axisLabelsMesh;\n  this.axisLineCoords = null;\n  this.labelElements = [];\n}\n\nvar otherDim = {\n  x: 'y',\n  y: 'x',\n  z: 'y'\n};\n\nGrid3DAxis.prototype.update = function (grid3DModel, axisLabelSurface, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axis = cartesian.getAxis(this.dim);\n  var linesGeo = this.linesMesh.geometry;\n  var labelsGeo = this.labelsMesh.geometry;\n  linesGeo.convertToDynamicArray(true);\n  labelsGeo.convertToDynamicArray(true);\n  var axisModel = axis.model;\n  var extent = axis.getExtent();\n  var dpr = api.getDevicePixelRatio();\n  var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));\n  var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n  var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n  var axisLineColor = axisLineModel.get('lineStyle.color'); // Render axisLine\n\n  if (axisLineModel.get('show')) {\n    var axisLineStyleModel = axisLineModel.getModel('lineStyle');\n    var p0 = [0, 0, 0];\n    var p1 = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    p0[idx] = extent[0];\n    p1[idx] = extent[1]; // Save some useful info.\n\n    this.axisLineCoords = [p0, p1];\n    var color = graphicGL.parseColor(axisLineColor);\n    var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);\n    var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);\n    color[3] *= opacity;\n    linesGeo.addLine(p0, p1, color, lineWidth * dpr);\n  } // Render axis ticksCoords\n\n\n  if (axisTickModel.get('show')) {\n    var lineStyleModel = axisTickModel.getModel('lineStyle');\n    var lineColor = graphicGL.parseColor(firstNotNull(lineStyleModel.get('color'), axisLineColor));\n    var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n    lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);\n    var ticksCoords = axis.getTicksCoords();\n    var tickLength = axisTickModel.get('length');\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = ticksCoords[i].coord;\n      var p0 = [0, 0, 0];\n      var p1 = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p0[idx] = p1[idx] = tickCoord;\n      p1[otherIdx] = tickLength;\n      linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);\n    }\n  }\n\n  this.labelElements = [];\n  var dpr = api.getDevicePixelRatio();\n\n  if (axisLabelModel.get('show')) {\n    var ticksCoords = axis.getTicksCoords();\n    var categoryData = axisModel.get('data');\n    var labelMargin = axisLabelModel.get('margin');\n    var labels = axis.getViewLabels();\n\n    for (var i = 0; i < labels.length; i++) {\n      var tickValue = labels[i].tickValue;\n      var formattedLabel = labels[i].formattedLabel;\n      var rawLabel = labels[i].rawLabel;\n      var tickCoord = axis.dataToCoord(tickValue);\n      var p = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p[idx] = p[idx] = tickCoord;\n      p[otherIdx] = labelMargin;\n      var itemTextStyleModel = axisLabelModel;\n\n      if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {\n        itemTextStyleModel = new echarts.Model(categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel);\n      }\n\n      var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(itemTextStyleModel, {\n          text: formattedLabel,\n          fill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original\n          // index of axis.data. So tick should not be exposed to user\n          // in category axis.\n          // (2) Compatible with previous version, which always returns labelStr.\n          // But in interval scale labelStr is like '223,445', which maked\n          // user repalce ','. So we modify it to return original val but remain\n          // it as 'string' to avoid error in replacing.\n          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, i) : textColor,\n          verticalAlign: 'top',\n          align: 'left'\n        })\n      });\n      var coords = axisLabelSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n      this.labelElements.push(textEl);\n    }\n  }\n\n  if (axisModel.get('name')) {\n    var nameTextStyleModel = axisModel.getModel('nameTextStyle');\n    var p = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    var otherIdx = dimIndicesMap[otherDim[axis.dim]];\n    var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);\n    var strokeColor = nameTextStyleModel.get('borderColor');\n    var lineWidth = nameTextStyleModel.get('borderWidth'); // TODO start and end\n\n    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;\n    p[otherIdx] = axisModel.get('nameGap');\n    var textEl = new echarts.graphic.Text({\n      style: createTextStyle(nameTextStyleModel, {\n        text: axisModel.get('name'),\n        fill: labelColor,\n        stroke: strokeColor,\n        lineWidth: lineWidth\n      })\n    });\n    var coords = axisLabelSurface.add(textEl);\n    var rect = textEl.getBoundingRect();\n    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n    textEl.__idx = this.labelElements.length;\n    this.nameLabelElement = textEl;\n  }\n\n  this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());\n  this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());\n  linesGeo.convertToTypedArray();\n  labelsGeo.convertToTypedArray();\n};\n\nGrid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {\n  var dpr = api.getDevicePixelRatio();\n  var labelGeo = this.labelsMesh.geometry;\n\n  for (var i = 0; i < this.labelElements.length; i++) {\n    var labelEl = this.labelElements[i];\n    var rect = labelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n  } // name label\n\n\n  var nameLabelEl = this.nameLabelElement;\n\n  if (nameLabelEl) {\n    var rect = nameLabelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n    labelGeo.dirty();\n  }\n\n  this.textAlign = textAlign;\n  this.textVerticalAlign = textVerticalAlign;\n};\n\nexport default Grid3DAxis;"]},"metadata":{},"sourceType":"module"}