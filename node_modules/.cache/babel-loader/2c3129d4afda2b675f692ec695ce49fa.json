{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.float64-array.js\";\nimport \"core-js/modules/es.string.sub.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport earcut from '../../util/earcut';\nimport LinesGeo from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport trianglesSortMixin from '../../util/geometry/trianglesSortMixin';\nimport LabelsBuilder from './LabelsBuilder';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction Geo3DBuilder(api) {\n  this.rootNode = new graphicGL.Node(); // Cache triangulation result\n\n  this._triangulationResults = {};\n  this._shadersMap = graphicGL.COMMON_SHADERS.filter(function (shaderName) {\n    return shaderName !== 'shadow';\n  }).reduce(function (obj, shaderName) {\n    obj[shaderName] = graphicGL.createShader('ecgl.' + shaderName);\n    return obj;\n  }, {});\n  this._linesShader = graphicGL.createShader('ecgl.meshLines3D');\n  var groundMaterials = {};\n  graphicGL.COMMON_SHADERS.forEach(function (shading) {\n    groundMaterials[shading] = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.' + shading)\n    });\n  });\n  this._groundMaterials = groundMaterials;\n  this._groundMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.PlaneGeometry({\n      dynamic: true\n    }),\n    castShadow: false,\n    renderNormal: true,\n    $ignorePicking: true\n  });\n\n  this._groundMesh.rotation.rotateX(-Math.PI / 2);\n\n  this._labelsBuilder = new LabelsBuilder(512, 512, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this._labelsBuilder.getMesh().material.depthTest = false;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n\n  this._initMeshes();\n\n  this._api = api;\n}\n\nGeo3DBuilder.prototype = {\n  constructor: Geo3DBuilder,\n  // Which dimension to extrude. Y or Z\n  extrudeY: true,\n  update: function update(componentModel, ecModel, api, start, end) {\n    var data = componentModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startIndex = start;\n    this._endIndex = end - 1;\n\n    this._triangulation(componentModel, start, end);\n\n    var shader = this._getShader(componentModel.get('shading'));\n\n    this._prepareMesh(componentModel, shader, api, start, end);\n\n    this.rootNode.updateWorldTransform();\n\n    this._updateRegionMesh(componentModel, api, start, end);\n\n    var coordSys = componentModel.coordinateSystem; // PENDING\n\n    if (coordSys.type === 'geo3D') {\n      this._updateGroundPlane(componentModel, coordSys, api);\n    }\n\n    var self = this;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var name = data.getName(dataIndex);\n      var center;\n      var height = distance;\n\n      if (coordSys.type === 'geo3D') {\n        var region = coordSys.getRegion(name);\n\n        if (!region) {\n          return [NaN, NaN, NaN];\n        }\n\n        center = region.getCenter();\n        var pos = coordSys.dataToPoint([center[0], center[1], height]);\n        return pos;\n      } else {\n        var tmp = self._triangulationResults[dataIndex - self._startIndex];\n        var center = self.extrudeY ? [(tmp.max[0] + tmp.min[0]) / 2, tmp.max[1] + height, (tmp.max[2] + tmp.min[2]) / 2] : [(tmp.max[0] + tmp.min[0]) / 2, (tmp.max[1] + tmp.min[1]) / 2, tmp.max[2] + height];\n      }\n    };\n\n    this._data = data;\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateDebugWireframe(componentModel); // Reset some state.\n\n\n    this._lastHoverDataIndex = 0;\n  },\n  _initMeshes: function _initMeshes() {\n    var self = this;\n\n    function createPolygonMesh() {\n      var mesh = new graphicGL.Mesh({\n        name: 'Polygon',\n        material: new graphicGL.Material({\n          shader: self._shadersMap.lambert\n        }),\n        geometry: new graphicGL.Geometry({\n          sortTriangles: true,\n          dynamic: true\n        }),\n        // TODO Disable culling\n        culling: false,\n        ignorePicking: true,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n      Object.assign(mesh.geometry, trianglesSortMixin);\n      return mesh;\n    }\n\n    var polygonMesh = createPolygonMesh();\n    var linesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: this._linesShader\n      }),\n      castShadow: false,\n      ignorePicking: true,\n      $ignorePicking: true,\n      geometry: new LinesGeo({\n        useNativeLine: false\n      })\n    });\n    this.rootNode.add(polygonMesh);\n    this.rootNode.add(linesMesh);\n    polygonMesh.material.define('both', 'VERTEX_COLOR');\n    polygonMesh.material.define('fragment', 'DOUBLE_SIDED');\n    this._polygonMesh = polygonMesh;\n    this._linesMesh = linesMesh;\n    this.rootNode.add(this._groundMesh);\n  },\n  _getShader: function _getShader(shading) {\n    var shader = this._shadersMap[shading];\n\n    if (!shader) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      } // Default use lambert shader.\n\n\n      shader = this._shadersMap.lambert;\n    }\n\n    shader.__shading = shading;\n    return shader;\n  },\n  _prepareMesh: function _prepareMesh(componentModel, shader, api, start, end) {\n    var polygonVertexCount = 0;\n    var polygonTriangleCount = 0;\n    var linesVertexCount = 0;\n    var linesTriangleCount = 0; // TODO Lines\n\n    for (var idx = start; idx < end; idx++) {\n      var polyInfo = this._getRegionPolygonInfo(idx);\n\n      var lineInfo = this._getRegionLinesInfo(idx, componentModel, this._linesMesh.geometry);\n\n      polygonVertexCount += polyInfo.vertexCount;\n      polygonTriangleCount += polyInfo.triangleCount;\n      linesVertexCount += lineInfo.vertexCount;\n      linesTriangleCount += lineInfo.triangleCount;\n    }\n\n    var polygonMesh = this._polygonMesh;\n    var polygonGeo = polygonMesh.geometry;\n    ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {\n      polygonGeo.attributes[attrName].init(polygonVertexCount);\n    });\n    polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);\n\n    if (polygonMesh.material.shader !== shader) {\n      polygonMesh.material.attachShader(shader, true);\n    }\n\n    graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, componentModel, api);\n\n    if (linesVertexCount > 0) {\n      this._linesMesh.geometry.resetOffset();\n\n      this._linesMesh.geometry.setVertexCount(linesVertexCount);\n\n      this._linesMesh.geometry.setTriangleCount(linesTriangleCount);\n    } // Indexing data index from vertex index.\n\n\n    this._dataIndexOfVertex = new Uint32Array(polygonVertexCount); // Indexing vertex index range from data index\n\n    this._vertexRangeOfDataIndex = new Uint32Array((end - start) * 2);\n  },\n  _updateRegionMesh: function _updateRegionMesh(componentModel, api, start, end) {\n    var data = componentModel.getData();\n    var vertexOffset = 0;\n    var triangleOffset = 0; // Materials configurations.\n\n    var hasTranparentRegion = false;\n    var polygonMesh = this._polygonMesh;\n    var linesMesh = this._linesMesh;\n\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      // Get bunch of visual properties.\n      var regionModel = componentModel.getRegionModel(dataIndex);\n      var itemStyleModel = regionModel.getModel('itemStyle');\n      var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get('color'), '#fff');\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get('opacity'), 1);\n      var colorArr = graphicGL.parseColor(color);\n      var borderColorArr = graphicGL.parseColor(itemStyleModel.get('borderColor'));\n      colorArr[3] *= opacity;\n      borderColorArr[3] *= opacity;\n      var isTransparent = colorArr[3] < 0.99;\n      polygonMesh.material.set('color', [1, 1, 1, 1]);\n      hasTranparentRegion = hasTranparentRegion || isTransparent;\n      var regionHeight = retrieve.firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));\n\n      var newOffsets = this._updatePolygonGeometry(componentModel, polygonMesh.geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, colorArr);\n\n      for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {\n        this._dataIndexOfVertex[i] = dataIndex;\n      }\n\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2] = vertexOffset;\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2 + 1] = newOffsets.vertexOffset;\n      vertexOffset = newOffsets.vertexOffset;\n      triangleOffset = newOffsets.triangleOffset; // Update lines.\n\n      var lineWidth = itemStyleModel.get('borderWidth');\n      var hasLine = lineWidth > 0;\n\n      if (hasLine) {\n        lineWidth *= api.getDevicePixelRatio();\n\n        this._updateLinesGeometry(linesMesh.geometry, componentModel, dataIndex, regionHeight, lineWidth, componentModel.coordinateSystem.transform);\n      }\n\n      linesMesh.invisible = !hasLine;\n      linesMesh.material.set({\n        color: borderColorArr\n      });\n    }\n\n    var polygonMesh = this._polygonMesh;\n    polygonMesh.material.transparent = hasTranparentRegion;\n    polygonMesh.material.depthMask = !hasTranparentRegion;\n    polygonMesh.geometry.updateBoundingBox();\n    polygonMesh.frontFace = this.extrudeY ? graphicGL.Mesh.CCW : graphicGL.Mesh.CW; // Update tangents\n\n    if (polygonMesh.material.get('normalMap')) {\n      polygonMesh.geometry.generateTangents();\n    }\n\n    polygonMesh.seriesIndex = componentModel.seriesIndex;\n    polygonMesh.on('mousemove', this._onmousemove, this);\n    polygonMesh.on('mouseout', this._onmouseout, this);\n  },\n  _updateDebugWireframe: function _updateDebugWireframe(componentModel) {\n    var debugWireframeModel = componentModel.getModel('debug.wireframe'); // TODO Unshow\n\n    if (debugWireframeModel.get('show')) {\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1); // TODO  Will cause highlight wrong\n\n      var mesh = this._polygonMesh;\n      mesh.geometry.generateBarycentric();\n      mesh.material.define('both', 'WIREFRAME_TRIANGLE');\n      mesh.material.set('wireframeLineColor', color);\n      mesh.material.set('wireframeLineWidth', width);\n    }\n  },\n  _onmousemove: function _onmousemove(e) {\n    var dataIndex = this._dataIndexOfVertex[e.triangle[0]];\n\n    if (dataIndex == null) {\n      dataIndex = -1;\n    }\n\n    if (dataIndex !== this._lastHoverDataIndex) {\n      this.downplay(this._lastHoverDataIndex);\n      this.highlight(dataIndex);\n\n      this._labelsBuilder.updateLabels([dataIndex]);\n    }\n\n    this._lastHoverDataIndex = dataIndex;\n    this._polygonMesh.dataIndex = dataIndex;\n  },\n  _onmouseout: function _onmouseout(e) {\n    if (e.target) {\n      this.downplay(this._lastHoverDataIndex);\n      this._lastHoverDataIndex = -1;\n      this._polygonMesh.dataIndex = -1;\n    }\n\n    this._labelsBuilder.updateLabels([]);\n  },\n  _updateGroundPlane: function _updateGroundPlane(componentModel, geo3D, api) {\n    var groundModel = componentModel.getModel('groundPlane', componentModel);\n    this._groundMesh.invisible = !groundModel.get('show', true);\n\n    if (this._groundMesh.invisible) {\n      return;\n    }\n\n    var shading = componentModel.get('shading');\n    var material = this._groundMaterials[shading];\n\n    if (!material) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      }\n\n      material = this._groundMaterials.lambert;\n    }\n\n    graphicGL.setMaterialFromModel(shading, material, groundModel, api);\n\n    if (material.get('normalMap')) {\n      this._groundMesh.geometry.generateTangents();\n    }\n\n    this._groundMesh.material = material;\n\n    this._groundMesh.material.set('color', graphicGL.parseColor(groundModel.get('color')));\n\n    this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);\n  },\n  _triangulation: function _triangulation(componentModel, start, end) {\n    this._triangulationResults = [];\n    var minAll = [Infinity, Infinity, Infinity];\n    var maxAll = [-Infinity, -Infinity, -Infinity];\n    var coordSys = componentModel.coordinateSystem;\n\n    for (var idx = start; idx < end; idx++) {\n      var polygons = [];\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n\n      for (var i = 0; i < polygonCoords.length; i++) {\n        var exterior = polygonCoords[i].exterior;\n        var interiors = polygonCoords[i].interiors;\n        var points = [];\n        var holes = [];\n\n        if (exterior.length < 3) {\n          continue;\n        }\n\n        var offset = 0;\n\n        for (var j = 0; j < exterior.length; j++) {\n          var p = exterior[j];\n          points[offset++] = p[0];\n          points[offset++] = p[1];\n        }\n\n        for (var j = 0; j < interiors.length; j++) {\n          if (interiors[j].length < 3) {\n            continue;\n          }\n\n          var startIdx = points.length / 2;\n\n          for (var k = 0; k < interiors[j].length; k++) {\n            var p = interiors[j][k];\n            points.push(p[0]);\n            points.push(p[1]);\n          }\n\n          holes.push(startIdx);\n        }\n\n        var triangles = earcut(points, holes);\n        var points3 = new Float64Array(points.length / 2 * 3);\n        var pos = [];\n        var min = [Infinity, Infinity, Infinity];\n        var max = [-Infinity, -Infinity, -Infinity];\n        var off3 = 0;\n\n        for (var j = 0; j < points.length;) {\n          vec3.set(pos, points[j++], 0, points[j++]);\n\n          if (coordSys && coordSys.transform) {\n            vec3.transformMat4(pos, pos, coordSys.transform);\n          }\n\n          vec3.min(min, min, pos);\n          vec3.max(max, max, pos);\n          points3[off3++] = pos[0];\n          points3[off3++] = pos[1];\n          points3[off3++] = pos[2];\n        }\n\n        vec3.min(minAll, minAll, min);\n        vec3.max(maxAll, maxAll, max);\n        polygons.push({\n          points: points3,\n          indices: triangles,\n          min: min,\n          max: max\n        });\n      }\n\n      this._triangulationResults.push(polygons);\n    }\n\n    this._geoBoundingBox = [minAll, maxAll];\n  },\n\n  /**\n   * Get region vertex and triangle count\n   */\n  _getRegionPolygonInfo: function _getRegionPolygonInfo(idx) {\n    var polygons = this._triangulationResults[idx - this._startIndex];\n    var sideVertexCount = 0;\n    var sideTriangleCount = 0;\n\n    for (var i = 0; i < polygons.length; i++) {\n      sideVertexCount += polygons[i].points.length / 3;\n      sideTriangleCount += polygons[i].indices.length / 3;\n    }\n\n    var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;\n    var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updatePolygonGeometry: function _updatePolygonGeometry(componentModel, geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, color) {\n    // FIXME\n    var projectUVOnGround = componentModel.get('projectUVOnGround');\n    var positionAttr = geometry.attributes.position;\n    var normalAttr = geometry.attributes.normal;\n    var texcoordAttr = geometry.attributes.texcoord0;\n    var colorAttr = geometry.attributes.color;\n    var polygons = this._triangulationResults[dataIndex - this._startIndex];\n    var hasColor = colorAttr.value && color;\n    var indices = geometry.indices;\n    var extrudeCoordIndex = this.extrudeY ? 1 : 2;\n    var sideCoordIndex = this.extrudeY ? 2 : 1;\n    var scale = [this.rootNode.worldTransform.x.len(), this.rootNode.worldTransform.y.len(), this.rootNode.worldTransform.z.len()];\n    var min = vec3.mul([], this._geoBoundingBox[0], scale);\n    var max = vec3.mul([], this._geoBoundingBox[1], scale);\n    var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);\n\n    function addVertices(polygon, y, insideOffset) {\n      var points = polygon.points;\n      var pointsLen = points.length;\n      var currentPosition = [];\n      var uv = [];\n\n      for (var k = 0; k < pointsLen; k += 3) {\n        currentPosition[0] = points[k];\n        currentPosition[extrudeCoordIndex] = y;\n        currentPosition[sideCoordIndex] = points[k + 2];\n        uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;\n        uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;\n        positionAttr.set(vertexOffset, currentPosition);\n\n        if (hasColor) {\n          colorAttr.set(vertexOffset, color);\n        }\n\n        texcoordAttr.set(vertexOffset++, uv);\n      }\n    }\n\n    function buildTopBottom(polygon, y, insideOffset) {\n      var startVertexOffset = vertexOffset;\n      addVertices(polygon, y, insideOffset);\n      var len = polygon.indices.length;\n\n      for (var k = 0; k < len; k++) {\n        indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;\n      }\n\n      triangleOffset += polygon.indices.length / 3;\n    }\n\n    var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];\n    var normalBottom = vec3.negate([], normalTop);\n\n    for (var p = 0; p < polygons.length; p++) {\n      var startVertexOffset = vertexOffset;\n      var polygon = polygons[p]; // BOTTOM\n\n      buildTopBottom(polygon, 0, 0); // TOP\n\n      buildTopBottom(polygon, regionHeight, 0);\n      var ringVertexCount = polygon.points.length / 3;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        normalAttr.set(startVertexOffset + v, normalBottom);\n        normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);\n      }\n\n      var quadToTriangle = [0, 3, 1, 1, 3, 2];\n      var quadPos = [[], [], [], []];\n      var a = [];\n      var b = [];\n      var normal = [];\n      var uv = [];\n      var len = 0;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        var next = (v + 1) % ringVertexCount;\n        var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];\n        var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];\n        var sideLen = Math.sqrt(dx * dx + dy * dy); // 0----1\n        // 3----2\n\n        for (var k = 0; k < 4; k++) {\n          var isCurrent = k === 0 || k === 3;\n          var idx3 = (isCurrent ? v : next) * 3;\n          quadPos[k][0] = polygon.points[idx3];\n          quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;\n          quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];\n          positionAttr.set(vertexOffset + k, quadPos[k]);\n\n          if (projectUVOnGround) {\n            uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;\n            uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;\n          } else {\n            uv[0] = (isCurrent ? len : len + sideLen) / maxDimSize;\n            uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex]) / maxDimSize;\n          }\n\n          texcoordAttr.set(vertexOffset + k, uv);\n        }\n\n        vec3.sub(a, quadPos[1], quadPos[0]);\n        vec3.sub(b, quadPos[3], quadPos[0]);\n        vec3.cross(normal, a, b);\n        vec3.normalize(normal, normal);\n\n        for (var k = 0; k < 4; k++) {\n          normalAttr.set(vertexOffset + k, normal);\n\n          if (hasColor) {\n            colorAttr.set(vertexOffset + k, color);\n          }\n        }\n\n        for (var k = 0; k < 6; k++) {\n          indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;\n        }\n\n        vertexOffset += 4;\n        triangleOffset += 2;\n        len += sideLen;\n      }\n    }\n\n    geometry.dirty();\n    return {\n      vertexOffset: vertexOffset,\n      triangleOffset: triangleOffset\n    };\n  },\n  _getRegionLinesInfo: function _getRegionLinesInfo(idx, componentModel, geometry) {\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var regionModel = componentModel.getRegionModel(idx);\n    var itemStyleModel = regionModel.getModel('itemStyle');\n    var lineWidth = itemStyleModel.get('borderWidth');\n\n    if (lineWidth > 0) {\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n      polygonCoords.forEach(function (coords) {\n        var exterior = coords.exterior;\n        var interiors = coords.interiors;\n        vertexCount += geometry.getPolylineVertexCount(exterior);\n        triangleCount += geometry.getPolylineTriangleCount(exterior);\n\n        for (var i = 0; i < interiors.length; i++) {\n          vertexCount += geometry.getPolylineVertexCount(interiors[i]);\n          triangleCount += geometry.getPolylineTriangleCount(interiors[i]);\n        }\n      }, this);\n    }\n\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updateLinesGeometry: function _updateLinesGeometry(geometry, componentModel, dataIndex, regionHeight, lineWidth, transform) {\n    function convertToPoints3(polygon) {\n      var points = new Float64Array(polygon.length * 3);\n      var offset = 0;\n      var pos = [];\n\n      for (var i = 0; i < polygon.length; i++) {\n        pos[0] = polygon[i][0]; // Add a offset to avoid z-fighting\n\n        pos[1] = regionHeight + 0.1;\n        pos[2] = polygon[i][1];\n\n        if (transform) {\n          vec3.transformMat4(pos, pos, transform);\n        }\n\n        points[offset++] = pos[0];\n        points[offset++] = pos[1];\n        points[offset++] = pos[2];\n      }\n\n      return points;\n    }\n\n    var whiteColor = [1, 1, 1, 1];\n    var coords = componentModel.getRegionPolygonCoords(dataIndex);\n    coords.forEach(function (geo) {\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n      geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);\n\n      for (var i = 0; i < interiors.length; i++) {\n        geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);\n      }\n    });\n  },\n  highlight: function highlight(dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel(['emphasis', 'itemStyle']);\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = retrieve.firstNotNull(emphasisItemStyleModel.get('opacity'), getItemVisualOpacity(data, dataIndex), 1);\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  downplay: function downplay(dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemStyleModel = data.getItemModel(dataIndex);\n    var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get(['itemStyle', 'color']), '#fff');\n    var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get(['itemStyle', 'opacity']), 1);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  dispose: function dispose() {\n    this._labelsBuilder.dispose();\n  },\n  _setColorOfDataIndex: function _setColorOfDataIndex(data, dataIndex, colorArr) {\n    if (dataIndex < this._startIndex && dataIndex > this._endIndex) {\n      return;\n    }\n\n    dataIndex -= this._startIndex;\n\n    for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {\n      this._polygonMesh.geometry.attributes.color.set(i, colorArr);\n    }\n\n    this._polygonMesh.geometry.dirty();\n\n    this._api.getZr().refresh();\n  }\n};\nexport default Geo3DBuilder;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/component/common/Geo3DBuilder.js"],"names":["echarts","graphicGL","earcut","LinesGeo","retrieve","glmatrix","trianglesSortMixin","LabelsBuilder","lines3DGLSL","getItemVisualColor","getItemVisualOpacity","vec3","Shader","import","Geo3DBuilder","api","rootNode","Node","_triangulationResults","_shadersMap","COMMON_SHADERS","filter","shaderName","reduce","obj","createShader","_linesShader","groundMaterials","forEach","shading","Material","shader","_groundMaterials","_groundMesh","Mesh","geometry","PlaneGeometry","dynamic","castShadow","renderNormal","$ignorePicking","rotation","rotateX","Math","PI","_labelsBuilder","getMesh","renderOrder","material","depthTest","add","_initMeshes","_api","prototype","constructor","extrudeY","update","componentModel","ecModel","start","end","data","getData","count","_startIndex","_endIndex","_triangulation","_getShader","get","_prepareMesh","updateWorldTransform","_updateRegionMesh","coordSys","coordinateSystem","type","_updateGroundPlane","self","updateData","getLabelPosition","dataIndex","positionDesc","distance","name","getName","center","height","region","getRegion","NaN","getCenter","pos","dataToPoint","tmp","max","min","_data","updateLabels","_updateDebugWireframe","_lastHoverDataIndex","createPolygonMesh","mesh","lambert","Geometry","sortTriangles","culling","ignorePicking","Object","assign","polygonMesh","linesMesh","useNativeLine","define","_polygonMesh","_linesMesh","process","env","NODE_ENV","console","warn","__shading","polygonVertexCount","polygonTriangleCount","linesVertexCount","linesTriangleCount","idx","polyInfo","_getRegionPolygonInfo","lineInfo","_getRegionLinesInfo","vertexCount","triangleCount","polygonGeo","attrName","attributes","init","indices","Uint32Array","Uint16Array","attachShader","setMaterialFromModel","resetOffset","setVertexCount","setTriangleCount","_dataIndexOfVertex","_vertexRangeOfDataIndex","vertexOffset","triangleOffset","hasTranparentRegion","regionModel","getRegionModel","itemStyleModel","getModel","color","firstNotNull","opacity","colorArr","parseColor","borderColorArr","isTransparent","set","regionHeight","newOffsets","_updatePolygonGeometry","i","lineWidth","hasLine","getDevicePixelRatio","_updateLinesGeometry","transform","invisible","transparent","depthMask","updateBoundingBox","frontFace","CCW","CW","generateTangents","seriesIndex","on","_onmousemove","_onmouseout","debugWireframeModel","width","generateBarycentric","e","triangle","downplay","highlight","target","geo3D","groundModel","scale","size","minAll","Infinity","maxAll","polygons","polygonCoords","getRegionPolygonCoords","length","exterior","interiors","points","holes","offset","j","p","startIdx","k","push","triangles","points3","Float64Array","off3","transformMat4","_geoBoundingBox","sideVertexCount","sideTriangleCount","projectUVOnGround","positionAttr","position","normalAttr","normal","texcoordAttr","texcoord0","colorAttr","hasColor","value","extrudeCoordIndex","sideCoordIndex","worldTransform","x","len","y","z","mul","maxDimSize","addVertices","polygon","insideOffset","pointsLen","currentPosition","uv","buildTopBottom","startVertexOffset","normalTop","normalBottom","negate","ringVertexCount","v","quadToTriangle","quadPos","a","b","next","dx","dy","sideLen","sqrt","isCurrent","idx3","sub","cross","normalize","dirty","coords","getPolylineVertexCount","getPolylineTriangleCount","convertToPoints3","whiteColor","geo","addPolyline","itemModel","getItemModel","emphasisItemStyleModel","emphasisColor","emphasisOpacity","lift","_setColorOfDataIndex","dispose","getZr","refresh"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport earcut from '../../util/earcut';\nimport LinesGeo from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport trianglesSortMixin from '../../util/geometry/trianglesSortMixin';\nimport LabelsBuilder from './LabelsBuilder';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction Geo3DBuilder(api) {\n  this.rootNode = new graphicGL.Node(); // Cache triangulation result\n\n  this._triangulationResults = {};\n  this._shadersMap = graphicGL.COMMON_SHADERS.filter(function (shaderName) {\n    return shaderName !== 'shadow';\n  }).reduce(function (obj, shaderName) {\n    obj[shaderName] = graphicGL.createShader('ecgl.' + shaderName);\n    return obj;\n  }, {});\n  this._linesShader = graphicGL.createShader('ecgl.meshLines3D');\n  var groundMaterials = {};\n  graphicGL.COMMON_SHADERS.forEach(function (shading) {\n    groundMaterials[shading] = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.' + shading)\n    });\n  });\n  this._groundMaterials = groundMaterials;\n  this._groundMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.PlaneGeometry({\n      dynamic: true\n    }),\n    castShadow: false,\n    renderNormal: true,\n    $ignorePicking: true\n  });\n\n  this._groundMesh.rotation.rotateX(-Math.PI / 2);\n\n  this._labelsBuilder = new LabelsBuilder(512, 512, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this._labelsBuilder.getMesh().material.depthTest = false;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n\n  this._initMeshes();\n\n  this._api = api;\n}\n\nGeo3DBuilder.prototype = {\n  constructor: Geo3DBuilder,\n  // Which dimension to extrude. Y or Z\n  extrudeY: true,\n  update: function (componentModel, ecModel, api, start, end) {\n    var data = componentModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startIndex = start;\n    this._endIndex = end - 1;\n\n    this._triangulation(componentModel, start, end);\n\n    var shader = this._getShader(componentModel.get('shading'));\n\n    this._prepareMesh(componentModel, shader, api, start, end);\n\n    this.rootNode.updateWorldTransform();\n\n    this._updateRegionMesh(componentModel, api, start, end);\n\n    var coordSys = componentModel.coordinateSystem; // PENDING\n\n    if (coordSys.type === 'geo3D') {\n      this._updateGroundPlane(componentModel, coordSys, api);\n    }\n\n    var self = this;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var name = data.getName(dataIndex);\n      var center;\n      var height = distance;\n\n      if (coordSys.type === 'geo3D') {\n        var region = coordSys.getRegion(name);\n\n        if (!region) {\n          return [NaN, NaN, NaN];\n        }\n\n        center = region.getCenter();\n        var pos = coordSys.dataToPoint([center[0], center[1], height]);\n        return pos;\n      } else {\n        var tmp = self._triangulationResults[dataIndex - self._startIndex];\n        var center = self.extrudeY ? [(tmp.max[0] + tmp.min[0]) / 2, tmp.max[1] + height, (tmp.max[2] + tmp.min[2]) / 2] : [(tmp.max[0] + tmp.min[0]) / 2, (tmp.max[1] + tmp.min[1]) / 2, tmp.max[2] + height];\n      }\n    };\n\n    this._data = data;\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateDebugWireframe(componentModel); // Reset some state.\n\n\n    this._lastHoverDataIndex = 0;\n  },\n  _initMeshes: function () {\n    var self = this;\n\n    function createPolygonMesh() {\n      var mesh = new graphicGL.Mesh({\n        name: 'Polygon',\n        material: new graphicGL.Material({\n          shader: self._shadersMap.lambert\n        }),\n        geometry: new graphicGL.Geometry({\n          sortTriangles: true,\n          dynamic: true\n        }),\n        // TODO Disable culling\n        culling: false,\n        ignorePicking: true,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n      Object.assign(mesh.geometry, trianglesSortMixin);\n      return mesh;\n    }\n\n    var polygonMesh = createPolygonMesh();\n    var linesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: this._linesShader\n      }),\n      castShadow: false,\n      ignorePicking: true,\n      $ignorePicking: true,\n      geometry: new LinesGeo({\n        useNativeLine: false\n      })\n    });\n    this.rootNode.add(polygonMesh);\n    this.rootNode.add(linesMesh);\n    polygonMesh.material.define('both', 'VERTEX_COLOR');\n    polygonMesh.material.define('fragment', 'DOUBLE_SIDED');\n    this._polygonMesh = polygonMesh;\n    this._linesMesh = linesMesh;\n    this.rootNode.add(this._groundMesh);\n  },\n  _getShader: function (shading) {\n    var shader = this._shadersMap[shading];\n\n    if (!shader) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      } // Default use lambert shader.\n\n\n      shader = this._shadersMap.lambert;\n    }\n\n    shader.__shading = shading;\n    return shader;\n  },\n  _prepareMesh: function (componentModel, shader, api, start, end) {\n    var polygonVertexCount = 0;\n    var polygonTriangleCount = 0;\n    var linesVertexCount = 0;\n    var linesTriangleCount = 0; // TODO Lines\n\n    for (var idx = start; idx < end; idx++) {\n      var polyInfo = this._getRegionPolygonInfo(idx);\n\n      var lineInfo = this._getRegionLinesInfo(idx, componentModel, this._linesMesh.geometry);\n\n      polygonVertexCount += polyInfo.vertexCount;\n      polygonTriangleCount += polyInfo.triangleCount;\n      linesVertexCount += lineInfo.vertexCount;\n      linesTriangleCount += lineInfo.triangleCount;\n    }\n\n    var polygonMesh = this._polygonMesh;\n    var polygonGeo = polygonMesh.geometry;\n    ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {\n      polygonGeo.attributes[attrName].init(polygonVertexCount);\n    });\n    polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);\n\n    if (polygonMesh.material.shader !== shader) {\n      polygonMesh.material.attachShader(shader, true);\n    }\n\n    graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, componentModel, api);\n\n    if (linesVertexCount > 0) {\n      this._linesMesh.geometry.resetOffset();\n\n      this._linesMesh.geometry.setVertexCount(linesVertexCount);\n\n      this._linesMesh.geometry.setTriangleCount(linesTriangleCount);\n    } // Indexing data index from vertex index.\n\n\n    this._dataIndexOfVertex = new Uint32Array(polygonVertexCount); // Indexing vertex index range from data index\n\n    this._vertexRangeOfDataIndex = new Uint32Array((end - start) * 2);\n  },\n  _updateRegionMesh: function (componentModel, api, start, end) {\n    var data = componentModel.getData();\n    var vertexOffset = 0;\n    var triangleOffset = 0; // Materials configurations.\n\n    var hasTranparentRegion = false;\n    var polygonMesh = this._polygonMesh;\n    var linesMesh = this._linesMesh;\n\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      // Get bunch of visual properties.\n      var regionModel = componentModel.getRegionModel(dataIndex);\n      var itemStyleModel = regionModel.getModel('itemStyle');\n      var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get('color'), '#fff');\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get('opacity'), 1);\n      var colorArr = graphicGL.parseColor(color);\n      var borderColorArr = graphicGL.parseColor(itemStyleModel.get('borderColor'));\n      colorArr[3] *= opacity;\n      borderColorArr[3] *= opacity;\n      var isTransparent = colorArr[3] < 0.99;\n      polygonMesh.material.set('color', [1, 1, 1, 1]);\n      hasTranparentRegion = hasTranparentRegion || isTransparent;\n      var regionHeight = retrieve.firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));\n\n      var newOffsets = this._updatePolygonGeometry(componentModel, polygonMesh.geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, colorArr);\n\n      for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {\n        this._dataIndexOfVertex[i] = dataIndex;\n      }\n\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2] = vertexOffset;\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2 + 1] = newOffsets.vertexOffset;\n      vertexOffset = newOffsets.vertexOffset;\n      triangleOffset = newOffsets.triangleOffset; // Update lines.\n\n      var lineWidth = itemStyleModel.get('borderWidth');\n      var hasLine = lineWidth > 0;\n\n      if (hasLine) {\n        lineWidth *= api.getDevicePixelRatio();\n\n        this._updateLinesGeometry(linesMesh.geometry, componentModel, dataIndex, regionHeight, lineWidth, componentModel.coordinateSystem.transform);\n      }\n\n      linesMesh.invisible = !hasLine;\n      linesMesh.material.set({\n        color: borderColorArr\n      });\n    }\n\n    var polygonMesh = this._polygonMesh;\n    polygonMesh.material.transparent = hasTranparentRegion;\n    polygonMesh.material.depthMask = !hasTranparentRegion;\n    polygonMesh.geometry.updateBoundingBox();\n    polygonMesh.frontFace = this.extrudeY ? graphicGL.Mesh.CCW : graphicGL.Mesh.CW; // Update tangents\n\n    if (polygonMesh.material.get('normalMap')) {\n      polygonMesh.geometry.generateTangents();\n    }\n\n    polygonMesh.seriesIndex = componentModel.seriesIndex;\n    polygonMesh.on('mousemove', this._onmousemove, this);\n    polygonMesh.on('mouseout', this._onmouseout, this);\n  },\n  _updateDebugWireframe: function (componentModel) {\n    var debugWireframeModel = componentModel.getModel('debug.wireframe'); // TODO Unshow\n\n    if (debugWireframeModel.get('show')) {\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1); // TODO  Will cause highlight wrong\n\n      var mesh = this._polygonMesh;\n      mesh.geometry.generateBarycentric();\n      mesh.material.define('both', 'WIREFRAME_TRIANGLE');\n      mesh.material.set('wireframeLineColor', color);\n      mesh.material.set('wireframeLineWidth', width);\n    }\n  },\n  _onmousemove: function (e) {\n    var dataIndex = this._dataIndexOfVertex[e.triangle[0]];\n\n    if (dataIndex == null) {\n      dataIndex = -1;\n    }\n\n    if (dataIndex !== this._lastHoverDataIndex) {\n      this.downplay(this._lastHoverDataIndex);\n      this.highlight(dataIndex);\n\n      this._labelsBuilder.updateLabels([dataIndex]);\n    }\n\n    this._lastHoverDataIndex = dataIndex;\n    this._polygonMesh.dataIndex = dataIndex;\n  },\n  _onmouseout: function (e) {\n    if (e.target) {\n      this.downplay(this._lastHoverDataIndex);\n      this._lastHoverDataIndex = -1;\n      this._polygonMesh.dataIndex = -1;\n    }\n\n    this._labelsBuilder.updateLabels([]);\n  },\n  _updateGroundPlane: function (componentModel, geo3D, api) {\n    var groundModel = componentModel.getModel('groundPlane', componentModel);\n    this._groundMesh.invisible = !groundModel.get('show', true);\n\n    if (this._groundMesh.invisible) {\n      return;\n    }\n\n    var shading = componentModel.get('shading');\n    var material = this._groundMaterials[shading];\n\n    if (!material) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      }\n\n      material = this._groundMaterials.lambert;\n    }\n\n    graphicGL.setMaterialFromModel(shading, material, groundModel, api);\n\n    if (material.get('normalMap')) {\n      this._groundMesh.geometry.generateTangents();\n    }\n\n    this._groundMesh.material = material;\n\n    this._groundMesh.material.set('color', graphicGL.parseColor(groundModel.get('color')));\n\n    this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);\n  },\n  _triangulation: function (componentModel, start, end) {\n    this._triangulationResults = [];\n    var minAll = [Infinity, Infinity, Infinity];\n    var maxAll = [-Infinity, -Infinity, -Infinity];\n    var coordSys = componentModel.coordinateSystem;\n\n    for (var idx = start; idx < end; idx++) {\n      var polygons = [];\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n\n      for (var i = 0; i < polygonCoords.length; i++) {\n        var exterior = polygonCoords[i].exterior;\n        var interiors = polygonCoords[i].interiors;\n        var points = [];\n        var holes = [];\n\n        if (exterior.length < 3) {\n          continue;\n        }\n\n        var offset = 0;\n\n        for (var j = 0; j < exterior.length; j++) {\n          var p = exterior[j];\n          points[offset++] = p[0];\n          points[offset++] = p[1];\n        }\n\n        for (var j = 0; j < interiors.length; j++) {\n          if (interiors[j].length < 3) {\n            continue;\n          }\n\n          var startIdx = points.length / 2;\n\n          for (var k = 0; k < interiors[j].length; k++) {\n            var p = interiors[j][k];\n            points.push(p[0]);\n            points.push(p[1]);\n          }\n\n          holes.push(startIdx);\n        }\n\n        var triangles = earcut(points, holes);\n        var points3 = new Float64Array(points.length / 2 * 3);\n        var pos = [];\n        var min = [Infinity, Infinity, Infinity];\n        var max = [-Infinity, -Infinity, -Infinity];\n        var off3 = 0;\n\n        for (var j = 0; j < points.length;) {\n          vec3.set(pos, points[j++], 0, points[j++]);\n\n          if (coordSys && coordSys.transform) {\n            vec3.transformMat4(pos, pos, coordSys.transform);\n          }\n\n          vec3.min(min, min, pos);\n          vec3.max(max, max, pos);\n          points3[off3++] = pos[0];\n          points3[off3++] = pos[1];\n          points3[off3++] = pos[2];\n        }\n\n        vec3.min(minAll, minAll, min);\n        vec3.max(maxAll, maxAll, max);\n        polygons.push({\n          points: points3,\n          indices: triangles,\n          min: min,\n          max: max\n        });\n      }\n\n      this._triangulationResults.push(polygons);\n    }\n\n    this._geoBoundingBox = [minAll, maxAll];\n  },\n\n  /**\n   * Get region vertex and triangle count\n   */\n  _getRegionPolygonInfo: function (idx) {\n    var polygons = this._triangulationResults[idx - this._startIndex];\n    var sideVertexCount = 0;\n    var sideTriangleCount = 0;\n\n    for (var i = 0; i < polygons.length; i++) {\n      sideVertexCount += polygons[i].points.length / 3;\n      sideTriangleCount += polygons[i].indices.length / 3;\n    }\n\n    var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;\n    var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updatePolygonGeometry: function (componentModel, geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, color) {\n    // FIXME\n    var projectUVOnGround = componentModel.get('projectUVOnGround');\n    var positionAttr = geometry.attributes.position;\n    var normalAttr = geometry.attributes.normal;\n    var texcoordAttr = geometry.attributes.texcoord0;\n    var colorAttr = geometry.attributes.color;\n    var polygons = this._triangulationResults[dataIndex - this._startIndex];\n    var hasColor = colorAttr.value && color;\n    var indices = geometry.indices;\n    var extrudeCoordIndex = this.extrudeY ? 1 : 2;\n    var sideCoordIndex = this.extrudeY ? 2 : 1;\n    var scale = [this.rootNode.worldTransform.x.len(), this.rootNode.worldTransform.y.len(), this.rootNode.worldTransform.z.len()];\n    var min = vec3.mul([], this._geoBoundingBox[0], scale);\n    var max = vec3.mul([], this._geoBoundingBox[1], scale);\n    var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);\n\n    function addVertices(polygon, y, insideOffset) {\n      var points = polygon.points;\n      var pointsLen = points.length;\n      var currentPosition = [];\n      var uv = [];\n\n      for (var k = 0; k < pointsLen; k += 3) {\n        currentPosition[0] = points[k];\n        currentPosition[extrudeCoordIndex] = y;\n        currentPosition[sideCoordIndex] = points[k + 2];\n        uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;\n        uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;\n        positionAttr.set(vertexOffset, currentPosition);\n\n        if (hasColor) {\n          colorAttr.set(vertexOffset, color);\n        }\n\n        texcoordAttr.set(vertexOffset++, uv);\n      }\n    }\n\n    function buildTopBottom(polygon, y, insideOffset) {\n      var startVertexOffset = vertexOffset;\n      addVertices(polygon, y, insideOffset);\n      var len = polygon.indices.length;\n\n      for (var k = 0; k < len; k++) {\n        indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;\n      }\n\n      triangleOffset += polygon.indices.length / 3;\n    }\n\n    var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];\n    var normalBottom = vec3.negate([], normalTop);\n\n    for (var p = 0; p < polygons.length; p++) {\n      var startVertexOffset = vertexOffset;\n      var polygon = polygons[p]; // BOTTOM\n\n      buildTopBottom(polygon, 0, 0); // TOP\n\n      buildTopBottom(polygon, regionHeight, 0);\n      var ringVertexCount = polygon.points.length / 3;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        normalAttr.set(startVertexOffset + v, normalBottom);\n        normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);\n      }\n\n      var quadToTriangle = [0, 3, 1, 1, 3, 2];\n      var quadPos = [[], [], [], []];\n      var a = [];\n      var b = [];\n      var normal = [];\n      var uv = [];\n      var len = 0;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        var next = (v + 1) % ringVertexCount;\n        var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];\n        var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];\n        var sideLen = Math.sqrt(dx * dx + dy * dy); // 0----1\n        // 3----2\n\n        for (var k = 0; k < 4; k++) {\n          var isCurrent = k === 0 || k === 3;\n          var idx3 = (isCurrent ? v : next) * 3;\n          quadPos[k][0] = polygon.points[idx3];\n          quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;\n          quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];\n          positionAttr.set(vertexOffset + k, quadPos[k]);\n\n          if (projectUVOnGround) {\n            uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;\n            uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;\n          } else {\n            uv[0] = (isCurrent ? len : len + sideLen) / maxDimSize;\n            uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex]) / maxDimSize;\n          }\n\n          texcoordAttr.set(vertexOffset + k, uv);\n        }\n\n        vec3.sub(a, quadPos[1], quadPos[0]);\n        vec3.sub(b, quadPos[3], quadPos[0]);\n        vec3.cross(normal, a, b);\n        vec3.normalize(normal, normal);\n\n        for (var k = 0; k < 4; k++) {\n          normalAttr.set(vertexOffset + k, normal);\n\n          if (hasColor) {\n            colorAttr.set(vertexOffset + k, color);\n          }\n        }\n\n        for (var k = 0; k < 6; k++) {\n          indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;\n        }\n\n        vertexOffset += 4;\n        triangleOffset += 2;\n        len += sideLen;\n      }\n    }\n\n    geometry.dirty();\n    return {\n      vertexOffset: vertexOffset,\n      triangleOffset: triangleOffset\n    };\n  },\n  _getRegionLinesInfo: function (idx, componentModel, geometry) {\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var regionModel = componentModel.getRegionModel(idx);\n    var itemStyleModel = regionModel.getModel('itemStyle');\n    var lineWidth = itemStyleModel.get('borderWidth');\n\n    if (lineWidth > 0) {\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n      polygonCoords.forEach(function (coords) {\n        var exterior = coords.exterior;\n        var interiors = coords.interiors;\n        vertexCount += geometry.getPolylineVertexCount(exterior);\n        triangleCount += geometry.getPolylineTriangleCount(exterior);\n\n        for (var i = 0; i < interiors.length; i++) {\n          vertexCount += geometry.getPolylineVertexCount(interiors[i]);\n          triangleCount += geometry.getPolylineTriangleCount(interiors[i]);\n        }\n      }, this);\n    }\n\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updateLinesGeometry: function (geometry, componentModel, dataIndex, regionHeight, lineWidth, transform) {\n    function convertToPoints3(polygon) {\n      var points = new Float64Array(polygon.length * 3);\n      var offset = 0;\n      var pos = [];\n\n      for (var i = 0; i < polygon.length; i++) {\n        pos[0] = polygon[i][0]; // Add a offset to avoid z-fighting\n\n        pos[1] = regionHeight + 0.1;\n        pos[2] = polygon[i][1];\n\n        if (transform) {\n          vec3.transformMat4(pos, pos, transform);\n        }\n\n        points[offset++] = pos[0];\n        points[offset++] = pos[1];\n        points[offset++] = pos[2];\n      }\n\n      return points;\n    }\n\n    var whiteColor = [1, 1, 1, 1];\n    var coords = componentModel.getRegionPolygonCoords(dataIndex);\n    coords.forEach(function (geo) {\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n      geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);\n\n      for (var i = 0; i < interiors.length; i++) {\n        geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);\n      }\n    });\n  },\n  highlight: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel(['emphasis', 'itemStyle']);\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = retrieve.firstNotNull(emphasisItemStyleModel.get('opacity'), getItemVisualOpacity(data, dataIndex), 1);\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  downplay: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemStyleModel = data.getItemModel(dataIndex);\n    var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get(['itemStyle', 'color']), '#fff');\n    var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get(['itemStyle', 'opacity']), 1);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n  },\n  _setColorOfDataIndex: function (data, dataIndex, colorArr) {\n    if (dataIndex < this._startIndex && dataIndex > this._endIndex) {\n      return;\n    }\n\n    dataIndex -= this._startIndex;\n\n    for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {\n      this._polygonMesh.geometry.attributes.color.set(i, colorArr);\n    }\n\n    this._polygonMesh.geometry.dirty();\n\n    this._api.getZr().refresh();\n  }\n};\nexport default Geo3DBuilder;"]},"metadata":{},"sourceType":"module"}