{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar p0 = vec3.create();\nvar p1 = vec3.create();\nvar p2 = vec3.create(); // var cp = vec3.create();\n\nexport default {\n  needsSortTriangles: function () {\n    return this.indices && this.sortTriangles;\n  },\n  needsSortTrianglesProgressively: function () {\n    return this.needsSortTriangles() && this.triangleCount >= 2e4;\n  },\n  doSortTriangles: function (cameraPos, frame) {\n    var indices = this.indices; // Do progressive quick sort.\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n\n      if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {\n        this._triangleZList = new Float32Array(this.triangleCount);\n        this._sortedTriangleIndices = new Uint32Array(this.triangleCount);\n        this._indicesTmp = new indices.constructor(indices.length);\n        this._triangleZListTmp = new Float32Array(this.triangleCount);\n      }\n\n      var cursor = 0;\n      var firstZ;\n\n      for (var i = 0; i < indices.length;) {\n        posAttr.get(indices[i++], p0);\n        posAttr.get(indices[i++], p1);\n        posAttr.get(indices[i++], p2); // FIXME If use center ?\n        // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;\n        // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;\n        // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;\n        // Camera position is in object space\n        // Use max of three points, PENDING\n\n        var z0 = vec3.sqrDist(p0, cameraPos);\n        var z1 = vec3.sqrDist(p1, cameraPos);\n        var z2 = vec3.sqrDist(p2, cameraPos);\n        var zMax = Math.min(z0, z1);\n        zMax = Math.min(zMax, z2);\n\n        if (i === 3) {\n          firstZ = zMax;\n          zMax = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          zMax = zMax - firstZ;\n        }\n\n        this._triangleZList[cursor++] = zMax;\n      }\n    }\n\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    for (var i = 0; i < sortedTriangleIndices.length; i++) {\n      sortedTriangleIndices[i] = i;\n    }\n\n    if (this.triangleCount < 2e4) {\n      // Use simple timsort for simple geometries.\n      if (frame === 0) {\n        // Use native sort temporary.\n        this._simpleSort(true);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    var targetIndices = this._indicesTmp;\n    var targetTriangleZList = this._triangleZListTmp;\n    var faceZList = this._triangleZList;\n\n    for (var i = 0; i < this.triangleCount; i++) {\n      var fromIdx3 = sortedTriangleIndices[i] * 3;\n      var toIdx3 = i * 3;\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3] = indices[fromIdx3];\n      targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];\n    } // Swap indices.\n\n\n    var tmp = this._indicesTmp;\n    this._indicesTmp = this.indices;\n    this.indices = tmp;\n    var tmp = this._triangleZListTmp;\n    this._triangleZListTmp = this._triangleZList;\n    this._triangleZList = tmp;\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return faceZList[b] - faceZList[a];\n    }\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(sortedTriangleIndices, compare);\n    } else {\n      ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(sortedTriangleIndices, function (a, b) {\n      return faceZList[b] - faceZList[a];\n    }, frame);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/geometry/trianglesSortMixin.js"],"names":["ProgressiveQuickSort","glmatrix","vec3","p0","create","p1","p2","needsSortTriangles","indices","sortTriangles","needsSortTrianglesProgressively","triangleCount","doSortTriangles","cameraPos","frame","posAttr","attributes","position","array","_triangleZList","length","Float32Array","_sortedTriangleIndices","Uint32Array","_indicesTmp","constructor","_triangleZListTmp","cursor","firstZ","i","get","z0","sqrDist","z1","z2","zMax","Math","min","sortedTriangleIndices","_simpleSort","_progressiveQuickSort","targetIndices","targetTriangleZList","faceZList","fromIdx3","toIdx3","tmp","dirtyIndices","useNativeQuickSort","compare","a","b","Array","prototype","sort","call","_quickSort","step"],"mappings":"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","sourcesContent":["import ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar p0 = vec3.create();\nvar p1 = vec3.create();\nvar p2 = vec3.create(); // var cp = vec3.create();\n\nexport default {\n  needsSortTriangles: function () {\n    return this.indices && this.sortTriangles;\n  },\n  needsSortTrianglesProgressively: function () {\n    return this.needsSortTriangles() && this.triangleCount >= 2e4;\n  },\n  doSortTriangles: function (cameraPos, frame) {\n    var indices = this.indices; // Do progressive quick sort.\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n\n      if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {\n        this._triangleZList = new Float32Array(this.triangleCount);\n        this._sortedTriangleIndices = new Uint32Array(this.triangleCount);\n        this._indicesTmp = new indices.constructor(indices.length);\n        this._triangleZListTmp = new Float32Array(this.triangleCount);\n      }\n\n      var cursor = 0;\n      var firstZ;\n\n      for (var i = 0; i < indices.length;) {\n        posAttr.get(indices[i++], p0);\n        posAttr.get(indices[i++], p1);\n        posAttr.get(indices[i++], p2); // FIXME If use center ?\n        // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;\n        // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;\n        // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;\n        // Camera position is in object space\n        // Use max of three points, PENDING\n\n        var z0 = vec3.sqrDist(p0, cameraPos);\n        var z1 = vec3.sqrDist(p1, cameraPos);\n        var z2 = vec3.sqrDist(p2, cameraPos);\n        var zMax = Math.min(z0, z1);\n        zMax = Math.min(zMax, z2);\n\n        if (i === 3) {\n          firstZ = zMax;\n          zMax = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          zMax = zMax - firstZ;\n        }\n\n        this._triangleZList[cursor++] = zMax;\n      }\n    }\n\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    for (var i = 0; i < sortedTriangleIndices.length; i++) {\n      sortedTriangleIndices[i] = i;\n    }\n\n    if (this.triangleCount < 2e4) {\n      // Use simple timsort for simple geometries.\n      if (frame === 0) {\n        // Use native sort temporary.\n        this._simpleSort(true);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    var targetIndices = this._indicesTmp;\n    var targetTriangleZList = this._triangleZListTmp;\n    var faceZList = this._triangleZList;\n\n    for (var i = 0; i < this.triangleCount; i++) {\n      var fromIdx3 = sortedTriangleIndices[i] * 3;\n      var toIdx3 = i * 3;\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3] = indices[fromIdx3];\n      targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];\n    } // Swap indices.\n\n\n    var tmp = this._indicesTmp;\n    this._indicesTmp = this.indices;\n    this.indices = tmp;\n    var tmp = this._triangleZListTmp;\n    this._triangleZListTmp = this._triangleZList;\n    this._triangleZList = tmp;\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return faceZList[b] - faceZList[a];\n    }\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(sortedTriangleIndices, compare);\n    } else {\n      ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(sortedTriangleIndices, function (a, b) {\n      return faceZList[b] - faceZList[a];\n    }, frame);\n  }\n};"]},"metadata":{},"sourceType":"module"}