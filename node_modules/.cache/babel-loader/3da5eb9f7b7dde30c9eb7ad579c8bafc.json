{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { layout, largeLayout } from '../../layout/barGrid';\nimport dataSample from '../../processor/dataSample';\nimport BarSeries from './BarSeries';\nimport BarView from './BarView';\nexport function install(registers) {\n  registers.registerChartView(BarView);\n  registers.registerSeriesModel(BarSeries);\n  registers.registerLayout(registers.PRIORITY.VISUAL.LAYOUT, zrUtil.curry(layout, 'bar'));\n  registers.registerLayout(registers.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, largeLayout);\n  registers.registerVisual({\n    seriesType: 'bar',\n    reset: function reset(seriesModel) {\n      seriesModel.getData().setVisual('legendSymbol', 'roundRect');\n    }\n  });\n  registers.registerProcessor(registers.PRIORITY.PROCESSOR.STATISTIC, dataSample('bar'));\n  registers.registerAction({\n    type: 'changeAxisOrder',\n    event: 'changeAxisOrder',\n    update: 'update'\n  }, function (payload, ecModel) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      if (payload.sortInfo) {\n        componentModel.axis.setCategorySortInfo(payload.sortInfo);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts@5.0.1@echarts/lib/chart/bar/install.js"],"names":["zrUtil","layout","largeLayout","dataSample","BarSeries","BarView","install","registers","registerChartView","registerSeriesModel","registerLayout","PRIORITY","VISUAL","LAYOUT","curry","PROGRESSIVE_LAYOUT","registerVisual","seriesType","reset","seriesModel","getData","setVisual","registerProcessor","PROCESSOR","STATISTIC","registerAction","type","event","update","payload","ecModel","componentType","eachComponent","mainType","query","componentModel","sortInfo","axis","setCategorySortInfo"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,sBAApC;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjCA,EAAAA,SAAS,CAACC,iBAAV,CAA4BH,OAA5B;AACAE,EAAAA,SAAS,CAACE,mBAAV,CAA8BL,SAA9B;AACAG,EAAAA,SAAS,CAACG,cAAV,CAAyBH,SAAS,CAACI,QAAV,CAAmBC,MAAnB,CAA0BC,MAAnD,EAA2Db,MAAM,CAACc,KAAP,CAAab,MAAb,EAAqB,KAArB,CAA3D;AACAM,EAAAA,SAAS,CAACG,cAAV,CAAyBH,SAAS,CAACI,QAAV,CAAmBC,MAAnB,CAA0BG,kBAAnD,EAAuEb,WAAvE;AACAK,EAAAA,SAAS,CAACS,cAAV,CAAyB;AACvBC,IAAAA,UAAU,EAAE,KADW;AAEvBC,IAAAA,KAAK,EAAE,eAAUC,WAAV,EAAuB;AAC5BA,MAAAA,WAAW,CAACC,OAAZ,GAAsBC,SAAtB,CAAgC,cAAhC,EAAgD,WAAhD;AACD;AAJsB,GAAzB;AAMAd,EAAAA,SAAS,CAACe,iBAAV,CAA4Bf,SAAS,CAACI,QAAV,CAAmBY,SAAnB,CAA6BC,SAAzD,EAAoErB,UAAU,CAAC,KAAD,CAA9E;AACAI,EAAAA,SAAS,CAACkB,cAAV,CAAyB;AACvBC,IAAAA,IAAI,EAAE,iBADiB;AAEvBC,IAAAA,KAAK,EAAE,iBAFgB;AAGvBC,IAAAA,MAAM,EAAE;AAHe,GAAzB,EAIG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7B,QAAIC,aAAa,GAAGF,OAAO,CAACE,aAAR,IAAyB,QAA7C;AACAD,IAAAA,OAAO,CAACE,aAAR,CAAsB;AACpBC,MAAAA,QAAQ,EAAEF,aADU;AAEpBG,MAAAA,KAAK,EAAEL;AAFa,KAAtB,EAGG,UAAUM,cAAV,EAA0B;AAC3B,UAAIN,OAAO,CAACO,QAAZ,EAAsB;AACpBD,QAAAA,cAAc,CAACE,IAAf,CAAoBC,mBAApB,CAAwCT,OAAO,CAACO,QAAhD;AACD;AACF,KAPD;AAQD,GAdD;AAeD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { layout, largeLayout } from '../../layout/barGrid';\nimport dataSample from '../../processor/dataSample';\nimport BarSeries from './BarSeries';\nimport BarView from './BarView';\nexport function install(registers) {\n  registers.registerChartView(BarView);\n  registers.registerSeriesModel(BarSeries);\n  registers.registerLayout(registers.PRIORITY.VISUAL.LAYOUT, zrUtil.curry(layout, 'bar'));\n  registers.registerLayout(registers.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, largeLayout);\n  registers.registerVisual({\n    seriesType: 'bar',\n    reset: function (seriesModel) {\n      seriesModel.getData().setVisual('legendSymbol', 'roundRect');\n    }\n  });\n  registers.registerProcessor(registers.PRIORITY.PROCESSOR.STATISTIC, dataSample('bar'));\n  registers.registerAction({\n    type: 'changeAxisOrder',\n    event: 'changeAxisOrder',\n    update: 'update'\n  }, function (payload, ecModel) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      if (payload.sortInfo) {\n        componentModel.axis.setCategorySortInfo(payload.sortInfo);\n      }\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}