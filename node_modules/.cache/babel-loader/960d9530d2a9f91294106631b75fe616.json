{"ast":null,"code":"import glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n\nfunction Globe(radius) {\n  this.radius = radius;\n  this.viewGL = null;\n  this.altitudeAxis; // Displacement data provided by texture.\n\n  this.displacementData = null;\n  this.displacementWidth;\n  this.displacementHeight;\n}\n\nGlobe.prototype = {\n  constructor: Globe,\n  dimensions: ['lng', 'lat', 'alt'],\n  type: 'globe',\n  containPoint: function containPoint() {},\n  setDisplacementData: function setDisplacementData(data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  _getDisplacementScale: function _getDisplacementScale(lng, lat) {\n    var i = (lng + 180) / 360 * (this.displacementWidth - 1);\n    var j = (90 - lat) / 180 * (this.displacementHeight - 1); // NEAREST SAMPLING\n    // TODO Better bilinear sampling\n\n    var idx = Math.round(i) + Math.round(j) * this.displacementWidth;\n    return this.displacementData[idx];\n  },\n  dataToPoint: function dataToPoint(data, out) {\n    var lng = data[0];\n    var lat = data[1]; // Default have 0 altitude\n\n    var altVal = data[2] || 0;\n    var r = this.radius;\n\n    if (this.displacementData) {\n      r *= 1 + this._getDisplacementScale(lng, lat);\n    }\n\n    if (this.altitudeAxis) {\n      r += this.altitudeAxis.dataToCoord(altVal);\n    }\n\n    lng = lng * Math.PI / 180;\n    lat = lat * Math.PI / 180;\n    var r0 = Math.cos(lat) * r;\n    out = out || []; // PENDING\n\n    out[0] = -r0 * Math.cos(lng + Math.PI);\n    out[1] = Math.sin(lat) * r;\n    out[2] = r0 * Math.sin(lng + Math.PI);\n    return out;\n  },\n  pointToData: function pointToData(point, out) {\n    var x = point[0];\n    var y = point[1];\n    var z = point[2];\n    var len = vec3.len(point);\n    x /= len;\n    y /= len;\n    z /= len;\n    var theta = Math.asin(y);\n    var phi = Math.atan2(z, -x);\n\n    if (phi < 0) {\n      phi = Math.PI * 2 + phi;\n    }\n\n    var lat = theta * 180 / Math.PI;\n    var lng = phi * 180 / Math.PI - 180;\n    out = out || [];\n    out[0] = lng;\n    out[1] = lat;\n    out[2] = len - this.radius;\n\n    if (this.altitudeAxis) {\n      out[2] = this.altitudeAxis.coordToData(out[2]);\n    }\n\n    return out;\n  }\n};\nexport default Globe;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/coord/globe/Globe.js"],"names":["glmatrix","vec3","Globe","radius","viewGL","altitudeAxis","displacementData","displacementWidth","displacementHeight","prototype","constructor","dimensions","type","containPoint","setDisplacementData","data","width","height","_getDisplacementScale","lng","lat","i","j","idx","Math","round","dataToPoint","out","altVal","r","dataToCoord","PI","r0","cos","sin","pointToData","point","x","y","z","len","theta","asin","phi","atan2","coordToData"],"mappings":"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","sourcesContent":["import glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n\nfunction Globe(radius) {\n  this.radius = radius;\n  this.viewGL = null;\n  this.altitudeAxis; // Displacement data provided by texture.\n\n  this.displacementData = null;\n  this.displacementWidth;\n  this.displacementHeight;\n}\n\nGlobe.prototype = {\n  constructor: Globe,\n  dimensions: ['lng', 'lat', 'alt'],\n  type: 'globe',\n  containPoint: function () {},\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  _getDisplacementScale: function (lng, lat) {\n    var i = (lng + 180) / 360 * (this.displacementWidth - 1);\n    var j = (90 - lat) / 180 * (this.displacementHeight - 1); // NEAREST SAMPLING\n    // TODO Better bilinear sampling\n\n    var idx = Math.round(i) + Math.round(j) * this.displacementWidth;\n    return this.displacementData[idx];\n  },\n  dataToPoint: function (data, out) {\n    var lng = data[0];\n    var lat = data[1]; // Default have 0 altitude\n\n    var altVal = data[2] || 0;\n    var r = this.radius;\n\n    if (this.displacementData) {\n      r *= 1 + this._getDisplacementScale(lng, lat);\n    }\n\n    if (this.altitudeAxis) {\n      r += this.altitudeAxis.dataToCoord(altVal);\n    }\n\n    lng = lng * Math.PI / 180;\n    lat = lat * Math.PI / 180;\n    var r0 = Math.cos(lat) * r;\n    out = out || []; // PENDING\n\n    out[0] = -r0 * Math.cos(lng + Math.PI);\n    out[1] = Math.sin(lat) * r;\n    out[2] = r0 * Math.sin(lng + Math.PI);\n    return out;\n  },\n  pointToData: function (point, out) {\n    var x = point[0];\n    var y = point[1];\n    var z = point[2];\n    var len = vec3.len(point);\n    x /= len;\n    y /= len;\n    z /= len;\n    var theta = Math.asin(y);\n    var phi = Math.atan2(z, -x);\n\n    if (phi < 0) {\n      phi = Math.PI * 2 + phi;\n    }\n\n    var lat = theta * 180 / Math.PI;\n    var lng = phi * 180 / Math.PI - 180;\n    out = out || [];\n    out[0] = lng;\n    out[1] = lat;\n    out[2] = len - this.radius;\n\n    if (this.altitudeAxis) {\n      out[2] = this.altitudeAxis.coordToData(out[2]);\n    }\n\n    return out;\n  }\n};\nexport default Globe;"]},"metadata":{},"sourceType":"module"}