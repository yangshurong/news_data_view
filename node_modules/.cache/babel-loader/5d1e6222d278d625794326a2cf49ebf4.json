{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport retrieve from '../../util/retrieve';\nimport ForceAtlas2GPU from './ForceAtlas2GPU';\nimport ForceAtlas2 from './ForceAtlas2';\nimport requestAnimationFrame from 'zrender/lib/animation/requestAnimationFrame';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec2 = glmatrix.vec2;\nimport Roam2DControl from '../../util/Roam2DControl';\nimport PointsBuilder from '../common/PointsBuilder';\nimport lines2DGLSL from '../../util/shader/lines2D.glsl.js';\ngraphicGL.Shader.import(lines2DGLSL);\nvar globalLayoutId = 1;\nexport default echarts.ChartView.extend({\n  type: 'graphGL',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.camera.left = this.viewGL.camera.right = 0;\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilder = new PointsBuilder(true, api); // Mesh used during force directed layout.\n\n    this._forceEdgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new graphicGL.Geometry({\n        attributes: {\n          node: new graphicGL.Geometry.Attribute('node', 'float', 2),\n          color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')\n        },\n        dynamic: true,\n        mainAttribute: 'node'\n      }),\n      renderOrder: -1,\n      mode: graphicGL.Mesh.LINES\n    }); // Mesh used after force directed layout.\n\n    this._edgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.meshLines2D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new Lines2DGeometry({\n        useNativeLine: false,\n        dynamic: true\n      }),\n      renderOrder: -1,\n      culling: false\n    });\n    this._layoutId = 0;\n    this._control = new Roam2DControl({\n      zr: api.getZr(),\n      viewGL: this.viewGL\n    });\n\n    this._control.setTarget(this.groupGL);\n\n    this._control.init();\n\n    this._clickHandler = this._clickHandler.bind(this);\n  },\n  render: function render(seriesModel, ecModel, api) {\n    this.groupGL.add(this._pointsBuilder.rootNode);\n    this._model = seriesModel;\n    this._api = api;\n\n    this._initLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.update(seriesModel, ecModel, api);\n\n    if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {\n      this.groupGL.remove(this._forceEdgesMesh);\n    }\n\n    this._updateCamera(seriesModel, api);\n\n    this._control.off('update');\n\n    this._control.on('update', function () {\n      api.dispatchAction({\n        type: 'graphGLRoam',\n        seriesId: seriesModel.id,\n        zoom: this._control.getZoom(),\n        offset: this._control.getOffset()\n      });\n\n      this._pointsBuilder.updateView(this.viewGL.camera);\n    }, this);\n\n    this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));\n\n    this._control.setOffset(seriesModel.get('offset') || [0, 0]);\n\n    var mesh = this._pointsBuilder.getPointsMesh();\n\n    mesh.off('mousemove', this._mousemoveHandler);\n    mesh.off('mouseout', this._mouseOutHandler, this);\n    api.getZr().off('click', this._clickHandler);\n    this._pointsBuilder.highlightOnMouseover = true;\n\n    if (seriesModel.get('focusNodeAdjacency')) {\n      var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');\n\n      if (focusNodeAdjacencyOn === 'click') {\n        // Remove default emphasis effect\n        api.getZr().on('click', this._clickHandler);\n      } else if (focusNodeAdjacencyOn === 'mouseover') {\n        mesh.on('mousemove', this._mousemoveHandler, this);\n        mesh.on('mouseout', this._mouseOutHandler, this);\n        this._pointsBuilder.highlightOnMouseover = false;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Unkown focusNodeAdjacencyOn value \\s' + focusNodeAdjacencyOn);\n        }\n      }\n    } // Reset\n\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _clickHandler: function _clickHandler(e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      this._api.dispatchAction({\n        type: 'graphGLFocusNodeAdjacency',\n        seriesId: this._model.id,\n        dataIndex: dataIndex\n      });\n    } else {\n      this._api.dispatchAction({\n        type: 'graphGLUnfocusNodeAdjacency',\n        seriesId: this._model.id\n      });\n    }\n  },\n  _mousemoveHandler: function _mousemoveHandler(e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      if (dataIndex !== this._lastMouseOverDataIndex) {\n        this._api.dispatchAction({\n          type: 'graphGLFocusNodeAdjacency',\n          seriesId: this._model.id,\n          dataIndex: dataIndex\n        });\n      }\n    } else {\n      this._mouseOutHandler(e);\n    }\n\n    this._lastMouseOverDataIndex = dataIndex;\n  },\n  _mouseOutHandler: function _mouseOutHandler(e) {\n    if (this._layouting) {\n      return;\n    }\n\n    this._api.dispatchAction({\n      type: 'graphGLUnfocusNodeAdjacency',\n      seriesId: this._model.id\n    });\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _updateForceEdgesGeometry: function _updateForceEdgesGeometry(edges, seriesModel) {\n    var geometry = this._forceEdgesMesh.geometry;\n    var edgeData = seriesModel.getEdgeData();\n    var offset = 0;\n    var layoutInstance = this._forceLayoutInstance;\n    var vertexCount = edgeData.count() * 2;\n    geometry.attributes.node.init(vertexCount);\n    geometry.attributes.color.init(vertexCount);\n    edgeData.each(function (idx) {\n      var edge = edges[idx];\n      geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));\n      geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      geometry.attributes.color.set(offset, colorArr);\n      geometry.attributes.color.set(offset + 1, colorArr);\n      offset += 2;\n    });\n    geometry.dirty();\n  },\n  _updateMeshLinesGeometry: function _updateMeshLinesGeometry() {\n    var edgeData = this._model.getEdgeData();\n\n    var geometry = this._edgesMesh.geometry;\n\n    var edgeData = this._model.getEdgeData();\n\n    var points = this._model.getData().getLayout('points');\n\n    geometry.resetOffset();\n    geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());\n    geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());\n    var p0 = [];\n    var p1 = [];\n    var lineWidthQuery = ['lineStyle', 'width'];\n    this._originalEdgeColors = new Float32Array(edgeData.count() * 4);\n    this._edgeIndicesMap = new Float32Array(edgeData.count());\n    edgeData.each(function (idx) {\n      var edge = edgeData.graph.getEdgeByIndex(idx);\n      var idx1 = edge.node1.dataIndex * 2;\n      var idx2 = edge.node2.dataIndex * 2;\n      p0[0] = points[idx1];\n      p0[1] = points[idx1 + 1];\n      p1[0] = points[idx2];\n      p1[1] = points[idx2 + 1];\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      var itemModel = edgeData.getItemModel(edge.dataIndex);\n\n      var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();\n\n      geometry.addLine(p0, p1, colorArr, lineWidth);\n\n      for (var k = 0; k < 4; k++) {\n        this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];\n      }\n\n      this._edgeIndicesMap[edge.dataIndex] = idx;\n    }, this);\n    geometry.dirty();\n  },\n  _updateForceNodesGeometry: function _updateForceNodesGeometry(nodeData) {\n    var pointsMesh = this._pointsBuilder.getPointsMesh();\n\n    var pos = [];\n\n    for (var i = 0; i < nodeData.count(); i++) {\n      this._forceLayoutInstance.getNodeUV(i, pos);\n\n      pointsMesh.geometry.attributes.position.set(i, pos);\n    }\n\n    pointsMesh.geometry.dirty('position');\n  },\n  _initLayout: function _initLayout(seriesModel, ecModel, api) {\n    var layout = seriesModel.get('layout');\n    var graph = seriesModel.getGraph();\n    var boxLayoutOption = seriesModel.getBoxLayoutParams();\n    var viewport = getLayoutRect(boxLayoutOption, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    if (layout === 'force') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Currently only forceAtlas2 layout supported.');\n      }\n\n      layout = 'forceAtlas2';\n    } // Stop previous layout\n\n\n    this.stopLayout(seriesModel, ecModel, api, {\n      beforeLayout: true\n    });\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData();\n\n    if (layout === 'forceAtlas2') {\n      var layoutModel = seriesModel.getModel('forceAtlas2');\n      var layoutInstance = this._forceLayoutInstance;\n      var nodes = [];\n      var edges = [];\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value');\n      var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);\n      var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);\n\n      if (typeof edgeWeightRange === 'number') {\n        edgeWeightRange = [edgeWeightRange, edgeWeightRange];\n      }\n\n      if (typeof nodeWeightRange === 'number') {\n        nodeWeightRange = [nodeWeightRange, nodeWeightRange];\n      }\n\n      var offset = 0;\n      var nodesIndicesMap = {};\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        if (x == null) {\n          // Random in rectangle\n          x = viewport.x + Math.random() * viewport.width;\n          y = viewport.y + Math.random() * viewport.height;\n        }\n\n        layoutPoints[offset * 2] = x;\n        layoutPoints[offset * 2 + 1] = y;\n        nodesIndicesMap[node.id] = offset++;\n        var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);\n\n        if (isNaN(mass)) {\n          if (!isNaN(nodeWeightRange[0])) {\n            mass = nodeWeightRange[0];\n          } else {\n            mass = 1;\n          }\n        }\n\n        nodes.push({\n          x: x,\n          y: y,\n          mass: mass,\n          size: nodeData.getItemVisual(dataIndex, 'symbolSize')\n        });\n      });\n      nodeData.setLayout('points', layoutPoints);\n      graph.eachEdge(function (edge) {\n        var dataIndex = edge.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);\n\n        if (isNaN(weight)) {\n          if (!isNaN(edgeWeightRange[0])) {\n            weight = edgeWeightRange[0];\n          } else {\n            weight = 1;\n          }\n        }\n\n        edges.push({\n          node1: nodesIndicesMap[edge.node1.id],\n          node2: nodesIndicesMap[edge.node2.id],\n          weight: weight,\n          dataIndex: dataIndex\n        });\n      });\n\n      if (!layoutInstance) {\n        var isGPU = layoutModel.get('GPU');\n\n        if (this._forceLayoutInstance) {\n          if (isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2GPU) || !isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2)) {\n            // Mark to dispose\n            this._forceLayoutInstanceToDispose = this._forceLayoutInstance;\n          }\n        }\n\n        layoutInstance = this._forceLayoutInstance = isGPU ? new ForceAtlas2GPU() : new ForceAtlas2();\n      }\n\n      layoutInstance.initData(nodes, edges);\n      layoutInstance.updateOption(layoutModel.option); // Update lines geometry after first layout;\n\n      this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);\n\n      this._updatePositionTexture();\n\n      api.dispatchAction({\n        type: 'graphGLStartLayout',\n        from: this.uid\n      });\n    } else {\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      var offset = 0;\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        layoutPoints[offset++] = x;\n        layoutPoints[offset++] = y;\n      });\n      nodeData.setLayout('points', layoutPoints);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n  },\n  _updatePositionTexture: function _updatePositionTexture() {\n    var positionTex = this._forceLayoutInstance.getNodePositionTexture();\n\n    this._pointsBuilder.setPositionTexture(positionTex);\n\n    this._forceEdgesMesh.material.set('positionTex', positionTex);\n  },\n  startLayout: function startLayout(seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    var viewGL = this.viewGL;\n    var api = this._api;\n    var layoutInstance = this._forceLayoutInstance;\n\n    var data = this._model.getData();\n\n    var layoutModel = this._model.getModel('forceAtlas2');\n\n    if (!layoutInstance) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('None layout don\\'t have startLayout action');\n      }\n\n      return;\n    }\n\n    this.groupGL.remove(this._edgesMesh);\n    this.groupGL.add(this._forceEdgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    this._updateForceNodesGeometry(seriesModel.getData());\n\n    this._pointsBuilder.hideLabels();\n\n    var self = this;\n    var layoutId = this._layoutId = globalLayoutId++;\n    var maxSteps = layoutModel.getShallow('maxSteps');\n    var steps = layoutModel.getShallow('steps');\n    var stepsCount = 0;\n    var syncStepCount = Math.max(steps * 2, 20);\n\n    var doLayout = function doLayout(layoutId) {\n      if (layoutId !== self._layoutId) {\n        return;\n      }\n\n      if (layoutInstance.isFinished(maxSteps)) {\n        api.dispatchAction({\n          type: 'graphGLStopLayout',\n          from: self.uid\n        });\n        api.dispatchAction({\n          type: 'graphGLFinishLayout',\n          points: data.getLayout('points'),\n          from: self.uid\n        });\n        return;\n      }\n\n      layoutInstance.update(viewGL.layer.renderer, steps, function () {\n        self._updatePositionTexture(); // PENDING Performance.\n\n\n        stepsCount += steps; // Sync posiiton every 20 steps.\n\n        if (stepsCount >= syncStepCount) {\n          self._syncNodePosition(seriesModel);\n\n          stepsCount = 0;\n        } // Position texture will been swapped. set every time.\n\n\n        api.getZr().refresh();\n        requestAnimationFrame(function () {\n          doLayout(layoutId);\n        });\n      });\n    };\n\n    requestAnimationFrame(function () {\n      if (self._forceLayoutInstanceToDispose) {\n        self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);\n\n        self._forceLayoutInstanceToDispose = null;\n      }\n\n      doLayout(layoutId);\n    });\n    this._layouting = true;\n  },\n  stopLayout: function stopLayout(seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    this._layoutId = 0;\n    this.groupGL.remove(this._forceEdgesMesh);\n    this.groupGL.add(this._edgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    if (!this.viewGL.layer) {\n      return;\n    }\n\n    if (!(payload && payload.beforeLayout)) {\n      this._syncNodePosition(seriesModel);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n\n    this._api.getZr().refresh();\n\n    this._layouting = false;\n  },\n  _syncNodePosition: function _syncNodePosition(seriesModel) {\n    var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);\n\n    seriesModel.getData().setLayout('points', points);\n    seriesModel.setNodePosition(points);\n  },\n  _updateAfterLayout: function _updateAfterLayout(seriesModel, ecModel, api) {\n    this._updateMeshLinesGeometry();\n\n    this._pointsBuilder.removePositionTexture();\n\n    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.updateView(this.viewGL.camera);\n\n    this._pointsBuilder.updateLabels();\n\n    this._pointsBuilder.showLabels();\n  },\n  focusNodeAdjacency: function focusNodeAdjacency(seriesModel, ecModel, api, payload) {\n    var data = this._model.getData();\n\n    this._downplayAll();\n\n    var dataIndex = payload.dataIndex;\n    var graph = data.graph;\n    var focusNodes = [];\n    var node = graph.getNodeByIndex(dataIndex);\n    focusNodes.push(node);\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex < 0) {\n        return;\n      }\n\n      edge.node1 !== node && focusNodes.push(edge.node1);\n      edge.node2 !== node && focusNodes.push(edge.node2);\n    }, this);\n\n    this._pointsBuilder.fadeOutAll(0.05);\n\n    this._fadeOutEdgesAll(0.05);\n\n    focusNodes.forEach(function (node) {\n      this._pointsBuilder.highlight(data, node.dataIndex);\n    }, this);\n\n    this._pointsBuilder.updateLabels(focusNodes.map(function (node) {\n      return node.dataIndex;\n    }));\n\n    var focusEdges = [];\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex >= 0) {\n        this._highlightEdge(edge.dataIndex);\n\n        focusEdges.push(edge);\n      }\n    }, this);\n    this._focusNodes = focusNodes;\n    this._focusEdges = focusEdges;\n  },\n  unfocusNodeAdjacency: function unfocusNodeAdjacency(seriesModel, ecModel, api, payload) {\n    this._downplayAll();\n\n    this._pointsBuilder.fadeInAll();\n\n    this._fadeInEdgesAll();\n\n    this._pointsBuilder.updateLabels();\n  },\n  _highlightEdge: function _highlightEdge(dataIndex) {\n    var itemModel = this._model.getEdgeData().getItemModel(dataIndex);\n\n    var emphasisColor = graphicGL.parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));\n    var emphasisOpacity = retrieve.firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);\n    emphasisColor[3] *= emphasisOpacity;\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);\n  },\n  _downplayAll: function _downplayAll() {\n    if (this._focusNodes) {\n      this._focusNodes.forEach(function (node) {\n        this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);\n      }, this);\n    }\n\n    if (this._focusEdges) {\n      this._focusEdges.forEach(function (edge) {\n        this._downplayEdge(edge.dataIndex);\n      }, this);\n    }\n  },\n  _downplayEdge: function _downplayEdge(dataIndex) {\n    var color = this._getColor(dataIndex, []);\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n  },\n  _setEdgeFade: function () {\n    var color = [];\n    return function (dataIndex, percent) {\n      this._getColor(dataIndex, color);\n\n      color[3] *= percent;\n\n      this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n    };\n  }(),\n  _getColor: function _getColor(dataIndex, out) {\n    for (var i = 0; i < 4; i++) {\n      out[i] = this._originalEdgeColors[dataIndex * 4 + i];\n    }\n\n    return out;\n  },\n  _fadeOutEdgesAll: function _fadeOutEdgesAll(percent) {\n    var graph = this._model.getData().graph;\n\n    graph.eachEdge(function (edge) {\n      this._setEdgeFade(edge.dataIndex, percent);\n    }, this);\n  },\n  _fadeInEdgesAll: function _fadeInEdgesAll() {\n    this._fadeOutEdgesAll(1);\n  },\n  _updateCamera: function _updateCamera(seriesModel, api) {\n    this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n    var camera = this.viewGL.camera;\n    var nodeData = seriesModel.getData();\n    var points = nodeData.getLayout('points');\n    var min = vec2.create(Infinity, Infinity);\n    var max = vec2.create(-Infinity, -Infinity);\n    var pt = [];\n\n    for (var i = 0; i < points.length;) {\n      pt[0] = points[i++];\n      pt[1] = points[i++];\n      vec2.min(min, min, pt);\n      vec2.max(max, max, pt);\n    }\n\n    var cy = (max[1] + min[1]) / 2;\n    var cx = (max[0] + min[0]) / 2; // Only fit the camera when graph is not in the center.\n    // PENDING\n\n    if (cx > camera.left && cx < camera.right && cy < camera.bottom && cy > camera.top) {\n      return;\n    } // Scale a bit\n\n\n    var width = Math.max(max[0] - min[0], 10); // Keep aspect\n\n    var height = width / api.getWidth() * api.getHeight();\n    width *= 1.4;\n    height *= 1.4;\n    min[0] -= width * 0.2;\n    camera.left = min[0];\n    camera.top = cy - height / 2;\n    camera.bottom = cy + height / 2;\n    camera.right = width + min[0];\n    camera.near = 0;\n    camera.far = 100;\n  },\n  dispose: function dispose() {\n    var renderer = this.viewGL.layer.renderer;\n\n    if (this._forceLayoutInstance) {\n      this._forceLayoutInstance.dispose(renderer);\n    }\n\n    this.groupGL.removeAll(); // Stop layout.\n\n    this._layoutId = -1;\n\n    this._pointsBuilder.dispose();\n  },\n  remove: function remove() {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/graphGL/GraphGLView.js"],"names":["echarts","getLayoutRect","graphicGL","ViewGL","Lines2DGeometry","retrieve","ForceAtlas2GPU","ForceAtlas2","requestAnimationFrame","glmatrix","getItemVisualColor","getItemVisualOpacity","vec2","Roam2DControl","PointsBuilder","lines2DGLSL","Shader","import","globalLayoutId","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","viewGL","camera","left","right","add","_pointsBuilder","_forceEdgesMesh","Mesh","material","Material","shader","createShader","transparent","depthMask","depthTest","$ignorePicking","geometry","Geometry","attributes","node","Attribute","color","dynamic","mainAttribute","renderOrder","mode","LINES","_edgesMesh","useNativeLine","culling","_layoutId","_control","zr","getZr","setTarget","_clickHandler","bind","render","seriesModel","rootNode","_model","_api","_initLayout","update","_forceLayoutInstance","remove","_updateCamera","off","on","dispatchAction","seriesId","id","zoom","getZoom","offset","getOffset","updateView","setZoom","firstNotNull","get","setOffset","mesh","getPointsMesh","_mousemoveHandler","_mouseOutHandler","highlightOnMouseover","focusNodeAdjacencyOn","process","env","NODE_ENV","console","warn","_lastMouseOverDataIndex","e","_layouting","dataIndex","_updateForceEdgesGeometry","edges","edgeData","getEdgeData","layoutInstance","vertexCount","count","each","idx","edge","set","getNodeUV","node1","node2","colorArr","parseColor","dirty","_updateMeshLinesGeometry","points","getData","getLayout","resetOffset","setVertexCount","getLineVertexCount","setTriangleCount","getLineTriangleCount","p0","p1","lineWidthQuery","_originalEdgeColors","Float32Array","_edgeIndicesMap","graph","getEdgeByIndex","idx1","idx2","itemModel","getItemModel","lineWidth","getDevicePixelRatio","addLine","k","_updateForceNodesGeometry","nodeData","pointsMesh","pos","i","position","layout","getGraph","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","stopLayout","beforeLayout","layoutModel","getModel","nodes","nodeDataExtent","getDataExtent","edgeDataExtent","edgeWeightRange","nodeWeightRange","nodesIndicesMap","layoutPoints","eachNode","value","x","y","hasItemOption","Math","random","mass","number","linearMap","isNaN","push","size","getItemVisual","setLayout","eachEdge","weight","isGPU","_forceLayoutInstanceToDispose","initData","updateOption","option","getEdges","_updatePositionTexture","from","uid","_updateAfterLayout","positionTex","getNodePositionTexture","setPositionTexture","startLayout","payload","data","error","hideLabels","self","layoutId","maxSteps","getShallow","steps","stepsCount","syncStepCount","max","doLayout","isFinished","layer","renderer","_syncNodePosition","refresh","dispose","getNodePosition","setNodePosition","removePositionTexture","updateLayout","updateLabels","showLabels","focusNodeAdjacency","_downplayAll","focusNodes","getNodeByIndex","forEach","fadeOutAll","_fadeOutEdgesAll","highlight","map","focusEdges","_highlightEdge","_focusNodes","_focusEdges","unfocusNodeAdjacency","fadeInAll","_fadeInEdgesAll","emphasisColor","emphasisOpacity","setItemColor","downplay","_downplayEdge","_getColor","_setEdgeFade","percent","out","setViewport","min","create","Infinity","pt","length","cy","cx","bottom","top","near","far","removeAll"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport retrieve from '../../util/retrieve';\nimport ForceAtlas2GPU from './ForceAtlas2GPU';\nimport ForceAtlas2 from './ForceAtlas2';\nimport requestAnimationFrame from 'zrender/lib/animation/requestAnimationFrame';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec2 = glmatrix.vec2;\nimport Roam2DControl from '../../util/Roam2DControl';\nimport PointsBuilder from '../common/PointsBuilder';\nimport lines2DGLSL from '../../util/shader/lines2D.glsl.js';\ngraphicGL.Shader.import(lines2DGLSL);\nvar globalLayoutId = 1;\nexport default echarts.ChartView.extend({\n  type: 'graphGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.camera.left = this.viewGL.camera.right = 0;\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilder = new PointsBuilder(true, api); // Mesh used during force directed layout.\n\n    this._forceEdgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new graphicGL.Geometry({\n        attributes: {\n          node: new graphicGL.Geometry.Attribute('node', 'float', 2),\n          color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')\n        },\n        dynamic: true,\n        mainAttribute: 'node'\n      }),\n      renderOrder: -1,\n      mode: graphicGL.Mesh.LINES\n    }); // Mesh used after force directed layout.\n\n    this._edgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.meshLines2D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new Lines2DGeometry({\n        useNativeLine: false,\n        dynamic: true\n      }),\n      renderOrder: -1,\n      culling: false\n    });\n    this._layoutId = 0;\n    this._control = new Roam2DControl({\n      zr: api.getZr(),\n      viewGL: this.viewGL\n    });\n\n    this._control.setTarget(this.groupGL);\n\n    this._control.init();\n\n    this._clickHandler = this._clickHandler.bind(this);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._pointsBuilder.rootNode);\n    this._model = seriesModel;\n    this._api = api;\n\n    this._initLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.update(seriesModel, ecModel, api);\n\n    if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {\n      this.groupGL.remove(this._forceEdgesMesh);\n    }\n\n    this._updateCamera(seriesModel, api);\n\n    this._control.off('update');\n\n    this._control.on('update', function () {\n      api.dispatchAction({\n        type: 'graphGLRoam',\n        seriesId: seriesModel.id,\n        zoom: this._control.getZoom(),\n        offset: this._control.getOffset()\n      });\n\n      this._pointsBuilder.updateView(this.viewGL.camera);\n    }, this);\n\n    this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));\n\n    this._control.setOffset(seriesModel.get('offset') || [0, 0]);\n\n    var mesh = this._pointsBuilder.getPointsMesh();\n\n    mesh.off('mousemove', this._mousemoveHandler);\n    mesh.off('mouseout', this._mouseOutHandler, this);\n    api.getZr().off('click', this._clickHandler);\n    this._pointsBuilder.highlightOnMouseover = true;\n\n    if (seriesModel.get('focusNodeAdjacency')) {\n      var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');\n\n      if (focusNodeAdjacencyOn === 'click') {\n        // Remove default emphasis effect\n        api.getZr().on('click', this._clickHandler);\n      } else if (focusNodeAdjacencyOn === 'mouseover') {\n        mesh.on('mousemove', this._mousemoveHandler, this);\n        mesh.on('mouseout', this._mouseOutHandler, this);\n        this._pointsBuilder.highlightOnMouseover = false;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Unkown focusNodeAdjacencyOn value \\s' + focusNodeAdjacencyOn);\n        }\n      }\n    } // Reset\n\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _clickHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      this._api.dispatchAction({\n        type: 'graphGLFocusNodeAdjacency',\n        seriesId: this._model.id,\n        dataIndex: dataIndex\n      });\n    } else {\n      this._api.dispatchAction({\n        type: 'graphGLUnfocusNodeAdjacency',\n        seriesId: this._model.id\n      });\n    }\n  },\n  _mousemoveHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      if (dataIndex !== this._lastMouseOverDataIndex) {\n        this._api.dispatchAction({\n          type: 'graphGLFocusNodeAdjacency',\n          seriesId: this._model.id,\n          dataIndex: dataIndex\n        });\n      }\n    } else {\n      this._mouseOutHandler(e);\n    }\n\n    this._lastMouseOverDataIndex = dataIndex;\n  },\n  _mouseOutHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    this._api.dispatchAction({\n      type: 'graphGLUnfocusNodeAdjacency',\n      seriesId: this._model.id\n    });\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _updateForceEdgesGeometry: function (edges, seriesModel) {\n    var geometry = this._forceEdgesMesh.geometry;\n    var edgeData = seriesModel.getEdgeData();\n    var offset = 0;\n    var layoutInstance = this._forceLayoutInstance;\n    var vertexCount = edgeData.count() * 2;\n    geometry.attributes.node.init(vertexCount);\n    geometry.attributes.color.init(vertexCount);\n    edgeData.each(function (idx) {\n      var edge = edges[idx];\n      geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));\n      geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      geometry.attributes.color.set(offset, colorArr);\n      geometry.attributes.color.set(offset + 1, colorArr);\n      offset += 2;\n    });\n    geometry.dirty();\n  },\n  _updateMeshLinesGeometry: function () {\n    var edgeData = this._model.getEdgeData();\n\n    var geometry = this._edgesMesh.geometry;\n\n    var edgeData = this._model.getEdgeData();\n\n    var points = this._model.getData().getLayout('points');\n\n    geometry.resetOffset();\n    geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());\n    geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());\n    var p0 = [];\n    var p1 = [];\n    var lineWidthQuery = ['lineStyle', 'width'];\n    this._originalEdgeColors = new Float32Array(edgeData.count() * 4);\n    this._edgeIndicesMap = new Float32Array(edgeData.count());\n    edgeData.each(function (idx) {\n      var edge = edgeData.graph.getEdgeByIndex(idx);\n      var idx1 = edge.node1.dataIndex * 2;\n      var idx2 = edge.node2.dataIndex * 2;\n      p0[0] = points[idx1];\n      p0[1] = points[idx1 + 1];\n      p1[0] = points[idx2];\n      p1[1] = points[idx2 + 1];\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      var itemModel = edgeData.getItemModel(edge.dataIndex);\n\n      var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();\n\n      geometry.addLine(p0, p1, colorArr, lineWidth);\n\n      for (var k = 0; k < 4; k++) {\n        this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];\n      }\n\n      this._edgeIndicesMap[edge.dataIndex] = idx;\n    }, this);\n    geometry.dirty();\n  },\n  _updateForceNodesGeometry: function (nodeData) {\n    var pointsMesh = this._pointsBuilder.getPointsMesh();\n\n    var pos = [];\n\n    for (var i = 0; i < nodeData.count(); i++) {\n      this._forceLayoutInstance.getNodeUV(i, pos);\n\n      pointsMesh.geometry.attributes.position.set(i, pos);\n    }\n\n    pointsMesh.geometry.dirty('position');\n  },\n  _initLayout: function (seriesModel, ecModel, api) {\n    var layout = seriesModel.get('layout');\n    var graph = seriesModel.getGraph();\n    var boxLayoutOption = seriesModel.getBoxLayoutParams();\n    var viewport = getLayoutRect(boxLayoutOption, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    if (layout === 'force') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Currently only forceAtlas2 layout supported.');\n      }\n\n      layout = 'forceAtlas2';\n    } // Stop previous layout\n\n\n    this.stopLayout(seriesModel, ecModel, api, {\n      beforeLayout: true\n    });\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData();\n\n    if (layout === 'forceAtlas2') {\n      var layoutModel = seriesModel.getModel('forceAtlas2');\n      var layoutInstance = this._forceLayoutInstance;\n      var nodes = [];\n      var edges = [];\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value');\n      var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);\n      var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);\n\n      if (typeof edgeWeightRange === 'number') {\n        edgeWeightRange = [edgeWeightRange, edgeWeightRange];\n      }\n\n      if (typeof nodeWeightRange === 'number') {\n        nodeWeightRange = [nodeWeightRange, nodeWeightRange];\n      }\n\n      var offset = 0;\n      var nodesIndicesMap = {};\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        if (x == null) {\n          // Random in rectangle\n          x = viewport.x + Math.random() * viewport.width;\n          y = viewport.y + Math.random() * viewport.height;\n        }\n\n        layoutPoints[offset * 2] = x;\n        layoutPoints[offset * 2 + 1] = y;\n        nodesIndicesMap[node.id] = offset++;\n        var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);\n\n        if (isNaN(mass)) {\n          if (!isNaN(nodeWeightRange[0])) {\n            mass = nodeWeightRange[0];\n          } else {\n            mass = 1;\n          }\n        }\n\n        nodes.push({\n          x: x,\n          y: y,\n          mass: mass,\n          size: nodeData.getItemVisual(dataIndex, 'symbolSize')\n        });\n      });\n      nodeData.setLayout('points', layoutPoints);\n      graph.eachEdge(function (edge) {\n        var dataIndex = edge.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);\n\n        if (isNaN(weight)) {\n          if (!isNaN(edgeWeightRange[0])) {\n            weight = edgeWeightRange[0];\n          } else {\n            weight = 1;\n          }\n        }\n\n        edges.push({\n          node1: nodesIndicesMap[edge.node1.id],\n          node2: nodesIndicesMap[edge.node2.id],\n          weight: weight,\n          dataIndex: dataIndex\n        });\n      });\n\n      if (!layoutInstance) {\n        var isGPU = layoutModel.get('GPU');\n\n        if (this._forceLayoutInstance) {\n          if (isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2GPU) || !isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2)) {\n            // Mark to dispose\n            this._forceLayoutInstanceToDispose = this._forceLayoutInstance;\n          }\n        }\n\n        layoutInstance = this._forceLayoutInstance = isGPU ? new ForceAtlas2GPU() : new ForceAtlas2();\n      }\n\n      layoutInstance.initData(nodes, edges);\n      layoutInstance.updateOption(layoutModel.option); // Update lines geometry after first layout;\n\n      this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);\n\n      this._updatePositionTexture();\n\n      api.dispatchAction({\n        type: 'graphGLStartLayout',\n        from: this.uid\n      });\n    } else {\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      var offset = 0;\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        layoutPoints[offset++] = x;\n        layoutPoints[offset++] = y;\n      });\n      nodeData.setLayout('points', layoutPoints);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n  },\n  _updatePositionTexture: function () {\n    var positionTex = this._forceLayoutInstance.getNodePositionTexture();\n\n    this._pointsBuilder.setPositionTexture(positionTex);\n\n    this._forceEdgesMesh.material.set('positionTex', positionTex);\n  },\n  startLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    var viewGL = this.viewGL;\n    var api = this._api;\n    var layoutInstance = this._forceLayoutInstance;\n\n    var data = this._model.getData();\n\n    var layoutModel = this._model.getModel('forceAtlas2');\n\n    if (!layoutInstance) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('None layout don\\'t have startLayout action');\n      }\n\n      return;\n    }\n\n    this.groupGL.remove(this._edgesMesh);\n    this.groupGL.add(this._forceEdgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    this._updateForceNodesGeometry(seriesModel.getData());\n\n    this._pointsBuilder.hideLabels();\n\n    var self = this;\n    var layoutId = this._layoutId = globalLayoutId++;\n    var maxSteps = layoutModel.getShallow('maxSteps');\n    var steps = layoutModel.getShallow('steps');\n    var stepsCount = 0;\n    var syncStepCount = Math.max(steps * 2, 20);\n\n    var doLayout = function (layoutId) {\n      if (layoutId !== self._layoutId) {\n        return;\n      }\n\n      if (layoutInstance.isFinished(maxSteps)) {\n        api.dispatchAction({\n          type: 'graphGLStopLayout',\n          from: self.uid\n        });\n        api.dispatchAction({\n          type: 'graphGLFinishLayout',\n          points: data.getLayout('points'),\n          from: self.uid\n        });\n        return;\n      }\n\n      layoutInstance.update(viewGL.layer.renderer, steps, function () {\n        self._updatePositionTexture(); // PENDING Performance.\n\n\n        stepsCount += steps; // Sync posiiton every 20 steps.\n\n        if (stepsCount >= syncStepCount) {\n          self._syncNodePosition(seriesModel);\n\n          stepsCount = 0;\n        } // Position texture will been swapped. set every time.\n\n\n        api.getZr().refresh();\n        requestAnimationFrame(function () {\n          doLayout(layoutId);\n        });\n      });\n    };\n\n    requestAnimationFrame(function () {\n      if (self._forceLayoutInstanceToDispose) {\n        self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);\n\n        self._forceLayoutInstanceToDispose = null;\n      }\n\n      doLayout(layoutId);\n    });\n    this._layouting = true;\n  },\n  stopLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    this._layoutId = 0;\n    this.groupGL.remove(this._forceEdgesMesh);\n    this.groupGL.add(this._edgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    if (!this.viewGL.layer) {\n      return;\n    }\n\n    if (!(payload && payload.beforeLayout)) {\n      this._syncNodePosition(seriesModel);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n\n    this._api.getZr().refresh();\n\n    this._layouting = false;\n  },\n  _syncNodePosition: function (seriesModel) {\n    var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);\n\n    seriesModel.getData().setLayout('points', points);\n    seriesModel.setNodePosition(points);\n  },\n  _updateAfterLayout: function (seriesModel, ecModel, api) {\n    this._updateMeshLinesGeometry();\n\n    this._pointsBuilder.removePositionTexture();\n\n    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.updateView(this.viewGL.camera);\n\n    this._pointsBuilder.updateLabels();\n\n    this._pointsBuilder.showLabels();\n  },\n  focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    var data = this._model.getData();\n\n    this._downplayAll();\n\n    var dataIndex = payload.dataIndex;\n    var graph = data.graph;\n    var focusNodes = [];\n    var node = graph.getNodeByIndex(dataIndex);\n    focusNodes.push(node);\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex < 0) {\n        return;\n      }\n\n      edge.node1 !== node && focusNodes.push(edge.node1);\n      edge.node2 !== node && focusNodes.push(edge.node2);\n    }, this);\n\n    this._pointsBuilder.fadeOutAll(0.05);\n\n    this._fadeOutEdgesAll(0.05);\n\n    focusNodes.forEach(function (node) {\n      this._pointsBuilder.highlight(data, node.dataIndex);\n    }, this);\n\n    this._pointsBuilder.updateLabels(focusNodes.map(function (node) {\n      return node.dataIndex;\n    }));\n\n    var focusEdges = [];\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex >= 0) {\n        this._highlightEdge(edge.dataIndex);\n\n        focusEdges.push(edge);\n      }\n    }, this);\n    this._focusNodes = focusNodes;\n    this._focusEdges = focusEdges;\n  },\n  unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    this._downplayAll();\n\n    this._pointsBuilder.fadeInAll();\n\n    this._fadeInEdgesAll();\n\n    this._pointsBuilder.updateLabels();\n  },\n  _highlightEdge: function (dataIndex) {\n    var itemModel = this._model.getEdgeData().getItemModel(dataIndex);\n\n    var emphasisColor = graphicGL.parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));\n    var emphasisOpacity = retrieve.firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);\n    emphasisColor[3] *= emphasisOpacity;\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);\n  },\n  _downplayAll: function () {\n    if (this._focusNodes) {\n      this._focusNodes.forEach(function (node) {\n        this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);\n      }, this);\n    }\n\n    if (this._focusEdges) {\n      this._focusEdges.forEach(function (edge) {\n        this._downplayEdge(edge.dataIndex);\n      }, this);\n    }\n  },\n  _downplayEdge: function (dataIndex) {\n    var color = this._getColor(dataIndex, []);\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n  },\n  _setEdgeFade: function () {\n    var color = [];\n    return function (dataIndex, percent) {\n      this._getColor(dataIndex, color);\n\n      color[3] *= percent;\n\n      this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n    };\n  }(),\n  _getColor: function (dataIndex, out) {\n    for (var i = 0; i < 4; i++) {\n      out[i] = this._originalEdgeColors[dataIndex * 4 + i];\n    }\n\n    return out;\n  },\n  _fadeOutEdgesAll: function (percent) {\n    var graph = this._model.getData().graph;\n\n    graph.eachEdge(function (edge) {\n      this._setEdgeFade(edge.dataIndex, percent);\n    }, this);\n  },\n  _fadeInEdgesAll: function () {\n    this._fadeOutEdgesAll(1);\n  },\n  _updateCamera: function (seriesModel, api) {\n    this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n    var camera = this.viewGL.camera;\n    var nodeData = seriesModel.getData();\n    var points = nodeData.getLayout('points');\n    var min = vec2.create(Infinity, Infinity);\n    var max = vec2.create(-Infinity, -Infinity);\n    var pt = [];\n\n    for (var i = 0; i < points.length;) {\n      pt[0] = points[i++];\n      pt[1] = points[i++];\n      vec2.min(min, min, pt);\n      vec2.max(max, max, pt);\n    }\n\n    var cy = (max[1] + min[1]) / 2;\n    var cx = (max[0] + min[0]) / 2; // Only fit the camera when graph is not in the center.\n    // PENDING\n\n    if (cx > camera.left && cx < camera.right && cy < camera.bottom && cy > camera.top) {\n      return;\n    } // Scale a bit\n\n\n    var width = Math.max(max[0] - min[0], 10); // Keep aspect\n\n    var height = width / api.getWidth() * api.getHeight();\n    width *= 1.4;\n    height *= 1.4;\n    min[0] -= width * 0.2;\n    camera.left = min[0];\n    camera.top = cy - height / 2;\n    camera.bottom = cy + height / 2;\n    camera.right = width + min[0];\n    camera.near = 0;\n    camera.far = 100;\n  },\n  dispose: function () {\n    var renderer = this.viewGL.layer.renderer;\n\n    if (this._forceLayoutInstance) {\n      this._forceLayoutInstance.dispose(renderer);\n    }\n\n    this.groupGL.removeAll(); // Stop layout.\n\n    this._layoutId = -1;\n\n    this._pointsBuilder.dispose();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});"]},"metadata":{},"sourceType":"module"}