{"ast":null,"code":"import vec3 from '../glmatrix/vec3';\n/**\n * @constructor\n * @alias clay.Vector3\n * @param {number} x\n * @param {number} y\n * @param {number} z\n */\n\nvar Vector3 = function (x, y, z) {\n  x = x || 0;\n  y = y || 0;\n  z = z || 0;\n  /**\n   * Storage of Vector3, read and write of x, y, z will change the values in array\n   * All methods also operate on the array instead of x, y, z components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Vector3#\n   */\n\n  this.array = vec3.fromValues(x, y, z);\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Vector3#\n   */\n\n  this._dirty = true;\n};\n\nVector3.prototype = {\n  constructor: Vector3,\n\n  /**\n   * Add b to self\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  add: function (b) {\n    vec3.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y and z components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @param  {number}  z\n   * @return {clay.Vector3}\n   */\n  set: function (x, y, z) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this.array[2] = z;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y and z components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Vector3}\n   */\n  setArray: function (arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this.array[2] = arr[2];\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Vector3\n   * @return {clay.Vector3}\n   */\n  clone: function () {\n    return new Vector3(this.x, this.y, this.z);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  copy: function (b) {\n    vec3.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Cross product of self and b, written to a Vector3 out\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  cross: function (a, b) {\n    vec3.cross(this.array, a.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for distance\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  dist: function (b) {\n    return vec3.dist(this.array, b.array);\n  },\n\n  /**\n   * Distance between self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  distance: function (b) {\n    return vec3.distance(this.array, b.array);\n  },\n\n  /**\n   * Alias for divide\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  div: function (b) {\n    vec3.div(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Divide self by b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  divide: function (b) {\n    vec3.divide(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Dot product of self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  dot: function (b) {\n    return vec3.dot(this.array, b.array);\n  },\n\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function () {\n    return vec3.len(this.array);\n  },\n\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function () {\n    return vec3.length(this.array);\n  },\n\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @param  {number}  t\n   * @return {clay.Vector3}\n   */\n  lerp: function (a, b, t) {\n    vec3.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Minimum of self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  min: function (b) {\n    vec3.min(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Maximum of self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  max: function (b) {\n    vec3.max(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiply\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  mul: function (b) {\n    vec3.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Mutiply self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  multiply: function (b) {\n    vec3.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Negate self\n   * @return {clay.Vector3}\n   */\n  negate: function () {\n    vec3.negate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Normalize self\n   * @return {clay.Vector3}\n   */\n  normalize: function () {\n    vec3.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Generate random x, y, z components with a given scale\n   * @param  {number} scale\n   * @return {clay.Vector3}\n   */\n  random: function (scale) {\n    vec3.random(this.array, scale);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self\n   * @param  {number}  scale\n   * @return {clay.Vector3}\n   */\n  scale: function (s) {\n    vec3.scale(this.array, this.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale b and add to self\n   * @param  {clay.Vector3} b\n   * @param  {number}  scale\n   * @return {clay.Vector3}\n   */\n  scaleAndAdd: function (b, s) {\n    vec3.scaleAndAdd(this.array, this.array, b.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for squaredDistance\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  sqrDist: function (b) {\n    return vec3.sqrDist(this.array, b.array);\n  },\n\n  /**\n   * Squared distance between self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  squaredDistance: function (b) {\n    return vec3.squaredDistance(this.array, b.array);\n  },\n\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function () {\n    return vec3.sqrLen(this.array);\n  },\n\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function () {\n    return vec3.squaredLength(this.array);\n  },\n\n  /**\n   * Alias for subtract\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  sub: function (b) {\n    vec3.sub(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Subtract b from self\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  subtract: function (b) {\n    vec3.subtract(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix3 m\n   * @param  {clay.Matrix3} m\n   * @return {clay.Vector3}\n   */\n  transformMat3: function (m) {\n    vec3.transformMat3(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix4 m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector3}\n   */\n  transformMat4: function (m) {\n    vec3.transformMat4(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Quaternion q\n   * @param  {clay.Quaternion} q\n   * @return {clay.Vector3}\n   */\n  transformQuat: function (q) {\n    vec3.transformQuat(this.array, this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Trasnform self into projection space with m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector3}\n   */\n  applyProjection: function (m) {\n    var v = this.array;\n    m = m.array; // Perspective projection\n\n    if (m[15] === 0) {\n      var w = -1 / v[2];\n      v[0] = m[0] * v[0] * w;\n      v[1] = m[5] * v[1] * w;\n      v[2] = (m[10] * v[2] + m[14]) * w;\n    } else {\n      v[0] = m[0] * v[0] + m[12];\n      v[1] = m[5] * v[1] + m[13];\n      v[2] = m[10] * v[2] + m[14];\n    }\n\n    this._dirty = true;\n    return this;\n  },\n  eulerFromQuat: function (q, order) {\n    Vector3.eulerFromQuat(this, q, order);\n  },\n  eulerFromMat3: function (m, order) {\n    Vector3.eulerFromMat3(this, m, order);\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty; // Getter and Setter\n\nif (defineProperty) {\n  var proto = Vector3.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n\n  defineProperty(proto, 'x', {\n    get: function () {\n      return this.array[0];\n    },\n    set: function (value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n\n  defineProperty(proto, 'y', {\n    get: function () {\n      return this.array[1];\n    },\n    set: function (value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name z\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n\n  defineProperty(proto, 'z', {\n    get: function () {\n      return this.array[2];\n    },\n    set: function (value) {\n      this.array[2] = value;\n      this._dirty = true;\n    }\n  });\n} // Supply methods that are not in place\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.add = function (out, a, b) {\n  vec3.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector3}\n */\n\n\nVector3.set = function (out, x, y, z) {\n  vec3.set(out.array, x, y, z);\n  out._dirty = true;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.copy = function (out, b) {\n  vec3.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.cross = function (out, a, b) {\n  vec3.cross(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\n\n\nVector3.dist = function (a, b) {\n  return vec3.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\n\n\nVector3.distance = Vector3.dist;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\nVector3.div = function (out, a, b) {\n  vec3.divide(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.divide = Vector3.div;\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\n\nVector3.dot = function (a, b) {\n  return vec3.dot(a.array, b.array);\n};\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\n\n\nVector3.len = function (b) {\n  return vec3.length(b.array);\n}; // Vector3.length = Vector3.len;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  t\n * @return {clay.Vector3}\n */\n\n\nVector3.lerp = function (out, a, b, t) {\n  vec3.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.min = function (out, a, b) {\n  vec3.min(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.max = function (out, a, b) {\n  vec3.max(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.mul = function (out, a, b) {\n  vec3.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.multiply = Vector3.mul;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\n\nVector3.negate = function (out, a) {\n  vec3.negate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\n\n\nVector3.normalize = function (out, a) {\n  vec3.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\n\n\nVector3.random = function (out, scale) {\n  vec3.random(out.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\n\n\nVector3.scale = function (out, a, scale) {\n  vec3.scale(out.array, a.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\n\n\nVector3.scaleAndAdd = function (out, a, b, scale) {\n  vec3.scaleAndAdd(out.array, a.array, b.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\n\n\nVector3.sqrDist = function (a, b) {\n  return vec3.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\n\n\nVector3.squaredDistance = Vector3.sqrDist;\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\n\nVector3.sqrLen = function (a) {\n  return vec3.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @return {number}\n */\n\n\nVector3.squaredLength = Vector3.sqrLen;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\nVector3.sub = function (out, a, b) {\n  vec3.subtract(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\n\n\nVector3.subtract = Vector3.sub;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {Matrix3} m\n * @return {clay.Vector3}\n */\n\nVector3.transformMat3 = function (out, a, m) {\n  vec3.transformMat3(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector3}\n */\n\n\nVector3.transformMat4 = function (out, a, m) {\n  vec3.transformMat4(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector3}\n */\n\n\nVector3.transformQuat = function (out, a, q) {\n  vec3.transformQuat(out.array, a.array, q.array);\n  out._dirty = true;\n  return out;\n};\n\nfunction clamp(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n}\n\nvar atan2 = Math.atan2;\nvar asin = Math.asin;\nvar abs = Math.abs;\n/**\n * Convert quaternion to euler angle\n * Quaternion must be normalized\n * From three.js\n */\n\nVector3.eulerFromQuat = function (out, q, order) {\n  out._dirty = true;\n  q = q.array;\n  var target = out.array;\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x * x;\n  var y2 = y * y;\n  var z2 = z * z;\n  var w2 = w * w;\n  var order = (order || 'XYZ').toUpperCase();\n\n  switch (order) {\n    case 'XYZ':\n      target[0] = atan2(2 * (x * w - y * z), w2 - x2 - y2 + z2);\n      target[1] = asin(clamp(2 * (x * z + y * w), -1, 1));\n      target[2] = atan2(2 * (z * w - x * y), w2 + x2 - y2 - z2);\n      break;\n\n    case 'YXZ':\n      target[0] = asin(clamp(2 * (x * w - y * z), -1, 1));\n      target[1] = atan2(2 * (x * z + y * w), w2 - x2 - y2 + z2);\n      target[2] = atan2(2 * (x * y + z * w), w2 - x2 + y2 - z2);\n      break;\n\n    case 'ZXY':\n      target[0] = asin(clamp(2 * (x * w + y * z), -1, 1));\n      target[1] = atan2(2 * (y * w - z * x), w2 - x2 - y2 + z2);\n      target[2] = atan2(2 * (z * w - x * y), w2 - x2 + y2 - z2);\n      break;\n\n    case 'ZYX':\n      target[0] = atan2(2 * (x * w + z * y), w2 - x2 - y2 + z2);\n      target[1] = asin(clamp(2 * (y * w - x * z), -1, 1));\n      target[2] = atan2(2 * (x * y + z * w), w2 + x2 - y2 - z2);\n      break;\n\n    case 'YZX':\n      target[0] = atan2(2 * (x * w - z * y), w2 - x2 + y2 - z2);\n      target[1] = atan2(2 * (y * w - x * z), w2 + x2 - y2 - z2);\n      target[2] = asin(clamp(2 * (x * y + z * w), -1, 1));\n      break;\n\n    case 'XZY':\n      target[0] = atan2(2 * (x * w + y * z), w2 - x2 + y2 - z2);\n      target[1] = atan2(2 * (x * z + y * w), w2 + x2 - y2 - z2);\n      target[2] = asin(clamp(2 * (z * w - x * y), -1, 1));\n      break;\n\n    default:\n      console.warn('Unkown order: ' + order);\n  }\n\n  return out;\n};\n/**\n * Convert rotation matrix to euler angle\n * from three.js\n */\n\n\nVector3.eulerFromMat3 = function (out, m, order) {\n  // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n  var te = m.array;\n  var m11 = te[0],\n      m12 = te[3],\n      m13 = te[6];\n  var m21 = te[1],\n      m22 = te[4],\n      m23 = te[7];\n  var m31 = te[2],\n      m32 = te[5],\n      m33 = te[8];\n  var target = out.array;\n  var order = (order || 'XYZ').toUpperCase();\n\n  switch (order) {\n    case 'XYZ':\n      target[1] = asin(clamp(m13, -1, 1));\n\n      if (abs(m13) < 0.99999) {\n        target[0] = atan2(-m23, m33);\n        target[2] = atan2(-m12, m11);\n      } else {\n        target[0] = atan2(m32, m22);\n        target[2] = 0;\n      }\n\n      break;\n\n    case 'YXZ':\n      target[0] = asin(-clamp(m23, -1, 1));\n\n      if (abs(m23) < 0.99999) {\n        target[1] = atan2(m13, m33);\n        target[2] = atan2(m21, m22);\n      } else {\n        target[1] = atan2(-m31, m11);\n        target[2] = 0;\n      }\n\n      break;\n\n    case 'ZXY':\n      target[0] = asin(clamp(m32, -1, 1));\n\n      if (abs(m32) < 0.99999) {\n        target[1] = atan2(-m31, m33);\n        target[2] = atan2(-m12, m22);\n      } else {\n        target[1] = 0;\n        target[2] = atan2(m21, m11);\n      }\n\n      break;\n\n    case 'ZYX':\n      target[1] = asin(-clamp(m31, -1, 1));\n\n      if (abs(m31) < 0.99999) {\n        target[0] = atan2(m32, m33);\n        target[2] = atan2(m21, m11);\n      } else {\n        target[0] = 0;\n        target[2] = atan2(-m12, m22);\n      }\n\n      break;\n\n    case 'YZX':\n      target[2] = asin(clamp(m21, -1, 1));\n\n      if (abs(m21) < 0.99999) {\n        target[0] = atan2(-m23, m22);\n        target[1] = atan2(-m31, m11);\n      } else {\n        target[0] = 0;\n        target[1] = atan2(m13, m33);\n      }\n\n      break;\n\n    case 'XZY':\n      target[2] = asin(-clamp(m12, -1, 1));\n\n      if (abs(m12) < 0.99999) {\n        target[0] = atan2(m32, m22);\n        target[1] = atan2(m13, m11);\n      } else {\n        target[0] = atan2(-m23, m33);\n        target[1] = 0;\n      }\n\n      break;\n\n    default:\n      console.warn('Unkown order: ' + order);\n  }\n\n  out._dirty = true;\n  return out;\n};\n\nObject.defineProperties(Vector3, {\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_X: {\n    get: function () {\n      return new Vector3(1, 0, 0);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  NEGATIVE_X: {\n    get: function () {\n      return new Vector3(-1, 0, 0);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_Y: {\n    get: function () {\n      return new Vector3(0, 1, 0);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  NEGATIVE_Y: {\n    get: function () {\n      return new Vector3(0, -1, 0);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_Z: {\n    get: function () {\n      return new Vector3(0, 0, 1);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   */\n  NEGATIVE_Z: {\n    get: function () {\n      return new Vector3(0, 0, -1);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  UP: {\n    get: function () {\n      return new Vector3(0, 1, 0);\n    }\n  },\n\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  ZERO: {\n    get: function () {\n      return new Vector3();\n    }\n  }\n});\nexport default Vector3;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/math/Vector3.js"],"names":["vec3","Vector3","x","y","z","array","fromValues","_dirty","prototype","constructor","add","b","set","setArray","arr","clone","copy","cross","a","dist","distance","div","divide","dot","len","length","lerp","t","min","max","mul","multiply","negate","normalize","random","scale","s","scaleAndAdd","sqrDist","squaredDistance","sqrLen","squaredLength","sub","subtract","transformMat3","m","transformMat4","transformQuat","q","applyProjection","v","w","eulerFromQuat","order","eulerFromMat3","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","value","out","clamp","val","atan2","Math","asin","abs","target","x2","y2","z2","w2","toUpperCase","console","warn","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","defineProperties","POSITIVE_X","NEGATIVE_X","POSITIVE_Y","NEGATIVE_Y","POSITIVE_Z","NEGATIVE_Z","UP","ZERO"],"mappings":"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","sourcesContent":["import vec3 from '../glmatrix/vec3';\n\n/**\n * @constructor\n * @alias clay.Vector3\n * @param {number} x\n * @param {number} y\n * @param {number} z\n */\nvar Vector3 = function(x, y, z) {\n\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n\n    /**\n     * Storage of Vector3, read and write of x, y, z will change the values in array\n     * All methods also operate on the array instead of x, y, z components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Vector3#\n     */\n    this.array = vec3.fromValues(x, y, z);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Vector3#\n     */\n    this._dirty = true;\n};\n\nVector3.prototype = {\n\n    constructor: Vector3,\n\n    /**\n     * Add b to self\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    add: function (b) {\n        vec3.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @param  {number}  z\n     * @return {clay.Vector3}\n     */\n    set: function (x, y, z) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this.array[2] = z;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Vector3}\n     */\n    setArray: function (arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n        this.array[2] = arr[2];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Vector3\n     * @return {clay.Vector3}\n     */\n    clone: function () {\n        return new Vector3(this.x, this.y, this.z);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    copy: function (b) {\n        vec3.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Cross product of self and b, written to a Vector3 out\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    cross: function (a, b) {\n        vec3.cross(this.array, a.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for distance\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    dist: function (b) {\n        return vec3.dist(this.array, b.array);\n    },\n\n    /**\n     * Distance between self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    distance: function (b) {\n        return vec3.distance(this.array, b.array);\n    },\n\n    /**\n     * Alias for divide\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    div: function (b) {\n        vec3.div(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Divide self by b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    divide: function (b) {\n        vec3.divide(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    dot: function (b) {\n        return vec3.dot(this.array, b.array);\n    },\n\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function () {\n        return vec3.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function () {\n        return vec3.length(this.array);\n    },\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @param  {number}  t\n     * @return {clay.Vector3}\n     */\n    lerp: function (a, b, t) {\n        vec3.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Minimum of self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    min: function (b) {\n        vec3.min(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Maximum of self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    max: function (b) {\n        vec3.max(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    mul: function (b) {\n        vec3.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    multiply: function (b) {\n        vec3.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Negate self\n     * @return {clay.Vector3}\n     */\n    negate: function () {\n        vec3.negate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Vector3}\n     */\n    normalize: function () {\n        vec3.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Generate random x, y, z components with a given scale\n     * @param  {number} scale\n     * @return {clay.Vector3}\n     */\n    random: function (scale) {\n        vec3.random(this.array, scale);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self\n     * @param  {number}  scale\n     * @return {clay.Vector3}\n     */\n    scale: function (s) {\n        vec3.scale(this.array, this.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale b and add to self\n     * @param  {clay.Vector3} b\n     * @param  {number}  scale\n     * @return {clay.Vector3}\n     */\n    scaleAndAdd: function (b, s) {\n        vec3.scaleAndAdd(this.array, this.array, b.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredDistance\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    sqrDist: function (b) {\n        return vec3.sqrDist(this.array, b.array);\n    },\n\n    /**\n     * Squared distance between self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    squaredDistance: function (b) {\n        return vec3.squaredDistance(this.array, b.array);\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function () {\n        return vec3.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function () {\n        return vec3.squaredLength(this.array);\n    },\n\n    /**\n     * Alias for subtract\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    sub: function (b) {\n        vec3.sub(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Subtract b from self\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    subtract: function (b) {\n        vec3.subtract(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix3 m\n     * @param  {clay.Matrix3} m\n     * @return {clay.Vector3}\n     */\n    transformMat3: function (m) {\n        vec3.transformMat3(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix4 m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector3}\n     */\n    transformMat4: function (m) {\n        vec3.transformMat4(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Transform self with a Quaternion q\n     * @param  {clay.Quaternion} q\n     * @return {clay.Vector3}\n     */\n    transformQuat: function (q) {\n        vec3.transformQuat(this.array, this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Trasnform self into projection space with m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector3}\n     */\n    applyProjection: function (m) {\n        var v = this.array;\n        m = m.array;\n\n        // Perspective projection\n        if (m[15] === 0) {\n            var w = -1 / v[2];\n            v[0] = m[0] * v[0] * w;\n            v[1] = m[5] * v[1] * w;\n            v[2] = (m[10] * v[2] + m[14]) * w;\n        }\n        else {\n            v[0] = m[0] * v[0] + m[12];\n            v[1] = m[5] * v[1] + m[13];\n            v[2] = m[10] * v[2] + m[14];\n        }\n        this._dirty = true;\n\n        return this;\n    },\n\n    eulerFromQuat: function(q, order) {\n        Vector3.eulerFromQuat(this, q, order);\n    },\n\n    eulerFromMat3: function (m, order) {\n        Vector3.eulerFromMat3(this, m, order);\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n\n    var proto = Vector3.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name z\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            return this.array[2];\n        },\n        set: function (value) {\n            this.array[2] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.add = function(out, a, b) {\n    vec3.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector3}\n */\nVector3.set = function(out, x, y, z) {\n    vec3.set(out.array, x, y, z);\n    out._dirty = true;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.copy = function(out, b) {\n    vec3.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.cross = function(out, a, b) {\n    vec3.cross(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dist = function(a, b) {\n    return vec3.distance(a.array, b.array);\n};\n\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.distance = Vector3.dist;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.div = function(out, a, b) {\n    vec3.divide(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.divide = Vector3.div;\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dot = function(a, b) {\n    return vec3.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.len = function(b) {\n    return vec3.length(b.array);\n};\n\n// Vector3.length = Vector3.len;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  t\n * @return {clay.Vector3}\n */\nVector3.lerp = function(out, a, b, t) {\n    vec3.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.min = function(out, a, b) {\n    vec3.min(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.max = function(out, a, b) {\n    vec3.max(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.mul = function(out, a, b) {\n    vec3.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.multiply = Vector3.mul;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.negate = function(out, a) {\n    vec3.negate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.normalize = function(out, a) {\n    vec3.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.random = function(out, scale) {\n    vec3.random(out.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scale = function(out, a, scale) {\n    vec3.scale(out.array, a.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scaleAndAdd = function(out, a, b, scale) {\n    vec3.scaleAndAdd(out.array, a.array, b.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.sqrDist = function(a, b) {\n    return vec3.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.squaredDistance = Vector3.sqrDist;\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.sqrLen = function(a) {\n    return vec3.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.squaredLength = Vector3.sqrLen;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.sub = function(out, a, b) {\n    vec3.subtract(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.subtract = Vector3.sub;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {Matrix3} m\n * @return {clay.Vector3}\n */\nVector3.transformMat3 = function(out, a, m) {\n    vec3.transformMat3(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector3}\n */\nVector3.transformMat4 = function(out, a, m) {\n    vec3.transformMat4(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector3}\n */\nVector3.transformQuat = function(out, a, q) {\n    vec3.transformQuat(out.array, a.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\nfunction clamp(val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n}\nvar atan2 = Math.atan2;\nvar asin = Math.asin;\nvar abs = Math.abs;\n/**\n * Convert quaternion to euler angle\n * Quaternion must be normalized\n * From three.js\n */\nVector3.eulerFromQuat = function (out, q, order) {\n    out._dirty = true;\n    q = q.array;\n\n    var target = out.array;\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x * x;\n    var y2 = y * y;\n    var z2 = z * z;\n    var w2 = w * w;\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    switch (order) {\n        case 'XYZ':\n            target[0] = atan2(2 * (x * w - y * z), (w2 - x2 - y2 + z2));\n            target[1] = asin(clamp(2 * (x * z + y * w), - 1, 1));\n            target[2] = atan2(2 * (z * w - x * y), (w2 + x2 - y2 - z2));\n            break;\n        case 'YXZ':\n            target[0] = asin(clamp(2 * (x * w - y * z), - 1, 1));\n            target[1] = atan2(2 * (x * z + y * w), (w2 - x2 - y2 + z2));\n            target[2] = atan2(2 * (x * y + z * w), (w2 - x2 + y2 - z2));\n            break;\n        case 'ZXY':\n            target[0] = asin(clamp(2 * (x * w + y * z), - 1, 1));\n            target[1] = atan2(2 * (y * w - z * x), (w2 - x2 - y2 + z2));\n            target[2] = atan2(2 * (z * w - x * y), (w2 - x2 + y2 - z2));\n            break;\n        case 'ZYX':\n            target[0] = atan2(2 * (x * w + z * y), (w2 - x2 - y2 + z2));\n            target[1] = asin(clamp(2 * (y * w - x * z), - 1, 1));\n            target[2] = atan2(2 * (x * y + z * w), (w2 + x2 - y2 - z2));\n            break;\n        case 'YZX':\n            target[0] = atan2(2 * (x * w - z * y), (w2 - x2 + y2 - z2));\n            target[1] = atan2(2 * (y * w - x * z), (w2 + x2 - y2 - z2));\n            target[2] = asin(clamp(2 * (x * y + z * w), - 1, 1));\n            break;\n        case 'XZY':\n            target[0] = atan2(2 * (x * w + y * z), (w2 - x2 + y2 - z2));\n            target[1] = atan2(2 * (x * z + y * w), (w2 + x2 - y2 - z2));\n            target[2] = asin(clamp(2 * (z * w - x * y), - 1, 1));\n            break;\n        default:\n            console.warn('Unkown order: ' + order);\n    }\n    return out;\n};\n\n/**\n * Convert rotation matrix to euler angle\n * from three.js\n */\nVector3.eulerFromMat3 = function (out, m, order) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.array;\n    var m11 = te[0], m12 = te[3], m13 = te[6];\n    var m21 = te[1], m22 = te[4], m23 = te[7];\n    var m31 = te[2], m32 = te[5], m33 = te[8];\n    var target = out.array;\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    switch (order) {\n        case 'XYZ':\n            target[1] = asin(clamp(m13, -1, 1));\n            if (abs(m13) < 0.99999) {\n                target[0] = atan2(-m23, m33);\n                target[2] = atan2(-m12, m11);\n            }\n            else {\n                target[0] = atan2(m32, m22);\n                target[2] = 0;\n            }\n            break;\n        case 'YXZ':\n            target[0] = asin(-clamp(m23, -1, 1));\n            if (abs(m23) < 0.99999) {\n                target[1] = atan2(m13, m33);\n                target[2] = atan2(m21, m22);\n            }\n            else {\n                target[1] = atan2(-m31, m11);\n                target[2] = 0;\n            }\n            break;\n        case 'ZXY':\n            target[0] = asin(clamp(m32, -1, 1));\n            if (abs(m32) < 0.99999) {\n                target[1] = atan2(-m31, m33);\n                target[2] = atan2(-m12, m22);\n            }\n            else {\n                target[1] = 0;\n                target[2] = atan2(m21, m11);\n            }\n            break;\n        case 'ZYX':\n            target[1] = asin(-clamp(m31, -1, 1));\n            if (abs(m31) < 0.99999) {\n                target[0] = atan2(m32, m33);\n                target[2] = atan2(m21, m11);\n            }\n            else {\n                target[0] = 0;\n                target[2] = atan2(-m12, m22);\n            }\n            break;\n        case 'YZX':\n            target[2] = asin(clamp(m21, -1, 1));\n            if (abs(m21) < 0.99999) {\n                target[0] = atan2(-m23, m22);\n                target[1] = atan2(-m31, m11);\n            }\n            else {\n                target[0] = 0;\n                target[1] = atan2(m13, m33);\n            }\n            break;\n        case 'XZY':\n            target[2] = asin(-clamp(m12, -1, 1));\n            if (abs(m12) < 0.99999) {\n                target[0] = atan2(m32, m22);\n                target[1] = atan2(m13, m11);\n            }\n            else {\n                target[0] = atan2(-m23, m33);\n                target[1] = 0;\n            }\n            break;\n        default:\n            console.warn('Unkown order: ' + order);\n    }\n    out._dirty = true;\n\n    return out;\n};\n\nObject.defineProperties(Vector3, {\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_X: {\n        get: function () {\n            return new Vector3(1, 0, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    NEGATIVE_X: {\n        get: function () {\n            return new Vector3(-1, 0, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_Y: {\n        get: function () {\n            return new Vector3(0, 1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    NEGATIVE_Y: {\n        get: function () {\n            return new Vector3(0, -1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_Z: {\n        get: function () {\n            return new Vector3(0, 0, 1);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     */\n    NEGATIVE_Z: {\n        get: function () {\n            return new Vector3(0, 0, -1);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    UP: {\n        get: function () {\n            return new Vector3(0, 1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    ZERO: {\n        get: function () {\n            return new Vector3();\n        }\n    }\n});\n\nexport default Vector3;\n"]},"metadata":{},"sourceType":"module"}