{"ast":null,"code":"// https://github.com/mapbox/earcut/blob/master/src/earcut.js\nexport default earcut;\n\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n      outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n      outerNode = linkedList(data, 0, outerLen, dim, true),\n      triangles = [];\n  if (!outerNode) return triangles;\n  var minX, minY, maxX, maxY, x, y, size;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and size are later used to transform coords into integers for z-order calculation\n\n\n    size = Math.max(maxX - minX, maxY - minY);\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, size);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) return null;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && size) indexCurve(ear, minX, minY, size);\n  var stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertice leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(ear, triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, size, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, size);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, size) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(minTX, minTY, minX, minY, size),\n      maxZ = zOrder(maxTX, maxTY, minX, minY, size); // first look for points inside the triangle in increasing z-order\n\n  var p = ear.nextZ;\n\n  while (p && p.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.nextZ;\n  } // then look for points in decreasing z-order\n\n\n  p = ear.prevZ;\n\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n\n  do {\n    var a = p.prev,\n        b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return p;\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n\n  do {\n    var b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, size);\n        earcutLinked(c, triangles, dim, minX, minY, size);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n\n  if (outerNode) {\n    var b = splitPolygon(outerNode, hole);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n  if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n  p = m.next;\n\n  while (p !== stop) {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  }\n\n  return m;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, size) {\n  var p = start;\n\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and size of the data bounding box\n\n\nfunction zOrder(x, y, minX, minY, size) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) / size;\n  y = 32767 * (y - minY) / size;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  var p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;\n  return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertice index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertice nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/earcut.js"],"names":["earcut","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","minX","minY","maxX","maxY","x","y","size","eliminateHoles","i","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","next","removeNode","filterPoints","p","again","steiner","area","prev","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","nextZ","z","prevZ","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","inside","a2","Node","b2","an","bp","deviation","polygonArea","trianglesArea","sum","j"],"mappings":"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","sourcesContent":["// https://github.com/mapbox/earcut/blob/master/src/earcut.js\nexport default earcut;\n\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n      outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n      outerNode = linkedList(data, 0, outerLen, dim, true),\n      triangles = [];\n  if (!outerNode) return triangles;\n  var minX, minY, maxX, maxY, x, y, size;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and size are later used to transform coords into integers for z-order calculation\n\n\n    size = Math.max(maxX - minX, maxY - minY);\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, size);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) return null;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && size) indexCurve(ear, minX, minY, size);\n  var stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertice leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(ear, triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, size, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, size);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, size) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(minTX, minTY, minX, minY, size),\n      maxZ = zOrder(maxTX, maxTY, minX, minY, size); // first look for points inside the triangle in increasing z-order\n\n  var p = ear.nextZ;\n\n  while (p && p.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.nextZ;\n  } // then look for points in decreasing z-order\n\n\n  p = ear.prevZ;\n\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n\n  do {\n    var a = p.prev,\n        b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return p;\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n\n  do {\n    var b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, size);\n        earcutLinked(c, triangles, dim, minX, minY, size);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n\n  if (outerNode) {\n    var b = splitPolygon(outerNode, hole);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n  if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n  p = m.next;\n\n  while (p !== stop) {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  }\n\n  return m;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, size) {\n  var p = start;\n\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and size of the data bounding box\n\n\nfunction zOrder(x, y, minX, minY, size) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) / size;\n  y = 32767 * (y - minY) / size;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  var p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;\n  return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertice index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertice nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n}"]},"metadata":{},"sourceType":"module"}