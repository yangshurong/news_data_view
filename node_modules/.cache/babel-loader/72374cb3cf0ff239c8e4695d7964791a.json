{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport trail2GLSL from './shader/trail2.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\n\nfunction sign(a) {\n  return a > 0 ? 1 : -1;\n}\n\ngraphicGL.Shader.import(trail2GLSL);\nexport default graphicGL.Mesh.extend(function () {\n  var material = new graphicGL.Material({\n    shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.trail2.vertex'), graphicGL.Shader.source('ecgl.trail2.fragment')),\n    transparent: true,\n    depthMask: false\n  });\n  var geometry = new Lines3DGeometry({\n    dynamic: true\n  });\n  geometry.createAttribute('dist', 'float', 1);\n  geometry.createAttribute('distAll', 'float', 1);\n  geometry.createAttribute('start', 'float', 1);\n  return {\n    geometry: geometry,\n    material: material,\n    culling: false,\n    $ignorePicking: true\n  };\n}, {\n  updateData: function updateData(data, api, lines3DGeometry) {\n    var seriesModel = data.hostModel;\n    var geometry = this.geometry;\n    var effectModel = seriesModel.getModel('effect');\n    var size = effectModel.get('trailWidth') * api.getDevicePixelRatio();\n    var trailLength = effectModel.get('trailLength');\n    var speed = seriesModel.get('effect.constantSpeed');\n    var period = seriesModel.get('effect.period') * 1000;\n    var useConstantSpeed = speed != null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!this.getScene()) {\n        console.error('TrailMesh must been add to scene before updateData');\n      }\n    }\n\n    useConstantSpeed ? this.material.set('speed', speed / 1000) : this.material.set('period', period);\n    this.material[useConstantSpeed ? 'define' : 'undefine']('vertex', 'CONSTANT_SPEED');\n    var isPolyline = seriesModel.get('polyline');\n    geometry.trailLength = trailLength;\n    this.material.set('trailLength', trailLength);\n    geometry.resetOffset();\n    ['position', 'positionPrev', 'positionNext'].forEach(function (attrName) {\n      geometry.attributes[attrName].value = lines3DGeometry.attributes[attrName].value;\n    });\n    var extraAttrs = ['dist', 'distAll', 'start', 'offset', 'color'];\n    extraAttrs.forEach(function (attrName) {\n      geometry.attributes[attrName].init(geometry.vertexCount);\n    });\n    geometry.indices = lines3DGeometry.indices;\n    var colorArr = [];\n    var effectColor = effectModel.get('trailColor');\n    var effectOpacity = effectModel.get('trailOpacity');\n    var hasEffectColor = effectColor != null;\n    var hasEffectOpacity = effectOpacity != null;\n    this.updateWorldTransform();\n    var xScale = this.worldTransform.x.len();\n    var yScale = this.worldTransform.y.len();\n    var zScale = this.worldTransform.z.len();\n    var vertexOffset = 0;\n    var maxDistance = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var opacity = hasEffectOpacity ? effectOpacity : getItemVisualOpacity(data, idx);\n      var color = getItemVisualColor(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(hasEffectColor ? effectColor : color, colorArr);\n      colorArr[3] *= opacity;\n      var vertexCount = isPolyline ? lines3DGeometry.getPolylineVertexCount(pts) : lines3DGeometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n      var dist = 0;\n      var pos = [];\n      var posPrev = [];\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.position.get(i, pos);\n        pos[0] *= xScale;\n        pos[1] *= yScale;\n        pos[2] *= zScale;\n\n        if (i > vertexOffset) {\n          dist += vec3.dist(pos, posPrev);\n        }\n\n        geometry.attributes.dist.set(i, dist);\n        vec3.copy(posPrev, pos);\n      }\n\n      maxDistance = Math.max(maxDistance, dist);\n      var randomStart = Math.random() * (useConstantSpeed ? dist : period);\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.distAll.set(i, dist);\n        geometry.attributes.start.set(i, randomStart);\n        geometry.attributes.offset.set(i, sign(lines3DGeometry.attributes.offset.get(i)) * size / 2);\n        geometry.attributes.color.set(i, colorArr);\n      }\n\n      vertexOffset += vertexCount;\n    });\n    this.material.set('spotSize', maxDistance * 0.1 * trailLength);\n    this.material.set('spotIntensity', effectModel.get('spotIntensity'));\n    geometry.dirty();\n  },\n  setAnimationTime: function setAnimationTime(time) {\n    this.material.set('time', time);\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/lines3D/TrailMesh2.js"],"names":["echarts","graphicGL","glmatrix","Lines3DGeometry","trail2GLSL","getItemVisualColor","getItemVisualOpacity","vec3","sign","a","Shader","import","Mesh","extend","material","Material","shader","source","transparent","depthMask","geometry","dynamic","createAttribute","culling","$ignorePicking","updateData","data","api","lines3DGeometry","seriesModel","hostModel","effectModel","getModel","size","get","getDevicePixelRatio","trailLength","speed","period","useConstantSpeed","process","env","NODE_ENV","getScene","console","error","set","isPolyline","resetOffset","forEach","attrName","attributes","value","extraAttrs","init","vertexCount","indices","colorArr","effectColor","effectOpacity","hasEffectColor","hasEffectOpacity","updateWorldTransform","xScale","worldTransform","x","len","yScale","y","zScale","z","vertexOffset","maxDistance","each","idx","pts","getItemLayout","opacity","color","parseColor","getPolylineVertexCount","getCubicCurveVertexCount","dist","pos","posPrev","i","position","copy","Math","max","randomStart","random","distAll","start","offset","dirty","setAnimationTime","time"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport trail2GLSL from './shader/trail2.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\n\nfunction sign(a) {\n  return a > 0 ? 1 : -1;\n}\n\ngraphicGL.Shader.import(trail2GLSL);\nexport default graphicGL.Mesh.extend(function () {\n  var material = new graphicGL.Material({\n    shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.trail2.vertex'), graphicGL.Shader.source('ecgl.trail2.fragment')),\n    transparent: true,\n    depthMask: false\n  });\n  var geometry = new Lines3DGeometry({\n    dynamic: true\n  });\n  geometry.createAttribute('dist', 'float', 1);\n  geometry.createAttribute('distAll', 'float', 1);\n  geometry.createAttribute('start', 'float', 1);\n  return {\n    geometry: geometry,\n    material: material,\n    culling: false,\n    $ignorePicking: true\n  };\n}, {\n  updateData: function (data, api, lines3DGeometry) {\n    var seriesModel = data.hostModel;\n    var geometry = this.geometry;\n    var effectModel = seriesModel.getModel('effect');\n    var size = effectModel.get('trailWidth') * api.getDevicePixelRatio();\n    var trailLength = effectModel.get('trailLength');\n    var speed = seriesModel.get('effect.constantSpeed');\n    var period = seriesModel.get('effect.period') * 1000;\n    var useConstantSpeed = speed != null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!this.getScene()) {\n        console.error('TrailMesh must been add to scene before updateData');\n      }\n    }\n\n    useConstantSpeed ? this.material.set('speed', speed / 1000) : this.material.set('period', period);\n    this.material[useConstantSpeed ? 'define' : 'undefine']('vertex', 'CONSTANT_SPEED');\n    var isPolyline = seriesModel.get('polyline');\n    geometry.trailLength = trailLength;\n    this.material.set('trailLength', trailLength);\n    geometry.resetOffset();\n    ['position', 'positionPrev', 'positionNext'].forEach(function (attrName) {\n      geometry.attributes[attrName].value = lines3DGeometry.attributes[attrName].value;\n    });\n    var extraAttrs = ['dist', 'distAll', 'start', 'offset', 'color'];\n    extraAttrs.forEach(function (attrName) {\n      geometry.attributes[attrName].init(geometry.vertexCount);\n    });\n    geometry.indices = lines3DGeometry.indices;\n    var colorArr = [];\n    var effectColor = effectModel.get('trailColor');\n    var effectOpacity = effectModel.get('trailOpacity');\n    var hasEffectColor = effectColor != null;\n    var hasEffectOpacity = effectOpacity != null;\n    this.updateWorldTransform();\n    var xScale = this.worldTransform.x.len();\n    var yScale = this.worldTransform.y.len();\n    var zScale = this.worldTransform.z.len();\n    var vertexOffset = 0;\n    var maxDistance = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var opacity = hasEffectOpacity ? effectOpacity : getItemVisualOpacity(data, idx);\n      var color = getItemVisualColor(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(hasEffectColor ? effectColor : color, colorArr);\n      colorArr[3] *= opacity;\n      var vertexCount = isPolyline ? lines3DGeometry.getPolylineVertexCount(pts) : lines3DGeometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n      var dist = 0;\n      var pos = [];\n      var posPrev = [];\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.position.get(i, pos);\n        pos[0] *= xScale;\n        pos[1] *= yScale;\n        pos[2] *= zScale;\n\n        if (i > vertexOffset) {\n          dist += vec3.dist(pos, posPrev);\n        }\n\n        geometry.attributes.dist.set(i, dist);\n        vec3.copy(posPrev, pos);\n      }\n\n      maxDistance = Math.max(maxDistance, dist);\n      var randomStart = Math.random() * (useConstantSpeed ? dist : period);\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.distAll.set(i, dist);\n        geometry.attributes.start.set(i, randomStart);\n        geometry.attributes.offset.set(i, sign(lines3DGeometry.attributes.offset.get(i)) * size / 2);\n        geometry.attributes.color.set(i, colorArr);\n      }\n\n      vertexOffset += vertexCount;\n    });\n    this.material.set('spotSize', maxDistance * 0.1 * trailLength);\n    this.material.set('spotIntensity', effectModel.get('spotIntensity'));\n    geometry.dirty();\n  },\n  setAnimationTime: function (time) {\n    this.material.set('time', time);\n  }\n});"]},"metadata":{},"sourceType":"module"}