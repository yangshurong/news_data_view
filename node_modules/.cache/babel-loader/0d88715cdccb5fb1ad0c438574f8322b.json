{"ast":null,"code":"import CompositorNode from './CompositorNode';\nimport glenum from '../core/glenum';\nimport FrameBuffer from '../FrameBuffer';\n/**\n * @constructor clay.compositor.SceneNode\n * @extends clay.compositor.CompositorNode\n */\n\nvar SceneNode = CompositorNode.extend(\n/** @lends clay.compositor.SceneNode# */\n{\n  name: 'scene',\n\n  /**\n   * @type {clay.Scene}\n   */\n  scene: null,\n\n  /**\n   * @type {clay.Camera}\n   */\n  camera: null,\n\n  /**\n   * @type {boolean}\n   */\n  autoUpdateScene: true,\n\n  /**\n   * @type {boolean}\n   */\n  preZ: false\n}, function () {\n  this.frameBuffer = new FrameBuffer();\n}, {\n  render: function render(renderer) {\n    this._rendering = true;\n    var _gl = renderer.gl;\n    this.trigger('beforerender');\n    var renderInfo;\n\n    if (!this.outputs) {\n      renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n    } else {\n      var frameBuffer = this.frameBuffer;\n\n      for (var name in this.outputs) {\n        var parameters = this.updateParameter(name, renderer);\n        var outputInfo = this.outputs[name];\n\n        var texture = this._compositor.allocateTexture(parameters);\n\n        this._outputTextures[name] = texture;\n        var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;\n\n        if (typeof attachment == 'string') {\n          attachment = _gl[attachment];\n        }\n\n        frameBuffer.attach(texture, attachment);\n      }\n\n      frameBuffer.bind(renderer); // MRT Support in chrome\n      // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html\n\n      var ext = renderer.getGLExtension('EXT_draw_buffers');\n\n      if (ext) {\n        var bufs = [];\n\n        for (var attachment in this.outputs) {\n          attachment = parseInt(attachment);\n\n          if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {\n            bufs.push(attachment);\n          }\n        }\n\n        ext.drawBuffersEXT(bufs);\n      } // Always clear\n      // PENDING\n\n\n      renderer.saveClear();\n      renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;\n      renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n      renderer.restoreClear();\n      frameBuffer.unbind(renderer);\n    }\n\n    this.trigger('afterrender', renderInfo);\n    this._rendering = false;\n    this._rendered = true;\n  }\n});\nexport default SceneNode;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/compositor/SceneNode.js"],"names":["CompositorNode","glenum","FrameBuffer","SceneNode","extend","name","scene","camera","autoUpdateScene","preZ","frameBuffer","render","renderer","_rendering","_gl","gl","trigger","renderInfo","outputs","parameters","updateParameter","outputInfo","texture","_compositor","allocateTexture","_outputTextures","attachment","COLOR_ATTACHMENT0","attach","bind","ext","getGLExtension","bufs","parseInt","push","drawBuffersEXT","saveClear","clearBit","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","restoreClear","unbind","_rendered"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAGH,cAAc,CAACI,MAAf;AAChB;AACA;AACIC,EAAAA,IAAI,EAAE,OADV;;AAEI;AACJ;AACA;AACIC,EAAAA,KAAK,EAAE,IALX;;AAMI;AACJ;AACA;AACIC,EAAAA,MAAM,EAAE,IATZ;;AAUI;AACJ;AACA;AACIC,EAAAA,eAAe,EAAE,IAbrB;;AAcI;AACJ;AACA;AACIC,EAAAA,IAAI,EAAE;AAjBV,CAFgB,EAqBb,YAAW;AACV,OAAKC,WAAL,GAAmB,IAAIR,WAAJ,EAAnB;AACH,CAvBe,EAuBb;AACCS,EAAAA,MAAM,EAAE,gBAASC,QAAT,EAAmB;AAEvB,SAAKC,UAAL,GAAkB,IAAlB;AACA,QAAIC,GAAG,GAAGF,QAAQ,CAACG,EAAnB;AAEA,SAAKC,OAAL,CAAa,cAAb;AAEA,QAAIC,UAAJ;;AAEA,QAAI,CAAC,KAAKC,OAAV,EAAmB;AAEfD,MAAAA,UAAU,GAAGL,QAAQ,CAACD,MAAT,CAAgB,KAAKL,KAArB,EAA4B,KAAKC,MAAjC,EAAyC,CAAC,KAAKC,eAA/C,EAAgE,KAAKC,IAArE,CAAb;AAEH,KAJD,MAKK;AAED,UAAIC,WAAW,GAAG,KAAKA,WAAvB;;AACA,WAAK,IAAIL,IAAT,IAAiB,KAAKa,OAAtB,EAA+B;AAC3B,YAAIC,UAAU,GAAG,KAAKC,eAAL,CAAqBf,IAArB,EAA2BO,QAA3B,CAAjB;AACA,YAAIS,UAAU,GAAG,KAAKH,OAAL,CAAab,IAAb,CAAjB;;AACA,YAAIiB,OAAO,GAAG,KAAKC,WAAL,CAAiBC,eAAjB,CAAiCL,UAAjC,CAAd;;AACA,aAAKM,eAAL,CAAqBpB,IAArB,IAA6BiB,OAA7B;AAEA,YAAII,UAAU,GAAGL,UAAU,CAACK,UAAX,IAAyBZ,GAAG,CAACa,iBAA9C;;AACA,YAAI,OAAOD,UAAP,IAAsB,QAA1B,EAAoC;AAChCA,UAAAA,UAAU,GAAGZ,GAAG,CAACY,UAAD,CAAhB;AACH;;AACDhB,QAAAA,WAAW,CAACkB,MAAZ,CAAmBN,OAAnB,EAA4BI,UAA5B;AACH;;AACDhB,MAAAA,WAAW,CAACmB,IAAZ,CAAiBjB,QAAjB,EAfC,CAiBD;AACA;;AACA,UAAIkB,GAAG,GAAGlB,QAAQ,CAACmB,cAAT,CAAwB,kBAAxB,CAAV;;AACA,UAAID,GAAJ,EAAS;AACL,YAAIE,IAAI,GAAG,EAAX;;AACA,aAAK,IAAIN,UAAT,IAAuB,KAAKR,OAA5B,EAAqC;AACjCQ,UAAAA,UAAU,GAAGO,QAAQ,CAACP,UAAD,CAArB;;AACA,cAAIA,UAAU,IAAIZ,GAAG,CAACa,iBAAlB,IAAuCD,UAAU,IAAIZ,GAAG,CAACa,iBAAJ,GAAwB,CAAjF,EAAoF;AAChFK,YAAAA,IAAI,CAACE,IAAL,CAAUR,UAAV;AACH;AACJ;;AACDI,QAAAA,GAAG,CAACK,cAAJ,CAAmBH,IAAnB;AACH,OA7BA,CA+BD;AACA;;;AACApB,MAAAA,QAAQ,CAACwB,SAAT;AACAxB,MAAAA,QAAQ,CAACyB,QAAT,GAAoBpC,MAAM,CAACqC,gBAAP,GAA0BrC,MAAM,CAACsC,gBAArD;AACAtB,MAAAA,UAAU,GAAGL,QAAQ,CAACD,MAAT,CAAgB,KAAKL,KAArB,EAA4B,KAAKC,MAAjC,EAAyC,CAAC,KAAKC,eAA/C,EAAgE,KAAKC,IAArE,CAAb;AACAG,MAAAA,QAAQ,CAAC4B,YAAT;AAEA9B,MAAAA,WAAW,CAAC+B,MAAZ,CAAmB7B,QAAnB;AACH;;AAED,SAAKI,OAAL,CAAa,aAAb,EAA4BC,UAA5B;AAEA,SAAKJ,UAAL,GAAkB,KAAlB;AACA,SAAK6B,SAAL,GAAiB,IAAjB;AACH;AA5DF,CAvBa,CAAhB;AAsFA,eAAevC,SAAf","sourcesContent":["import CompositorNode from './CompositorNode';\nimport glenum from '../core/glenum';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * @constructor clay.compositor.SceneNode\n * @extends clay.compositor.CompositorNode\n */\nvar SceneNode = CompositorNode.extend(\n/** @lends clay.compositor.SceneNode# */\n{\n    name: 'scene',\n    /**\n     * @type {clay.Scene}\n     */\n    scene: null,\n    /**\n     * @type {clay.Camera}\n     */\n    camera: null,\n    /**\n     * @type {boolean}\n     */\n    autoUpdateScene: true,\n    /**\n     * @type {boolean}\n     */\n    preZ: false\n\n}, function() {\n    this.frameBuffer = new FrameBuffer();\n}, {\n    render: function(renderer) {\n\n        this._rendering = true;\n        var _gl = renderer.gl;\n\n        this.trigger('beforerender');\n\n        var renderInfo;\n\n        if (!this.outputs) {\n\n            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n\n        }\n        else {\n\n            var frameBuffer = this.frameBuffer;\n            for (var name in this.outputs) {\n                var parameters = this.updateParameter(name, renderer);\n                var outputInfo = this.outputs[name];\n                var texture = this._compositor.allocateTexture(parameters);\n                this._outputTextures[name] = texture;\n\n                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;\n                if (typeof(attachment) == 'string') {\n                    attachment = _gl[attachment];\n                }\n                frameBuffer.attach(texture, attachment);\n            }\n            frameBuffer.bind(renderer);\n\n            // MRT Support in chrome\n            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html\n            var ext = renderer.getGLExtension('EXT_draw_buffers');\n            if (ext) {\n                var bufs = [];\n                for (var attachment in this.outputs) {\n                    attachment = parseInt(attachment);\n                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {\n                        bufs.push(attachment);\n                    }\n                }\n                ext.drawBuffersEXT(bufs);\n            }\n\n            // Always clear\n            // PENDING\n            renderer.saveClear();\n            renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;\n            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n            renderer.restoreClear();\n\n            frameBuffer.unbind(renderer);\n        }\n\n        this.trigger('afterrender', renderInfo);\n\n        this._rendering = false;\n        this._rendered = true;\n    }\n});\n\nexport default SceneNode;\n"]},"metadata":{},"sourceType":"module"}