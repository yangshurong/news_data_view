{"ast":null,"code":"'use strict';\n\nvar _typeof = require(\"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _warnOnce = require('./warn-once');\n\nvar _warnOnce2 = _interopRequireDefault(_warnOnce);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}');\n *\n * const charset = root.first;\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last;\n * media.nodes   //=> []\n */\n\n\nvar AtRule = function (_Container) {\n  _inherits(AtRule, _Container);\n\n  function AtRule(defaults) {\n    _classCallCheck(this, AtRule);\n\n    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));\n\n    _this.type = 'atrule';\n    return _this;\n  }\n\n  AtRule.prototype.append = function append() {\n    var _Container$prototype$;\n\n    if (!this.nodes) this.nodes = [];\n\n    for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n\n    return (_Container$prototype$ = _Container.prototype.append).call.apply(_Container$prototype$, [this].concat(children));\n  };\n\n  AtRule.prototype.prepend = function prepend() {\n    var _Container$prototype$2;\n\n    if (!this.nodes) this.nodes = [];\n\n    for (var _len2 = arguments.length, children = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      children[_key2] = arguments[_key2];\n    }\n\n    return (_Container$prototype$2 = _Container.prototype.prepend).call.apply(_Container$prototype$2, [this].concat(children));\n  };\n\n  _createClass(AtRule, [{\n    key: 'afterName',\n    get: function get() {\n      (0, _warnOnce2.default)('AtRule#afterName was deprecated. Use AtRule#raws.afterName');\n      return this.raws.afterName;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('AtRule#afterName was deprecated. Use AtRule#raws.afterName');\n      this.raws.afterName = val;\n    }\n  }, {\n    key: '_params',\n    get: function get() {\n      (0, _warnOnce2.default)('AtRule#_params was deprecated. Use AtRule#raws.params');\n      return this.raws.params;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('AtRule#_params was deprecated. Use AtRule#raws.params');\n      this.raws.params = val;\n    }\n    /**\n     * @memberof AtRule#\n     * @member {string} name - the at-rule’s name immediately follows the `@`\n     *\n     * @example\n     * const root  = postcss.parse('@media print {}');\n     * media.name //=> 'media'\n     * const media = root.first;\n     */\n\n    /**\n     * @memberof AtRule#\n     * @member {string} params - the at-rule’s parameters, the values\n     *                           that follow the at-rule’s name but precede\n     *                           any {} block\n     *\n     * @example\n     * const root  = postcss.parse('@media print, screen {}');\n     * const media = root.first;\n     * media.params //=> 'print, screen'\n     */\n\n    /**\n     * @memberof AtRule#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `after`: the space symbols after the last child of the node\n     *   to the end of the node.\n     * * `between`: the symbols between the property and value\n     *   for declarations, selector and `{` for rules, or last parameter\n     *   and `{` for at-rules.\n     * * `semicolon`: contains true if the last child has\n     *   an (optional) semicolon.\n     * * `afterName`: the space between the at-rule name and its parameters.\n     *\n     * PostCSS cleans at-rule parameters from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('  @media\\nprint {\\n}')\n     * root.first.first.raws //=> { before: '  ',\n     *                       //     between: ' ',\n     *                       //     afterName: '\\n',\n     *                       //     after: '\\n' }\n     */\n\n  }]);\n\n  return AtRule;\n}(_container2.default);\n\nexports.default = AtRule;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;IAkBMA,M;;;AAEF,kBAAYC,QAAZ,EAAsB;AAAAC;;AAAA,iDAClBC,sBAAMF,QAAN,CADkB;;AAElBG,UAAKC,IAAL,GAAY,QAAZ;AAFkB;AAGrB;;mBAEDC,S,kBAAoB;AAAA;;AAChB,QAAK,CAAC,KAAKC,KAAX,EAAmB,KAAKA,KAAL,GAAa,EAAb;;AADH,sCAAVC,QAAU;AAAVA,cAAU,MAAVA,GAAUC,eAAVD;AAAU;;AAEhB,WAAO,8CAAMF,MAAN,kDAAgBE,QAAhB,EAAP;;;mBAGJE,U,mBAAqB;AAAA;;AACjB,QAAK,CAAC,KAAKH,KAAX,EAAmB,KAAKA,KAAL,GAAa,EAAb;;AADF,uCAAVC,QAAU;AAAVA,cAAU,OAAVA,GAAUC,gBAAVD;AAAU;;AAEjB,WAAO,+CAAME,OAAN,mDAAiBF,QAAjB,EAAP;;;;;wBAGY;AACZ,8BAAS,4DAAT;AACA,aAAO,KAAKG,IAAL,CAAUC,SAAjB;;sBAGUC,KAAK;AACf,8BAAS,4DAAT;AACA,WAAKF,IAAL,CAAUC,SAAV,GAAsBC,GAAtB;AACH;;;wBAEa;AACV,8BAAS,uDAAT;AACA,aAAO,KAAKF,IAAL,CAAUG,MAAjB;;sBAGQD,KAAK;AACb,8BAAS,uDAAT;AACA,WAAKF,IAAL,CAAUG,MAAV,GAAmBD,GAAnB;AACH;AAED;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAiCWb","names":["AtRule","defaults","_classCallCheck","_Container","_this","type","append","nodes","children","arguments","prepend","raws","afterName","val","params"],"sources":["at-rule.es6"],"sourcesContent":["import Container from './container';\nimport warnOnce  from './warn-once';\n\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}');\n *\n * const charset = root.first;\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last;\n * media.nodes   //=> []\n */\nclass AtRule extends Container {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'atrule';\n    }\n\n    append(...children) {\n        if ( !this.nodes ) this.nodes = [];\n        return super.append(...children);\n    }\n\n    prepend(...children) {\n        if ( !this.nodes ) this.nodes = [];\n        return super.prepend(...children);\n    }\n\n    get afterName() {\n        warnOnce('AtRule#afterName was deprecated. Use AtRule#raws.afterName');\n        return this.raws.afterName;\n    }\n\n    set afterName(val) {\n        warnOnce('AtRule#afterName was deprecated. Use AtRule#raws.afterName');\n        this.raws.afterName = val;\n    }\n\n    get _params() {\n        warnOnce('AtRule#_params was deprecated. Use AtRule#raws.params');\n        return this.raws.params;\n    }\n\n    set _params(val) {\n        warnOnce('AtRule#_params was deprecated. Use AtRule#raws.params');\n        this.raws.params = val;\n    }\n\n    /**\n     * @memberof AtRule#\n     * @member {string} name - the at-rule’s name immediately follows the `@`\n     *\n     * @example\n     * const root  = postcss.parse('@media print {}');\n     * media.name //=> 'media'\n     * const media = root.first;\n     */\n\n    /**\n     * @memberof AtRule#\n     * @member {string} params - the at-rule’s parameters, the values\n     *                           that follow the at-rule’s name but precede\n     *                           any {} block\n     *\n     * @example\n     * const root  = postcss.parse('@media print, screen {}');\n     * const media = root.first;\n     * media.params //=> 'print, screen'\n     */\n\n    /**\n     * @memberof AtRule#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `after`: the space symbols after the last child of the node\n     *   to the end of the node.\n     * * `between`: the symbols between the property and value\n     *   for declarations, selector and `{` for rules, or last parameter\n     *   and `{` for at-rules.\n     * * `semicolon`: contains true if the last child has\n     *   an (optional) semicolon.\n     * * `afterName`: the space between the at-rule name and its parameters.\n     *\n     * PostCSS cleans at-rule parameters from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('  @media\\nprint {\\n}')\n     * root.first.first.raws //=> { before: '  ',\n     *                       //     between: ' ',\n     *                       //     afterName: '\\n',\n     *                       //     after: '\\n' }\n     */\n}\n\nexport default AtRule;\n"]},"metadata":{},"sourceType":"script"}