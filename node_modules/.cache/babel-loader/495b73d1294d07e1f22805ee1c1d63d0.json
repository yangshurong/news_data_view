{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import 'video.js/dist/video-js.css'\nimport { videoPlayer } from \"vue-video-player/src\";\nimport \"videojs-flash\";\n\nrequire(\"video.js/dist/video-js.css\");\n\nrequire(\"vue-video-player/src/custom-theme.css\");\n\nexport default {\n  data: function data() {\n    return {\n      playerOptions: {\n        height: 500,\n        playbackRates: [0.7, 1.0, 1.5, 2.0, 4.0],\n        // 播放速度\n        autoplay: false,\n        // 如果true,浏览器准备好时开始回放。\n        muted: false,\n        // 默认情况下将会消除任何音频。\n        loop: false,\n        // 导致视频一结束就重新开始。\n        preload: \"auto\",\n        // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: \"zh-CN\",\n        aspectRatio: \"16:9\",\n        // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true,\n        // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          type: \"video/mp4\",\n          // 这里的种类支持很多种：基本视频格式、直播、流媒体等，具体可以参看git网址项目【video/mp4】【application/x-mpegURL】【rtmp/flv】\n          src: require(\"@/assets/ae_init/1652080471703.mp4\") // url地址\n          //src: \"http://10.60.1.180:8081/file/video.mp4\", // url地址\n\n        } //{\n        //  type: \"application/x-mpegURL\",\n        //  src: \"https://cdn.letv-cdn.com/2018/12/05/JOCeEEUuoteFrjCg/playlist.m3u8\",\n        //},\n        ],\n        // poster: require(\"@/assets/poster.png\"), // 你的封面地址\n        //poster: \"http://10.60.1.180:8081/file/yanhua.jpg\", // 你的封面地址\n        // width: document.documentElement.clientWidth, //播放器宽度\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\",\n        // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          durationDisplay: true,\n          remainingTimeDisplay: false,\n          fullscreenToggle: true // 全屏按钮\n\n        }\n      }\n    };\n  },\n  components: {\n    videoPlayer: videoPlayer\n  },\n  mounted: function mounted() {},\n  methods: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;AAWA;AACA;AACA;;AACAA;;AACAA;;AACA;AACAC,MADA,kBACA;AACA;AACAC;AACAC,mBADA;AAEAC,gDAFA;AAEA;AACAC,uBAHA;AAGA;AACAC,oBAJA;AAIA;AACAC,mBALA;AAKA;AACAC,uBANA;AAMA;AACAC,yBAPA;AAQAC,2BARA;AAQA;AACAC,mBATA;AASA;AACAC,kBACA;AACAC,2BADA;AACA;AACAC,4DAFA,CAEA;AACA;;AAHA,SADA,CAMA;AACA;AACA;AACA;AATA,SAVA;AAqBA;AACA;AACA;AACAC,6CAxBA;AAwBA;AACAC;AACAC,2BADA;AAEAC,+BAFA;AAGAC,qCAHA;AAIAC,gCAJA,CAIA;;AAJA;AAzBA;AADA;AAkCA,GApCA;AAqCAC;AACAC;AADA,GArCA;AAwCAC,SAxCA,qBAwCA,EAxCA;AAyCAC;AAzCA","names":["require","data","playerOptions","height","playbackRates","autoplay","muted","loop","preload","language","aspectRatio","fluid","sources","type","src","notSupportedMessage","controlBar","timeDivider","durationDisplay","remainingTimeDisplay","fullscreenToggle","components","videoPlayer","mounted","methods"],"sourceRoot":"src/views","sources":["init_video.vue"],"sourcesContent":["<template>\r\n  <div class=\"main_background\">\r\n    <videoPlayer\r\n      class=\"vjs-custom-skin videoPlayer\"\r\n      :options=\"playerOptions\"\r\n      ref=\"videoPlayer\"\r\n      :playsinline=\"true\"\r\n    ></videoPlayer>\r\n  </div>\r\n</template>\r\n<script>\r\n// import 'video.js/dist/video-js.css'\r\nimport { videoPlayer } from \"vue-video-player/src\";\r\nimport \"videojs-flash\";\r\nrequire(\"video.js/dist/video-js.css\");\r\nrequire(\"vue-video-player/src/custom-theme.css\");\r\nexport default {\r\n  data() {\r\n    return {\r\n      playerOptions: {\r\n        height: 500,\r\n        playbackRates: [0.7, 1.0, 1.5, 2.0, 4.0], // 播放速度\r\n        autoplay: false, // 如果true,浏览器准备好时开始回放。\r\n        muted: false, // 默认情况下将会消除任何音频。\r\n        loop: false, // 导致视频一结束就重新开始。\r\n        preload: \"auto\", // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\r\n        language: \"zh-CN\",\r\n        aspectRatio: \"16:9\", // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\r\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n        sources: [\r\n          {\r\n            type: \"video/mp4\", // 这里的种类支持很多种：基本视频格式、直播、流媒体等，具体可以参看git网址项目【video/mp4】【application/x-mpegURL】【rtmp/flv】\r\n            src: require(\"@/assets/ae_init/1652080471703.mp4\") // url地址\r\n            //src: \"http://10.60.1.180:8081/file/video.mp4\", // url地址\r\n          },\r\n          //{\r\n          //  type: \"application/x-mpegURL\",\r\n          //  src: \"https://cdn.letv-cdn.com/2018/12/05/JOCeEEUuoteFrjCg/playlist.m3u8\",\r\n          //},\r\n        ],\r\n        // poster: require(\"@/assets/poster.png\"), // 你的封面地址\r\n        //poster: \"http://10.60.1.180:8081/file/yanhua.jpg\", // 你的封面地址\r\n        // width: document.documentElement.clientWidth, //播放器宽度\r\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\", // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n        controlBar: {\r\n          timeDivider: true,\r\n          durationDisplay: true,\r\n          remainingTimeDisplay: false,\r\n          fullscreenToggle: true, // 全屏按钮\r\n        },\r\n      },\r\n    };\r\n  },\r\n  components: {\r\n    videoPlayer,\r\n  },\r\n  mounted() {},\r\n  methods: {},\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.main_background {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}