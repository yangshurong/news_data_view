{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\n/**\n * @constructor\n * @alias clay.Quaternion\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\n\nvar Quaternion = function Quaternion(x, y, z, w) {\n  x = x || 0;\n  y = y || 0;\n  z = z || 0;\n  w = w === undefined ? 1 : w;\n  /**\n   * Storage of Quaternion, read and write of x, y, z, w will change the values in array\n   * All methods also operate on the array instead of x, y, z, w components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Quaternion#\n   */\n\n  this.array = quat.fromValues(x, y, z, w);\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Quaternion#\n   */\n\n  this._dirty = true;\n};\n\nQuaternion.prototype = {\n  constructor: Quaternion,\n\n  /**\n   * Add b to self\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  add: function add(b) {\n    quat.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate the w component from x, y, z component\n   * @return {clay.Quaternion}\n   */\n  calculateW: function calculateW() {\n    quat.calculateW(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y and z components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @param  {number}  z\n   * @param  {number}  w\n   * @return {clay.Quaternion}\n   */\n  set: function set(x, y, z, w) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this.array[2] = z;\n    this.array[3] = w;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y, z and w components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Quaternion}\n   */\n  setArray: function setArray(arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this.array[2] = arr[2];\n    this.array[3] = arr[3];\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Quaternion\n   * @return {clay.Quaternion}\n   */\n  clone: function clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  },\n\n  /**\n   * Calculates the conjugate of self If the quaternion is normalized,\n   * this function is faster than invert and produces the same result.\n   *\n   * @return {clay.Quaternion}\n   */\n  conjugate: function conjugate() {\n    quat.conjugate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  copy: function copy(b) {\n    quat.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Dot product of self and b\n   * @param  {clay.Quaternion} b\n   * @return {number}\n   */\n  dot: function dot(b) {\n    return quat.dot(this.array, b.array);\n  },\n\n  /**\n   * Set from the given 3x3 rotation matrix\n   * @param  {clay.Matrix3} m\n   * @return {clay.Quaternion}\n   */\n  fromMat3: function fromMat3(m) {\n    quat.fromMat3(this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set from the given 4x4 rotation matrix\n   * The 4th column and 4th row will be droped\n   * @param  {clay.Matrix4} m\n   * @return {clay.Quaternion}\n   */\n  fromMat4: function () {\n    var m3 = mat3.create();\n    return function (m) {\n      mat3.fromMat4(m3, m.array); // TODO Not like mat4, mat3 in glmatrix seems to be row-based\n\n      mat3.transpose(m3, m3);\n      quat.fromMat3(this.array, m3);\n      this._dirty = true;\n      return this;\n    };\n  }(),\n\n  /**\n   * Set to identity quaternion\n   * @return {clay.Quaternion}\n   */\n  identity: function identity() {\n    quat.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Invert self\n   * @return {clay.Quaternion}\n   */\n  invert: function invert() {\n    quat.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function len() {\n    return quat.len(this.array);\n  },\n\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function length() {\n    return quat.length(this.array);\n  },\n\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Quaternion} a\n   * @param  {clay.Quaternion} b\n   * @param  {number}  t\n   * @return {clay.Quaternion}\n   */\n  lerp: function lerp(a, b, t) {\n    quat.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiply\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  mul: function mul(b) {\n    quat.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Quaternion} a\n   * @return {clay.Quaternion}\n   */\n  mulLeft: function mulLeft(a) {\n    quat.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Mutiply self and b\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  multiply: function multiply(b) {\n    quat.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Mutiply a and self\n   * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.\n   * @param  {clay.Quaternion} a\n   * @return {clay.Quaternion}\n   */\n  multiplyLeft: function multiplyLeft(a) {\n    quat.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Normalize self\n   * @return {clay.Quaternion}\n   */\n  normalize: function normalize() {\n    quat.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about X axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateX: function rotateX(rad) {\n    quat.rotateX(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about Y axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateY: function rotateY(rad) {\n    quat.rotateY(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about Z axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateZ: function rotateZ(rad) {\n    quat.rotateZ(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.\n   * a and b needs to be normalized\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @return {clay.Quaternion}\n   */\n  rotationTo: function rotationTo(a, b) {\n    quat.rotationTo(this.array, a.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Sets self with values corresponding to the given axes\n   * @param {clay.Vector3} view\n   * @param {clay.Vector3} right\n   * @param {clay.Vector3} up\n   * @return {clay.Quaternion}\n   */\n  setAxes: function setAxes(view, right, up) {\n    quat.setAxes(this.array, view.array, right.array, up.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Sets self with a rotation axis and rotation angle\n   * @param {clay.Vector3} axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  setAxisAngle: function setAxisAngle(axis, rad) {\n    quat.setAxisAngle(this.array, axis.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Perform spherical linear interpolation between a and b\n   * @param  {clay.Quaternion} a\n   * @param  {clay.Quaternion} b\n   * @param  {number} t\n   * @return {clay.Quaternion}\n   */\n  slerp: function slerp(a, b, t) {\n    quat.slerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function sqrLen() {\n    return quat.sqrLen(this.array);\n  },\n\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function squaredLength() {\n    return quat.squaredLength(this.array);\n  },\n\n  /**\n   * Set from euler\n   * @param {clay.Vector3} v\n   * @param {String} order\n   */\n  fromEuler: function fromEuler(v, order) {\n    return Quaternion.fromEuler(this, v, order);\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty; // Getter and Setter\n\nif (defineProperty) {\n  var proto = Quaternion.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n\n  defineProperty(proto, 'x', {\n    get: function get() {\n      return this.array[0];\n    },\n    set: function set(value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n\n  defineProperty(proto, 'y', {\n    get: function get() {\n      return this.array[1];\n    },\n    set: function set(value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name z\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n\n  defineProperty(proto, 'z', {\n    get: function get() {\n      return this.array[2];\n    },\n    set: function set(value) {\n      this.array[2] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name w\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n\n  defineProperty(proto, 'w', {\n    get: function get() {\n      return this.array[3];\n    },\n    set: function set(value) {\n      this.array[3] = value;\n      this._dirty = true;\n    }\n  });\n} // Supply methods that are not in place\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.add = function (out, a, b) {\n  quat.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {number}     x\n * @param  {number}     y\n * @param  {number}     z\n * @param  {number}     w\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.set = function (out, x, y, z, w) {\n  quat.set(out.array, x, y, z, w);\n  out._dirty = true;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.copy = function (out, b) {\n  quat.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.calculateW = function (out, a) {\n  quat.calculateW(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.conjugate = function (out, a) {\n  quat.conjugate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.identity = function (out) {\n  quat.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.invert = function (out, a) {\n  quat.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {number}\n */\n\n\nQuaternion.dot = function (a, b) {\n  return quat.dot(a.array, b.array);\n};\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\n\n\nQuaternion.len = function (a) {\n  return quat.length(a.array);\n}; // Quaternion.length = Quaternion.len;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.lerp = function (out, a, b, t) {\n  quat.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.slerp = function (out, a, b, t) {\n  quat.slerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.mul = function (out, a, b) {\n  quat.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.multiply = Quaternion.mul;\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\n\nQuaternion.rotateX = function (out, a, rad) {\n  quat.rotateX(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.rotateY = function (out, a, rad) {\n  quat.rotateY(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.rotateZ = function (out, a, rad) {\n  quat.rotateZ(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    axis\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.setAxisAngle = function (out, axis, rad) {\n  quat.setAxisAngle(out.array, axis.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.normalize = function (out, a) {\n  quat.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\n\n\nQuaternion.sqrLen = function (a) {\n  return quat.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Quaternion} a\n * @return {number}\n */\n\n\nQuaternion.squaredLength = Quaternion.sqrLen;\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Matrix3}    m\n * @return {clay.Quaternion}\n */\n\nQuaternion.fromMat3 = function (out, m) {\n  quat.fromMat3(out.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    view\n * @param  {clay.Vector3}    right\n * @param  {clay.Vector3}    up\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.setAxes = function (out, view, right, up) {\n  quat.setAxes(out.array, view.array, right.array, up.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    a\n * @param  {clay.Vector3}    b\n * @return {clay.Quaternion}\n */\n\n\nQuaternion.rotationTo = function (out, a, b) {\n  quat.rotationTo(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * Set quaternion from euler\n * @param {clay.Quaternion} out\n * @param {clay.Vector3} v\n * @param {String} order\n */\n\n\nQuaternion.fromEuler = function (out, v, order) {\n  out._dirty = true;\n  v = v.array;\n  var target = out.array;\n  var c1 = Math.cos(v[0] / 2);\n  var c2 = Math.cos(v[1] / 2);\n  var c3 = Math.cos(v[2] / 2);\n  var s1 = Math.sin(v[0] / 2);\n  var s2 = Math.sin(v[1] / 2);\n  var s3 = Math.sin(v[2] / 2);\n  var order = (order || 'XYZ').toUpperCase(); // http://www.mathworks.com/matlabcentral/fileexchange/\n  //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n  //  content/SpinCalc.m\n\n  switch (order) {\n    case 'XYZ':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case 'YXZ':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n\n    case 'ZXY':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case 'ZYX':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n\n    case 'YZX':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case 'XZY':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n  }\n};\n\nexport default Quaternion;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/math/Quaternion.js"],"names":["quat","mat3","Quaternion","x","y","z","w","undefined","array","fromValues","_dirty","prototype","constructor","add","b","calculateW","set","setArray","arr","clone","conjugate","copy","dot","fromMat3","m","fromMat4","m3","create","transpose","identity","invert","len","length","lerp","a","t","mul","mulLeft","multiply","multiplyLeft","normalize","rotateX","rad","rotateY","rotateZ","rotationTo","setAxes","view","right","up","setAxisAngle","axis","slerp","sqrLen","squaredLength","fromEuler","v","order","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","value","out","target","c1","Math","cos","c2","c3","s1","sin","s2","s3","toUpperCase"],"mappings":"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","sourcesContent":["import quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Quaternion\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\nvar Quaternion = function (x, y, z, w) {\n\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n    w = w === undefined ? 1 : w;\n\n    /**\n     * Storage of Quaternion, read and write of x, y, z, w will change the values in array\n     * All methods also operate on the array instead of x, y, z, w components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Quaternion#\n     */\n    this.array = quat.fromValues(x, y, z, w);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Quaternion#\n     */\n    this._dirty = true;\n};\n\nQuaternion.prototype = {\n\n    constructor: Quaternion,\n\n    /**\n     * Add b to self\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    add: function (b) {\n        quat.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate the w component from x, y, z component\n     * @return {clay.Quaternion}\n     */\n    calculateW: function () {\n        quat.calculateW(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @param  {number}  z\n     * @param  {number}  w\n     * @return {clay.Quaternion}\n     */\n    set: function (x, y, z, w) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this.array[2] = z;\n        this.array[3] = w;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y, z and w components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Quaternion}\n     */\n    setArray: function (arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n        this.array[2] = arr[2];\n        this.array[3] = arr[3];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Quaternion\n     * @return {clay.Quaternion}\n     */\n    clone: function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    },\n\n    /**\n     * Calculates the conjugate of self If the quaternion is normalized,\n     * this function is faster than invert and produces the same result.\n     *\n     * @return {clay.Quaternion}\n     */\n    conjugate: function () {\n        quat.conjugate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    copy: function (b) {\n        quat.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Quaternion} b\n     * @return {number}\n     */\n    dot: function (b) {\n        return quat.dot(this.array, b.array);\n    },\n\n    /**\n     * Set from the given 3x3 rotation matrix\n     * @param  {clay.Matrix3} m\n     * @return {clay.Quaternion}\n     */\n    fromMat3: function (m) {\n        quat.fromMat3(this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set from the given 4x4 rotation matrix\n     * The 4th column and 4th row will be droped\n     * @param  {clay.Matrix4} m\n     * @return {clay.Quaternion}\n     */\n    fromMat4: (function () {\n        var m3 = mat3.create();\n        return function (m) {\n            mat3.fromMat4(m3, m.array);\n            // TODO Not like mat4, mat3 in glmatrix seems to be row-based\n            mat3.transpose(m3, m3);\n            quat.fromMat3(this.array, m3);\n            this._dirty = true;\n            return this;\n        };\n    })(),\n\n    /**\n     * Set to identity quaternion\n     * @return {clay.Quaternion}\n     */\n    identity: function () {\n        quat.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Invert self\n     * @return {clay.Quaternion}\n     */\n    invert: function () {\n        quat.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function () {\n        return quat.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function () {\n        return quat.length(this.array);\n    },\n\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Quaternion} a\n     * @param  {clay.Quaternion} b\n     * @param  {number}  t\n     * @return {clay.Quaternion}\n     */\n    lerp: function (a, b, t) {\n        quat.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    mul: function (b) {\n        quat.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Quaternion} a\n     * @return {clay.Quaternion}\n     */\n    mulLeft: function (a) {\n        quat.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    multiply: function (b) {\n        quat.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply a and self\n     * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.\n     * @param  {clay.Quaternion} a\n     * @return {clay.Quaternion}\n     */\n    multiplyLeft: function (a) {\n        quat.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Quaternion}\n     */\n    normalize: function () {\n        quat.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about X axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateX: function (rad) {\n        quat.rotateX(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Y axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateY: function (rad) {\n        quat.rotateY(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Z axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateZ: function (rad) {\n        quat.rotateZ(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.\n     * a and b needs to be normalized\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @return {clay.Quaternion}\n     */\n    rotationTo: function (a, b) {\n        quat.rotationTo(this.array, a.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Sets self with values corresponding to the given axes\n     * @param {clay.Vector3} view\n     * @param {clay.Vector3} right\n     * @param {clay.Vector3} up\n     * @return {clay.Quaternion}\n     */\n    setAxes: function (view, right, up) {\n        quat.setAxes(this.array, view.array, right.array, up.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Sets self with a rotation axis and rotation angle\n     * @param {clay.Vector3} axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    setAxisAngle: function (axis, rad) {\n        quat.setAxisAngle(this.array, axis.array, rad);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Perform spherical linear interpolation between a and b\n     * @param  {clay.Quaternion} a\n     * @param  {clay.Quaternion} b\n     * @param  {number} t\n     * @return {clay.Quaternion}\n     */\n    slerp: function (a, b, t) {\n        quat.slerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function () {\n        return quat.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function () {\n        return quat.squaredLength(this.array);\n    },\n\n    /**\n     * Set from euler\n     * @param {clay.Vector3} v\n     * @param {String} order\n     */\n    fromEuler: function (v, order) {\n        return Quaternion.fromEuler(this, v, order);\n    },\n\n    toString: function () {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n\n    var proto = Quaternion.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name z\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            return this.array[2];\n        },\n        set: function (value) {\n            this.array[2] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name w\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'w', {\n        get: function () {\n            return this.array[3];\n        },\n        set: function (value) {\n            this.array[3] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.add = function (out, a, b) {\n    quat.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {number}     x\n * @param  {number}     y\n * @param  {number}     z\n * @param  {number}     w\n * @return {clay.Quaternion}\n */\nQuaternion.set = function (out, x, y, z, w) {\n    quat.set(out.array, x, y, z, w);\n    out._dirty = true;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.copy = function (out, b) {\n    quat.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.calculateW = function (out, a) {\n    quat.calculateW(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.conjugate = function (out, a) {\n    quat.conjugate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @return {clay.Quaternion}\n */\nQuaternion.identity = function (out) {\n    quat.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.invert = function (out, a) {\n    quat.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {number}\n */\nQuaternion.dot = function (a, b) {\n    return quat.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.len = function (a) {\n    return quat.length(a.array);\n};\n\n// Quaternion.length = Quaternion.len;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.lerp = function (out, a, b, t) {\n    quat.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.slerp = function (out, a, b, t) {\n    quat.slerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.mul = function (out, a, b) {\n    quat.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.multiply = Quaternion.mul;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateX = function (out, a, rad) {\n    quat.rotateX(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateY = function (out, a, rad) {\n    quat.rotateY(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateZ = function (out, a, rad) {\n    quat.rotateZ(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    axis\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.setAxisAngle = function (out, axis, rad) {\n    quat.setAxisAngle(out.array, axis.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.normalize = function (out, a) {\n    quat.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.sqrLen = function (a) {\n    return quat.sqrLen(a.array);\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.squaredLength = Quaternion.sqrLen;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Matrix3}    m\n * @return {clay.Quaternion}\n */\nQuaternion.fromMat3 = function (out, m) {\n    quat.fromMat3(out.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    view\n * @param  {clay.Vector3}    right\n * @param  {clay.Vector3}    up\n * @return {clay.Quaternion}\n */\nQuaternion.setAxes = function (out, view, right, up) {\n    quat.setAxes(out.array, view.array, right.array, up.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    a\n * @param  {clay.Vector3}    b\n * @return {clay.Quaternion}\n */\nQuaternion.rotationTo = function (out, a, b) {\n    quat.rotationTo(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * Set quaternion from euler\n * @param {clay.Quaternion} out\n * @param {clay.Vector3} v\n * @param {String} order\n */\nQuaternion.fromEuler = function (out, v, order) {\n\n    out._dirty = true;\n\n    v = v.array;\n    var target = out.array;\n    var c1 = Math.cos(v[0] / 2);\n    var c2 = Math.cos(v[1] / 2);\n    var c3 = Math.cos(v[2] / 2);\n    var s1 = Math.sin(v[0] / 2);\n    var s2 = Math.sin(v[1] / 2);\n    var s3 = Math.sin(v[2] / 2);\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //  content/SpinCalc.m\n\n    switch (order) {\n        case 'XYZ':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'YXZ':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n        case 'ZXY':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'ZYX':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n        case 'YZX':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'XZY':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n    }\n};\n\nexport default Quaternion;\n"]},"metadata":{},"sourceType":"module"}