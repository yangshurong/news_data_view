{"ast":null,"code":"import Geometry from '../Geometry';\nimport BoundingBox from '../math/BoundingBox';\n/**\n * @constructor clay.geometry.Plane\n * @extends clay.Geometry\n * @param {Object} [opt]\n * @param {number} [opt.widthSegments]\n * @param {number} [opt.heightSegments]\n */\n\nvar Plane = Geometry.extend(\n/** @lends clay.geometry.Plane# */\n{\n  dynamic: false,\n\n  /**\n   * @type {number}\n   */\n  widthSegments: 1,\n\n  /**\n   * @type {number}\n   */\n  heightSegments: 1\n}, function () {\n  this.build();\n},\n/** @lends clay.geometry.Plane.prototype */\n{\n  /**\n   * Build plane geometry\n   */\n  build: function build() {\n    var heightSegments = this.heightSegments;\n    var widthSegments = this.widthSegments;\n    var attributes = this.attributes;\n    var positions = [];\n    var texcoords = [];\n    var normals = [];\n    var faces = [];\n\n    for (var y = 0; y <= heightSegments; y++) {\n      var t = y / heightSegments;\n\n      for (var x = 0; x <= widthSegments; x++) {\n        var s = x / widthSegments;\n        positions.push([2 * s - 1, 2 * t - 1, 0]);\n\n        if (texcoords) {\n          texcoords.push([s, t]);\n        }\n\n        if (normals) {\n          normals.push([0, 0, 1]);\n        }\n\n        if (x < widthSegments && y < heightSegments) {\n          var i = x + y * (widthSegments + 1);\n          faces.push([i, i + 1, i + widthSegments + 1]);\n          faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);\n        }\n      }\n    }\n\n    attributes.position.fromArray(positions);\n    attributes.texcoord0.fromArray(texcoords);\n    attributes.normal.fromArray(normals);\n    this.initIndicesFromArray(faces);\n    this.boundingBox = new BoundingBox();\n    this.boundingBox.min.set(-1, -1, 0);\n    this.boundingBox.max.set(1, 1, 0);\n  }\n});\nexport default Plane;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/geometry/Plane.js"],"names":["Geometry","BoundingBox","Plane","extend","dynamic","widthSegments","heightSegments","build","attributes","positions","texcoords","normals","faces","y","t","x","s","push","i","position","fromArray","texcoord0","normal","initIndicesFromArray","boundingBox","min","set","max"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAGF,QAAQ,CAACG,MAAT;AACZ;AACA;AACIC,EAAAA,OAAO,EAAE,KADb;;AAEI;AACJ;AACA;AACIC,EAAAA,aAAa,EAAE,CALnB;;AAMI;AACJ;AACA;AACIC,EAAAA,cAAc,EAAE;AATpB,CAFY,EAYT,YAAW;AACV,OAAKC,KAAL;AACH,CAdW;AAeZ;AACA;AACI;AACJ;AACA;AACIA,EAAAA,KAAK,EAAE,iBAAW;AACd,QAAID,cAAc,GAAG,KAAKA,cAA1B;AACA,QAAID,aAAa,GAAG,KAAKA,aAAzB;AACA,QAAIG,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,cAArB,EAAqCO,CAAC,EAAtC,EAA0C;AACtC,UAAIC,CAAC,GAAGD,CAAC,GAAGP,cAAZ;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIV,aAArB,EAAoCU,CAAC,EAArC,EAAyC;AACrC,YAAIC,CAAC,GAAGD,CAAC,GAAGV,aAAZ;AAEAI,QAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,IAAID,CAAJ,GAAQ,CAAT,EAAY,IAAIF,CAAJ,GAAQ,CAApB,EAAuB,CAAvB,CAAf;;AACA,YAAIJ,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAACO,IAAV,CAAe,CAACD,CAAD,EAAIF,CAAJ,CAAf;AACH;;AACD,YAAIH,OAAJ,EAAa;AACTA,UAAAA,OAAO,CAACM,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACH;;AACD,YAAIF,CAAC,GAAGV,aAAJ,IAAqBQ,CAAC,GAAGP,cAA7B,EAA6C;AACzC,cAAIY,CAAC,GAAGH,CAAC,GAAGF,CAAC,IAAIR,aAAa,GAAG,CAApB,CAAb;AACAO,UAAAA,KAAK,CAACK,IAAN,CAAW,CAACC,CAAD,EAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGb,aAAJ,GAAoB,CAA/B,CAAX;AACAO,UAAAA,KAAK,CAACK,IAAN,CAAW,CAACC,CAAC,GAAGb,aAAJ,GAAoB,CAArB,EAAwBa,CAAC,GAAG,CAA5B,EAA+BA,CAAC,GAAGb,aAAJ,GAAoB,CAAnD,CAAX;AACH;AACJ;AACJ;;AAEDG,IAAAA,UAAU,CAACW,QAAX,CAAoBC,SAApB,CAA8BX,SAA9B;AACAD,IAAAA,UAAU,CAACa,SAAX,CAAqBD,SAArB,CAA+BV,SAA/B;AACAF,IAAAA,UAAU,CAACc,MAAX,CAAkBF,SAAlB,CAA4BT,OAA5B;AAEA,SAAKY,oBAAL,CAA0BX,KAA1B;AAEA,SAAKY,WAAL,GAAmB,IAAIvB,WAAJ,EAAnB;AACA,SAAKuB,WAAL,CAAiBC,GAAjB,CAAqBC,GAArB,CAAyB,CAAC,CAA1B,EAA6B,CAAC,CAA9B,EAAiC,CAAjC;AACA,SAAKF,WAAL,CAAiBG,GAAjB,CAAqBD,GAArB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AACH;AA1CL,CAhBY,CAAZ;AA6DA,eAAexB,KAAf","sourcesContent":["import Geometry from '../Geometry';\nimport BoundingBox from '../math/BoundingBox';\n\n/**\n * @constructor clay.geometry.Plane\n * @extends clay.Geometry\n * @param {Object} [opt]\n * @param {number} [opt.widthSegments]\n * @param {number} [opt.heightSegments]\n */\nvar Plane = Geometry.extend(\n/** @lends clay.geometry.Plane# */\n{\n    dynamic: false,\n    /**\n     * @type {number}\n     */\n    widthSegments: 1,\n    /**\n     * @type {number}\n     */\n    heightSegments: 1\n}, function() {\n    this.build();\n},\n/** @lends clay.geometry.Plane.prototype */\n{\n    /**\n     * Build plane geometry\n     */\n    build: function() {\n        var heightSegments = this.heightSegments;\n        var widthSegments = this.widthSegments;\n        var attributes = this.attributes;\n        var positions = [];\n        var texcoords = [];\n        var normals = [];\n        var faces = [];\n\n        for (var y = 0; y <= heightSegments; y++) {\n            var t = y / heightSegments;\n            for (var x = 0; x <= widthSegments; x++) {\n                var s = x / widthSegments;\n\n                positions.push([2 * s - 1, 2 * t - 1, 0]);\n                if (texcoords) {\n                    texcoords.push([s, t]);\n                }\n                if (normals) {\n                    normals.push([0, 0, 1]);\n                }\n                if (x < widthSegments && y < heightSegments) {\n                    var i = x + y * (widthSegments + 1);\n                    faces.push([i, i + 1, i + widthSegments + 1]);\n                    faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);\n                }\n            }\n        }\n\n        attributes.position.fromArray(positions);\n        attributes.texcoord0.fromArray(texcoords);\n        attributes.normal.fromArray(normals);\n\n        this.initIndicesFromArray(faces);\n\n        this.boundingBox = new BoundingBox();\n        this.boundingBox.min.set(-1, -1, 0);\n        this.boundingBox.max.set(1, 1, 0);\n    }\n});\n\nexport default Plane;\n"]},"metadata":{},"sourceType":"module"}