{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport SurfaceSeries from './SurfaceSeries';\nimport SurfaceView from './SurfaceView';\nexport function install(registers) {\n  registers.registerChartView(SurfaceView);\n  registers.registerSeriesModel(SurfaceSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('surface', function (surfaceModel) {\n      var cartesian = surfaceModel.coordinateSystem;\n\n      if (!cartesian || cartesian.type !== 'cartesian3D') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Surface chart only support cartesian3D coordinateSystem');\n        }\n      }\n\n      var data = surfaceModel.getData();\n      var points = new Float32Array(3 * data.count());\n      var nanPoint = [NaN, NaN, NaN];\n\n      if (cartesian && cartesian.type === 'cartesian3D') {\n        var coordDims = cartesian.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return surfaceModel.coordDimToDataDim(coordDim)[0];\n        });\n        data.each(dims, function (x, y, z, idx) {\n          var pt;\n\n          if (!data.hasValue(idx)) {\n            pt = nanPoint;\n          } else {\n            pt = cartesian.dataToPoint([x, y, z]);\n          }\n\n          points[idx * 3] = pt[0];\n          points[idx * 3 + 1] = pt[1];\n          points[idx * 3 + 2] = pt[2];\n        });\n      }\n\n      data.setLayout('points', points);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/surface/install.js"],"names":["SurfaceSeries","SurfaceView","install","registers","registerChartView","registerSeriesModel","registerLayout","ecModel","api","eachSeriesByType","surfaceModel","cartesian","coordinateSystem","type","process","env","NODE_ENV","console","error","data","getData","points","Float32Array","count","nanPoint","NaN","coordDims","dimensions","dims","map","coordDim","coordDimToDataDim","each","x","y","z","idx","pt","hasValue","dataToPoint","setLayout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjCA,EAAAA,SAAS,CAACC,iBAAV,CAA4BH,WAA5B;AACAE,EAAAA,SAAS,CAACE,mBAAV,CAA8BL,aAA9B;AACAG,EAAAA,SAAS,CAACG,cAAV,CAAyB,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC/CD,IAAAA,OAAO,CAACE,gBAAR,CAAyB,SAAzB,EAAoC,UAAUC,YAAV,EAAwB;AAC1D,UAAIC,SAAS,GAAGD,YAAY,CAACE,gBAA7B;;AAEA,UAAI,CAACD,SAAD,IAAcA,SAAS,CAACE,IAAV,KAAmB,aAArC,EAAoD;AAClD,YAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,UAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACD;AACF;;AAED,UAAIC,IAAI,GAAGT,YAAY,CAACU,OAAb,EAAX;AACA,UAAIC,MAAM,GAAG,IAAIC,YAAJ,CAAiB,IAAIH,IAAI,CAACI,KAAL,EAArB,CAAb;AACA,UAAIC,QAAQ,GAAG,CAACC,GAAD,EAAMA,GAAN,EAAWA,GAAX,CAAf;;AAEA,UAAId,SAAS,IAAIA,SAAS,CAACE,IAAV,KAAmB,aAApC,EAAmD;AACjD,YAAIa,SAAS,GAAGf,SAAS,CAACgB,UAA1B;AACA,YAAIC,IAAI,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAUC,QAAV,EAAoB;AAC3C,iBAAOpB,YAAY,CAACqB,iBAAb,CAA+BD,QAA/B,EAAyC,CAAzC,CAAP;AACD,SAFU,CAAX;AAGAX,QAAAA,IAAI,CAACa,IAAL,CAAUJ,IAAV,EAAgB,UAAUK,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,GAAnB,EAAwB;AACtC,cAAIC,EAAJ;;AAEA,cAAI,CAAClB,IAAI,CAACmB,QAAL,CAAcF,GAAd,CAAL,EAAyB;AACvBC,YAAAA,EAAE,GAAGb,QAAL;AACD,WAFD,MAEO;AACLa,YAAAA,EAAE,GAAG1B,SAAS,CAAC4B,WAAV,CAAsB,CAACN,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAtB,CAAL;AACD;;AAEDd,UAAAA,MAAM,CAACe,GAAG,GAAG,CAAP,CAAN,GAAkBC,EAAE,CAAC,CAAD,CAApB;AACAhB,UAAAA,MAAM,CAACe,GAAG,GAAG,CAAN,GAAU,CAAX,CAAN,GAAsBC,EAAE,CAAC,CAAD,CAAxB;AACAhB,UAAAA,MAAM,CAACe,GAAG,GAAG,CAAN,GAAU,CAAX,CAAN,GAAsBC,EAAE,CAAC,CAAD,CAAxB;AACD,SAZD;AAaD;;AAEDlB,MAAAA,IAAI,CAACqB,SAAL,CAAe,QAAf,EAAyBnB,MAAzB;AACD,KAlCD;AAmCD,GApCD;AAqCD","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport SurfaceSeries from './SurfaceSeries';\nimport SurfaceView from './SurfaceView';\nexport function install(registers) {\n  registers.registerChartView(SurfaceView);\n  registers.registerSeriesModel(SurfaceSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('surface', function (surfaceModel) {\n      var cartesian = surfaceModel.coordinateSystem;\n\n      if (!cartesian || cartesian.type !== 'cartesian3D') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Surface chart only support cartesian3D coordinateSystem');\n        }\n      }\n\n      var data = surfaceModel.getData();\n      var points = new Float32Array(3 * data.count());\n      var nanPoint = [NaN, NaN, NaN];\n\n      if (cartesian && cartesian.type === 'cartesian3D') {\n        var coordDims = cartesian.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return surfaceModel.coordDimToDataDim(coordDim)[0];\n        });\n        data.each(dims, function (x, y, z, idx) {\n          var pt;\n\n          if (!data.hasValue(idx)) {\n            pt = nanPoint;\n          } else {\n            pt = cartesian.dataToPoint([x, y, z]);\n          }\n\n          points[idx * 3] = pt[0];\n          points[idx * 3 + 1] = pt[1];\n          points[idx * 3 + 2] = pt[2];\n        });\n      }\n\n      data.setLayout('points', points);\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}