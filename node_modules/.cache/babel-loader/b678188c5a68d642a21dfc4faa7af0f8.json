{"ast":null,"code":"import \"core-js/modules/es.string.sub.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport vec4 from '../glmatrix/vec4';\n/**\n * @constructor\n * @alias clay.Vector4\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\n\nvar Vector4 = function Vector4(x, y, z, w) {\n  x = x || 0;\n  y = y || 0;\n  z = z || 0;\n  w = w || 0;\n  /**\n   * Storage of Vector4, read and write of x, y, z, w will change the values in array\n   * All methods also operate on the array instead of x, y, z, w components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Vector4#\n   */\n\n  this.array = vec4.fromValues(x, y, z, w);\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Vector4#\n   */\n\n  this._dirty = true;\n};\n\nVector4.prototype = {\n  constructor: Vector4,\n\n  /**\n   * Add b to self\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  add: function add(b) {\n    vec4.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y and z components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @param  {number}  z\n   * @param  {number}  w\n   * @return {clay.Vector4}\n   */\n  set: function set(x, y, z, w) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this.array[2] = z;\n    this.array[3] = w;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x, y, z and w components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Vector4}\n   */\n  setArray: function setArray(arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this.array[2] = arr[2];\n    this.array[3] = arr[3];\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Vector4\n   * @return {clay.Vector4}\n   */\n  clone: function clone() {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  copy: function copy(b) {\n    vec4.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for distance\n   * @param  {clay.Vector4} b\n   * @return {number}\n   */\n  dist: function dist(b) {\n    return vec4.dist(this.array, b.array);\n  },\n\n  /**\n   * Distance between self and b\n   * @param  {clay.Vector4} b\n   * @return {number}\n   */\n  distance: function distance(b) {\n    return vec4.distance(this.array, b.array);\n  },\n\n  /**\n   * Alias for divide\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  div: function div(b) {\n    vec4.div(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Divide self by b\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  divide: function divide(b) {\n    vec4.divide(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Dot product of self and b\n   * @param  {clay.Vector4} b\n   * @return {number}\n   */\n  dot: function dot(b) {\n    return vec4.dot(this.array, b.array);\n  },\n\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function len() {\n    return vec4.len(this.array);\n  },\n\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function length() {\n    return vec4.length(this.array);\n  },\n\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Vector4} a\n   * @param  {clay.Vector4} b\n   * @param  {number}  t\n   * @return {clay.Vector4}\n   */\n  lerp: function lerp(a, b, t) {\n    vec4.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Minimum of self and b\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  min: function min(b) {\n    vec4.min(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Maximum of self and b\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  max: function max(b) {\n    vec4.max(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiply\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  mul: function mul(b) {\n    vec4.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Mutiply self and b\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  multiply: function multiply(b) {\n    vec4.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Negate self\n   * @return {clay.Vector4}\n   */\n  negate: function negate() {\n    vec4.negate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Normalize self\n   * @return {clay.Vector4}\n   */\n  normalize: function normalize() {\n    vec4.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Generate random x, y, z, w components with a given scale\n   * @param  {number} scale\n   * @return {clay.Vector4}\n   */\n  random: function random(scale) {\n    vec4.random(this.array, scale);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self\n   * @param  {number}  scale\n   * @return {clay.Vector4}\n   */\n  scale: function scale(s) {\n    vec4.scale(this.array, this.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale b and add to self\n   * @param  {clay.Vector4} b\n   * @param  {number}  scale\n   * @return {clay.Vector4}\n   */\n  scaleAndAdd: function scaleAndAdd(b, s) {\n    vec4.scaleAndAdd(this.array, this.array, b.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for squaredDistance\n   * @param  {clay.Vector4} b\n   * @return {number}\n   */\n  sqrDist: function sqrDist(b) {\n    return vec4.sqrDist(this.array, b.array);\n  },\n\n  /**\n   * Squared distance between self and b\n   * @param  {clay.Vector4} b\n   * @return {number}\n   */\n  squaredDistance: function squaredDistance(b) {\n    return vec4.squaredDistance(this.array, b.array);\n  },\n\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function sqrLen() {\n    return vec4.sqrLen(this.array);\n  },\n\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function squaredLength() {\n    return vec4.squaredLength(this.array);\n  },\n\n  /**\n   * Alias for subtract\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  sub: function sub(b) {\n    vec4.sub(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Subtract b from self\n   * @param  {clay.Vector4} b\n   * @return {clay.Vector4}\n   */\n  subtract: function subtract(b) {\n    vec4.subtract(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix4 m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector4}\n   */\n  transformMat4: function transformMat4(m) {\n    vec4.transformMat4(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Quaternion q\n   * @param  {clay.Quaternion} q\n   * @return {clay.Vector4}\n   */\n  transformQuat: function transformQuat(q) {\n    vec4.transformQuat(this.array, this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty; // Getter and Setter\n\nif (defineProperty) {\n  var proto = Vector4.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Vector4\n   * @instance\n   */\n\n  defineProperty(proto, 'x', {\n    get: function get() {\n      return this.array[0];\n    },\n    set: function set(value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Vector4\n   * @instance\n   */\n\n  defineProperty(proto, 'y', {\n    get: function get() {\n      return this.array[1];\n    },\n    set: function set(value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name z\n   * @type {number}\n   * @memberOf clay.Vector4\n   * @instance\n   */\n\n  defineProperty(proto, 'z', {\n    get: function get() {\n      return this.array[2];\n    },\n    set: function set(value) {\n      this.array[2] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name w\n   * @type {number}\n   * @memberOf clay.Vector4\n   * @instance\n   */\n\n  defineProperty(proto, 'w', {\n    get: function get() {\n      return this.array[3];\n    },\n    set: function set(value) {\n      this.array[3] = value;\n      this._dirty = true;\n    }\n  });\n} // Supply methods that are not in place\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.add = function (out, a, b) {\n  vec4.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector4}\n */\n\n\nVector4.set = function (out, x, y, z, w) {\n  vec4.set(out.array, x, y, z, w);\n  out._dirty = true;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.copy = function (out, b) {\n  vec4.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\n\n\nVector4.dist = function (a, b) {\n  return vec4.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\n\n\nVector4.distance = Vector4.dist;\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\nVector4.div = function (out, a, b) {\n  vec4.divide(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.divide = Vector4.div;\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\n\nVector4.dot = function (a, b) {\n  return vec4.dot(a.array, b.array);\n};\n/**\n * @param  {clay.Vector4} a\n * @return {number}\n */\n\n\nVector4.len = function (b) {\n  return vec4.length(b.array);\n}; // Vector4.length = Vector4.len;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @param  {number}  t\n * @return {clay.Vector4}\n */\n\n\nVector4.lerp = function (out, a, b, t) {\n  vec4.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.min = function (out, a, b) {\n  vec4.min(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.max = function (out, a, b) {\n  vec4.max(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.mul = function (out, a, b) {\n  vec4.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.multiply = Vector4.mul;\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @return {clay.Vector4}\n */\n\nVector4.negate = function (out, a) {\n  vec4.negate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @return {clay.Vector4}\n */\n\n\nVector4.normalize = function (out, a) {\n  vec4.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\n\n\nVector4.random = function (out, scale) {\n  vec4.random(out.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\n\n\nVector4.scale = function (out, a, scale) {\n  vec4.scale(out.array, a.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\n\n\nVector4.scaleAndAdd = function (out, a, b, scale) {\n  vec4.scaleAndAdd(out.array, a.array, b.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\n\n\nVector4.sqrDist = function (a, b) {\n  return vec4.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\n\n\nVector4.squaredDistance = Vector4.sqrDist;\n/**\n * @param  {clay.Vector4} a\n * @return {number}\n */\n\nVector4.sqrLen = function (a) {\n  return vec4.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector4} a\n * @return {number}\n */\n\n\nVector4.squaredLength = Vector4.sqrLen;\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\nVector4.sub = function (out, a, b) {\n  vec4.subtract(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\n\n\nVector4.subtract = Vector4.sub;\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector4}\n */\n\nVector4.transformMat4 = function (out, a, m) {\n  vec4.transformMat4(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector4}\n */\n\n\nVector4.transformQuat = function (out, a, q) {\n  vec4.transformQuat(out.array, a.array, q.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Vector4;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/math/Vector4.js"],"names":["vec4","Vector4","x","y","z","w","array","fromValues","_dirty","prototype","constructor","add","b","set","setArray","arr","clone","copy","dist","distance","div","divide","dot","len","length","lerp","a","t","min","max","mul","multiply","negate","normalize","random","scale","s","scaleAndAdd","sqrDist","squaredDistance","sqrLen","squaredLength","sub","subtract","transformMat4","m","transformQuat","q","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","value","out"],"mappings":"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","sourcesContent":["import vec4 from '../glmatrix/vec4';\n\n/**\n * @constructor\n * @alias clay.Vector4\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\nvar Vector4 = function(x, y, z, w) {\n\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n    w = w || 0;\n\n    /**\n     * Storage of Vector4, read and write of x, y, z, w will change the values in array\n     * All methods also operate on the array instead of x, y, z, w components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Vector4#\n     */\n    this.array = vec4.fromValues(x, y, z, w);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Vector4#\n     */\n    this._dirty = true;\n};\n\nVector4.prototype = {\n\n    constructor: Vector4,\n\n    /**\n     * Add b to self\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    add: function(b) {\n        vec4.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @param  {number}  z\n     * @param  {number}  w\n     * @return {clay.Vector4}\n     */\n    set: function(x, y, z, w) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this.array[2] = z;\n        this.array[3] = w;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y, z and w components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Vector4}\n     */\n    setArray: function(arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n        this.array[2] = arr[2];\n        this.array[3] = arr[3];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Vector4\n     * @return {clay.Vector4}\n     */\n    clone: function() {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    copy: function(b) {\n        vec4.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for distance\n     * @param  {clay.Vector4} b\n     * @return {number}\n     */\n    dist: function(b) {\n        return vec4.dist(this.array, b.array);\n    },\n\n    /**\n     * Distance between self and b\n     * @param  {clay.Vector4} b\n     * @return {number}\n     */\n    distance: function(b) {\n        return vec4.distance(this.array, b.array);\n    },\n\n    /**\n     * Alias for divide\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    div: function(b) {\n        vec4.div(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Divide self by b\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    divide: function(b) {\n        vec4.divide(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Vector4} b\n     * @return {number}\n     */\n    dot: function(b) {\n        return vec4.dot(this.array, b.array);\n    },\n\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function() {\n        return vec4.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function() {\n        return vec4.length(this.array);\n    },\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Vector4} a\n     * @param  {clay.Vector4} b\n     * @param  {number}  t\n     * @return {clay.Vector4}\n     */\n    lerp: function(a, b, t) {\n        vec4.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Minimum of self and b\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    min: function(b) {\n        vec4.min(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Maximum of self and b\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    max: function(b) {\n        vec4.max(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    mul: function(b) {\n        vec4.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    multiply: function(b) {\n        vec4.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Negate self\n     * @return {clay.Vector4}\n     */\n    negate: function() {\n        vec4.negate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Vector4}\n     */\n    normalize: function() {\n        vec4.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Generate random x, y, z, w components with a given scale\n     * @param  {number} scale\n     * @return {clay.Vector4}\n     */\n    random: function(scale) {\n        vec4.random(this.array, scale);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self\n     * @param  {number}  scale\n     * @return {clay.Vector4}\n     */\n    scale: function(s) {\n        vec4.scale(this.array, this.array, s);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Scale b and add to self\n     * @param  {clay.Vector4} b\n     * @param  {number}  scale\n     * @return {clay.Vector4}\n     */\n    scaleAndAdd: function(b, s) {\n        vec4.scaleAndAdd(this.array, this.array, b.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredDistance\n     * @param  {clay.Vector4} b\n     * @return {number}\n     */\n    sqrDist: function(b) {\n        return vec4.sqrDist(this.array, b.array);\n    },\n\n    /**\n     * Squared distance between self and b\n     * @param  {clay.Vector4} b\n     * @return {number}\n     */\n    squaredDistance: function(b) {\n        return vec4.squaredDistance(this.array, b.array);\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function() {\n        return vec4.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function() {\n        return vec4.squaredLength(this.array);\n    },\n\n    /**\n     * Alias for subtract\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    sub: function(b) {\n        vec4.sub(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Subtract b from self\n     * @param  {clay.Vector4} b\n     * @return {clay.Vector4}\n     */\n    subtract: function(b) {\n        vec4.subtract(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix4 m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector4}\n     */\n    transformMat4: function(m) {\n        vec4.transformMat4(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Quaternion q\n     * @param  {clay.Quaternion} q\n     * @return {clay.Vector4}\n     */\n    transformQuat: function(q) {\n        vec4.transformQuat(this.array, this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n\n    var proto = Vector4.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Vector4\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Vector4\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name z\n     * @type {number}\n     * @memberOf clay.Vector4\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            return this.array[2];\n        },\n        set: function (value) {\n            this.array[2] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name w\n     * @type {number}\n     * @memberOf clay.Vector4\n     * @instance\n     */\n    defineProperty(proto, 'w', {\n        get: function () {\n            return this.array[3];\n        },\n        set: function (value) {\n            this.array[3] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.add = function(out, a, b) {\n    vec4.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector4}\n */\nVector4.set = function(out, x, y, z, w) {\n    vec4.set(out.array, x, y, z, w);\n    out._dirty = true;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.copy = function(out, b) {\n    vec4.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\nVector4.dist = function(a, b) {\n    return vec4.distance(a.array, b.array);\n};\n\n/**\n * @function\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\nVector4.distance = Vector4.dist;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.div = function(out, a, b) {\n    vec4.divide(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.divide = Vector4.div;\n\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\nVector4.dot = function(a, b) {\n    return vec4.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector4} a\n * @return {number}\n */\nVector4.len = function(b) {\n    return vec4.length(b.array);\n};\n\n// Vector4.length = Vector4.len;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @param  {number}  t\n * @return {clay.Vector4}\n */\nVector4.lerp = function(out, a, b, t) {\n    vec4.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.min = function(out, a, b) {\n    vec4.min(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.max = function(out, a, b) {\n    vec4.max(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.mul = function(out, a, b) {\n    vec4.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.multiply = Vector4.mul;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @return {clay.Vector4}\n */\nVector4.negate = function(out, a) {\n    vec4.negate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @return {clay.Vector4}\n */\nVector4.normalize = function(out, a) {\n    vec4.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\nVector4.random = function(out, scale) {\n    vec4.random(out.array, scale);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\nVector4.scale = function(out, a, scale) {\n    vec4.scale(out.array, a.array, scale);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @param  {number}  scale\n * @return {clay.Vector4}\n */\nVector4.scaleAndAdd = function(out, a, b, scale) {\n    vec4.scaleAndAdd(out.array, a.array, b.array, scale);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\nVector4.sqrDist = function(a, b) {\n    return vec4.sqrDist(a.array, b.array);\n};\n\n/**\n * @function\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {number}\n */\nVector4.squaredDistance = Vector4.sqrDist;\n\n/**\n * @param  {clay.Vector4} a\n * @return {number}\n */\nVector4.sqrLen = function(a) {\n    return vec4.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector4} a\n * @return {number}\n */\nVector4.squaredLength = Vector4.sqrLen;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.sub = function(out, a, b) {\n    vec4.subtract(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Vector4} b\n * @return {clay.Vector4}\n */\nVector4.subtract = Vector4.sub;\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector4}\n */\nVector4.transformMat4 = function(out, a, m) {\n    vec4.transformMat4(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector4} out\n * @param  {clay.Vector4} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector4}\n */\nVector4.transformQuat = function(out, a, q) {\n    vec4.transformQuat(out.array, a.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Vector4;\n"]},"metadata":{},"sourceType":"module"}