{"ast":null,"code":"// NormalPass will generate normal and depth data.\n// TODO Animation\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Material from 'claygl/src/Material';\nimport Pass from 'claygl/src/compositor/Pass';\nimport textureUtil from 'claygl/src/util/texture';\nimport normalGLSL from '../util/shader/normal.glsl.js';\nShader.import(normalGLSL);\n\nfunction attachTextureToSlot(renderer, program, symbol, texture, slot) {\n  var gl = renderer.gl;\n  program.setUniform(gl, '1i', symbol, slot);\n  gl.activeTexture(gl.TEXTURE0 + slot); // Maybe texture is not loaded yet;\n\n  if (texture.isRenderable()) {\n    texture.bind(renderer);\n  } else {\n    // Bind texture to null\n    texture.unbind(renderer);\n  }\n} // TODO Use globalShader insteadof globalMaterial?\n\n\nfunction getBeforeRenderHook(renderer, defaultNormalMap, defaultBumpMap, defaultRoughnessMap, normalMaterial) {\n  var previousNormalMap;\n  var previousBumpMap;\n  var previousRoughnessMap;\n  var previousRenderable;\n  var gl = renderer.gl;\n  return function (renderable, normalMaterial, prevNormalMaterial) {\n    // Material not change\n    if (previousRenderable && previousRenderable.material === renderable.material) {\n      return;\n    }\n\n    var material = renderable.material;\n    var program = renderable.__program;\n    var roughness = material.get('roughness');\n\n    if (roughness == null) {\n      roughness = 1;\n    }\n\n    var normalMap = material.get('normalMap') || defaultNormalMap;\n    var roughnessMap = material.get('roughnessMap');\n    var bumpMap = material.get('bumpMap');\n    var uvRepeat = material.get('uvRepeat');\n    var uvOffset = material.get('uvOffset');\n    var detailUvRepeat = material.get('detailUvRepeat');\n    var detailUvOffset = material.get('detailUvOffset');\n    var useBumpMap = !!bumpMap && material.isTextureEnabled('bumpMap');\n    var useRoughnessMap = !!roughnessMap && material.isTextureEnabled('roughnessMap');\n    var doubleSide = material.isDefined('fragment', 'DOUBLE_SIDED');\n    bumpMap = bumpMap || defaultBumpMap;\n    roughnessMap = roughnessMap || defaultRoughnessMap;\n\n    if (prevNormalMaterial !== normalMaterial) {\n      normalMaterial.set('normalMap', normalMap);\n      normalMaterial.set('bumpMap', bumpMap);\n      normalMaterial.set('roughnessMap', roughnessMap);\n      normalMaterial.set('useBumpMap', useBumpMap);\n      normalMaterial.set('useRoughnessMap', useRoughnessMap);\n      normalMaterial.set('doubleSide', doubleSide);\n      uvRepeat != null && normalMaterial.set('uvRepeat', uvRepeat);\n      uvOffset != null && normalMaterial.set('uvOffset', uvOffset);\n      detailUvRepeat != null && normalMaterial.set('detailUvRepeat', detailUvRepeat);\n      detailUvOffset != null && normalMaterial.set('detailUvOffset', detailUvOffset);\n      normalMaterial.set('roughness', roughness);\n    } else {\n      program.setUniform(gl, '1f', 'roughness', roughness);\n\n      if (previousNormalMap !== normalMap) {\n        attachTextureToSlot(renderer, program, 'normalMap', normalMap, 0);\n      }\n\n      if (previousBumpMap !== bumpMap && bumpMap) {\n        attachTextureToSlot(renderer, program, 'bumpMap', bumpMap, 1);\n      }\n\n      if (previousRoughnessMap !== roughnessMap && roughnessMap) {\n        attachTextureToSlot(renderer, program, 'roughnessMap', roughnessMap, 2);\n      }\n\n      if (uvRepeat != null) {\n        program.setUniform(gl, '2f', 'uvRepeat', uvRepeat);\n      }\n\n      if (uvOffset != null) {\n        program.setUniform(gl, '2f', 'uvOffset', uvOffset);\n      }\n\n      if (detailUvRepeat != null) {\n        program.setUniform(gl, '2f', 'detailUvRepeat', detailUvRepeat);\n      }\n\n      if (detailUvOffset != null) {\n        program.setUniform(gl, '2f', 'detailUvOffset', detailUvOffset);\n      }\n\n      program.setUniform(gl, '1i', 'useBumpMap', +useBumpMap);\n      program.setUniform(gl, '1i', 'useRoughnessMap', +useRoughnessMap);\n      program.setUniform(gl, '1i', 'doubleSide', +doubleSide);\n    }\n\n    previousNormalMap = normalMap;\n    previousBumpMap = bumpMap;\n    previousRoughnessMap = roughnessMap;\n    previousRenderable = renderable;\n  };\n}\n\nfunction NormalPass(opt) {\n  opt = opt || {};\n  this._depthTex = new Texture2D({\n    format: Texture.DEPTH_COMPONENT,\n    type: Texture.UNSIGNED_INT\n  });\n  this._normalTex = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._framebuffer = new FrameBuffer();\n\n  this._framebuffer.attach(this._normalTex);\n\n  this._framebuffer.attach(this._depthTex, FrameBuffer.DEPTH_ATTACHMENT);\n\n  this._normalMaterial = new Material({\n    shader: new Shader(Shader.source('ecgl.normal.vertex'), Shader.source('ecgl.normal.fragment'))\n  });\n\n  this._normalMaterial.enableTexture(['normalMap', 'bumpMap', 'roughnessMap']);\n\n  this._defaultNormalMap = textureUtil.createBlank('#000');\n  this._defaultBumpMap = textureUtil.createBlank('#000');\n  this._defaultRoughessMap = textureUtil.createBlank('#000');\n  this._debugPass = new Pass({\n    fragment: Shader.source('clay.compositor.output')\n  });\n\n  this._debugPass.setUniform('texture', this._normalTex);\n\n  this._debugPass.material.undefine('fragment', 'OUTPUT_ALPHA');\n}\n\nNormalPass.prototype.getDepthTexture = function () {\n  return this._depthTex;\n};\n\nNormalPass.prototype.getNormalTexture = function () {\n  return this._normalTex;\n};\n\nNormalPass.prototype.update = function (renderer, scene, camera) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var depthTexture = this._depthTex;\n  var normalTexture = this._normalTex;\n  var normalMaterial = this._normalMaterial;\n  depthTexture.width = width;\n  depthTexture.height = height;\n  normalTexture.width = width;\n  normalTexture.height = height;\n  var opaqueList = scene.getRenderList(camera).opaque;\n\n  this._framebuffer.bind(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT | renderer.gl.DEPTH_BUFFER_BIT);\n  renderer.gl.disable(renderer.gl.BLEND);\n  renderer.renderPass(opaqueList, camera, {\n    getMaterial: function getMaterial() {\n      return normalMaterial;\n    },\n    ifRender: function ifRender(object) {\n      return object.renderNormal;\n    },\n    beforeRender: getBeforeRenderHook(renderer, this._defaultNormalMap, this._defaultBumpMap, this._defaultRoughessMap, this._normalMaterial),\n    sort: renderer.opaqueSortCompare\n  });\n\n  this._framebuffer.unbind(renderer);\n};\n\nNormalPass.prototype.renderDebug = function (renderer) {\n  this._debugPass.render(renderer);\n};\n\nNormalPass.prototype.dispose = function (renderer) {\n  this._depthTex.dispose(renderer);\n\n  this._normalTex.dispose(renderer);\n};\n\nexport default NormalPass;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/effect/NormalPass.js"],"names":["Texture2D","Texture","Shader","FrameBuffer","Material","Pass","textureUtil","normalGLSL","import","attachTextureToSlot","renderer","program","symbol","texture","slot","gl","setUniform","activeTexture","TEXTURE0","isRenderable","bind","unbind","getBeforeRenderHook","defaultNormalMap","defaultBumpMap","defaultRoughnessMap","normalMaterial","previousNormalMap","previousBumpMap","previousRoughnessMap","previousRenderable","renderable","prevNormalMaterial","material","__program","roughness","get","normalMap","roughnessMap","bumpMap","uvRepeat","uvOffset","detailUvRepeat","detailUvOffset","useBumpMap","isTextureEnabled","useRoughnessMap","doubleSide","isDefined","set","NormalPass","opt","_depthTex","format","DEPTH_COMPONENT","type","UNSIGNED_INT","_normalTex","HALF_FLOAT","_framebuffer","attach","DEPTH_ATTACHMENT","_normalMaterial","shader","source","enableTexture","_defaultNormalMap","createBlank","_defaultBumpMap","_defaultRoughessMap","_debugPass","fragment","undefine","prototype","getDepthTexture","getNormalTexture","update","scene","camera","width","getWidth","height","getHeight","depthTexture","normalTexture","opaqueList","getRenderList","opaque","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","BLEND","renderPass","getMaterial","ifRender","object","renderNormal","beforeRender","sort","opaqueSortCompare","renderDebug","render","dispose"],"mappings":"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","sourcesContent":["// NormalPass will generate normal and depth data.\n// TODO Animation\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Material from 'claygl/src/Material';\nimport Pass from 'claygl/src/compositor/Pass';\nimport textureUtil from 'claygl/src/util/texture';\nimport normalGLSL from '../util/shader/normal.glsl.js';\nShader.import(normalGLSL);\n\nfunction attachTextureToSlot(renderer, program, symbol, texture, slot) {\n  var gl = renderer.gl;\n  program.setUniform(gl, '1i', symbol, slot);\n  gl.activeTexture(gl.TEXTURE0 + slot); // Maybe texture is not loaded yet;\n\n  if (texture.isRenderable()) {\n    texture.bind(renderer);\n  } else {\n    // Bind texture to null\n    texture.unbind(renderer);\n  }\n} // TODO Use globalShader insteadof globalMaterial?\n\n\nfunction getBeforeRenderHook(renderer, defaultNormalMap, defaultBumpMap, defaultRoughnessMap, normalMaterial) {\n  var previousNormalMap;\n  var previousBumpMap;\n  var previousRoughnessMap;\n  var previousRenderable;\n  var gl = renderer.gl;\n  return function (renderable, normalMaterial, prevNormalMaterial) {\n    // Material not change\n    if (previousRenderable && previousRenderable.material === renderable.material) {\n      return;\n    }\n\n    var material = renderable.material;\n    var program = renderable.__program;\n    var roughness = material.get('roughness');\n\n    if (roughness == null) {\n      roughness = 1;\n    }\n\n    var normalMap = material.get('normalMap') || defaultNormalMap;\n    var roughnessMap = material.get('roughnessMap');\n    var bumpMap = material.get('bumpMap');\n    var uvRepeat = material.get('uvRepeat');\n    var uvOffset = material.get('uvOffset');\n    var detailUvRepeat = material.get('detailUvRepeat');\n    var detailUvOffset = material.get('detailUvOffset');\n    var useBumpMap = !!bumpMap && material.isTextureEnabled('bumpMap');\n    var useRoughnessMap = !!roughnessMap && material.isTextureEnabled('roughnessMap');\n    var doubleSide = material.isDefined('fragment', 'DOUBLE_SIDED');\n    bumpMap = bumpMap || defaultBumpMap;\n    roughnessMap = roughnessMap || defaultRoughnessMap;\n\n    if (prevNormalMaterial !== normalMaterial) {\n      normalMaterial.set('normalMap', normalMap);\n      normalMaterial.set('bumpMap', bumpMap);\n      normalMaterial.set('roughnessMap', roughnessMap);\n      normalMaterial.set('useBumpMap', useBumpMap);\n      normalMaterial.set('useRoughnessMap', useRoughnessMap);\n      normalMaterial.set('doubleSide', doubleSide);\n      uvRepeat != null && normalMaterial.set('uvRepeat', uvRepeat);\n      uvOffset != null && normalMaterial.set('uvOffset', uvOffset);\n      detailUvRepeat != null && normalMaterial.set('detailUvRepeat', detailUvRepeat);\n      detailUvOffset != null && normalMaterial.set('detailUvOffset', detailUvOffset);\n      normalMaterial.set('roughness', roughness);\n    } else {\n      program.setUniform(gl, '1f', 'roughness', roughness);\n\n      if (previousNormalMap !== normalMap) {\n        attachTextureToSlot(renderer, program, 'normalMap', normalMap, 0);\n      }\n\n      if (previousBumpMap !== bumpMap && bumpMap) {\n        attachTextureToSlot(renderer, program, 'bumpMap', bumpMap, 1);\n      }\n\n      if (previousRoughnessMap !== roughnessMap && roughnessMap) {\n        attachTextureToSlot(renderer, program, 'roughnessMap', roughnessMap, 2);\n      }\n\n      if (uvRepeat != null) {\n        program.setUniform(gl, '2f', 'uvRepeat', uvRepeat);\n      }\n\n      if (uvOffset != null) {\n        program.setUniform(gl, '2f', 'uvOffset', uvOffset);\n      }\n\n      if (detailUvRepeat != null) {\n        program.setUniform(gl, '2f', 'detailUvRepeat', detailUvRepeat);\n      }\n\n      if (detailUvOffset != null) {\n        program.setUniform(gl, '2f', 'detailUvOffset', detailUvOffset);\n      }\n\n      program.setUniform(gl, '1i', 'useBumpMap', +useBumpMap);\n      program.setUniform(gl, '1i', 'useRoughnessMap', +useRoughnessMap);\n      program.setUniform(gl, '1i', 'doubleSide', +doubleSide);\n    }\n\n    previousNormalMap = normalMap;\n    previousBumpMap = bumpMap;\n    previousRoughnessMap = roughnessMap;\n    previousRenderable = renderable;\n  };\n}\n\nfunction NormalPass(opt) {\n  opt = opt || {};\n  this._depthTex = new Texture2D({\n    format: Texture.DEPTH_COMPONENT,\n    type: Texture.UNSIGNED_INT\n  });\n  this._normalTex = new Texture2D({\n    type: Texture.HALF_FLOAT\n  });\n  this._framebuffer = new FrameBuffer();\n\n  this._framebuffer.attach(this._normalTex);\n\n  this._framebuffer.attach(this._depthTex, FrameBuffer.DEPTH_ATTACHMENT);\n\n  this._normalMaterial = new Material({\n    shader: new Shader(Shader.source('ecgl.normal.vertex'), Shader.source('ecgl.normal.fragment'))\n  });\n\n  this._normalMaterial.enableTexture(['normalMap', 'bumpMap', 'roughnessMap']);\n\n  this._defaultNormalMap = textureUtil.createBlank('#000');\n  this._defaultBumpMap = textureUtil.createBlank('#000');\n  this._defaultRoughessMap = textureUtil.createBlank('#000');\n  this._debugPass = new Pass({\n    fragment: Shader.source('clay.compositor.output')\n  });\n\n  this._debugPass.setUniform('texture', this._normalTex);\n\n  this._debugPass.material.undefine('fragment', 'OUTPUT_ALPHA');\n}\n\nNormalPass.prototype.getDepthTexture = function () {\n  return this._depthTex;\n};\n\nNormalPass.prototype.getNormalTexture = function () {\n  return this._normalTex;\n};\n\nNormalPass.prototype.update = function (renderer, scene, camera) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var depthTexture = this._depthTex;\n  var normalTexture = this._normalTex;\n  var normalMaterial = this._normalMaterial;\n  depthTexture.width = width;\n  depthTexture.height = height;\n  normalTexture.width = width;\n  normalTexture.height = height;\n  var opaqueList = scene.getRenderList(camera).opaque;\n\n  this._framebuffer.bind(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT | renderer.gl.DEPTH_BUFFER_BIT);\n  renderer.gl.disable(renderer.gl.BLEND);\n  renderer.renderPass(opaqueList, camera, {\n    getMaterial: function () {\n      return normalMaterial;\n    },\n    ifRender: function (object) {\n      return object.renderNormal;\n    },\n    beforeRender: getBeforeRenderHook(renderer, this._defaultNormalMap, this._defaultBumpMap, this._defaultRoughessMap, this._normalMaterial),\n    sort: renderer.opaqueSortCompare\n  });\n\n  this._framebuffer.unbind(renderer);\n};\n\nNormalPass.prototype.renderDebug = function (renderer) {\n  this._debugPass.render(renderer);\n};\n\nNormalPass.prototype.dispose = function (renderer) {\n  this._depthTex.dispose(renderer);\n\n  this._normalTex.dispose(renderer);\n};\n\nexport default NormalPass;"]},"metadata":{},"sourceType":"module"}