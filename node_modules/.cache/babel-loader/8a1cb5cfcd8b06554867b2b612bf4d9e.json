{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Maptalks3DLayer from './Maptalks3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nexport default echarts.ComponentView.extend({\n  type: 'maptalks3D',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  _initMaptalksLayer: function _initMaptalksLayer(mapbox3DModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Maptalks3DLayer('maptalks3D', zr, mapbox3DModel.get('center'), mapbox3DModel.get('zoom'));\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var maptalks = this._zrLayer.getMaptalks();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, maptalks); // PENDING\n\n\n    ['zoomend', 'zooming', 'zoomstart', 'dragrotating', 'pitch', 'pitchend', 'movestart', 'moving', 'moveend', 'resize', 'touchstart', 'touchmove', 'touchend', 'animating'].forEach(function (eName) {\n      maptalks.on(eName, dispatchInteractAction);\n    });\n  },\n  render: function render(maptalks3DModel, ecModel, api) {\n    if (!this._zrLayer) {\n      this._initMaptalksLayer(maptalks3DModel, api);\n    }\n\n    var mtks = this._zrLayer.getMaptalks();\n\n    var urlTemplate = maptalks3DModel.get('urlTemplate');\n    var baseLayer = mtks.getBaseLayer();\n\n    if (urlTemplate !== this._oldUrlTemplate) {\n      if (!baseLayer) {\n        baseLayer = new maptalks.TileLayer('maptalks-echarts-gl-baselayer', {\n          urlTemplate: urlTemplate,\n          // used sequentially to help with browser parallel requests per domain limitation\n          subdomains: ['a', 'b', 'c'],\n          attribution: maptalks3DModel.get('attribution')\n        });\n        mtks.setBaseLayer(baseLayer);\n      } else {\n        // PENDING setOptions may not work?\n        baseLayer.setOptions({\n          urlTemplate: urlTemplate,\n          attribution: maptalks3DModel.get('attribution')\n        });\n      }\n    }\n\n    this._oldUrlTemplate = urlTemplate;\n    mtks.setCenter(maptalks3DModel.get('center'));\n    mtks.setZoom(maptalks3DModel.get('zoom'), {\n      animation: false\n    });\n    mtks.setPitch(maptalks3DModel.get('pitch'));\n    mtks.setBearing(maptalks3DModel.get('bearing'));\n    maptalks3DModel.setMaptalks(mtks);\n    var coordSys = maptalks3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(maptalks3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(maptalks3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(maptalks3DModel.getModel('temporalSuperSampling'));\n    this._maptalks3DModel = maptalks3DModel;\n  },\n  afterRender: function afterRender(maptalks3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, maptalks3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, maptalks3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    maptalks3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function updateCamera(maptalks3DModel, ecModel, api, payload) {\n    maptalks3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function _dispatchInteractAction(api, maptalks, maptalks3DModel) {\n    api.dispatchAction({\n      type: 'maptalks3DChangeCamera',\n      pitch: maptalks.getPitch(),\n      zoom: getMapboxZoom(maptalks.getResolution()) + 1,\n      center: maptalks.getCenter().toArray(),\n      bearing: maptalks.getBearing(),\n      maptalks3DId: this._maptalks3DModel && this._maptalks3DModel.id\n    });\n  },\n  _updateGroundMesh: function _updateGroundMesh() {\n    if (this._maptalks3DModel) {\n      var coordSys = this._maptalks3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function dispose(ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});\nvar MAX_RES = 2 * 6378137 * Math.PI / (256 * Math.pow(2, 20));\n\nfunction getMapboxZoom(res) {\n  return 19 - Math.log(res / MAX_RES) / Math.LN2;\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/maptalks3D/Maptalks3DView.js"],"names":["echarts","Maptalks3DLayer","SceneHelper","graphicGL","displayShadowGLSL","Shader","import","ComponentView","extend","type","__ecgl__","init","ecModel","api","_groundMesh","Mesh","geometry","PlaneGeometry","material","Material","shader","vertex","source","fragment","depthMask","renderOrder","culling","castShadow","$ignorePicking","renderNormal","_initMaptalksLayer","mapbox3DModel","zr","getZr","_zrLayer","get","painter","insertLayer","_lightRoot","Node","_sceneHelper","initLight","maptalks","getMaptalks","dispatchInteractAction","_dispatchInteractAction","bind","forEach","eName","on","render","maptalks3DModel","mtks","urlTemplate","baseLayer","getBaseLayer","_oldUrlTemplate","TileLayer","subdomains","attribution","setBaseLayer","setOptions","setCenter","setZoom","animation","setPitch","setBearing","setMaptalks","coordSys","coordinateSystem","viewGL","scene","add","_updateGroundMesh","setScene","updateLight","setPostEffect","getModel","setTemporalSuperSampling","_maptalks3DModel","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","traverse","mesh","define","updateCamera","payload","setCameraOption","refresh","dispatchAction","pitch","getPitch","zoom","getMapboxZoom","getResolution","center","getCenter","toArray","bearing","getBearing","maptalks3DId","id","pt","dataToPoint","position","set","plane","Plane","Vector3","ray1","camera","castRay","Vector2","ray2","pos0","intersectPlane","pos1","scale","dist","rootNode","x","dispose","delLayer","MAX_RES","Math","PI","pow","res","log","LN2"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Maptalks3DLayer from './Maptalks3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nexport default echarts.ComponentView.extend({\n  type: 'maptalks3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  _initMaptalksLayer: function (mapbox3DModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Maptalks3DLayer('maptalks3D', zr, mapbox3DModel.get('center'), mapbox3DModel.get('zoom'));\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var maptalks = this._zrLayer.getMaptalks();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, maptalks); // PENDING\n\n\n    ['zoomend', 'zooming', 'zoomstart', 'dragrotating', 'pitch', 'pitchend', 'movestart', 'moving', 'moveend', 'resize', 'touchstart', 'touchmove', 'touchend', 'animating'].forEach(function (eName) {\n      maptalks.on(eName, dispatchInteractAction);\n    });\n  },\n  render: function (maptalks3DModel, ecModel, api) {\n    if (!this._zrLayer) {\n      this._initMaptalksLayer(maptalks3DModel, api);\n    }\n\n    var mtks = this._zrLayer.getMaptalks();\n\n    var urlTemplate = maptalks3DModel.get('urlTemplate');\n    var baseLayer = mtks.getBaseLayer();\n\n    if (urlTemplate !== this._oldUrlTemplate) {\n      if (!baseLayer) {\n        baseLayer = new maptalks.TileLayer('maptalks-echarts-gl-baselayer', {\n          urlTemplate: urlTemplate,\n          // used sequentially to help with browser parallel requests per domain limitation\n          subdomains: ['a', 'b', 'c'],\n          attribution: maptalks3DModel.get('attribution')\n        });\n        mtks.setBaseLayer(baseLayer);\n      } else {\n        // PENDING setOptions may not work?\n        baseLayer.setOptions({\n          urlTemplate: urlTemplate,\n          attribution: maptalks3DModel.get('attribution')\n        });\n      }\n    }\n\n    this._oldUrlTemplate = urlTemplate;\n    mtks.setCenter(maptalks3DModel.get('center'));\n    mtks.setZoom(maptalks3DModel.get('zoom'), {\n      animation: false\n    });\n    mtks.setPitch(maptalks3DModel.get('pitch'));\n    mtks.setBearing(maptalks3DModel.get('bearing'));\n    maptalks3DModel.setMaptalks(mtks);\n    var coordSys = maptalks3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(maptalks3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(maptalks3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(maptalks3DModel.getModel('temporalSuperSampling'));\n    this._maptalks3DModel = maptalks3DModel;\n  },\n  afterRender: function (maptalks3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, maptalks3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, maptalks3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    maptalks3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function (maptalks3DModel, ecModel, api, payload) {\n    maptalks3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function (api, maptalks, maptalks3DModel) {\n    api.dispatchAction({\n      type: 'maptalks3DChangeCamera',\n      pitch: maptalks.getPitch(),\n      zoom: getMapboxZoom(maptalks.getResolution()) + 1,\n      center: maptalks.getCenter().toArray(),\n      bearing: maptalks.getBearing(),\n      maptalks3DId: this._maptalks3DModel && this._maptalks3DModel.id\n    });\n  },\n  _updateGroundMesh: function () {\n    if (this._maptalks3DModel) {\n      var coordSys = this._maptalks3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function (ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});\nconst MAX_RES = 2 * 6378137 * Math.PI / (256 * Math.pow(2, 20));\n\nfunction getMapboxZoom(res) {\n  return 19 - Math.log(res / MAX_RES) / Math.LN2;\n}"]},"metadata":{},"sourceType":"module"}