{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport retrieve from '../../util/retrieve';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nexport default function (serviceComponentType, ServiceCtor, afterCreate) {\n  function resizeMapService3D(mapService3DModel, api) {\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var dpr = api.getDevicePixelRatio();\n    this.viewGL.setViewport(0, 0, width, height, dpr);\n    this.width = width;\n    this.height = height;\n    this.altitudeScale = mapService3DModel.get('altitudeScale');\n    this.boxHeight = mapService3DModel.get('boxHeight'); // this.updateTransform();\n  }\n\n  function updateService3D(ecModel, api) {\n    if (this.model.get('boxHeight') === 'auto') {\n      return;\n    }\n\n    var altitudeDataExtent = [Infinity, -Infinity];\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.coordinateSystem !== this) {\n        return;\n      } // Get altitude data extent.\n\n\n      var data = seriesModel.getData();\n      var altDim = seriesModel.coordDimToDataDim('alt')[0];\n\n      if (altDim) {\n        // TODO altitiude is in coords of lines.\n        var dataExtent = data.getDataExtent(altDim, true);\n        altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n        altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n      }\n    }, this);\n\n    if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n      this.altitudeExtent = altitudeDataExtent;\n    }\n  }\n\n  return {\n    dimensions: ServiceCtor.prototype.dimensions,\n    create: function create(ecModel, api) {\n      var mapService3DList = [];\n      ecModel.eachComponent(serviceComponentType, function (mapService3DModel) {\n        var viewGL = mapService3DModel.__viewGL;\n\n        if (!viewGL) {\n          viewGL = mapService3DModel.__viewGL = new ViewGL();\n          viewGL.setRootNode(new graphicGL.Node());\n        }\n\n        var mapService3DCoordSys = new ServiceCtor();\n        mapService3DCoordSys.viewGL = mapService3DModel.__viewGL; // Inject resize\n\n        mapService3DCoordSys.resize = resizeMapService3D;\n        mapService3DCoordSys.resize(mapService3DModel, api);\n        mapService3DList.push(mapService3DCoordSys);\n        mapService3DModel.coordinateSystem = mapService3DCoordSys;\n        mapService3DCoordSys.model = mapService3DModel;\n        mapService3DCoordSys.update = updateService3D;\n      });\n      ecModel.eachSeries(function (seriesModel) {\n        if (seriesModel.get('coordinateSystem') === serviceComponentType) {\n          var mapService3DModel = seriesModel.getReferringComponents(serviceComponentType).models[0];\n\n          if (!mapService3DModel) {\n            mapService3DModel = ecModel.getComponent(serviceComponentType);\n          }\n\n          if (!mapService3DModel) {\n            throw new Error(serviceComponentType + ' \"' + retrieve.firstNotNull(seriesModel.get(serviceComponentType + 'Index'), seriesModel.get(serviceComponentType + 'Id'), 0) + '\" not found');\n          }\n\n          seriesModel.coordinateSystem = mapService3DModel.coordinateSystem;\n        }\n      });\n      afterCreate && afterCreate(mapService3DList, ecModel, api);\n      return mapService3DList;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/coord/mapServiceCommon/createMapService3DCreator.js"],"names":["retrieve","graphicGL","ViewGL","serviceComponentType","ServiceCtor","afterCreate","resizeMapService3D","mapService3DModel","api","width","getWidth","height","getHeight","dpr","getDevicePixelRatio","viewGL","setViewport","altitudeScale","get","boxHeight","updateService3D","ecModel","model","altitudeDataExtent","Infinity","eachSeries","seriesModel","coordinateSystem","data","getData","altDim","coordDimToDataDim","dataExtent","getDataExtent","Math","min","max","isFinite","altitudeExtent","dimensions","prototype","create","mapService3DList","eachComponent","__viewGL","setRootNode","Node","mapService3DCoordSys","resize","push","update","getReferringComponents","models","getComponent","Error","firstNotNull"],"mappings":"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","sourcesContent":["import retrieve from '../../util/retrieve';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nexport default function (serviceComponentType, ServiceCtor, afterCreate) {\n  function resizeMapService3D(mapService3DModel, api) {\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var dpr = api.getDevicePixelRatio();\n    this.viewGL.setViewport(0, 0, width, height, dpr);\n    this.width = width;\n    this.height = height;\n    this.altitudeScale = mapService3DModel.get('altitudeScale');\n    this.boxHeight = mapService3DModel.get('boxHeight'); // this.updateTransform();\n  }\n\n  function updateService3D(ecModel, api) {\n    if (this.model.get('boxHeight') === 'auto') {\n      return;\n    }\n\n    var altitudeDataExtent = [Infinity, -Infinity];\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.coordinateSystem !== this) {\n        return;\n      } // Get altitude data extent.\n\n\n      var data = seriesModel.getData();\n      var altDim = seriesModel.coordDimToDataDim('alt')[0];\n\n      if (altDim) {\n        // TODO altitiude is in coords of lines.\n        var dataExtent = data.getDataExtent(altDim, true);\n        altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n        altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n      }\n    }, this);\n\n    if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n      this.altitudeExtent = altitudeDataExtent;\n    }\n  }\n\n  return {\n    dimensions: ServiceCtor.prototype.dimensions,\n    create: function (ecModel, api) {\n      var mapService3DList = [];\n      ecModel.eachComponent(serviceComponentType, function (mapService3DModel) {\n        var viewGL = mapService3DModel.__viewGL;\n\n        if (!viewGL) {\n          viewGL = mapService3DModel.__viewGL = new ViewGL();\n          viewGL.setRootNode(new graphicGL.Node());\n        }\n\n        var mapService3DCoordSys = new ServiceCtor();\n        mapService3DCoordSys.viewGL = mapService3DModel.__viewGL; // Inject resize\n\n        mapService3DCoordSys.resize = resizeMapService3D;\n        mapService3DCoordSys.resize(mapService3DModel, api);\n        mapService3DList.push(mapService3DCoordSys);\n        mapService3DModel.coordinateSystem = mapService3DCoordSys;\n        mapService3DCoordSys.model = mapService3DModel;\n        mapService3DCoordSys.update = updateService3D;\n      });\n      ecModel.eachSeries(function (seriesModel) {\n        if (seriesModel.get('coordinateSystem') === serviceComponentType) {\n          var mapService3DModel = seriesModel.getReferringComponents(serviceComponentType).models[0];\n\n          if (!mapService3DModel) {\n            mapService3DModel = ecModel.getComponent(serviceComponentType);\n          }\n\n          if (!mapService3DModel) {\n            throw new Error(serviceComponentType + ' \"' + retrieve.firstNotNull(seriesModel.get(serviceComponentType + 'Index'), seriesModel.get(serviceComponentType + 'Id'), 0) + '\" not found');\n          }\n\n          seriesModel.coordinateSystem = mapService3DModel.coordinateSystem;\n        }\n      });\n      afterCreate && afterCreate(mapService3DList, ecModel, api);\n      return mapService3DList;\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}