{"ast":null,"code":"import Camera from '../Camera';\n/**\n * @constructor clay.camera.Perspective\n * @extends clay.Camera\n */\n\nvar Perspective = Camera.extend(\n/** @lends clay.camera.Perspective# */\n{\n  /**\n   * Vertical field of view in degrees\n   * @type {number}\n   */\n  fov: 50,\n\n  /**\n   * Aspect ratio, typically viewport width / height\n   * @type {number}\n   */\n  aspect: 1,\n\n  /**\n   * Near bound of the frustum\n   * @type {number}\n   */\n  near: 0.1,\n\n  /**\n   * Far bound of the frustum\n   * @type {number}\n   */\n  far: 2000\n},\n/** @lends clay.camera.Perspective.prototype */\n{\n  updateProjectionMatrix: function () {\n    var rad = this.fov / 180 * Math.PI;\n    this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);\n  },\n  decomposeProjectionMatrix: function () {\n    var m = this.projectionMatrix.array;\n    var rad = Math.atan(1 / m[5]) * 2;\n    this.fov = rad / Math.PI * 180;\n    this.aspect = m[5] / m[0];\n    this.near = m[14] / (m[10] - 1);\n    this.far = m[14] / (m[10] + 1);\n  },\n\n  /**\n   * @return {clay.camera.Perspective}\n   */\n  clone: function () {\n    var camera = Camera.prototype.clone.call(this);\n    camera.fov = this.fov;\n    camera.aspect = this.aspect;\n    camera.near = this.near;\n    camera.far = this.far;\n    return camera;\n  }\n});\nexport default Perspective;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/camera/Perspective.js"],"names":["Camera","Perspective","extend","fov","aspect","near","far","updateProjectionMatrix","rad","Math","PI","projectionMatrix","perspective","decomposeProjectionMatrix","m","array","atan","clone","camera","prototype","call"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAGD,MAAM,CAACE,MAAP;AAAc;AAAsC;AAClE;AACJ;AACA;AACA;AACIC,EAAAA,GAAG,EAAE,EAL6D;;AAMlE;AACJ;AACA;AACA;AACIC,EAAAA,MAAM,EAAE,CAV0D;;AAWlE;AACJ;AACA;AACA;AACIC,EAAAA,IAAI,EAAE,GAf4D;;AAgBlE;AACJ;AACA;AACA;AACIC,EAAAA,GAAG,EAAE;AApB6D,CAApD;AAsBlB;AACA;AAEIC,EAAAA,sBAAsB,EAAE,YAAW;AAC/B,QAAIC,GAAG,GAAG,KAAKL,GAAL,GAAW,GAAX,GAAiBM,IAAI,CAACC,EAAhC;AACA,SAAKC,gBAAL,CAAsBC,WAAtB,CAAkCJ,GAAlC,EAAuC,KAAKJ,MAA5C,EAAoD,KAAKC,IAAzD,EAA+D,KAAKC,GAApE;AACH,GALL;AAMIO,EAAAA,yBAAyB,EAAE,YAAY;AACnC,QAAIC,CAAC,GAAG,KAAKH,gBAAL,CAAsBI,KAA9B;AACA,QAAIP,GAAG,GAAGC,IAAI,CAACO,IAAL,CAAU,IAAIF,CAAC,CAAC,CAAD,CAAf,IAAsB,CAAhC;AACA,SAAKX,GAAL,GAAWK,GAAG,GAAGC,IAAI,CAACC,EAAX,GAAgB,GAA3B;AACA,SAAKN,MAAL,GAAcU,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAtB;AACA,SAAKT,IAAL,GAAYS,CAAC,CAAC,EAAD,CAAD,IAASA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAjB,CAAZ;AACA,SAAKR,GAAL,GAAWQ,CAAC,CAAC,EAAD,CAAD,IAASA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAjB,CAAX;AACH,GAbL;;AAcI;AACJ;AACA;AACIG,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,MAAM,GAAGlB,MAAM,CAACmB,SAAP,CAAiBF,KAAjB,CAAuBG,IAAvB,CAA4B,IAA5B,CAAb;AACAF,IAAAA,MAAM,CAACf,GAAP,GAAa,KAAKA,GAAlB;AACAe,IAAAA,MAAM,CAACd,MAAP,GAAgB,KAAKA,MAArB;AACAc,IAAAA,MAAM,CAACb,IAAP,GAAc,KAAKA,IAAnB;AACAa,IAAAA,MAAM,CAACZ,GAAP,GAAa,KAAKA,GAAlB;AAEA,WAAOY,MAAP;AACH;AAzBL,CAvBkB,CAAlB;AAmDA,eAAejB,WAAf","sourcesContent":["import Camera from '../Camera';\n\n/**\n * @constructor clay.camera.Perspective\n * @extends clay.Camera\n */\nvar Perspective = Camera.extend(/** @lends clay.camera.Perspective# */{\n    /**\n     * Vertical field of view in degrees\n     * @type {number}\n     */\n    fov: 50,\n    /**\n     * Aspect ratio, typically viewport width / height\n     * @type {number}\n     */\n    aspect: 1,\n    /**\n     * Near bound of the frustum\n     * @type {number}\n     */\n    near: 0.1,\n    /**\n     * Far bound of the frustum\n     * @type {number}\n     */\n    far: 2000\n},\n/** @lends clay.camera.Perspective.prototype */\n{\n\n    updateProjectionMatrix: function() {\n        var rad = this.fov / 180 * Math.PI;\n        this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);\n    },\n    decomposeProjectionMatrix: function () {\n        var m = this.projectionMatrix.array;\n        var rad = Math.atan(1 / m[5]) * 2;\n        this.fov = rad / Math.PI * 180;\n        this.aspect = m[5] / m[0];\n        this.near = m[14] / (m[10] - 1);\n        this.far = m[14] / (m[10] + 1);\n    },\n    /**\n     * @return {clay.camera.Perspective}\n     */\n    clone: function() {\n        var camera = Camera.prototype.clone.call(this);\n        camera.fov = this.fov;\n        camera.aspect = this.aspect;\n        camera.near = this.near;\n        camera.far = this.far;\n\n        return camera;\n    }\n});\n\nexport default Perspective;\n"]},"metadata":{},"sourceType":"module"}