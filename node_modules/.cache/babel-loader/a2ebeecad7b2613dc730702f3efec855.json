{"ast":null,"code":"import \"core-js/modules/es.string.sub.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport vec2 from '../glmatrix/vec2';\n/**\n * @constructor\n * @alias clay.Vector2\n * @param {number} x\n * @param {number} y\n */\n\nvar Vector2 = function Vector2(x, y) {\n  x = x || 0;\n  y = y || 0;\n  /**\n   * Storage of Vector2, read and write of x, y will change the values in array\n   * All methods also operate on the array instead of x, y components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Vector2#\n   */\n\n  this.array = vec2.fromValues(x, y);\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Vector2#\n   */\n\n  this._dirty = true;\n};\n\nVector2.prototype = {\n  constructor: Vector2,\n\n  /**\n   * Add b to self\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  add: function add(b) {\n    vec2.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x and y components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @return {clay.Vector2}\n   */\n  set: function set(x, y) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set x and y components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Vector2}\n   */\n  setArray: function setArray(arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Vector2\n   * @return {clay.Vector2}\n   */\n  clone: function clone() {\n    return new Vector2(this.x, this.y);\n  },\n\n  /**\n   * Copy x, y from b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  copy: function copy(b) {\n    vec2.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Cross product of self and b, written to a Vector3 out\n   * @param  {clay.Vector3} out\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  cross: function cross(out, b) {\n    vec2.cross(out.array, this.array, b.array);\n    out._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for distance\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  dist: function dist(b) {\n    return vec2.dist(this.array, b.array);\n  },\n\n  /**\n   * Distance between self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  distance: function distance(b) {\n    return vec2.distance(this.array, b.array);\n  },\n\n  /**\n   * Alias for divide\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  div: function div(b) {\n    vec2.div(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Divide self by b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  divide: function divide(b) {\n    vec2.divide(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Dot product of self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  dot: function dot(b) {\n    return vec2.dot(this.array, b.array);\n  },\n\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function len() {\n    return vec2.len(this.array);\n  },\n\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function length() {\n    return vec2.length(this.array);\n  },\n\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Vector2} a\n   * @param  {clay.Vector2} b\n   * @param  {number}  t\n   * @return {clay.Vector2}\n   */\n  lerp: function lerp(a, b, t) {\n    vec2.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Minimum of self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  min: function min(b) {\n    vec2.min(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Maximum of self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  max: function max(b) {\n    vec2.max(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiply\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  mul: function mul(b) {\n    vec2.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Mutiply self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  multiply: function multiply(b) {\n    vec2.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Negate self\n   * @return {clay.Vector2}\n   */\n  negate: function negate() {\n    vec2.negate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Normalize self\n   * @return {clay.Vector2}\n   */\n  normalize: function normalize() {\n    vec2.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Generate random x, y components with a given scale\n   * @param  {number} scale\n   * @return {clay.Vector2}\n   */\n  random: function random(scale) {\n    vec2.random(this.array, scale);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self\n   * @param  {number}  scale\n   * @return {clay.Vector2}\n   */\n  scale: function scale(s) {\n    vec2.scale(this.array, this.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale b and add to self\n   * @param  {clay.Vector2} b\n   * @param  {number}  scale\n   * @return {clay.Vector2}\n   */\n  scaleAndAdd: function scaleAndAdd(b, s) {\n    vec2.scaleAndAdd(this.array, this.array, b.array, s);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for squaredDistance\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  sqrDist: function sqrDist(b) {\n    return vec2.sqrDist(this.array, b.array);\n  },\n\n  /**\n   * Squared distance between self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  squaredDistance: function squaredDistance(b) {\n    return vec2.squaredDistance(this.array, b.array);\n  },\n\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function sqrLen() {\n    return vec2.sqrLen(this.array);\n  },\n\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function squaredLength() {\n    return vec2.squaredLength(this.array);\n  },\n\n  /**\n   * Alias for subtract\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  sub: function sub(b) {\n    vec2.sub(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Subtract b from self\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  subtract: function subtract(b) {\n    vec2.subtract(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix2 m\n   * @param  {clay.Matrix2} m\n   * @return {clay.Vector2}\n   */\n  transformMat2: function transformMat2(m) {\n    vec2.transformMat2(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix2d m\n   * @param  {clay.Matrix2d} m\n   * @return {clay.Vector2}\n   */\n  transformMat2d: function transformMat2d(m) {\n    vec2.transformMat2d(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix3 m\n   * @param  {clay.Matrix3} m\n   * @return {clay.Vector2}\n   */\n  transformMat3: function transformMat3(m) {\n    vec2.transformMat3(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transform self with a Matrix4 m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector2}\n   */\n  transformMat4: function transformMat4(m) {\n    vec2.transformMat4(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n}; // Getter and Setter\n\nif (Object.defineProperty) {\n  var proto = Vector2.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Vector2\n   * @instance\n   */\n\n  Object.defineProperty(proto, 'x', {\n    get: function get() {\n      return this.array[0];\n    },\n    set: function set(value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Vector2\n   * @instance\n   */\n\n  Object.defineProperty(proto, 'y', {\n    get: function get() {\n      return this.array[1];\n    },\n    set: function set(value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n} // Supply methods that are not in place\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.add = function (out, a, b) {\n  vec2.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  x\n * @param  {number}  y\n * @return {clay.Vector2}\n */\n\n\nVector2.set = function (out, x, y) {\n  vec2.set(out.array, x, y);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.copy = function (out, b) {\n  vec2.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.cross = function (out, a, b) {\n  vec2.cross(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\n\n\nVector2.dist = function (a, b) {\n  return vec2.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\n\n\nVector2.distance = Vector2.dist;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\nVector2.div = function (out, a, b) {\n  vec2.divide(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.divide = Vector2.div;\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\n\nVector2.dot = function (a, b) {\n  return vec2.dot(a.array, b.array);\n};\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\n\n\nVector2.len = function (b) {\n  return vec2.length(b.array);\n}; // Vector2.length = Vector2.len;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  t\n * @return {clay.Vector2}\n */\n\n\nVector2.lerp = function (out, a, b, t) {\n  vec2.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.min = function (out, a, b) {\n  vec2.min(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.max = function (out, a, b) {\n  vec2.max(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.mul = function (out, a, b) {\n  vec2.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.multiply = Vector2.mul;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\n\nVector2.negate = function (out, a) {\n  vec2.negate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\n\n\nVector2.normalize = function (out, a) {\n  vec2.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\n\n\nVector2.random = function (out, scale) {\n  vec2.random(out.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\n\n\nVector2.scale = function (out, a, scale) {\n  vec2.scale(out.array, a.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\n\n\nVector2.scaleAndAdd = function (out, a, b, scale) {\n  vec2.scaleAndAdd(out.array, a.array, b.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\n\n\nVector2.sqrDist = function (a, b) {\n  return vec2.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\n\n\nVector2.squaredDistance = Vector2.sqrDist;\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\n\nVector2.sqrLen = function (a) {\n  return vec2.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @return {number}\n */\n\n\nVector2.squaredLength = Vector2.sqrLen;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\nVector2.sub = function (out, a, b) {\n  vec2.subtract(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\n\n\nVector2.subtract = Vector2.sub;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix2} m\n * @return {clay.Vector2}\n */\n\nVector2.transformMat2 = function (out, a, m) {\n  vec2.transformMat2(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2}  out\n * @param  {clay.Vector2}  a\n * @param  {clay.Matrix2d} m\n * @return {clay.Vector2}\n */\n\n\nVector2.transformMat2d = function (out, a, m) {\n  vec2.transformMat2d(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {Matrix3} m\n * @return {clay.Vector2}\n */\n\n\nVector2.transformMat3 = function (out, a, m) {\n  vec2.transformMat3(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector2}\n */\n\n\nVector2.transformMat4 = function (out, a, m) {\n  vec2.transformMat4(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Vector2;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/math/Vector2.js"],"names":["vec2","Vector2","x","y","array","fromValues","_dirty","prototype","constructor","add","b","set","setArray","arr","clone","copy","cross","out","dist","distance","div","divide","dot","len","length","lerp","a","t","min","max","mul","multiply","negate","normalize","random","scale","s","scaleAndAdd","sqrDist","squaredDistance","sqrLen","squaredLength","sub","subtract","transformMat2","m","transformMat2d","transformMat3","transformMat4","toString","Array","join","call","toArray","slice","Object","defineProperty","proto","get","value"],"mappings":"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","sourcesContent":["import vec2 from '../glmatrix/vec2';\n\n/**\n * @constructor\n * @alias clay.Vector2\n * @param {number} x\n * @param {number} y\n */\nvar Vector2 = function(x, y) {\n\n    x = x || 0;\n    y = y || 0;\n\n    /**\n     * Storage of Vector2, read and write of x, y will change the values in array\n     * All methods also operate on the array instead of x, y components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Vector2#\n     */\n    this.array = vec2.fromValues(x, y);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Vector2#\n     */\n    this._dirty = true;\n};\n\nVector2.prototype = {\n\n    constructor: Vector2,\n\n    /**\n     * Add b to self\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    add: function(b) {\n        vec2.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x and y components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @return {clay.Vector2}\n     */\n    set: function(x, y) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x and y components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Vector2}\n     */\n    setArray: function(arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Vector2\n     * @return {clay.Vector2}\n     */\n    clone: function() {\n        return new Vector2(this.x, this.y);\n    },\n\n    /**\n     * Copy x, y from b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    copy: function(b) {\n        vec2.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Cross product of self and b, written to a Vector3 out\n     * @param  {clay.Vector3} out\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    cross: function(out, b) {\n        vec2.cross(out.array, this.array, b.array);\n        out._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for distance\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    dist: function(b) {\n        return vec2.dist(this.array, b.array);\n    },\n\n    /**\n     * Distance between self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    distance: function(b) {\n        return vec2.distance(this.array, b.array);\n    },\n\n    /**\n     * Alias for divide\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    div: function(b) {\n        vec2.div(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Divide self by b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    divide: function(b) {\n        vec2.divide(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    dot: function(b) {\n        return vec2.dot(this.array, b.array);\n    },\n\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function() {\n        return vec2.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function() {\n        return vec2.length(this.array);\n    },\n\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Vector2} a\n     * @param  {clay.Vector2} b\n     * @param  {number}  t\n     * @return {clay.Vector2}\n     */\n    lerp: function(a, b, t) {\n        vec2.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Minimum of self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    min: function(b) {\n        vec2.min(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Maximum of self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    max: function(b) {\n        vec2.max(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    mul: function(b) {\n        vec2.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    multiply: function(b) {\n        vec2.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Negate self\n     * @return {clay.Vector2}\n     */\n    negate: function() {\n        vec2.negate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Vector2}\n     */\n    normalize: function() {\n        vec2.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Generate random x, y components with a given scale\n     * @param  {number} scale\n     * @return {clay.Vector2}\n     */\n    random: function(scale) {\n        vec2.random(this.array, scale);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self\n     * @param  {number}  scale\n     * @return {clay.Vector2}\n     */\n    scale: function(s) {\n        vec2.scale(this.array, this.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale b and add to self\n     * @param  {clay.Vector2} b\n     * @param  {number}  scale\n     * @return {clay.Vector2}\n     */\n    scaleAndAdd: function(b, s) {\n        vec2.scaleAndAdd(this.array, this.array, b.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredDistance\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    sqrDist: function(b) {\n        return vec2.sqrDist(this.array, b.array);\n    },\n\n    /**\n     * Squared distance between self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    squaredDistance: function(b) {\n        return vec2.squaredDistance(this.array, b.array);\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function() {\n        return vec2.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function() {\n        return vec2.squaredLength(this.array);\n    },\n\n    /**\n     * Alias for subtract\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    sub: function(b) {\n        vec2.sub(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Subtract b from self\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    subtract: function(b) {\n        vec2.subtract(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix2 m\n     * @param  {clay.Matrix2} m\n     * @return {clay.Vector2}\n     */\n    transformMat2: function(m) {\n        vec2.transformMat2(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix2d m\n     * @param  {clay.Matrix2d} m\n     * @return {clay.Vector2}\n     */\n    transformMat2d: function(m) {\n        vec2.transformMat2d(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix3 m\n     * @param  {clay.Matrix3} m\n     * @return {clay.Vector2}\n     */\n    transformMat3: function(m) {\n        vec2.transformMat3(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix4 m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector2}\n     */\n    transformMat4: function(m) {\n        vec2.transformMat4(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\n// Getter and Setter\nif (Object.defineProperty) {\n\n    var proto = Vector2.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Vector2\n     * @instance\n     */\n    Object.defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Vector2\n     * @instance\n     */\n    Object.defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.add = function(out, a, b) {\n    vec2.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  x\n * @param  {number}  y\n * @return {clay.Vector2}\n */\nVector2.set = function(out, x, y) {\n    vec2.set(out.array, x, y);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.copy = function(out, b) {\n    vec2.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.cross = function(out, a, b) {\n    vec2.cross(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dist = function(a, b) {\n    return vec2.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.distance = Vector2.dist;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.div = function(out, a, b) {\n    vec2.divide(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.divide = Vector2.div;\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dot = function(a, b) {\n    return vec2.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.len = function(b) {\n    return vec2.length(b.array);\n};\n\n// Vector2.length = Vector2.len;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  t\n * @return {clay.Vector2}\n */\nVector2.lerp = function(out, a, b, t) {\n    vec2.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.min = function(out, a, b) {\n    vec2.min(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.max = function(out, a, b) {\n    vec2.max(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.mul = function(out, a, b) {\n    vec2.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.multiply = Vector2.mul;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.negate = function(out, a) {\n    vec2.negate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.normalize = function(out, a) {\n    vec2.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.random = function(out, scale) {\n    vec2.random(out.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scale = function(out, a, scale) {\n    vec2.scale(out.array, a.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scaleAndAdd = function(out, a, b, scale) {\n    vec2.scaleAndAdd(out.array, a.array, b.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.sqrDist = function(a, b) {\n    return vec2.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.squaredDistance = Vector2.sqrDist;\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.sqrLen = function(a) {\n    return vec2.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.squaredLength = Vector2.sqrLen;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.sub = function(out, a, b) {\n    vec2.subtract(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.subtract = Vector2.sub;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix2} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2 = function(out, a, m) {\n    vec2.transformMat2(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2}  out\n * @param  {clay.Vector2}  a\n * @param  {clay.Matrix2d} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2d = function(out, a, m) {\n    vec2.transformMat2d(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {Matrix3} m\n * @return {clay.Vector2}\n */\nVector2.transformMat3 = function(out, a, m) {\n    vec2.transformMat3(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector2}\n */\nVector2.transformMat4 = function(out, a, m) {\n    vec2.transformMat4(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Vector2;\n"]},"metadata":{},"sourceType":"module"}