{"ast":null,"code":"// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport * as echarts from 'echarts/lib/echarts';\nimport GraphGLSeries from './GraphGLSeries';\nimport GraphGLView from './GraphGLView';\n\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nexport function install(registers) {\n  registers.registerChartView(GraphGLView);\n  registers.registerSeriesModel(GraphGLSeries);\n  registers.registerVisual(function (ecModel) {\n    const paletteScope = {};\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var categoriesData = seriesModel.getCategoriesData();\n      var data = seriesModel.getData();\n      var categoryNameIdxMap = {};\n      categoriesData.each(function (idx) {\n        var name = categoriesData.getName(idx); // Add prefix to avoid conflict with Object.prototype.\n\n        categoryNameIdxMap['ec-' + name] = idx;\n        var itemModel = categoriesData.getItemModel(idx);\n        var style = itemModel.getModel('itemStyle').getItemStyle();\n\n        if (!style.fill) {\n          // Get color from palette.\n          style.fill = seriesModel.getColorFromPalette(name, paletteScope);\n        }\n\n        categoriesData.setItemVisual(idx, 'style', style);\n        var symbolVisualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n        for (let i = 0; i < symbolVisualList.length; i++) {\n          var symbolVisual = itemModel.getShallow(symbolVisualList[i], true);\n\n          if (symbolVisual != null) {\n            categoriesData.setItemVisual(idx, symbolVisualList[i], symbolVisual);\n          }\n        }\n      }); // Assign category color to visual\n\n      if (categoriesData.count()) {\n        data.each(function (idx) {\n          var model = data.getItemModel(idx);\n          let categoryIdx = model.getShallow('category');\n\n          if (categoryIdx != null) {\n            if (typeof categoryIdx === 'string') {\n              categoryIdx = categoryNameIdxMap['ec-' + categoryIdx];\n            }\n\n            var categoryStyle = categoriesData.getItemVisual(categoryIdx, 'style');\n            var style = data.ensureUniqueItemVisual(idx, 'style');\n            echarts.util.extend(style, categoryStyle);\n            var visualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n            for (let i = 0; i < visualList.length; i++) {\n              data.setItemVisual(idx, visualList[i], categoriesData.getItemVisual(categoryIdx, visualList[i]));\n            }\n          }\n        });\n      }\n    });\n  });\n  registers.registerVisual(function (ecModel) {\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var graph = seriesModel.getGraph();\n      var edgeData = seriesModel.getEdgeData();\n      var symbolType = normalize(seriesModel.get('edgeSymbol'));\n      var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n      edgeData.setVisual('drawType', 'stroke'); // var colorQuery = ['lineStyle', 'color'];\n      // var opacityQuery = ['lineStyle', 'opacity'];\n\n      edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n      edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n      edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n      edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n      edgeData.setVisual('style', seriesModel.getModel('lineStyle').getLineStyle());\n      edgeData.each(function (idx) {\n        var itemModel = edgeData.getItemModel(idx);\n        var edge = graph.getEdgeByIndex(idx);\n        var symbolType = normalize(itemModel.getShallow('symbol', true));\n        var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n        var style = itemModel.getModel('lineStyle').getLineStyle();\n        var existsStyle = edgeData.ensureUniqueItemVisual(idx, 'style');\n        echarts.util.extend(existsStyle, style);\n\n        switch (existsStyle.stroke) {\n          case 'source':\n            {\n              var nodeStyle = edge.node1.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n\n          case 'target':\n            {\n              var nodeStyle = edge.node2.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n        }\n\n        symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n        symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n        symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n        symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n      });\n    });\n  });\n  registers.registerAction({\n    type: 'graphGLRoam',\n    event: 'graphglroam',\n    update: 'series.graphGL:roam'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'series',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n\n  function noop() {}\n\n  registers.registerAction({\n    type: 'graphGLStartLayout',\n    event: 'graphgllayoutstarted',\n    update: 'series.graphGL:startLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLStopLayout',\n    event: 'graphgllayoutstopped',\n    update: 'series.graphGL:stopLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLFocusNodeAdjacency',\n    event: 'graphGLFocusNodeAdjacency',\n    update: 'series.graphGL:focusNodeAdjacency'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLUnfocusNodeAdjacency',\n    event: 'graphGLUnfocusNodeAdjacency',\n    update: 'series.graphGL:unfocusNodeAdjacency'\n  }, noop);\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/graphGL/install.js"],"names":["echarts","GraphGLSeries","GraphGLView","normalize","a","Array","install","registers","registerChartView","registerSeriesModel","registerVisual","ecModel","paletteScope","eachSeriesByType","seriesModel","categoriesData","getCategoriesData","data","getData","categoryNameIdxMap","each","idx","name","getName","itemModel","getItemModel","style","getModel","getItemStyle","fill","getColorFromPalette","setItemVisual","symbolVisualList","i","length","symbolVisual","getShallow","count","model","categoryIdx","categoryStyle","getItemVisual","ensureUniqueItemVisual","util","extend","visualList","graph","getGraph","edgeData","getEdgeData","symbolType","get","symbolSize","setVisual","getLineStyle","edge","getEdgeByIndex","existsStyle","stroke","nodeStyle","node1","getVisual","node2","registerAction","type","event","update","payload","eachComponent","mainType","query","componentModel","setView","noop"],"mappings":"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","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport * as echarts from 'echarts/lib/echarts';\nimport GraphGLSeries from './GraphGLSeries';\nimport GraphGLView from './GraphGLView';\n\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nexport function install(registers) {\n  registers.registerChartView(GraphGLView);\n  registers.registerSeriesModel(GraphGLSeries);\n  registers.registerVisual(function (ecModel) {\n    const paletteScope = {};\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var categoriesData = seriesModel.getCategoriesData();\n      var data = seriesModel.getData();\n      var categoryNameIdxMap = {};\n      categoriesData.each(function (idx) {\n        var name = categoriesData.getName(idx); // Add prefix to avoid conflict with Object.prototype.\n\n        categoryNameIdxMap['ec-' + name] = idx;\n        var itemModel = categoriesData.getItemModel(idx);\n        var style = itemModel.getModel('itemStyle').getItemStyle();\n\n        if (!style.fill) {\n          // Get color from palette.\n          style.fill = seriesModel.getColorFromPalette(name, paletteScope);\n        }\n\n        categoriesData.setItemVisual(idx, 'style', style);\n        var symbolVisualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n        for (let i = 0; i < symbolVisualList.length; i++) {\n          var symbolVisual = itemModel.getShallow(symbolVisualList[i], true);\n\n          if (symbolVisual != null) {\n            categoriesData.setItemVisual(idx, symbolVisualList[i], symbolVisual);\n          }\n        }\n      }); // Assign category color to visual\n\n      if (categoriesData.count()) {\n        data.each(function (idx) {\n          var model = data.getItemModel(idx);\n          let categoryIdx = model.getShallow('category');\n\n          if (categoryIdx != null) {\n            if (typeof categoryIdx === 'string') {\n              categoryIdx = categoryNameIdxMap['ec-' + categoryIdx];\n            }\n\n            var categoryStyle = categoriesData.getItemVisual(categoryIdx, 'style');\n            var style = data.ensureUniqueItemVisual(idx, 'style');\n            echarts.util.extend(style, categoryStyle);\n            var visualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n            for (let i = 0; i < visualList.length; i++) {\n              data.setItemVisual(idx, visualList[i], categoriesData.getItemVisual(categoryIdx, visualList[i]));\n            }\n          }\n        });\n      }\n    });\n  });\n  registers.registerVisual(function (ecModel) {\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var graph = seriesModel.getGraph();\n      var edgeData = seriesModel.getEdgeData();\n      var symbolType = normalize(seriesModel.get('edgeSymbol'));\n      var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n      edgeData.setVisual('drawType', 'stroke'); // var colorQuery = ['lineStyle', 'color'];\n      // var opacityQuery = ['lineStyle', 'opacity'];\n\n      edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n      edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n      edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n      edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n      edgeData.setVisual('style', seriesModel.getModel('lineStyle').getLineStyle());\n      edgeData.each(function (idx) {\n        var itemModel = edgeData.getItemModel(idx);\n        var edge = graph.getEdgeByIndex(idx);\n        var symbolType = normalize(itemModel.getShallow('symbol', true));\n        var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n        var style = itemModel.getModel('lineStyle').getLineStyle();\n        var existsStyle = edgeData.ensureUniqueItemVisual(idx, 'style');\n        echarts.util.extend(existsStyle, style);\n\n        switch (existsStyle.stroke) {\n          case 'source':\n            {\n              var nodeStyle = edge.node1.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n\n          case 'target':\n            {\n              var nodeStyle = edge.node2.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n        }\n\n        symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n        symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n        symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n        symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n      });\n    });\n  });\n  registers.registerAction({\n    type: 'graphGLRoam',\n    event: 'graphglroam',\n    update: 'series.graphGL:roam'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'series',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n\n  function noop() {}\n\n  registers.registerAction({\n    type: 'graphGLStartLayout',\n    event: 'graphgllayoutstarted',\n    update: 'series.graphGL:startLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLStopLayout',\n    event: 'graphgllayoutstopped',\n    update: 'series.graphGL:stopLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLFocusNodeAdjacency',\n    event: 'graphGLFocusNodeAdjacency',\n    update: 'series.graphGL:focusNodeAdjacency'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLUnfocusNodeAdjacency',\n    event: 'graphGLUnfocusNodeAdjacency',\n    update: 'series.graphGL:unfocusNodeAdjacency'\n  }, noop);\n}"]},"metadata":{},"sourceType":"module"}