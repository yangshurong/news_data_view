{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar Grid3DModel = echarts.ComponentModel.extend({\n  type: 'grid3D',\n  dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    // Dimension of grid3D\n    boxWidth: 100,\n    boxHeight: 100,\n    boxDepth: 100,\n    // Common axis options.\n    axisPointer: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0.8)',\n        width: 1\n      },\n      label: {\n        show: true,\n        // (dimValue: number, value: Array) => string\n        formatter: null,\n        // TODO, Consider boxWidth\n        margin: 8,\n        // backgroundColor: '#ffbd67',\n        // borderColor: '#000',\n        // borderWidth: 0,\n        textStyle: {\n          fontSize: 14,\n          color: '#fff',\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          padding: 3,\n          borderRadius: 3\n        }\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#333',\n        width: 2,\n        type: 'solid'\n      }\n    },\n    axisTick: {\n      show: true,\n      inside: false,\n      length: 3,\n      lineStyle: {\n        width: 1\n      }\n    },\n    axisLabel: {\n      show: true,\n      inside: false,\n      rotate: 0,\n      margin: 8,\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: ['#ccc'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']\n      }\n    },\n    // Light options\n    light: {\n      main: {\n        // Alpha angle for top-down rotation\n        // Positive to rotate to top.\n        alpha: 30,\n        // beta angle for left-right rotation\n        // Positive to rotate to right.\n        beta: 40\n      },\n      ambient: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      // Small damping for precise control.\n      // damping: 0.1,\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 20,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 40,\n      autoRotate: false,\n      // Distance to the surface of grid3D.\n      distance: 200,\n      // Min distance to the surface of grid3D\n      minDistance: 40,\n      // Max distance to the surface of grid3D\n      maxDistance: 400\n    }\n  }\n});\necharts.util.merge(Grid3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Grid3DModel.prototype, componentLightMixin);\nexport default Grid3DModel;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/grid3D/Grid3DModel.js"],"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","Grid3DModel","ComponentModel","extend","type","dependencies","defaultOption","show","zlevel","left","top","width","height","environment","boxWidth","boxHeight","boxDepth","axisPointer","lineStyle","color","label","formatter","margin","textStyle","fontSize","backgroundColor","padding","borderRadius","axisLine","axisTick","inside","length","axisLabel","rotate","splitLine","splitArea","areaStyle","light","main","alpha","beta","ambient","intensity","viewControl","autoRotate","distance","minDistance","maxDistance","util","merge","prototype"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar Grid3DModel = echarts.ComponentModel.extend({\n  type: 'grid3D',\n  dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    // Dimension of grid3D\n    boxWidth: 100,\n    boxHeight: 100,\n    boxDepth: 100,\n    // Common axis options.\n    axisPointer: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0.8)',\n        width: 1\n      },\n      label: {\n        show: true,\n        // (dimValue: number, value: Array) => string\n        formatter: null,\n        // TODO, Consider boxWidth\n        margin: 8,\n        // backgroundColor: '#ffbd67',\n        // borderColor: '#000',\n        // borderWidth: 0,\n        textStyle: {\n          fontSize: 14,\n          color: '#fff',\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          padding: 3,\n          borderRadius: 3\n        }\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#333',\n        width: 2,\n        type: 'solid'\n      }\n    },\n    axisTick: {\n      show: true,\n      inside: false,\n      length: 3,\n      lineStyle: {\n        width: 1\n      }\n    },\n    axisLabel: {\n      show: true,\n      inside: false,\n      rotate: 0,\n      margin: 8,\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: ['#ccc'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']\n      }\n    },\n    // Light options\n    light: {\n      main: {\n        // Alpha angle for top-down rotation\n        // Positive to rotate to top.\n        alpha: 30,\n        // beta angle for left-right rotation\n        // Positive to rotate to right.\n        beta: 40\n      },\n      ambient: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      // Small damping for precise control.\n      // damping: 0.1,\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 20,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 40,\n      autoRotate: false,\n      // Distance to the surface of grid3D.\n      distance: 200,\n      // Min distance to the surface of grid3D\n      minDistance: 40,\n      // Max distance to the surface of grid3D\n      maxDistance: 400\n    }\n  }\n});\necharts.util.merge(Grid3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Grid3DModel.prototype, componentLightMixin);\nexport default Grid3DModel;"]},"metadata":{},"sourceType":"module"}