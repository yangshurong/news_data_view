{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { dateFormat, calendarToList, numberOfDays, createCalendarAndPosition } from './utils';\nimport SliderButton from './SliderButton.vue';\nimport Emitter from './emitter';\nexport default {\n  name: 'DragTimelineVue',\n  components: {\n    SliderButton: SliderButton\n  },\n  mixins: [Emitter],\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n  props: {\n    yearChange: {\n      type: Boolean,\n      default: true\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    date: {\n      type: String,\n      default: ''\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 366\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: {\n      type: [Number, Array],\n      default: 0\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    inputSize: {\n      type: String,\n      default: 'small'\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: ''\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    sign: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    marks: {\n      type: Object,\n      default: function _default() {\n        return {\n          show: false\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      dragStatus: false,\n      // 拖动状态（不同于 dragging，dragStatus 只有在拖动期间才会 true）\n      signList: [],\n      // 传递过来的标注\n      maxValueOfYear: 0,\n      // 把一年的天数作为 max 值\n      changeDate: '',\n      // 拖动后计算出的日期\n      currentYear: 2022,\n      dateValue: '',\n      // 最终计算出的日期，yyyy-MM-dd\n      dayList: [],\n      monthList: [],\n      firstValue: null,\n      secondValue: null,\n      oldValue: null,\n      dragging: false,\n      sliderSize: 1\n    };\n  },\n  computed: {\n    stops: function stops() {\n      var _this = this;\n\n      if (!this.showStops || this.min > this.max) return [];\n\n      if (this.step === 0) {\n        process.env.NODE_ENV !== 'production' && console.warn('[Element Warn][Slider]step should not be 0.');\n        return [];\n      }\n\n      var stopCount = (this.max - this.min) / this.step;\n      var stepWidth = 100 * this.step / (this.max - this.min);\n      var result = [];\n\n      for (var i = 1; i < stopCount; i++) {\n        result.push(i * stepWidth);\n      }\n\n      if (this.range) {\n        return result.filter(function (step) {\n          return step < 100 * (_this.minValue - _this.min) / (_this.max - _this.min) || step > 100 * (_this.maxValue - _this.min) / (_this.max - _this.min);\n        });\n      } else {\n        return result.filter(function (step) {\n          return step > 100 * (_this.firstValue - _this.min) / (_this.max - _this.min);\n        });\n      }\n    },\n    markList: function markList() {\n      var _this2 = this;\n\n      if (!this.marks) {\n        return [];\n      }\n\n      var marksKeys = Object.keys(this.marks);\n      return marksKeys.map(parseFloat).sort(function (a, b) {\n        return a - b;\n      }).filter(function (point) {\n        return point <= _this2.max && point >= _this2.min;\n      }).map(function (point) {\n        return {\n          point: point,\n          position: (point - _this2.min) * 100 / (_this2.max - _this2.min),\n          mark: _this2.marks[point]\n        };\n      });\n    },\n    minValue: function minValue() {\n      return Math.min(this.firstValue, this.secondValue);\n    },\n    maxValue: function maxValue() {\n      return Math.max(this.firstValue, this.secondValue);\n    },\n    barSize: function barSize() {\n      return this.range ? \"\".concat(100 * (this.maxValue - this.minValue) / (this.max - this.min), \"%\") : \"\".concat(100 * (this.firstValue - this.min) / (this.max - this.min), \"%\");\n    },\n    barStart: function barStart() {\n      return this.range ? \"\".concat(100 * (this.minValue - this.min) / (this.max - this.min), \"%\") : '0%';\n    },\n    precision: function precision() {\n      var precisions = [this.min, this.max, this.step].map(function (item) {\n        var decimal = ('' + item).split('.')[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    },\n    runwayStyle: function runwayStyle() {\n      return {};\n    },\n    barStyle: function barStyle() {\n      return {\n        width: this.barSize,\n        left: this.barStart\n      };\n    },\n    sliderDisabled: function sliderDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n  watch: {\n    sign: function sign() {\n      this.genSignDataAndPosition();\n    },\n    date: function date(val) {\n      this.computedCurrentYear(val);\n      this.computedMonthAndPosition(val);\n      this.computedDayPosOfYear(val);\n    },\n    value: function value(val, oldVal) {\n      if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function (item, index) {\n        return item === oldVal[index];\n      })) {\n        return;\n      }\n\n      this.setValues();\n    },\n    dragging: function dragging(val) {\n      if (!val) {\n        this.setValues();\n      }\n    },\n    firstValue: function firstValue(val) {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue]);\n      } else {\n        this.$emit('input', val);\n      }\n    },\n    secondValue: function secondValue() {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue]);\n      }\n    },\n    min: function min() {\n      this.setValues();\n    },\n    max: function max() {\n      this.setValues();\n    }\n  },\n  mounted: function mounted() {\n    this.currentYear = new Date().getFullYear(); // 初始化时先获取下当前年份，watch 中会再次计算正确的年份\n\n    var valuetext;\n\n    if (this.range) {\n      if (Array.isArray(this.value)) {\n        this.firstValue = Math.max(this.min, this.value[0]);\n        this.secondValue = Math.min(this.maxValueOfYear, this.value[1]);\n      } else {\n        this.firstValue = this.min;\n        this.secondValue = this.maxValueOfYear;\n      }\n\n      this.oldValue = [this.firstValue, this.secondValue];\n      valuetext = \"\".concat(this.firstValue, \"-\").concat(this.secondValue);\n    } else {\n      if (typeof this.value !== 'number' || isNaN(this.value)) {\n        this.firstValue = this.min;\n      } else {\n        this.firstValue = Math.min(this.maxValueOfYear, Math.max(this.min, this.value));\n      }\n\n      this.oldValue = this.firstValue;\n      valuetext = this.firstValue;\n    }\n\n    this.$el.setAttribute('aria-valuetext', valuetext); // label screen reader\n\n    this.$el.setAttribute('aria-label', this.label ? this.label : \"slider between \".concat(this.min, \" and \").concat(this.maxValueOfYear));\n    this.resetSize();\n    window.addEventListener('resize', this.resetSize);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.resetSize);\n  },\n  methods: {\n    // 获取标注的位置\n    genSignDataAndPosition: function genSignDataAndPosition() {\n      var _this3 = this;\n\n      var result = [];\n      this.sign.map(function (s) {\n        var index = _this3.dayList.findIndex(function (_) {\n          return _.date === s;\n        });\n\n        if (index > -1) {\n          result.push(_this3.dayList[index]);\n        }\n      });\n      this.signList = result;\n    },\n    // 设置日期及滑块位置\n    setDateAndSlider: function setDateAndSlider(date) {\n      this.dateValue = date;\n      this.changeDate = date;\n      this.computedDayPosOfYear(date);\n    },\n    // 年份圆形操作按钮点击\n    handleYearItemClick: function handleYearItemClick(year, type) {\n      this.currentYear = year;\n      this.computedCurrentYearDays(this.currentYear);\n\n      if (!type) {\n        var nowYear = new Date().getFullYear();\n        var _date = '';\n\n        if (this.currentYear === nowYear) {\n          // 如果是当前年份，设置为当前日期\n          _date = dateFormat(new Date(), 'yyyy-MM-dd');\n        } else {\n          // 如果不是当前年份，设置为对应年份的一月一日\n          var YMD = this.getYearMonthDay(this.currentYear + '-' + '01-01');\n          _date = YMD.year + '-' + YMD.month + '-' + YMD.day;\n        }\n\n        this.setDateAndSlider(_date);\n      } // 切换年份，重新设置月份值\n\n\n      this.computedMonthAndPosition(this.changeDate);\n    },\n    computedCurrentYearDays: function computedCurrentYearDays(year) {\n      this.maxValueOfYear = numberOfDays(year);\n    },\n    computedCurrentYear: function computedCurrentYear(val) {\n      this.currentYear = Number(this.getYearMonthDay(val).year);\n      this.computedCurrentYearDays();\n    },\n    // 获取年月日\n    getYearMonthDay: function getYearMonthDay(date) {\n      // 兼容 ios 设备（ios 不支持短横线格式的日期）\n      var _date = JSON.parse(JSON.stringify(date)).replace(/-/g, '/');\n\n      if (_date && _date !== '') {\n        var year = dateFormat(new Date(Date.parse(_date)), 'yyyy');\n        var month = dateFormat(new Date(Date.parse(_date)), 'MM');\n        var day = dateFormat(new Date(Date.parse(_date)), 'dd');\n        return {\n          year: year,\n          month: month,\n          day: day\n        };\n      }\n    },\n    // 时间轴上日期点击\n    handleTimeItemClick: function handleTimeItemClick(date) {\n      this.setDateAndSlider(date);\n    },\n    // 滑块根据位置计算出日期\n    getDateValue: function getDateValue(val) {\n      this.dateValue = val;\n      this.changeDate = val;\n      this.$emit('changeDate', val);\n    },\n    // 计算某个日期在一年里所有日期中的位置, 传递过来的时间格式必须是 '2022-02-08'\n    computedDayPosOfYear: function computedDayPosOfYear(date) {\n      var year = this.getYearMonthDay(date).year;\n      var allDateOfYear = calendarToList(year); // 某年的所有日期\n\n      var dateIndexOfYear = allDateOfYear.indexOf(date); // 通过日期在一年中的索引，找出在时间轴上的位置\n\n      this.firstValue = dateIndexOfYear;\n    },\n    // 计算月份位置\n    computedMonthAndPosition: function computedMonthAndPosition(val) {\n      var year = this.getYearMonthDay(val).year;\n      var dayList = createCalendarAndPosition(year);\n      this.dayList = dayList; // 重新计算标记日期位置\n\n      this.genSignDataAndPosition();\n    },\n    valueChanged: function valueChanged() {\n      var _this4 = this;\n\n      if (this.range) {\n        return ![this.minValue, this.maxValue].every(function (item, index) {\n          return item === _this4.oldValue[index];\n        });\n      } else {\n        return this.value !== this.oldValue;\n      }\n    },\n    setValues: function setValues() {\n      if (this.min > this.maxValueOfYear) {\n        console.error('[Element Error][Slider]min should not be greater than max.');\n        return;\n      }\n\n      var val = this.value;\n\n      if (this.range && Array.isArray(val)) {\n        if (val[1] < this.min) {\n          this.$emit('input', [this.min, this.min]);\n        } else if (val[0] > this.maxValueOfYear) {\n          this.$emit('input', [this.maxValueOfYear, this.maxValueOfYear]);\n        } else if (val[0] < this.min) {\n          this.$emit('input', [this.min, val[1]]);\n        } else if (val[1] > this.maxValueOfYear) {\n          this.$emit('input', [val[0], this.maxValueOfYear]);\n        } else {\n          this.firstValue = val[0];\n          this.secondValue = val[1];\n\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', [this.minValue, this.maxValue]);\n            this.oldValue = val.slice();\n          }\n        }\n      } else if (!this.range && typeof val === 'number' && !isNaN(val)) {\n        if (val < this.min) {\n          this.$emit('input', this.min);\n        } else if (val > this.maxValueOfYear) {\n          this.$emit('input', this.maxValueOfYear);\n        } else {\n          this.firstValue = val;\n\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', val);\n            this.oldValue = val;\n          }\n        }\n      }\n    },\n    setPosition: function setPosition(percent) {\n      var targetValue = this.min + percent * (this.maxValueOfYear - this.min) / 100;\n\n      if (!this.range) {\n        this.$refs.sliderButton.setPosition(percent);\n        return;\n      }\n\n      var button;\n\n      if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {\n        button = this.firstValue < this.secondValue ? 'button1' : 'button2';\n      } else {\n        button = this.firstValue > this.secondValue ? 'button1' : 'button2';\n      }\n\n      this.$refs[button].setPosition(percent);\n    },\n    // eslint-disable-next-line no-unused-vars\n    onSliderClick: function onSliderClick(event) {// 取消通过 event 计算百分比获取日期\n      // if (this.sliderDisabled || this.dragging) return\n      // const year = this.getYearMonthDay(this.changeDate).year\n      // const allDateOfYear = calendarToList(year)\n      // this.resetSize()\n      // const sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left\n      // const dis = event.clientX - sliderOffsetLeft\n      // const dateIndex = Math.round(getPercentage(dis, this.sliderSize) / 100 * allDateOfYear.length)\n      // const date = allDateOfYear[dateIndex]\n      // this.setDateAndSlider(date)\n      // this.emitChange()\n    },\n    resetSize: function resetSize() {\n      if (this.$refs.slider) {\n        this.sliderSize = this.$refs.slider[\"client\".concat('Width')];\n      }\n    },\n    emitChange: function emitChange() {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        _this5.$emit('change', _this5.range ? [_this5.minValue, _this5.maxValue] : _this5.value);\n      });\n    },\n    getStopStyle: function getStopStyle(position) {\n      return {\n        'left': position + '%'\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"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ACA;AACA,+CACAC,KADA,CACA;AAAA;AAAA,SADA;AAEA,OAHA,MAGA;AACA;AACA;AACA,KA5FA;AA6FAC,aA7FA,uBA6FA;AACA;AACA5C;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA,SAFA,MAEA;AACA;AACA,SAFA,MAEA;AACA;AACA,SAFA,MAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,OAjBA,MAiBA;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA,SAFA,MAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjIA;AAmIA6C,eAnIA,uBAmIAC,OAnIA,EAmIA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACAC;AACA,OAFA,MAEA;AACAA;AACA;;AACA;AACA,KAhJA;AAkJA;AACAC,iBAnJA,yBAmJAC,KAnJA,EAmJA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/JA;AAiKAC,aAjKA,uBAiKA;AACA;AACA;AACA;AACA,KArKA;AAuKAC,cAvKA,wBAuKA;AAAA;;AACA;AACA;AACA,OAFA;AAGA,KA3KA;AA6KAC,gBA7KA,wBA6KA7C,QA7KA,EA6KA;AACA;AAAA;AAAA;AACA;AA/KA;AAzRA","names":["dateFormat","calendarToList","numberOfDays","createCalendarAndPosition","name","components","SliderButton","mixins","inject","elForm","default","props","yearChange","type","modal","date","min","max","step","value","showInput","showInputControls","inputSize","showStops","disabled","range","height","debounce","label","sign","marks","show","data","dragStatus","signList","maxValueOfYear","changeDate","currentYear","dateValue","dayList","monthList","firstValue","secondValue","oldValue","dragging","sliderSize","computed","stops","process","console","result","markList","sort","filter","map","point","position","mark","minValue","maxValue","barSize","barStart","precision","runwayStyle","barStyle","width","left","sliderDisabled","watch","val","oldVal","Array","mounted","valuetext","window","beforeDestroy","methods","genSignDataAndPosition","setDateAndSlider","handleYearItemClick","year","_date","computedCurrentYearDays","computedCurrentYear","getYearMonthDay","month","day","handleTimeItemClick","getDateValue","computedDayPosOfYear","computedMonthAndPosition","valueChanged","every","setValues","setPosition","percent","button","onSliderClick","event","resetSize","emitChange","getStopStyle"],"sourceRoot":"node_modules/_drag-timeline-vue@1.0.6@drag-timeline-vue/packages/DragTimelineVue/src","sources":["index.vue"],"sourcesContent":["<template>\n  <div\n    class=\"timeline-container\"\n    :class=\"{dragging: dragging && modal}\">\n    <div\n      class=\"timeline-year\"\n      v-if=\"yearChange\">\n      <div\n        class=\"year-item item0\"\n        @click=\"handleYearItemClick(Number(currentYear) - 1)\">\n        {{ Number(currentYear) - 1 }}\n      </div>\n      <div\n        class=\"year-item item1\"\n        @click=\"handleYearItemClick(Number(currentYear), 'current')\">\n        {{ Number(currentYear) }}\n      </div>\n      <div\n        class=\"year-item item2\"\n        @click=\"handleYearItemClick(Number(currentYear) + 1)\">\n        {{ Number(currentYear) + 1 }}\n      </div>\n    </div>\n    <div\n      class=\"timeline-slider\"\n      role=\"slider\"\n      :aria-valuemin=\"min\"\n      :aria-valuemax=\"max\"\n      :aria-disabled=\"sliderDisabled\">\n      <div\n        ref=\"slider\"\n        class=\"timeline-runway\"\n        :class=\"{ 'disabled': sliderDisabled }\"\n        :style=\"runwayStyle\"\n        @click=\"onSliderClick\">\n        <div\n          class=\"timeline-slider-bar\"\n          :style=\"barStyle\" />\n        <slider-button\n          ref=\"sliderButton\"\n          v-model=\"firstValue\"\n          :init-date=\"date\"\n          :change-date=\"changeDate\"\n          @emitDateValue=\"getDateValue\"\n          v-show=\"date!== ''\">\n          <div\n            slot=\"sliderContent\">\n            <slot\n              name=\"sliderContent\" />\n          </div>\n        </slider-button>\n        <div\n          class=\"timeline-days\">\n          <div\n            v-for=\"(item, index) of dayList\"\n            :key=\"index\"\n            class=\"day-item\"\n            :style=\"{left: item.position + '%'}\">\n            <div\n              class=\"label-text\">\n              <span\n                v-if=\"item.label\"\n                :title=\"item.date\"\n                class=\"month-value\"\n                @click.stop=\"handleTimeItemClick(item.date)\">{{ item.label }}</span>\n              <span\n                v-else\n                :title=\"item.date\"\n                class=\"day-value\"\n                @click.stop=\"handleTimeItemClick(item.date)\" />\n            </div>\n          </div>\n        </div>\n        <div\n          class=\"timeline-signs\">\n          <div\n            v-for=\"(item, index) of signList\"\n            :key=\"index\"\n            class=\"sign-item\"\n            :title=\"item.date\"\n            :style=\"{left: item.position + '%'}\"\n            @click.stop=\"handleTimeItemClick(item.date)\">\n            <div\n              class=\"label-text\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport {\n  dateFormat,\n  calendarToList,\n  numberOfDays,\n  createCalendarAndPosition\n} from './utils'\nimport SliderButton from './SliderButton.vue'\nimport Emitter from './emitter'\n\nexport default {\n  name: 'DragTimelineVue',\n\n  components: {\n    SliderButton\n  },\n\n  mixins: [Emitter],\n\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n\n  props: {\n    yearChange: {\n      type: Boolean,\n      default: true\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    date: {\n      type: String,\n      default: ''\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 366\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: {\n      type: [Number, Array],\n      default: 0\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    inputSize: {\n      type: String,\n      default: 'small'\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: ''\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    sign: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    marks: {\n      type: Object,\n      default () {\n        return {\n          show: false\n        }\n      }\n    }\n  },\n\n  data () {\n    return {\n      dragStatus: false, // 拖动状态（不同于 dragging，dragStatus 只有在拖动期间才会 true）\n      signList: [], // 传递过来的标注\n      maxValueOfYear: 0, // 把一年的天数作为 max 值\n      changeDate: '', // 拖动后计算出的日期\n      currentYear: 2022,\n      dateValue: '', // 最终计算出的日期，yyyy-MM-dd\n      dayList: [],\n      monthList: [],\n      firstValue: null,\n      secondValue: null,\n      oldValue: null,\n      dragging: false,\n      sliderSize: 1\n    }\n  },\n\n  computed: {\n    stops () {\n      if (!this.showStops || this.min > this.max) return []\n      if (this.step === 0) {\n        process.env.NODE_ENV !== 'production' &&\n          console.warn('[Element Warn][Slider]step should not be 0.')\n        return []\n      }\n      const stopCount = (this.max - this.min) / this.step\n      const stepWidth = 100 * this.step / (this.max - this.min)\n      const result = []\n      for (let i = 1; i < stopCount; i++) {\n        result.push(i * stepWidth)\n      }\n      if (this.range) {\n        return result.filter(step => {\n          return step < 100 * (this.minValue - this.min) / (this.max - this.min) ||\n            step > 100 * (this.maxValue - this.min) / (this.max - this.min)\n        })\n      } else {\n        return result.filter(step => step > 100 * (this.firstValue - this.min) / (this.max - this.min))\n      }\n    },\n\n    markList () {\n      if (!this.marks) {\n        return []\n      }\n\n      const marksKeys = Object.keys(this.marks)\n      return marksKeys.map(parseFloat)\n        .sort((a, b) => a - b)\n        .filter(point => point <= this.max && point >= this.min)\n        .map(point => ({\n          point,\n          position: (point - this.min) * 100 / (this.max - this.min),\n          mark: this.marks[point]\n        }))\n    },\n\n    minValue () {\n      return Math.min(this.firstValue, this.secondValue)\n    },\n\n    maxValue () {\n      return Math.max(this.firstValue, this.secondValue)\n    },\n\n    barSize () {\n      return this.range\n        ? `${100 * (this.maxValue - this.minValue) / (this.max - this.min)}%`\n        : `${100 * (this.firstValue - this.min) / (this.max - this.min)}%`\n    },\n\n    barStart () {\n      return this.range\n        ? `${100 * (this.minValue - this.min) / (this.max - this.min)}%`\n        : '0%'\n    },\n\n    precision () {\n      const precisions = [this.min, this.max, this.step].map(item => {\n        const decimal = ('' + item).split('.')[1]\n        return decimal ? decimal.length : 0\n      })\n      return Math.max.apply(null, precisions)\n    },\n\n    runwayStyle () {\n      return {}\n    },\n\n    barStyle () {\n      return {\n        width: this.barSize,\n        left: this.barStart\n      }\n    },\n\n    sliderDisabled () {\n      return this.disabled || (this.elForm || {}).disabled\n    }\n  },\n\n  watch: {\n    sign () {\n      this.genSignDataAndPosition()\n    },\n    date (val) {\n      this.computedCurrentYear(val)\n      this.computedMonthAndPosition(val)\n      this.computedDayPosOfYear(val)\n    },\n    value (val, oldVal) {\n      if (this.dragging ||\n        Array.isArray(val) &&\n        Array.isArray(oldVal) &&\n        val.every((item, index) => item === oldVal[index])) {\n        return\n      }\n      this.setValues()\n    },\n\n    dragging (val) {\n      if (!val) {\n        this.setValues()\n      }\n    },\n\n    firstValue (val) {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue])\n      } else {\n        this.$emit('input', val)\n      }\n    },\n\n    secondValue () {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue])\n      }\n    },\n\n    min () {\n      this.setValues()\n    },\n\n    max () {\n      this.setValues()\n    }\n  },\n\n  mounted () {\n    this.currentYear = new Date().getFullYear() // 初始化时先获取下当前年份，watch 中会再次计算正确的年份\n    let valuetext\n    if (this.range) {\n      if (Array.isArray(this.value)) {\n        this.firstValue = Math.max(this.min, this.value[0])\n        this.secondValue = Math.min(this.maxValueOfYear, this.value[1])\n      } else {\n        this.firstValue = this.min\n        this.secondValue = this.maxValueOfYear\n      }\n      this.oldValue = [this.firstValue, this.secondValue]\n      valuetext = `${this.firstValue}-${this.secondValue}`\n    } else {\n      if (typeof this.value !== 'number' || isNaN(this.value)) {\n        this.firstValue = this.min\n      } else {\n        this.firstValue = Math.min(this.maxValueOfYear, Math.max(this.min, this.value))\n      }\n      this.oldValue = this.firstValue\n      valuetext = this.firstValue\n    }\n    this.$el.setAttribute('aria-valuetext', valuetext)\n\n    // label screen reader\n    this.$el.setAttribute('aria-label', this.label ? this.label : `slider between ${this.min} and ${this.maxValueOfYear}`)\n\n    this.resetSize()\n    window.addEventListener('resize', this.resetSize)\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('resize', this.resetSize)\n  },\n\n  methods: {\n    // 获取标注的位置\n    genSignDataAndPosition () {\n      let result = []\n      this.sign.map((s) => {\n        const index = this.dayList.findIndex(_ => _.date === s)\n        if (index > -1) {\n          result.push(this.dayList[index])\n        }\n      })\n      this.signList = result\n    },\n    // 设置日期及滑块位置\n    setDateAndSlider (date) {\n      this.dateValue = date\n      this.changeDate = date\n      this.computedDayPosOfYear(date)\n    },\n    // 年份圆形操作按钮点击\n    handleYearItemClick (year, type) {\n      this.currentYear = year\n      this.computedCurrentYearDays(this.currentYear)\n      if (!type) {\n        const nowYear = new Date().getFullYear()\n        let _date = ''\n        if (this.currentYear === nowYear) {\n          // 如果是当前年份，设置为当前日期\n          _date = dateFormat(new Date(), 'yyyy-MM-dd')\n        } else {\n          // 如果不是当前年份，设置为对应年份的一月一日\n          const YMD = this.getYearMonthDay(this.currentYear + '-' + '01-01')\n          _date = YMD.year + '-' + YMD.month + '-' + YMD.day\n        }\n        this.setDateAndSlider(_date)\n      }\n      // 切换年份，重新设置月份值\n      this.computedMonthAndPosition(this.changeDate)\n    },\n    computedCurrentYearDays (year) {\n      this.maxValueOfYear = numberOfDays(year)\n    },\n    computedCurrentYear (val) {\n      this.currentYear = Number(this.getYearMonthDay(val).year)\n      this.computedCurrentYearDays()\n    },\n    // 获取年月日\n    getYearMonthDay (date) {\n      // 兼容 ios 设备（ios 不支持短横线格式的日期）\n      const _date = JSON.parse(JSON.stringify(date)).replace(/-/g, '/')\n      if (_date && _date !== '') {\n        const year = dateFormat(new Date(Date.parse(_date)), 'yyyy')\n        const month = dateFormat(new Date(Date.parse(_date)), 'MM')\n        const day = dateFormat(new Date(Date.parse(_date)), 'dd')\n        return {\n          year,\n          month,\n          day\n        }\n      }\n    },\n    // 时间轴上日期点击\n    handleTimeItemClick (date) {\n      this.setDateAndSlider(date)\n    },\n    // 滑块根据位置计算出日期\n    getDateValue (val) {\n      this.dateValue = val\n      this.changeDate = val\n      this.$emit('changeDate', val)\n    },\n    // 计算某个日期在一年里所有日期中的位置, 传递过来的时间格式必须是 '2022-02-08'\n    computedDayPosOfYear (date) {\n      const year = this.getYearMonthDay(date).year\n      const allDateOfYear = calendarToList(year) // 某年的所有日期\n      const dateIndexOfYear = allDateOfYear.indexOf(date) // 通过日期在一年中的索引，找出在时间轴上的位置\n      this.firstValue = dateIndexOfYear\n    },\n    // 计算月份位置\n    computedMonthAndPosition (val) {\n      const year = this.getYearMonthDay(val).year\n      const dayList = createCalendarAndPosition(year)\n      this.dayList = dayList\n      // 重新计算标记日期位置\n      this.genSignDataAndPosition()\n    },\n    valueChanged () {\n      if (this.range) {\n        return ![this.minValue, this.maxValue]\n          .every((item, index) => item === this.oldValue[index])\n      } else {\n        return this.value !== this.oldValue\n      }\n    },\n    setValues () {\n      if (this.min > this.maxValueOfYear) {\n        console.error('[Element Error][Slider]min should not be greater than max.')\n        return\n      }\n      const val = this.value\n      if (this.range && Array.isArray(val)) {\n        if (val[1] < this.min) {\n          this.$emit('input', [this.min, this.min])\n        } else if (val[0] > this.maxValueOfYear) {\n          this.$emit('input', [this.maxValueOfYear, this.maxValueOfYear])\n        } else if (val[0] < this.min) {\n          this.$emit('input', [this.min, val[1]])\n        } else if (val[1] > this.maxValueOfYear) {\n          this.$emit('input', [val[0], this.maxValueOfYear])\n        } else {\n          this.firstValue = val[0]\n          this.secondValue = val[1]\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', [this.minValue, this.maxValue])\n            this.oldValue = val.slice()\n          }\n        }\n      } else if (!this.range && typeof val === 'number' && !isNaN(val)) {\n        if (val < this.min) {\n          this.$emit('input', this.min)\n        } else if (val > this.maxValueOfYear) {\n          this.$emit('input', this.maxValueOfYear)\n        } else {\n          this.firstValue = val\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', val)\n            this.oldValue = val\n          }\n        }\n      }\n    },\n\n    setPosition (percent) {\n      const targetValue = this.min + percent * (this.maxValueOfYear - this.min) / 100\n      if (!this.range) {\n        this.$refs.sliderButton.setPosition(percent)\n        return\n      }\n      let button\n      if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {\n        button = this.firstValue < this.secondValue ? 'button1' : 'button2'\n      } else {\n        button = this.firstValue > this.secondValue ? 'button1' : 'button2'\n      }\n      this.$refs[button].setPosition(percent)\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    onSliderClick (event) {\n      // 取消通过 event 计算百分比获取日期\n      // if (this.sliderDisabled || this.dragging) return\n      // const year = this.getYearMonthDay(this.changeDate).year\n      // const allDateOfYear = calendarToList(year)\n      // this.resetSize()\n      // const sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left\n      // const dis = event.clientX - sliderOffsetLeft\n      // const dateIndex = Math.round(getPercentage(dis, this.sliderSize) / 100 * allDateOfYear.length)\n      // const date = allDateOfYear[dateIndex]\n      // this.setDateAndSlider(date)\n      // this.emitChange()\n    },\n\n    resetSize () {\n      if (this.$refs.slider) {\n        this.sliderSize = this.$refs.slider[`client${'Width'}`]\n      }\n    },\n\n    emitChange () {\n      this.$nextTick(() => {\n        this.$emit('change', this.range ? [this.minValue, this.maxValue] : this.value)\n      })\n    },\n\n    getStopStyle (position) {\n      return { 'left': position + '%' }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.timeline-container {\n  display: flex;\n  align-items: center;\n  padding: 0 100px;\n  user-select: none;\n  color: #000000;\n  &::before {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    visibility: hidden;\n    width: 100%;\n    height: 100%;\n    content: '';\n    transition: all 0.3s;\n    opacity: 0;\n    background: rgba(0, 0, 0, 0.3);\n  }\n  &.dragging {\n    &::before {\n      visibility: visible;\n      width: 100%;\n      height: 100%;\n      opacity: 1;\n    }\n  }\n  .timeline-year {\n    position: relative;\n    box-sizing: border-box;\n    width: 90px;\n    height: 90px;\n    margin: 0 10px 0 0;\n    background-size: cover;\n    .year-item {\n      position: absolute;\n      display: flex;\n      align-items: center;\n      cursor: pointer;\n      color: #409eff;\n      &.item0 {\n        top: 0;\n        left: 0;\n        width: 50%;\n        height: 50%;\n      }\n      &.item1 {\n        top: 0;\n        right: 0;\n        width: 38px;\n        height: 100%;\n        font-weight: bold;\n      }\n      &.item2 {\n        bottom: 0;\n        left: 0;\n        width: 50%;\n        height: 50%;\n      }\n    }\n  }\n  .timeline-slider {\n    flex-grow: 1;\n    padding: 0 40px;\n    border-radius: 3px;\n    background-color: #e4e7ed;\n    background-image: linear-gradient(-90deg, #f0f3f5 1%, #409eff 100%),\n      linear-gradient(#00f6ff, #00f6ff);\n    z-index: 9;\n    &::before,\n    &::after {\n      display: table;\n      clear: both;\n      content: '';\n    }\n    .timeline-runway {\n      position: relative;\n      display: flex;\n      width: 100%;\n      height: 6px;\n      cursor: pointer;\n      vertical-align: middle;\n      .timeline-slider-bar {\n        border-radius: 3px;\n        background-image: linear-gradient(-90deg, #f0f3f5 1%, #409eff 100%),\n          linear-gradient(#00f6ff, #00f6ff);\n      }\n      .timeline-days {\n        z-index: 9999;\n        display: flex;\n        .day-item {\n          position: absolute;\n          left: 0;\n          .label-text {\n            span {\n              &.month-value {\n                position: absolute;\n                top: 20px;\n                left: 0;\n                width: max-content;\n                transform: translateX(-50%);\n                &::before {\n                  position: absolute;\n                  top: -22px;\n                  left: 50%;\n                  width: 10px;\n                  height: 10px;\n                  content: '';\n                  transform: translateX(-50%);\n                  opacity: 0.8;\n                  border-radius: 50%;\n                  background-color: #409eff;\n                }\n              }\n              &.day-value {\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 6px;\n                height: 6px;\n                opacity: 0;\n                background: #ffffff;\n              }\n            }\n          }\n        }\n      }\n      .timeline-signs {\n        z-index: 9999;\n        display: flex;\n        .sign-item {\n          position: absolute;\n          left: 0;\n          .label-text {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            width: 29px;\n            height: 27px;\n            transform: translateX(-50%);\n            width: 0;\n            height: 0;\n            border-top: 20px solid #409eff;\n            border-left: 10px solid transparent;\n            border-right: 10px solid transparent;\n            animation: signAnimate 2s 0.6s infinite;\n          }\n        }\n      }\n      .timeline-marks {\n        .mark-dot {\n          position: absolute;\n          width: 6px;\n          height: 6px;\n          transform: translateX(-50%);\n          border-radius: 100%;\n          background-color: #ffffff;\n        }\n        .mark-label {\n          top: 0;\n          left: 12px;\n          width: 18px;\n          height: 100%;\n          .mark-label-text {\n            font-size: 14px;\n            position: absolute;\n            min-width: fit-content;\n            margin-top: 15px;\n            transform: translateX(-50%);\n            color: #909399;\n          }\n        }\n      }\n      &.disabled {\n        cursor: default;\n      }\n    }\n  }\n}\n@keyframes signAnimate {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}