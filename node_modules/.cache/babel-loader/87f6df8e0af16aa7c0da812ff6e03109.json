{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Mapbox3DLayer from './Mapbox3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nvar TILE_SIZE = 512;\nexport default echarts.ComponentView.extend({\n  type: 'mapbox3D',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Mapbox3DLayer('mapbox3D', zr);\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var mapbox = this._zrLayer.getMapbox();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, mapbox); // PENDING\n\n\n    ['zoom', 'rotate', 'drag', 'pitch', 'rotate', 'move'].forEach(function (eName) {\n      mapbox.on(eName, dispatchInteractAction);\n    });\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  render: function render(mapbox3DModel, ecModel, api) {\n    var mapbox = this._zrLayer.getMapbox();\n\n    var styleDesc = mapbox3DModel.get('style');\n    var styleStr = JSON.stringify(styleDesc);\n\n    if (styleStr !== this._oldStyleStr) {\n      if (styleDesc) {\n        mapbox.setStyle(styleDesc);\n      }\n    }\n\n    this._oldStyleStr = styleStr;\n    mapbox.setCenter(mapbox3DModel.get('center'));\n    mapbox.setZoom(mapbox3DModel.get('zoom'));\n    mapbox.setPitch(mapbox3DModel.get('pitch'));\n    mapbox.setBearing(mapbox3DModel.get('bearing'));\n    mapbox3DModel.setMapbox(mapbox);\n    var coordSys = mapbox3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(mapbox3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(mapbox3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(mapbox3DModel.getModel('temporalSuperSampling'));\n    this._mapbox3DModel = mapbox3DModel;\n  },\n  afterRender: function afterRender(mapbox3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, mapbox3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, mapbox3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    mapbox3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function updateCamera(mapbox3DModel, ecModel, api, payload) {\n    mapbox3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function _dispatchInteractAction(api, mapbox, mapbox3DModel) {\n    api.dispatchAction({\n      type: 'mapbox3DChangeCamera',\n      pitch: mapbox.getPitch(),\n      zoom: mapbox.getZoom(),\n      center: mapbox.getCenter().toArray(),\n      bearing: mapbox.getBearing(),\n      mapbox3DId: this._mapbox3DModel && this._mapbox3DModel.id\n    });\n  },\n  _updateGroundMesh: function _updateGroundMesh() {\n    if (this._mapbox3DModel) {\n      var coordSys = this._mapbox3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function dispose(ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/mapbox3D/Mapbox3DView.js"],"names":["echarts","Mapbox3DLayer","SceneHelper","graphicGL","displayShadowGLSL","Shader","import","TILE_SIZE","ComponentView","extend","type","__ecgl__","init","ecModel","api","zr","getZr","_zrLayer","painter","insertLayer","_lightRoot","Node","_sceneHelper","initLight","mapbox","getMapbox","dispatchInteractAction","_dispatchInteractAction","bind","forEach","eName","on","_groundMesh","Mesh","geometry","PlaneGeometry","material","Material","shader","vertex","source","fragment","depthMask","renderOrder","culling","castShadow","$ignorePicking","renderNormal","render","mapbox3DModel","styleDesc","get","styleStr","JSON","stringify","_oldStyleStr","setStyle","setCenter","setZoom","setPitch","setBearing","setMapbox","coordSys","coordinateSystem","viewGL","scene","add","_updateGroundMesh","setScene","updateLight","setPostEffect","getModel","setTemporalSuperSampling","_mapbox3DModel","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","traverse","mesh","define","updateCamera","payload","setCameraOption","refresh","dispatchAction","pitch","getPitch","zoom","getZoom","center","getCenter","toArray","bearing","getBearing","mapbox3DId","id","pt","dataToPoint","position","set","plane","Plane","Vector3","ray1","camera","castRay","Vector2","ray2","pos0","intersectPlane","pos1","scale","dist","rootNode","x","dispose","delLayer"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Mapbox3DLayer from './Mapbox3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nvar TILE_SIZE = 512;\nexport default echarts.ComponentView.extend({\n  type: 'mapbox3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Mapbox3DLayer('mapbox3D', zr);\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var mapbox = this._zrLayer.getMapbox();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, mapbox); // PENDING\n\n\n    ['zoom', 'rotate', 'drag', 'pitch', 'rotate', 'move'].forEach(function (eName) {\n      mapbox.on(eName, dispatchInteractAction);\n    });\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  render: function (mapbox3DModel, ecModel, api) {\n    var mapbox = this._zrLayer.getMapbox();\n\n    var styleDesc = mapbox3DModel.get('style');\n    var styleStr = JSON.stringify(styleDesc);\n\n    if (styleStr !== this._oldStyleStr) {\n      if (styleDesc) {\n        mapbox.setStyle(styleDesc);\n      }\n    }\n\n    this._oldStyleStr = styleStr;\n    mapbox.setCenter(mapbox3DModel.get('center'));\n    mapbox.setZoom(mapbox3DModel.get('zoom'));\n    mapbox.setPitch(mapbox3DModel.get('pitch'));\n    mapbox.setBearing(mapbox3DModel.get('bearing'));\n    mapbox3DModel.setMapbox(mapbox);\n    var coordSys = mapbox3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(mapbox3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(mapbox3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(mapbox3DModel.getModel('temporalSuperSampling'));\n    this._mapbox3DModel = mapbox3DModel;\n  },\n  afterRender: function (mapbox3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, mapbox3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, mapbox3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    mapbox3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function (mapbox3DModel, ecModel, api, payload) {\n    mapbox3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function (api, mapbox, mapbox3DModel) {\n    api.dispatchAction({\n      type: 'mapbox3DChangeCamera',\n      pitch: mapbox.getPitch(),\n      zoom: mapbox.getZoom(),\n      center: mapbox.getCenter().toArray(),\n      bearing: mapbox.getBearing(),\n      mapbox3DId: this._mapbox3DModel && this._mapbox3DModel.id\n    });\n  },\n  _updateGroundMesh: function () {\n    if (this._mapbox3DModel) {\n      var coordSys = this._mapbox3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function (ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});"]},"metadata":{},"sourceType":"module"}