{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport Pass from 'claygl/src/compositor/Pass';\nimport Geometry from 'claygl/src/Geometry';\nimport Mesh from 'claygl/src/Mesh';\nimport Material from 'claygl/src/Material';\nimport Shader from 'claygl/src/Shader';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport OrthoCamera from 'claygl/src/camera/Orthographic';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Line2DGeometry from './Line2D'; // import TemporalSS from '../../effect/TemporalSuperSampling';\n\nimport vectorFieldParticleGLSL from './vectorFieldParticle.glsl.js';\nShader['import'](vectorFieldParticleGLSL);\n\nfunction createSpriteCanvas(size) {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#fff';\n  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n  ctx.fill();\n  return canvas;\n} // import spriteUtil from '../../util/sprite';\n\n\nvar VectorFieldParticleSurface = function VectorFieldParticleSurface() {\n  /**\n   * @type {number}\n   */\n  this.motionBlurFactor = 0.99;\n  /**\n   * Vector field lookup image\n   * @type {clay.Texture2D}\n   */\n\n  this.vectorFieldTexture = new Texture2D({\n    type: Texture.FLOAT,\n    // minFilter: Texture.NEAREST,\n    // magFilter: Texture.NEAREST,\n    flipY: false\n  });\n  /**\n   * Particle life range\n   * @type {Array.<number>}\n   */\n\n  this.particleLife = [5, 20];\n  this._particleType = 'point';\n  /**\n   * @type {number}\n   */\n\n  this._particleSize = 1;\n  /**\n   * @type {Array.<number>}\n   */\n\n  this.particleColor = [1, 1, 1, 1];\n  /**\n   * @type {number}\n   */\n\n  this.particleSpeedScaling = 1.0;\n  /**\n   * @type {clay.Texture2D}\n   */\n\n  this._thisFrameTexture = null;\n  this._particlePass = null;\n  this._spawnTexture = null;\n  this._particleTexture0 = null;\n  this._particleTexture1 = null;\n  this._particlePointsMesh = null;\n  this._surfaceFrameBuffer = null;\n  this._elapsedTime = 0.0;\n  this._scene = null;\n  this._camera = null;\n  this._lastFrameTexture = null; // this._temporalSS = new TemporalSS(50);\n  // this._antialising = false;\n\n  this._supersampling = 1;\n  this._downsampleTextures = [];\n  this._width = 512;\n  this._height = 512;\n  this.init();\n};\n\nVectorFieldParticleSurface.prototype = {\n  constructor: VectorFieldParticleSurface,\n  init: function init() {\n    var parameters = {\n      type: Texture.FLOAT,\n      minFilter: Texture.NEAREST,\n      magFilter: Texture.NEAREST,\n      useMipmap: false\n    };\n    this._spawnTexture = new Texture2D(parameters);\n    this._particleTexture0 = new Texture2D(parameters);\n    this._particleTexture1 = new Texture2D(parameters);\n    this._frameBuffer = new FrameBuffer({\n      depthBuffer: false\n    });\n    this._particlePass = new Pass({\n      fragment: Shader.source('ecgl.vfParticle.particle.fragment')\n    });\n\n    this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);\n\n    this._particlePass.setUniform('spawnTexture', this._spawnTexture);\n\n    this._downsamplePass = new Pass({\n      fragment: Shader.source('clay.compositor.downsample')\n    });\n    var particlePointsMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderPoints.vertex'), Shader.source('ecgl.vfParticle.renderPoints.fragment'))\n      }),\n      mode: Mesh.POINTS,\n      geometry: new Geometry({\n        dynamic: true,\n        mainAttribute: 'texcoord0'\n      })\n    });\n    var particleLinesMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderLines.vertex'), Shader.source('ecgl.vfParticle.renderLines.fragment'))\n      }),\n      geometry: new Line2DGeometry(),\n      culling: false\n    });\n    var lastFrameFullQuad = new Mesh({\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.color.vertex'), Shader.source('ecgl.color.fragment')) // DO NOT BLEND Blend will multiply alpha\n        // transparent: true\n\n      }),\n      geometry: new PlaneGeometry()\n    });\n    lastFrameFullQuad.material.enableTexture('diffuseMap');\n    this._particlePointsMesh = particlePointsMesh;\n    this._particleLinesMesh = particleLinesMesh;\n    this._lastFrameFullQuadMesh = lastFrameFullQuad;\n    this._camera = new OrthoCamera();\n    this._thisFrameTexture = new Texture2D();\n    this._lastFrameTexture = new Texture2D();\n  },\n  setParticleDensity: function setParticleDensity(width, height) {\n    var nVertex = width * height;\n    var spawnTextureData = new Float32Array(nVertex * 4);\n    var off = 0;\n    var lifeRange = this.particleLife;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        // x position, range [0 - 1]\n        spawnTextureData[off * 4] = Math.random(); // y position, range [0 - 1]\n\n        spawnTextureData[off * 4 + 1] = Math.random(); // Some property\n\n        spawnTextureData[off * 4 + 2] = Math.random();\n        var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0]; // Particle life\n\n        spawnTextureData[off * 4 + 3] = life;\n      }\n    }\n\n    if (this._particleType === 'line') {\n      this._setLineGeometry(width, height);\n    } else {\n      this._setPointsGeometry(width, height);\n    }\n\n    this._spawnTexture.width = width;\n    this._spawnTexture.height = height;\n    this._spawnTexture.pixels = spawnTextureData;\n    this._particleTexture0.width = this._particleTexture1.width = width;\n    this._particleTexture0.height = this._particleTexture1.height = height;\n\n    this._particlePass.setUniform('textureSize', [width, height]);\n  },\n  _setPointsGeometry: function _setPointsGeometry(width, height) {\n    var nVertex = width * height;\n    var geometry = this._particlePointsMesh.geometry;\n    var attributes = geometry.attributes;\n    attributes.texcoord0.init(nVertex);\n    var off = 0;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        attributes.texcoord0.value[off * 2] = i / width;\n        attributes.texcoord0.value[off * 2 + 1] = j / height;\n      }\n    }\n\n    geometry.dirty();\n  },\n  _setLineGeometry: function _setLineGeometry(width, height) {\n    var nLine = width * height;\n\n    var geometry = this._getParticleMesh().geometry;\n\n    geometry.setLineCount(nLine);\n    geometry.resetOffset();\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        geometry.addLine([i / width, j / height]);\n      }\n    }\n\n    geometry.dirty();\n  },\n  _getParticleMesh: function _getParticleMesh() {\n    return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;\n  },\n  update: function update(renderer, api, deltaTime, firstFrame) {\n    var particleMesh = this._getParticleMesh();\n\n    var frameBuffer = this._frameBuffer;\n    var particlePass = this._particlePass;\n\n    if (firstFrame) {\n      this._updateDownsampleTextures(renderer, api);\n    }\n\n    particleMesh.material.set('size', this._particleSize * this._supersampling);\n    particleMesh.material.set('color', this.particleColor);\n    particlePass.setUniform('speedScaling', this.particleSpeedScaling);\n    frameBuffer.attach(this._particleTexture1);\n    particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);\n    particlePass.setUniform('particleTexture', this._particleTexture0);\n    particlePass.setUniform('deltaTime', deltaTime);\n    particlePass.setUniform('elapsedTime', this._elapsedTime);\n    particlePass.render(renderer, frameBuffer);\n    particleMesh.material.set('particleTexture', this._particleTexture1);\n    particleMesh.material.set('prevParticleTexture', this._particleTexture0);\n    frameBuffer.attach(this._thisFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    var lastFrameFullQuad = this._lastFrameFullQuadMesh;\n    lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);\n    lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);\n\n    this._camera.update(true);\n\n    renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);\n    frameBuffer.unbind(renderer);\n\n    this._downsample(renderer);\n\n    this._swapTexture();\n\n    this._elapsedTime += deltaTime;\n  },\n  _downsample: function _downsample(renderer) {\n    var downsampleTextures = this._downsampleTextures;\n\n    if (downsampleTextures.length === 0) {\n      return;\n    }\n\n    var current = 0;\n    var sourceTexture = this._thisFrameTexture;\n    var targetTexture = downsampleTextures[current];\n\n    while (targetTexture) {\n      this._frameBuffer.attach(targetTexture);\n\n      this._downsamplePass.setUniform('texture', sourceTexture);\n\n      this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);\n\n      this._downsamplePass.render(renderer, this._frameBuffer);\n\n      sourceTexture = targetTexture;\n      targetTexture = downsampleTextures[++current];\n    }\n  },\n  getSurfaceTexture: function getSurfaceTexture() {\n    var downsampleTextures = this._downsampleTextures;\n    return downsampleTextures.length > 0 ? downsampleTextures[downsampleTextures.length - 1] : this._lastFrameTexture;\n  },\n  setRegion: function setRegion(region) {\n    this._particlePass.setUniform('region', region);\n  },\n  resize: function resize(width, height) {\n    this._lastFrameTexture.width = width * this._supersampling;\n    this._lastFrameTexture.height = height * this._supersampling;\n    this._thisFrameTexture.width = width * this._supersampling;\n    this._thisFrameTexture.height = height * this._supersampling;\n    this._width = width;\n    this._height = height;\n  },\n  setParticleSize: function setParticleSize(size) {\n    var particleMesh = this._getParticleMesh();\n\n    if (size <= 2) {\n      particleMesh.material.disableTexture('spriteTexture');\n      particleMesh.material.transparent = false;\n      return;\n    }\n\n    if (!this._spriteTexture) {\n      this._spriteTexture = new Texture2D();\n    }\n\n    if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {\n      this._spriteTexture.image = createSpriteCanvas(size);\n\n      this._spriteTexture.dirty();\n    }\n\n    particleMesh.material.transparent = true;\n    particleMesh.material.enableTexture('spriteTexture');\n    particleMesh.material.set('spriteTexture', this._spriteTexture);\n    this._particleSize = size;\n  },\n  setGradientTexture: function setGradientTexture(gradientTexture) {\n    var material = this._getParticleMesh().material;\n\n    material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');\n    material.setUniform('gradientTexture', gradientTexture);\n  },\n  setColorTextureImage: function setColorTextureImage(colorTextureImg, api) {\n    var material = this._getParticleMesh().material;\n\n    material.setTextureImage('colorTexture', colorTextureImg, api, {\n      flipY: true\n    });\n  },\n  setParticleType: function setParticleType(type) {\n    this._particleType = type;\n  },\n  clearFrame: function clearFrame(renderer) {\n    var frameBuffer = this._frameBuffer;\n    frameBuffer.attach(this._lastFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    frameBuffer.unbind(renderer);\n  },\n  setSupersampling: function setSupersampling(supersampling) {\n    this._supersampling = supersampling;\n    this.resize(this._width, this._height);\n  },\n  _updateDownsampleTextures: function _updateDownsampleTextures(renderer, api) {\n    var downsampleTextures = this._downsampleTextures;\n    var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);\n    var scale = 2;\n    var width = this._width * this._supersampling;\n    var height = this._height * this._supersampling;\n\n    for (var i = 0; i < upScale; i++) {\n      downsampleTextures[i] = downsampleTextures[i] || new Texture2D();\n      downsampleTextures[i].width = width / scale;\n      downsampleTextures[i].height = height / scale;\n      scale *= 2;\n    }\n\n    for (; i < downsampleTextures.length; i++) {\n      downsampleTextures[i].dispose(renderer);\n    }\n\n    downsampleTextures.length = upScale;\n  },\n  _swapTexture: function _swapTexture() {\n    var tmp = this._particleTexture0;\n    this._particleTexture0 = this._particleTexture1;\n    this._particleTexture1 = tmp;\n    var tmp = this._thisFrameTexture;\n    this._thisFrameTexture = this._lastFrameTexture;\n    this._lastFrameTexture = tmp;\n  },\n  dispose: function dispose(renderer) {\n    renderer.disposeFrameBuffer(this._frameBuffer); // Dispose textures\n\n    renderer.disposeTexture(this.vectorFieldTexture);\n    renderer.disposeTexture(this._spawnTexture);\n    renderer.disposeTexture(this._particleTexture0);\n    renderer.disposeTexture(this._particleTexture1);\n    renderer.disposeTexture(this._thisFrameTexture);\n    renderer.disposeTexture(this._lastFrameTexture);\n    renderer.disposeGeometry(this._particleLinesMesh.geometry);\n    renderer.disposeGeometry(this._particlePointsMesh.geometry);\n    renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);\n\n    if (this._spriteTexture) {\n      renderer.disposeTexture(this._spriteTexture);\n    }\n\n    this._particlePass.dispose(renderer);\n\n    this._downsamplePass.dispose(renderer);\n\n    this._downsampleTextures.forEach(function (texture) {\n      texture.dispose(renderer);\n    });\n  }\n};\nexport default VectorFieldParticleSurface;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/flowGL/VectorFieldParticleSurface.js"],"names":["Pass","Geometry","Mesh","Material","Shader","Texture2D","Texture","OrthoCamera","PlaneGeometry","FrameBuffer","Line2DGeometry","vectorFieldParticleGLSL","createSpriteCanvas","size","canvas","document","createElement","width","height","ctx","getContext","fillStyle","arc","Math","PI","fill","VectorFieldParticleSurface","motionBlurFactor","vectorFieldTexture","type","FLOAT","flipY","particleLife","_particleType","_particleSize","particleColor","particleSpeedScaling","_thisFrameTexture","_particlePass","_spawnTexture","_particleTexture0","_particleTexture1","_particlePointsMesh","_surfaceFrameBuffer","_elapsedTime","_scene","_camera","_lastFrameTexture","_supersampling","_downsampleTextures","_width","_height","init","prototype","constructor","parameters","minFilter","NEAREST","magFilter","useMipmap","_frameBuffer","depthBuffer","fragment","source","setUniform","_downsamplePass","particlePointsMesh","renderOrder","material","shader","mode","POINTS","geometry","dynamic","mainAttribute","particleLinesMesh","culling","lastFrameFullQuad","enableTexture","_particleLinesMesh","_lastFrameFullQuadMesh","setParticleDensity","nVertex","spawnTextureData","Float32Array","off","lifeRange","i","j","random","life","_setLineGeometry","_setPointsGeometry","pixels","attributes","texcoord0","value","dirty","nLine","_getParticleMesh","setLineCount","resetOffset","addLine","update","renderer","api","deltaTime","firstFrame","particleMesh","frameBuffer","particlePass","_updateDownsampleTextures","set","attach","render","bind","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","renderPass","unbind","_downsample","_swapTexture","downsampleTextures","length","current","sourceTexture","targetTexture","getSurfaceTexture","setRegion","region","resize","setParticleSize","disableTexture","transparent","_spriteTexture","image","setGradientTexture","gradientTexture","setColorTextureImage","colorTextureImg","setTextureImage","setParticleType","clearFrame","setSupersampling","supersampling","upScale","max","floor","log","getDevicePixelRatio","scale","dispose","tmp","disposeFrameBuffer","disposeTexture","disposeGeometry","forEach","texture"],"mappings":"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","sourcesContent":["import Pass from 'claygl/src/compositor/Pass';\nimport Geometry from 'claygl/src/Geometry';\nimport Mesh from 'claygl/src/Mesh';\nimport Material from 'claygl/src/Material';\nimport Shader from 'claygl/src/Shader';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport OrthoCamera from 'claygl/src/camera/Orthographic';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Line2DGeometry from './Line2D'; // import TemporalSS from '../../effect/TemporalSuperSampling';\n\nimport vectorFieldParticleGLSL from './vectorFieldParticle.glsl.js';\nShader['import'](vectorFieldParticleGLSL);\n\nfunction createSpriteCanvas(size) {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#fff';\n  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n  ctx.fill();\n  return canvas;\n} // import spriteUtil from '../../util/sprite';\n\n\nvar VectorFieldParticleSurface = function () {\n  /**\n   * @type {number}\n   */\n  this.motionBlurFactor = 0.99;\n  /**\n   * Vector field lookup image\n   * @type {clay.Texture2D}\n   */\n\n  this.vectorFieldTexture = new Texture2D({\n    type: Texture.FLOAT,\n    // minFilter: Texture.NEAREST,\n    // magFilter: Texture.NEAREST,\n    flipY: false\n  });\n  /**\n   * Particle life range\n   * @type {Array.<number>}\n   */\n\n  this.particleLife = [5, 20];\n  this._particleType = 'point';\n  /**\n   * @type {number}\n   */\n\n  this._particleSize = 1;\n  /**\n   * @type {Array.<number>}\n   */\n\n  this.particleColor = [1, 1, 1, 1];\n  /**\n   * @type {number}\n   */\n\n  this.particleSpeedScaling = 1.0;\n  /**\n   * @type {clay.Texture2D}\n   */\n\n  this._thisFrameTexture = null;\n  this._particlePass = null;\n  this._spawnTexture = null;\n  this._particleTexture0 = null;\n  this._particleTexture1 = null;\n  this._particlePointsMesh = null;\n  this._surfaceFrameBuffer = null;\n  this._elapsedTime = 0.0;\n  this._scene = null;\n  this._camera = null;\n  this._lastFrameTexture = null; // this._temporalSS = new TemporalSS(50);\n  // this._antialising = false;\n\n  this._supersampling = 1;\n  this._downsampleTextures = [];\n  this._width = 512;\n  this._height = 512;\n  this.init();\n};\n\nVectorFieldParticleSurface.prototype = {\n  constructor: VectorFieldParticleSurface,\n  init: function () {\n    var parameters = {\n      type: Texture.FLOAT,\n      minFilter: Texture.NEAREST,\n      magFilter: Texture.NEAREST,\n      useMipmap: false\n    };\n    this._spawnTexture = new Texture2D(parameters);\n    this._particleTexture0 = new Texture2D(parameters);\n    this._particleTexture1 = new Texture2D(parameters);\n    this._frameBuffer = new FrameBuffer({\n      depthBuffer: false\n    });\n    this._particlePass = new Pass({\n      fragment: Shader.source('ecgl.vfParticle.particle.fragment')\n    });\n\n    this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);\n\n    this._particlePass.setUniform('spawnTexture', this._spawnTexture);\n\n    this._downsamplePass = new Pass({\n      fragment: Shader.source('clay.compositor.downsample')\n    });\n    var particlePointsMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderPoints.vertex'), Shader.source('ecgl.vfParticle.renderPoints.fragment'))\n      }),\n      mode: Mesh.POINTS,\n      geometry: new Geometry({\n        dynamic: true,\n        mainAttribute: 'texcoord0'\n      })\n    });\n    var particleLinesMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderLines.vertex'), Shader.source('ecgl.vfParticle.renderLines.fragment'))\n      }),\n      geometry: new Line2DGeometry(),\n      culling: false\n    });\n    var lastFrameFullQuad = new Mesh({\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.color.vertex'), Shader.source('ecgl.color.fragment')) // DO NOT BLEND Blend will multiply alpha\n        // transparent: true\n\n      }),\n      geometry: new PlaneGeometry()\n    });\n    lastFrameFullQuad.material.enableTexture('diffuseMap');\n    this._particlePointsMesh = particlePointsMesh;\n    this._particleLinesMesh = particleLinesMesh;\n    this._lastFrameFullQuadMesh = lastFrameFullQuad;\n    this._camera = new OrthoCamera();\n    this._thisFrameTexture = new Texture2D();\n    this._lastFrameTexture = new Texture2D();\n  },\n  setParticleDensity: function (width, height) {\n    var nVertex = width * height;\n    var spawnTextureData = new Float32Array(nVertex * 4);\n    var off = 0;\n    var lifeRange = this.particleLife;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        // x position, range [0 - 1]\n        spawnTextureData[off * 4] = Math.random(); // y position, range [0 - 1]\n\n        spawnTextureData[off * 4 + 1] = Math.random(); // Some property\n\n        spawnTextureData[off * 4 + 2] = Math.random();\n        var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0]; // Particle life\n\n        spawnTextureData[off * 4 + 3] = life;\n      }\n    }\n\n    if (this._particleType === 'line') {\n      this._setLineGeometry(width, height);\n    } else {\n      this._setPointsGeometry(width, height);\n    }\n\n    this._spawnTexture.width = width;\n    this._spawnTexture.height = height;\n    this._spawnTexture.pixels = spawnTextureData;\n    this._particleTexture0.width = this._particleTexture1.width = width;\n    this._particleTexture0.height = this._particleTexture1.height = height;\n\n    this._particlePass.setUniform('textureSize', [width, height]);\n  },\n  _setPointsGeometry: function (width, height) {\n    var nVertex = width * height;\n    var geometry = this._particlePointsMesh.geometry;\n    var attributes = geometry.attributes;\n    attributes.texcoord0.init(nVertex);\n    var off = 0;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        attributes.texcoord0.value[off * 2] = i / width;\n        attributes.texcoord0.value[off * 2 + 1] = j / height;\n      }\n    }\n\n    geometry.dirty();\n  },\n  _setLineGeometry: function (width, height) {\n    var nLine = width * height;\n\n    var geometry = this._getParticleMesh().geometry;\n\n    geometry.setLineCount(nLine);\n    geometry.resetOffset();\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        geometry.addLine([i / width, j / height]);\n      }\n    }\n\n    geometry.dirty();\n  },\n  _getParticleMesh: function () {\n    return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;\n  },\n  update: function (renderer, api, deltaTime, firstFrame) {\n    var particleMesh = this._getParticleMesh();\n\n    var frameBuffer = this._frameBuffer;\n    var particlePass = this._particlePass;\n\n    if (firstFrame) {\n      this._updateDownsampleTextures(renderer, api);\n    }\n\n    particleMesh.material.set('size', this._particleSize * this._supersampling);\n    particleMesh.material.set('color', this.particleColor);\n    particlePass.setUniform('speedScaling', this.particleSpeedScaling);\n    frameBuffer.attach(this._particleTexture1);\n    particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);\n    particlePass.setUniform('particleTexture', this._particleTexture0);\n    particlePass.setUniform('deltaTime', deltaTime);\n    particlePass.setUniform('elapsedTime', this._elapsedTime);\n    particlePass.render(renderer, frameBuffer);\n    particleMesh.material.set('particleTexture', this._particleTexture1);\n    particleMesh.material.set('prevParticleTexture', this._particleTexture0);\n    frameBuffer.attach(this._thisFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    var lastFrameFullQuad = this._lastFrameFullQuadMesh;\n    lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);\n    lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);\n\n    this._camera.update(true);\n\n    renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);\n    frameBuffer.unbind(renderer);\n\n    this._downsample(renderer);\n\n    this._swapTexture();\n\n    this._elapsedTime += deltaTime;\n  },\n  _downsample: function (renderer) {\n    var downsampleTextures = this._downsampleTextures;\n\n    if (downsampleTextures.length === 0) {\n      return;\n    }\n\n    var current = 0;\n    var sourceTexture = this._thisFrameTexture;\n    var targetTexture = downsampleTextures[current];\n\n    while (targetTexture) {\n      this._frameBuffer.attach(targetTexture);\n\n      this._downsamplePass.setUniform('texture', sourceTexture);\n\n      this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);\n\n      this._downsamplePass.render(renderer, this._frameBuffer);\n\n      sourceTexture = targetTexture;\n      targetTexture = downsampleTextures[++current];\n    }\n  },\n  getSurfaceTexture: function () {\n    var downsampleTextures = this._downsampleTextures;\n    return downsampleTextures.length > 0 ? downsampleTextures[downsampleTextures.length - 1] : this._lastFrameTexture;\n  },\n  setRegion: function (region) {\n    this._particlePass.setUniform('region', region);\n  },\n  resize: function (width, height) {\n    this._lastFrameTexture.width = width * this._supersampling;\n    this._lastFrameTexture.height = height * this._supersampling;\n    this._thisFrameTexture.width = width * this._supersampling;\n    this._thisFrameTexture.height = height * this._supersampling;\n    this._width = width;\n    this._height = height;\n  },\n  setParticleSize: function (size) {\n    var particleMesh = this._getParticleMesh();\n\n    if (size <= 2) {\n      particleMesh.material.disableTexture('spriteTexture');\n      particleMesh.material.transparent = false;\n      return;\n    }\n\n    if (!this._spriteTexture) {\n      this._spriteTexture = new Texture2D();\n    }\n\n    if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {\n      this._spriteTexture.image = createSpriteCanvas(size);\n\n      this._spriteTexture.dirty();\n    }\n\n    particleMesh.material.transparent = true;\n    particleMesh.material.enableTexture('spriteTexture');\n    particleMesh.material.set('spriteTexture', this._spriteTexture);\n    this._particleSize = size;\n  },\n  setGradientTexture: function (gradientTexture) {\n    var material = this._getParticleMesh().material;\n\n    material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');\n    material.setUniform('gradientTexture', gradientTexture);\n  },\n  setColorTextureImage: function (colorTextureImg, api) {\n    var material = this._getParticleMesh().material;\n\n    material.setTextureImage('colorTexture', colorTextureImg, api, {\n      flipY: true\n    });\n  },\n  setParticleType: function (type) {\n    this._particleType = type;\n  },\n  clearFrame: function (renderer) {\n    var frameBuffer = this._frameBuffer;\n    frameBuffer.attach(this._lastFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    frameBuffer.unbind(renderer);\n  },\n  setSupersampling: function (supersampling) {\n    this._supersampling = supersampling;\n    this.resize(this._width, this._height);\n  },\n  _updateDownsampleTextures: function (renderer, api) {\n    var downsampleTextures = this._downsampleTextures;\n    var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);\n    var scale = 2;\n    var width = this._width * this._supersampling;\n    var height = this._height * this._supersampling;\n\n    for (var i = 0; i < upScale; i++) {\n      downsampleTextures[i] = downsampleTextures[i] || new Texture2D();\n      downsampleTextures[i].width = width / scale;\n      downsampleTextures[i].height = height / scale;\n      scale *= 2;\n    }\n\n    for (; i < downsampleTextures.length; i++) {\n      downsampleTextures[i].dispose(renderer);\n    }\n\n    downsampleTextures.length = upScale;\n  },\n  _swapTexture: function () {\n    var tmp = this._particleTexture0;\n    this._particleTexture0 = this._particleTexture1;\n    this._particleTexture1 = tmp;\n    var tmp = this._thisFrameTexture;\n    this._thisFrameTexture = this._lastFrameTexture;\n    this._lastFrameTexture = tmp;\n  },\n  dispose: function (renderer) {\n    renderer.disposeFrameBuffer(this._frameBuffer); // Dispose textures\n\n    renderer.disposeTexture(this.vectorFieldTexture);\n    renderer.disposeTexture(this._spawnTexture);\n    renderer.disposeTexture(this._particleTexture0);\n    renderer.disposeTexture(this._particleTexture1);\n    renderer.disposeTexture(this._thisFrameTexture);\n    renderer.disposeTexture(this._lastFrameTexture);\n    renderer.disposeGeometry(this._particleLinesMesh.geometry);\n    renderer.disposeGeometry(this._particlePointsMesh.geometry);\n    renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);\n\n    if (this._spriteTexture) {\n      renderer.disposeTexture(this._spriteTexture);\n    }\n\n    this._particlePass.dispose(renderer);\n\n    this._downsamplePass.dispose(renderer);\n\n    this._downsampleTextures.forEach(function (texture) {\n      texture.dispose(renderer);\n    });\n  }\n};\nexport default VectorFieldParticleSurface;"]},"metadata":{},"sourceType":"module"}