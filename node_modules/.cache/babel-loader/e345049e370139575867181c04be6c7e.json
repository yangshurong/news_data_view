{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport china from \"../assets/map/china.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\nexport default {\n  props: {\n    title_change: {\n      type: String,\n      default: \"政治\"\n    }\n  },\n  watch: {\n    title_change(new_val, old_val) {\n      this.cur_info.title = new_val;\n      this.set_china_map();\n    },\n\n    hookTooltip: {\n      handler(new_val, old_val) {\n        //console.log(new_val, old_val, \"---------watch\");\n        let tooltipButton = document.querySelectorAll(\"#main_tooltip_click\"); // 通过addEventListener注册事件\n\n        for (let i = 0; i < tooltipButton.length; i++) {\n          tooltipButton[i].addEventListener(\"click\", this.go_next_page);\n        }\n      }\n\n    }\n  },\n\n  data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        max: 0,\n        region: \"\"\n      },\n      list: [{\n        clicked: true,\n        standard: \"2017\"\n      }, {\n        clicked: false,\n        standard: \"2018\"\n      }, {\n        clicked: false,\n        standard: \"2019\"\n      }, {\n        clicked: false,\n        standard: \"2020\"\n      }, {\n        clicked: false,\n        standard: \"2021\"\n      }],\n      hookTooltip: {}\n    };\n  },\n\n  methods: {\n    // 随机函数\n    randomValue() {\n      return Math.round(Math.random() * 1000);\n    },\n\n    time_change(x, id) {\n      this.cur_info.year = x.standard;\n\n      for (let i in this.list) {\n        this.list[i].clicked = false;\n      }\n\n      this.list[id].clicked = true;\n      this.set_china_map();\n    },\n\n    go_next_page() {\n      console.log(this.cur_info.region);\n      this.$router.push({\n        name: \"ShengView\",\n        query: {\n          region: this.cur_info.region\n        }\n      });\n    },\n\n    async set_china_map() {\n      if (!this.myChart) {\n        this.myChart = this.$echarts.init(this.$refs.myEchart);\n      }\n\n      this.layoutSize = \"150%\";\n      let that = this;\n      let _data = china.features,\n          scar_data = [];\n\n      for (let i in _data) {\n        let x = _data[i].properties.cp[0],\n            y = _data[i].properties.cp[1],\n            z = _data[i].properties.name;\n        scar_data.push([x, y, z]);\n      }\n\n      for (let name_l in speed_average_data[\"scar\"]) {\n        let cur = speed_average_data[\"scar\"][name_l];\n        if (this.cur_info.title in cur == false) continue;\n        let t = parseInt(this.cur_info.year) - 2017;\n        if (t in cur[this.cur_info.title] == false) continue;\n        this.cur_info.max = Math.max(this.cur_info.max, cur[this.cur_info.title][t][1]);\n      }\n\n      if (this.cur_info.max == 0) this.cur_info.max = 1;\n      let options = {\n        tooltip: {\n          triggerOn: \"click\",\n          enterable: true,\n          confine: true,\n          backgroundColor: \"rgba(255,255,255,0)\",\n          borderColor: \"rgba(0,0,0,0)\",\n          formatter: function (params) {\n            that.hookTooltip = params;\n            const default_style = `\n            <div\n            style=\"\n            width: 1.6667rem;\n            height:.5rem;\n            font-size:.4667rem;            \n            color:rgba(255,255,255)\">\n            还没拿到该省此年份的数据呢</div>\n            `;\n            if (params.name in main_tooltip == false) return default_style;\n            if (that.cur_info.year in main_tooltip[params.name] == false) return default_style;\n            let regionName = \"\";\n            if (that.region_info_interval) clearInterval(that.region_info_interval);\n            that.region_info_interval = setInterval(function () {\n              if (document.getElementById(\"main_page_map_tooltip\")) {\n                if (params.name !== regionName) {\n                  regionName = params.name;\n                  that.cur_info.region = regionName;\n\n                  if (that.toolChart) {\n                    that.toolChart.dispose();\n                    that.toolChart = null;\n                  }\n\n                  that.toolChart = that.$echarts.init(document.getElementById(\"main_page_map_tooltip\"));\n                  let nowClientWidth = document.documentElement.clientWidth; //换算方法;\n\n                  let nowSize = function nowSize(val, initWidth = 1920) {\n                    return val * (nowClientWidth / initWidth);\n                  };\n\n                  const treemapOption = {\n                    series: [{\n                      type: \"treemap\",\n                      id: \"echarts-package-size\",\n                      animationDurationUpdate: 1000,\n                      roam: false,\n                      nodeClick: undefined,\n                      data: main_tooltip[regionName][that.cur_info.year],\n                      universalTransition: true,\n                      label: {\n                        show: true,\n                        fontSize: nowSize(24)\n                      },\n                      breadcrumb: {\n                        show: false\n                      }\n                    }]\n                  };\n                  const sunburstOption = {\n                    series: [{\n                      type: \"sunburst\",\n                      id: \"echarts-package-size\",\n                      radius: [\"10%\", \"90%\"],\n                      animationDurationUpdate: 1000,\n                      nodeClick: undefined,\n                      data: main_tooltip[regionName][that.cur_info.year],\n                      universalTransition: true,\n                      itemStyle: {\n                        borderWidth: nowSize(1),\n                        borderColor: \"rgba(255,255,255,.5)\"\n                      },\n                      label: {\n                        show: true,\n                        fontSize: nowSize(14),\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }]\n                  };\n                  let currentOption = treemapOption;\n                  that.toolChart.setOption(currentOption);\n                  clearInterval(that.toolChart_interval);\n                  that.toolChart_interval = setInterval(function () {\n                    currentOption = currentOption === treemapOption ? sunburstOption : treemapOption;\n                    that.toolChart.setOption(currentOption);\n                  }, 3000);\n                  that.toolChart.on(\"mouseover\", function () {\n                    clearInterval(that.toolChart_interval);\n                  });\n                  that.toolChart.on(\"mouseout\", function () {\n                    that.toolChart_interval = setInterval(function () {\n                      currentOption = currentOption === treemapOption ? sunburstOption : treemapOption;\n                      that.toolChart.setOption(currentOption);\n                    }, 3000);\n                  });\n                }\n              }\n            }, 500);\n            return `\n            <div class=\"main_tooltip\">\n              <div class=\"up_span\">\n\n              </div>\n              <div id=\"main_page_map_tooltip\" class=\"chart\">\n\n              </div>\n              \n              <div class=\"bottom_route\">\n                <div class=\"text\">\n                查看该省详细信息\n                </div>\n                <div id=\"main_tooltip_click\" class=\"icon\">\n\n                </div>\n              </div>\n            </div>\n            `;\n          } //数据格式化\n\n        },\n        geo: {\n          map: \"china\",\n          aspectScale: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          layoutSize: this.layoutSize,\n          label: {\n            normal: {\n              show: false\n            },\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              shadowColor: \"#276fce\",\n              shadowOffsetX: 0,\n              shadowOffsetY: 15,\n              opacity: 0.5\n            },\n            emphasis: {\n              areaColor: \"#276fce\"\n            }\n          }\n        },\n        series: [// 常规地图\n        {\n          type: \"map\",\n          mapType: \"china\",\n          aspectScale: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          layoutSize: this.layoutSize,\n          zoom: 1,\n          //当前视角的缩放比例\n          // roam: true, //是否开启平游或缩放\n          scaleLimit: {\n            //滚轮缩放的极限控制\n            min: 1,\n            max: 2\n          },\n          label: {\n            normal: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              },\n              offset: [0, -20]\n            },\n            emphasis: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              },\n              offset: [0, -20]\n            }\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#0c274b\",\n              borderColor: \"#1cccff\",\n              borderWidth: 1.5\n            },\n            emphasis: {\n              areaColor: \"#02102b\"\n            }\n          }\n        }, {\n          show: true,\n          type: \"effectScatter\",\n          symbolSize: function (params) {\n            //\n            let t = parseInt(that.cur_info.year) - 2017;\n            if (params[2] in speed_average_data[\"scar\"] == false) return 0;\n            if (that.cur_info.title in speed_average_data[\"scar\"][params[2]] == false) return 0;\n            if (t in speed_average_data[\"scar\"][params[2]][that.cur_info.title] == false) return 0;\n            let x = speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\n            let cur_v = x[1] / that.cur_info.max * 5 + 1; //设置每个点的大小\n\n            return 30 / cur_v;\n          },\n          rippleEffect: {\n            // 涟漪特效相关配置。\n            scale: 4 // 控制涟漪大小\n\n          },\n          coordinateSystem: \"geo\",\n          // series坐标系类型\n          data: scar_data\n        }]\n      };\n      that.myChart.setOption(options);\n    },\n\n    screenAdapter() {\n      let that = this; //当前视口宽度\n\n      setTimeout(function () {\n        if (that.myChart) {\n          let nowClientWidth = document.documentElement.clientWidth;\n\n          let nowSize = function nowSize(val, initWidth = 1920) {\n            return val * (nowClientWidth / initWidth);\n          };\n\n          let options = {\n            geo: {\n              itemStyle: {\n                normal: {\n                  shadowOffsetY: nowSize(15)\n                }\n              }\n            },\n            series: [// 常规地图\n            {\n              label: {\n                normal: {\n                  textStyle: {\n                    fontSize: nowSize(18)\n                  },\n                  offset: [0, nowSize(-20)]\n                },\n                emphasis: {\n                  textStyle: {\n                    fontSize: nowSize(18)\n                  },\n                  offset: [0, nowSize(-20)]\n                }\n              },\n              itemStyle: {\n                normal: {\n                  borderWidth: nowSize(1.5)\n                }\n              }\n            }, {\n              show: true,\n              type: \"effectScatter\",\n              symbolSize: function (params) {\n                //\n                let t = parseInt(that.cur_info.year) - 2017;\n                if (params[2] in speed_average_data[\"scar\"] == false) return 0;\n                if (that.cur_info.title in speed_average_data[\"scar\"][params[2]] == false) return 0;\n                if (t in speed_average_data[\"scar\"][params[2]][that.cur_info.title] == false) return 0;\n                let x = speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\n                let cur_v = x[1] / that.cur_info.max * 5 + 1;\n                let nowClientWidth = document.documentElement.clientWidth;\n\n                let nowSize = function nowSize(val, initWidth = 1920) {\n                  return val * (nowClientWidth / initWidth);\n                }; //设置每个点的大小\n\n\n                return nowSize(30) / cur_v;\n              },\n              rippleEffect: {\n                // 涟漪特效相关配置。\n                scale: nowSize(4) // 控制涟漪大小\n\n              }\n            }]\n          };\n          that.myChart.setOption(options);\n          that.myChart.resize();\n        }\n      }, 300);\n    }\n\n  },\n\n  mounted() {\n    this.$echarts.registerMap(\"china\", china);\n    this.set_china_map();\n    window.addEventListener(\"resize\", this.screenAdapter);\n  },\n\n  beforeDestroy() {\n    if (this.myChart) {\n      this.myChart.dispose();\n      this.myChart = null;\n    }\n\n    if (this.toolChart) {\n      this.toolChart.dispose();\n      this.toolChart = null;\n    }\n\n    if (this.region_info_interval) clearInterval(this.region_info_interval);\n    if (this.toolChart_interval) clearInterval(this.toolChart_interval);\n    window.removeEventListener(\"resize\", this.screenAdapter);\n  }\n\n}; // 基于准备好的dom，初始化echarts实例","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACAA;AACAC;AACAC,kBADA;AAEAC;AAFA;AADA,GADA;AAOAC;AACAH;AACA;AACA;AACA,KAJA;;AAKAI;AACAC;AACA;AACA,6EAFA,CAGA;;AACA;AACAC;AACA;AACA;;AARA;AALA,GAPA;;AAuBAC;AACA;AACAC;AACAC,oBADA;AAEAC,mBAFA;AAGAC,cAHA;AAIAC;AAJA,OADA;AAOAC,aACA;AACAC,qBADA;AAEAC;AAFA,OADA,EAKA;AACAD,sBADA;AAEAC;AAFA,OALA,EASA;AACAD,sBADA;AAEAC;AAFA,OATA,EAaA;AACAD,sBADA;AAEAC;AAFA,OAbA,EAiBA;AACAD,sBADA;AAEAC;AAFA,OAjBA,CAPA;AA6BAX;AA7BA;AA+BA,GAvDA;;AAwDAY;AACA;AACAC;AACA;AACA,KAJA;;AAKAC;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,KAZA;;AAaAC;AACAC;AACA;AACAC,yBADA;AAEAC;AACAV;AADA;AAFA;AAMA,KArBA;;AAsBA;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA,UACAW,cADA;;AAEA;AACA;AAAA,YACAC,6BADA;AAAA,YAEAC,4BAFA;AAGAF;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA,qCACA,iBADA,EAEAG,8BAFA;AAIA;;AACA;AACA;AACAC;AACAC,4BADA;AAEAC,yBAFA;AAGAC,uBAHA;AAIAC,gDAJA;AAKAC,sCALA;AAMAC;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aARA;AASA;AACA,0EACA;AACA;AAEA,2CACAC;AACAD;AACA;AACA;AACAE;AACAF;;AACA;AACAA;AACAA;AACA;;AACAA,sDACAG,gDADA;AAGA,4EAVA,CAWA;;AACA;AACA;AACA,mBAFA;;AAGA;AACAC,6BACA;AACArC,qCADA;AAEAsC,gDAFA;AAGAC,mDAHA;AAIAC,iCAJA;AAKAC,0CALA;AAMAnC,wEANA;AAOAoC,+CAPA;AAQAC;AACAC,kCADA;AAEAC;AAFA,uBARA;AAYAC;AACAF;AADA;AAZA,qBADA;AADA;AAoBA;AACAP,6BACA;AACArC,sCADA;AAEAsC,gDAFA;AAGAS,4CAHA;AAIAR,mDAJA;AAKAE,0CALA;AAMAnC,wEANA;AAOAoC,+CAPA;AAQAM;AACAC,+CADA;AAEAlB;AAFA,uBARA;AAYAY;AACAC,kCADA;AAEAC,6CAFA;AAGAK;AAHA;AAZA,qBADA;AADA;AAsBA;AACAjB;AACAC;AACAD;AACAkB,oCACAA,kCACAC,cADA,GAEAC,aAHA;AAIApB;AACA,mBANA,EAMA,IANA;AAOAA;AACAC;AACA,mBAFA;AAGAD;AACAA;AACAkB,sCACAA,kCACAC,cADA,GAEAC,aAHA;AAIApB;AACA,qBANA,EAMA,IANA;AAOA,mBARA;AASA;AACA;AACA,aAnFA,EAmFA,GAnFA;AAoFA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAlBA;AAmBA,WA/HA,CA+HA;;AA/HA,SADA;AAmIAqB;AACAC,sBADA;AAEAC,wBAFA;AAGAC,sCAHA;AAGA;AACAC,qCAJA;AAKAf;AACAgB;AACAf;AADA,aADA;AAIAgB;AACAhB;AADA;AAJA,WALA;AAaAI;AACAW;AACAE,oCADA;AAEAC,8BAFA;AAGAC,+BAHA;AAIAC;AAJA,aADA;AAOAJ;AACAK;AADA;AAPA;AAbA,SAnIA;AA4JA5B,iBACA;AACA;AACArC,qBADA;AAEAkE,0BAFA;AAGAV,wBAHA;AAIAC,sCAJA;AAIA;AACAC,qCALA;AAMAS,iBANA;AAMA;AACA;AACAC;AACA;AACAC,kBAFA;AAGA3D;AAHA,WARA;AAaAiC;AACAgB;AACAf,wBADA;AAEA0B;AACApB,gCADA;AAEAL;AAFA,eAFA;AAMA0B;AANA,aADA;AASAX;AACAhB,wBADA;AAEA0B;AACApB,gCADA;AAEAL;AAFA,eAFA;AAMA0B;AANA;AATA,WAbA;AA+BAvB;AACAW;AACAM,kCADA;AAEAlC,oCAFA;AAGAkB;AAHA,aADA;AAOAW;AACAK;AADA;AAPA;AA/BA,SAFA,EA6CA;AACArB,oBADA;AAEA5C,+BAFA;AAGAwE;AACA;AACA;AACA;AACA,gBACAvC,gEACA,KAFA,EAIA;AACA,gBACAwC,KACAC,0DADA,IAEA,KAHA,EAKA;AACA,oBACAA,6DADA;AAEA,yDAjBA,CAkBA;;AACA;AACA,WAvBA;AAwBAC;AACA;AACAC,oBAFA,CAEA;;AAFA,WAxBA;AA4BAC,iCA5BA;AA4BA;AACAvE;AA7BA,SA7CA;AA5JA;AA0OA2B;AACA,KA3RA;;AA4RA6C;AACA,sBADA,CAEA;;AACAC;AACA;AACA;;AACA;AACA;AACA,WAFA;;AAIA;AACAzB;AACAN;AACAW;AACAI;AADA;AADA;AADA,aADA;AAQA1B,qBACA;AACA;AACAM;AACAgB;AACAW;AACAzB;AADA,mBADA;AAIA0B;AAJA,iBADA;AAOAX;AACAU;AACAzB;AADA,mBADA;AAIA0B;AAJA;AAPA,eADA;AAeAvB;AACAW;AACAV;AADA;AADA;AAfA,aAFA,EAuBA;AACAL,wBADA;AAEA5C,mCAFA;AAGAwE;AACA;AACA;AACA,sEACA;AACA,oBACAvC,uBACAyC,qCADA,IAEA,KAHA,EAKA;AACA,oBACAD,KACAC,sCACAzC,mBADA,CADA,IAIA,KALA,EAOA;AACA,wBACAyC,2DACAD,CADA,CADA;AAIA;AACA;;AACA;AACA;AACA,iBAFA,CAzBA,CA4BA;;;AACA;AACA,eAjCA;AAkCAE;AACA;AACAC,iCAFA,CAEA;;AAFA;AAlCA,aAvBA;AARA;AAwEA3C;AACAA;AACA;AACA,OAlFA,EAkFA,GAlFA;AAmFA;;AAlXA,GAxDA;;AA4aA+C;AACA;AACA;AACAC;AACA,GAhbA;;AAibAC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACAD;AACA;;AA7bA,E,CA+bA","names":["props","title_change","type","default","watch","hookTooltip","handler","tooltipButton","data","cur_info","year","title","max","region","list","clicked","standard","methods","randomValue","time_change","go_next_page","console","name","query","scar_data","y","z","cur","tooltip","triggerOn","enterable","confine","backgroundColor","borderColor","formatter","that","clearInterval","regionName","document","series","id","animationDurationUpdate","roam","nodeClick","universalTransition","label","show","fontSize","breadcrumb","radius","itemStyle","borderWidth","color","currentOption","sunburstOption","treemapOption","geo","map","aspectScale","layoutCenter","layoutSize","normal","emphasis","shadowColor","shadowOffsetX","shadowOffsetY","opacity","areaColor","mapType","zoom","scaleLimit","min","textStyle","offset","symbolSize","t","speed_average_data","rippleEffect","scale","coordinateSystem","screenAdapter","setTimeout","mounted","window","beforeDestroy"],"sourceRoot":"src/components","sources":["MainPageRightMap.vue"],"sourcesContent":["<template>\r\n  <div class=\"h-3\">\r\n    <div ref=\"myEchart\" style=\"width: 20.5167rem; height: 13.4667rem\"></div>\r\n    <div class=\"time_content\">\r\n      <div class=\"Timeline\">\r\n        <div class=\"timeaxis\">\r\n          <div v-for=\"(item, i) in list\" :key=\"i\">\r\n            <div class=\"timeaxis-box\">\r\n              <div\r\n                class=\"timeaxis-topText\"\r\n                :class=\"{ 'bd-empty': i == list.length - 1 }\"\r\n              ></div>\r\n              <div\r\n                class=\"circular\"\r\n                @click=\"time_change(item, i)\"\r\n                :class=\"{ circular_click: item.clicked }\"\r\n              ></div>\r\n              <div class=\"timeaxis-bootomText\">\r\n                <div class=\"text\">{{ item.standard }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport china from \"../assets/map/china.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\r\nexport default {\r\n  props: {\r\n    title_change: {\r\n      type: String,\r\n      default: \"政治\",\r\n    },\r\n  },\r\n  watch: {\r\n    title_change(new_val, old_val) {\r\n      this.cur_info.title = new_val;\r\n      this.set_china_map();\r\n    },\r\n    hookTooltip: {\r\n      handler(new_val, old_val) {\r\n        //console.log(new_val, old_val, \"---------watch\");\r\n        let tooltipButton = document.querySelectorAll(\"#main_tooltip_click\");\r\n        // 通过addEventListener注册事件\r\n        for (let i = 0; i < tooltipButton.length; i++) {\r\n          tooltipButton[i].addEventListener(\"click\", this.go_next_page);\r\n        }\r\n      },\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        max: 0,\r\n        region: \"\",\r\n      },\r\n      list: [\r\n        {\r\n          clicked: true,\r\n          standard: \"2017\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2018\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2019\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2020\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2021\",\r\n        },\r\n      ],\r\n      hookTooltip: {},\r\n    };\r\n  },\r\n  methods: {\r\n    // 随机函数\r\n    randomValue() {\r\n      return Math.round(Math.random() * 1000);\r\n    },\r\n    time_change(x, id) {\r\n      this.cur_info.year = x.standard;\r\n      for (let i in this.list) {\r\n        this.list[i].clicked = false;\r\n      }\r\n      this.list[id].clicked = true;\r\n      this.set_china_map();\r\n    },\r\n    go_next_page() {\r\n      console.log(this.cur_info.region);\r\n      this.$router.push({\r\n        name: \"ShengView\",\r\n        query: {\r\n          region: this.cur_info.region,\r\n        },\r\n      });\r\n    },\r\n    async set_china_map() {\r\n      if (!this.myChart) {\r\n        this.myChart = this.$echarts.init(this.$refs.myEchart);\r\n      }\r\n      this.layoutSize = \"150%\";\r\n      let that = this;\r\n      let _data = china.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.cp[0],\r\n          y = _data[i].properties.cp[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      for (let name_l in speed_average_data[\"scar\"]) {\r\n        let cur = speed_average_data[\"scar\"][name_l];\r\n        if (this.cur_info.title in cur == false) continue;\r\n\r\n        let t = parseInt(this.cur_info.year) - 2017;\r\n        if (t in cur[this.cur_info.title] == false) continue;\r\n        this.cur_info.max = Math.max(\r\n          this.cur_info.max,\r\n          cur[this.cur_info.title][t][1]\r\n        );\r\n      }\r\n      if (this.cur_info.max == 0) this.cur_info.max = 1;\r\n      let options = {\r\n        tooltip: {\r\n          triggerOn: \"click\",\r\n          enterable: true,\r\n          confine: true,\r\n          backgroundColor: \"rgba(255,255,255,0)\",\r\n          borderColor: \"rgba(0,0,0,0)\",\r\n          formatter: function (params) {\r\n            that.hookTooltip = params;\r\n            const default_style = `\r\n            <div\r\n            style=\"\r\n            width: 1.6667rem;\r\n            height:.5rem;\r\n            font-size:.4667rem;            \r\n            color:rgba(255,255,255)\">\r\n            还没拿到该省此年份的数据呢</div>\r\n            `;\r\n            if (params.name in main_tooltip == false) return default_style;\r\n            if (that.cur_info.year in main_tooltip[params.name] == false)\r\n              return default_style;\r\n            let regionName = \"\";\r\n\r\n            if (that.region_info_interval)\r\n              clearInterval(that.region_info_interval);\r\n            that.region_info_interval = setInterval(function () {\r\n              if (document.getElementById(\"main_page_map_tooltip\")) {\r\n                if (params.name !== regionName) {\r\n                  regionName = params.name;\r\n                  that.cur_info.region = regionName;\r\n                  if (that.toolChart) {\r\n                    that.toolChart.dispose();\r\n                    that.toolChart = null;\r\n                  }\r\n                  that.toolChart = that.$echarts.init(\r\n                    document.getElementById(\"main_page_map_tooltip\")\r\n                  );\r\n                  let nowClientWidth = document.documentElement.clientWidth;\r\n                  //换算方法;\r\n                  let nowSize = function nowSize(val, initWidth = 1920) {\r\n                    return val * (nowClientWidth / initWidth);\r\n                  };\r\n                  const treemapOption = {\r\n                    series: [\r\n                      {\r\n                        type: \"treemap\",\r\n                        id: \"echarts-package-size\",\r\n                        animationDurationUpdate: 1000,\r\n                        roam: false,\r\n                        nodeClick: undefined,\r\n                        data: main_tooltip[regionName][that.cur_info.year],\r\n                        universalTransition: true,\r\n                        label: {\r\n                          show: true,\r\n                          fontSize: nowSize(24),\r\n                        },\r\n                        breadcrumb: {\r\n                          show: false,\r\n                        },\r\n                      },\r\n                    ],\r\n                  };\r\n                  const sunburstOption = {\r\n                    series: [\r\n                      {\r\n                        type: \"sunburst\",\r\n                        id: \"echarts-package-size\",\r\n                        radius: [\"10%\", \"90%\"],\r\n                        animationDurationUpdate: 1000,\r\n                        nodeClick: undefined,\r\n                        data: main_tooltip[regionName][that.cur_info.year],\r\n                        universalTransition: true,\r\n                        itemStyle: {\r\n                          borderWidth: nowSize(1),\r\n                          borderColor: \"rgba(255,255,255,.5)\",\r\n                        },\r\n                        label: {\r\n                          show: true,\r\n                          fontSize: nowSize(14),\r\n                          color: \"rgba(255,255,255)\",\r\n                        },\r\n                      },\r\n                    ],\r\n                  };\r\n                  let currentOption = treemapOption;\r\n                  that.toolChart.setOption(currentOption);\r\n                  clearInterval(that.toolChart_interval);\r\n                  that.toolChart_interval = setInterval(function () {\r\n                    currentOption =\r\n                      currentOption === treemapOption\r\n                        ? sunburstOption\r\n                        : treemapOption;\r\n                    that.toolChart.setOption(currentOption);\r\n                  }, 3000);\r\n                  that.toolChart.on(\"mouseover\", function () {\r\n                    clearInterval(that.toolChart_interval);\r\n                  });\r\n                  that.toolChart.on(\"mouseout\", function () {\r\n                    that.toolChart_interval = setInterval(function () {\r\n                      currentOption =\r\n                        currentOption === treemapOption\r\n                          ? sunburstOption\r\n                          : treemapOption;\r\n                      that.toolChart.setOption(currentOption);\r\n                    }, 3000);\r\n                  });\r\n                }\r\n              }\r\n            }, 500);\r\n            return `\r\n            <div class=\"main_tooltip\">\r\n              <div class=\"up_span\">\r\n\r\n              </div>\r\n              <div id=\"main_page_map_tooltip\" class=\"chart\">\r\n\r\n              </div>\r\n              \r\n              <div class=\"bottom_route\">\r\n                <div class=\"text\">\r\n                查看该省详细信息\r\n                </div>\r\n                <div id=\"main_tooltip_click\" class=\"icon\">\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            `;\r\n          }, //数据格式化\r\n        },\r\n\r\n        geo: {\r\n          map: \"china\",\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          layoutSize: this.layoutSize,\r\n          label: {\r\n            normal: {\r\n              show: false,\r\n            },\r\n            emphasis: {\r\n              show: false,\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"#276fce\",\r\n              shadowOffsetX: 0,\r\n              shadowOffsetY: 15,\r\n              opacity: 0.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"#276fce\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          // 常规地图\r\n          {\r\n            type: \"map\",\r\n            mapType: \"china\",\r\n            aspectScale: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            layoutSize: this.layoutSize,\r\n            zoom: 1, //当前视角的缩放比例\r\n            // roam: true, //是否开启平游或缩放\r\n            scaleLimit: {\r\n              //滚轮缩放的极限控制\r\n              min: 1,\r\n              max: 2,\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n              emphasis: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: \"#0c274b\",\r\n                borderColor: \"#1cccff\",\r\n                borderWidth: 1.5,\r\n              },\r\n\r\n              emphasis: {\r\n                areaColor: \"#02102b\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            symbolSize: function (params) {\r\n              //\r\n              let t = parseInt(that.cur_info.year) - 2017;\r\n              if (params[2] in speed_average_data[\"scar\"] == false) return 0;\r\n              if (\r\n                that.cur_info.title in speed_average_data[\"scar\"][params[2]] ==\r\n                false\r\n              )\r\n                return 0;\r\n              if (\r\n                t in\r\n                  speed_average_data[\"scar\"][params[2]][that.cur_info.title] ==\r\n                false\r\n              )\r\n                return 0;\r\n              let x =\r\n                speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\r\n              let cur_v = (x[1] / that.cur_info.max) * 5 + 1;\r\n              //设置每个点的大小\r\n              return 30 / cur_v;\r\n            },\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n      that.myChart.setOption(options);\r\n    },\r\n    screenAdapter() {\r\n      let that = this;\r\n      //当前视口宽度\r\n      setTimeout(function () {\r\n        if (that.myChart) {\r\n          let nowClientWidth = document.documentElement.clientWidth;\r\n          let nowSize = function nowSize(val, initWidth = 1920) {\r\n            return val * (nowClientWidth / initWidth);\r\n          };\r\n\r\n          let options = {\r\n            geo: {\r\n              itemStyle: {\r\n                normal: {\r\n                  shadowOffsetY: nowSize(15),\r\n                },\r\n              },\r\n            },\r\n            series: [\r\n              // 常规地图\r\n              {\r\n                label: {\r\n                  normal: {\r\n                    textStyle: {\r\n                      fontSize: nowSize(18),\r\n                    },\r\n                    offset: [0, nowSize(-20)],\r\n                  },\r\n                  emphasis: {\r\n                    textStyle: {\r\n                      fontSize: nowSize(18),\r\n                    },\r\n                    offset: [0, nowSize(-20)],\r\n                  },\r\n                },\r\n                itemStyle: {\r\n                  normal: {\r\n                    borderWidth: nowSize(1.5),\r\n                  },\r\n                },\r\n              },\r\n              {\r\n                show: true,\r\n                type: \"effectScatter\",\r\n                symbolSize: function (params) {\r\n                  //\r\n                  let t = parseInt(that.cur_info.year) - 2017;\r\n                  if (params[2] in speed_average_data[\"scar\"] == false)\r\n                    return 0;\r\n                  if (\r\n                    that.cur_info.title in\r\n                      speed_average_data[\"scar\"][params[2]] ==\r\n                    false\r\n                  )\r\n                    return 0;\r\n                  if (\r\n                    t in\r\n                      speed_average_data[\"scar\"][params[2]][\r\n                        that.cur_info.title\r\n                      ] ==\r\n                    false\r\n                  )\r\n                    return 0;\r\n                  let x =\r\n                    speed_average_data[\"scar\"][params[2]][that.cur_info.title][\r\n                      t\r\n                    ];\r\n                  let cur_v = (x[1] / that.cur_info.max) * 5 + 1;\r\n                  let nowClientWidth = document.documentElement.clientWidth;\r\n                  let nowSize = function nowSize(val, initWidth = 1920) {\r\n                    return val * (nowClientWidth / initWidth);\r\n                  };\r\n                  //设置每个点的大小\r\n                  return nowSize(30) / cur_v;\r\n                },\r\n                rippleEffect: {\r\n                  // 涟漪特效相关配置。\r\n                  scale: nowSize(4), // 控制涟漪大小\r\n                },\r\n              },\r\n            ],\r\n          };\r\n          that.myChart.setOption(options);\r\n          that.myChart.resize();\r\n        }\r\n      }, 300);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$echarts.registerMap(\"china\", china);\r\n    this.set_china_map();\r\n    window.addEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n  beforeDestroy() {\r\n    if (this.myChart) {\r\n      this.myChart.dispose();\r\n      this.myChart = null;\r\n    }\r\n    if (this.toolChart) {\r\n      this.toolChart.dispose();\r\n      this.toolChart = null;\r\n    }\r\n    if (this.region_info_interval) clearInterval(this.region_info_interval);\r\n    if (this.toolChart_interval) clearInterval(this.toolChart_interval);\r\n    window.removeEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n};\r\n// 基于准备好的dom，初始化echarts实例\r\n</script>\r\n<style lang=\"less\">\r\n/*懒加载图标动画*/\r\n.main_tooltip {\r\n  width: 16.8rem;\r\n  height: 10.9333rem;\r\n  background: url(../assets/main_time/main_tooltip.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  // background-position: center top;\r\n  // display: flex;\r\n  // flex-flow: column;\r\n  .up_span {\r\n    padding-top: 1.1667rem;\r\n    padding-right: 0.3333rem;\r\n    font-size: 0.5rem;\r\n  }\r\n  .bottom_route {\r\n    display: flex;\r\n    margin-left: 10.8333rem;\r\n    margin-top: -0.8333rem;\r\n    float: right;\r\n    .icon {\r\n      background: url(../assets/main_time/ze-arrow.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      width: 0.4rem;\r\n      height: 0.4rem;\r\n      z-index: 999999;\r\n    }\r\n    .text {\r\n      //margin-top: -1.6667rem;\r\n      padding-right: 0.3333rem;\r\n      font-size: 0.5rem;\r\n      color: white;\r\n      text-align: right;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n\r\n  .chart {\r\n    width: 100%;\r\n    height: 9.7666rem;\r\n    justify-content: center;\r\n  }\r\n}\r\n.h-3 {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-flow: column;\r\n  .time_content {\r\n    width: 20.5167rem;\r\n    height: 0rem;\r\n    font-size: 0.3333rem;\r\n    z-index: 999999;\r\n    .Timeline {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin-top: 0.6667rem;\r\n      .timeaxis {\r\n        height: 0.8333rem;\r\n        margin-top: 1.3333rem;\r\n        margin-left: 4em;\r\n        display: flex;\r\n        .timeaxis-box {\r\n          width: 5.5rem;\r\n          .circular {\r\n            width: 0.3333rem;\r\n            height: 0.3333rem;\r\n            border-radius: 50%;\r\n            background: #165dff;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.1667rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .circular:hover {\r\n            width: 0.5rem;\r\n            height: 0.5rem;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.25rem;\r\n            left: -0.0833rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .circular_click {\r\n            width: 0.5rem;\r\n            height: 0.5rem;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.25rem;\r\n            left: -0.0833rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .timeaxis-topText {\r\n            border-bottom: 0.0833rem solid #c9cdd4; //时间轴线的宽度和颜色\r\n            position: relative;\r\n          }\r\n          .bd-empty {\r\n            // border: 0;\r\n            //margin-top: .0833rem;\r\n            border-bottom: 0.0833rem solid #c9cdd4; //时间轴线的宽度和颜色\r\n            opacity: 0;\r\n            position: relative;\r\n          }\r\n          .timeaxis-bootomText {\r\n            position: relative;\r\n            .text {\r\n              position: absolute;\r\n              top: 0.1667rem;\r\n              font-size: 0.4667rem;\r\n              left: -0.3333rem;\r\n              color: #fff;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}