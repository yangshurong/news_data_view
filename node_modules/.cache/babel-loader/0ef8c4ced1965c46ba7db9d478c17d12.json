{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.int32-array.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport format from '../../util/format';\nimport BarsGeometry from '../../util/geometry/Bars3DGeometry';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\nexport default echarts.ChartView.extend({\n  type: 'bar3D',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n    this._labelsBuilder = new LabelsBuilder(256, 256, api);\n    var self = this;\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, position, distance) {\n      if (self._data) {\n        var layout = self._data.getItemLayout(dataIndex);\n\n        var start = layout[0];\n        var dir = layout[1];\n        var height = layout[2][1];\n        return vec3.scaleAndAdd([], start, dir, distance + height);\n      } else {\n        return [0, 0];\n      }\n    }; // Give a large render order.\n\n\n    this._labelsBuilder.getMesh().renderOrder = 100;\n  },\n  render: function render(seriesModel, ecModel, api) {\n    // Swap barMesh\n    var tmp = this._prevBarMesh;\n    this._prevBarMesh = this._barMesh;\n    this._barMesh = tmp;\n\n    if (!this._barMesh) {\n      this._barMesh = new graphicGL.Mesh({\n        geometry: new BarsGeometry(),\n        shadowDepthMaterial: new graphicGL.Material({\n          shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.sm.depth.vertex'), graphicGL.Shader.source('ecgl.sm.depth.fragment'))\n        }),\n        // Only cartesian3D enable culling\n        // FIXME Performance\n        culling: seriesModel.coordinateSystem.type === 'cartesian3D',\n        // Render after axes\n        renderOrder: 10,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n    }\n\n    this.groupGL.remove(this._prevBarMesh);\n    this.groupGL.add(this._barMesh);\n    this.groupGL.add(this._labelsBuilder.getMesh());\n    var coordSys = seriesModel.coordinateSystem;\n\n    this._doRender(seriesModel, api);\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._barMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._data = seriesModel.getData();\n\n    this._labelsBuilder.updateData(this._data);\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateAnimation(seriesModel);\n  },\n  _updateAnimation: function _updateAnimation(seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevNormal', 'normal']], this._prevBarMesh, this._barMesh, seriesModel);\n  },\n  _doRender: function _doRender(seriesModel, api) {\n    var data = seriesModel.getData();\n    var shading = seriesModel.get('shading');\n    var enableNormal = shading !== 'color';\n    var self = this;\n    var barMesh = this._barMesh;\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!barMesh.material || barMesh.material.shader.name !== shadingPrefix) {\n      barMesh.material = graphicGL.createMaterial(shadingPrefix, ['VERTEX_COLOR']);\n    }\n\n    graphicGL.setMaterialFromModel(shading, barMesh.material, seriesModel, api);\n    barMesh.geometry.enableNormal = enableNormal;\n    barMesh.geometry.resetOffset(); // Bevel settings\n\n    var bevelSize = seriesModel.get('bevelSize');\n    var bevelSegments = seriesModel.get('bevelSmoothness');\n    barMesh.geometry.bevelSegments = bevelSegments;\n    barMesh.geometry.bevelSize = bevelSize;\n    var colorArr = [];\n    var vertexColors = new Float32Array(data.count() * 4);\n    var colorOffset = 0;\n    var barCount = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        return;\n      }\n\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] > 0) {\n        barCount++;\n\n        if (colorArr[3] < 0.99) {\n          hasTransparent = true;\n        }\n      }\n    });\n    barMesh.geometry.setBarCount(barCount);\n    var orient = data.getLayout('orient'); // Map of dataIndex and barIndex.\n\n    var barIndexOfData = this._barIndexOfData = new Int32Array(data.count());\n    var barCount = 0;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        barIndexOfData[idx] = -1;\n        return;\n      }\n\n      var layout = data.getItemLayout(idx);\n      var start = layout[0];\n      var dir = layout[1];\n      var size = layout[2];\n      var idx4 = idx * 4;\n      colorArr[0] = vertexColors[idx4++];\n      colorArr[1] = vertexColors[idx4++];\n      colorArr[2] = vertexColors[idx4++];\n      colorArr[3] = vertexColors[idx4++];\n\n      if (colorArr[3] > 0) {\n        self._barMesh.geometry.addBar(start, dir, orient, size, colorArr, idx);\n\n        barIndexOfData[idx] = barCount++;\n      }\n    });\n    barMesh.geometry.dirty();\n    barMesh.geometry.updateBoundingBox();\n    var material = barMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    barMesh.geometry.sortTriangles = hasTransparent;\n\n    this._initHandler(seriesModel, api);\n  },\n  _initHandler: function _initHandler(seriesModel, api) {\n    var data = seriesModel.getData();\n    var barMesh = this._barMesh;\n    var isCartesian3D = seriesModel.coordinateSystem.type === 'cartesian3D';\n    barMesh.seriesIndex = seriesModel.seriesIndex;\n    var lastDataIndex = -1;\n    barMesh.off('mousemove');\n    barMesh.off('mouseout');\n    barMesh.on('mousemove', function (e) {\n      var dataIndex = barMesh.geometry.getDataIndexOfVertex(e.triangle[0]);\n\n      if (dataIndex !== lastDataIndex) {\n        this._downplay(lastDataIndex);\n\n        this._highlight(dataIndex);\n\n        this._labelsBuilder.updateLabels([dataIndex]);\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex, true)]\n          });\n        }\n      }\n\n      lastDataIndex = dataIndex;\n      barMesh.dataIndex = dataIndex;\n    }, this);\n    barMesh.on('mouseout', function (e) {\n      this._downplay(lastDataIndex);\n\n      this._labelsBuilder.updateLabels();\n\n      lastDataIndex = -1;\n      barMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer'\n        });\n      }\n    }, this);\n  },\n  _highlight: function _highlight(dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  _downplay: function _downplay(dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  highlight: function highlight(seriesModel, ecModel, api, payload) {\n    this._toggleStatus('highlight', seriesModel, ecModel, api, payload);\n  },\n  downplay: function downplay(seriesModel, ecModel, api, payload) {\n    this._toggleStatus('downplay', seriesModel, ecModel, api, payload);\n  },\n  _toggleStatus: function _toggleStatus(status, seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = retrieve.queryDataIndex(data, payload);\n    var self = this;\n\n    if (dataIndex != null) {\n      echarts.util.each(format.normalizeToArray(dataIndex), function (dataIdx) {\n        status === 'highlight' ? this._highlight(dataIdx) : this._downplay(dataIdx);\n      }, this);\n    } else {\n      data.each(function (dataIdx) {\n        status === 'highlight' ? self._highlight(dataIdx) : self._downplay(dataIdx);\n      });\n    }\n  },\n  remove: function remove() {\n    this.groupGL.removeAll();\n  },\n  dispose: function dispose() {\n    this._labelsBuilder.dispose();\n\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/bar3D/Bar3DView.js"],"names":["echarts","graphicGL","retrieve","format","BarsGeometry","LabelsBuilder","glmatrix","getItemVisualColor","getItemVisualOpacity","vec3","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_api","_labelsBuilder","self","getLabelPosition","dataIndex","position","distance","_data","layout","getItemLayout","start","dir","height","scaleAndAdd","getMesh","renderOrder","render","seriesModel","tmp","_prevBarMesh","_barMesh","Mesh","geometry","shadowDepthMaterial","Material","shader","Shader","source","culling","coordinateSystem","renderNormal","remove","add","coordSys","_doRender","viewGL","methodName","isLinearSpace","material","getData","updateData","updateLabels","_updateAnimation","updateVertexAnimation","data","shading","get","enableNormal","barMesh","shadingPrefix","name","createMaterial","setMaterialFromModel","resetOffset","bevelSize","bevelSegments","colorArr","vertexColors","Float32Array","count","colorOffset","barCount","hasTransparent","each","idx","hasValue","color","opacity","parseColor","setBarCount","orient","getLayout","barIndexOfData","_barIndexOfData","Int32Array","size","idx4","addBar","dirty","updateBoundingBox","transparent","depthMask","sortTriangles","_initHandler","isCartesian3D","seriesIndex","lastDataIndex","off","on","e","getDataIndexOfVertex","triangle","_downplay","_highlight","dispatchAction","value","barIndex","itemModel","getItemModel","emphasisItemStyleModel","getModel","emphasisColor","emphasisOpacity","lift","setColor","getZr","refresh","highlight","payload","_toggleStatus","downplay","status","queryDataIndex","util","normalizeToArray","dataIdx","removeAll","dispose"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport format from '../../util/format';\nimport BarsGeometry from '../../util/geometry/Bars3DGeometry';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\nexport default echarts.ChartView.extend({\n  type: 'bar3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n    this._labelsBuilder = new LabelsBuilder(256, 256, api);\n    var self = this;\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, position, distance) {\n      if (self._data) {\n        var layout = self._data.getItemLayout(dataIndex);\n\n        var start = layout[0];\n        var dir = layout[1];\n        var height = layout[2][1];\n        return vec3.scaleAndAdd([], start, dir, distance + height);\n      } else {\n        return [0, 0];\n      }\n    }; // Give a large render order.\n\n\n    this._labelsBuilder.getMesh().renderOrder = 100;\n  },\n  render: function (seriesModel, ecModel, api) {\n    // Swap barMesh\n    var tmp = this._prevBarMesh;\n    this._prevBarMesh = this._barMesh;\n    this._barMesh = tmp;\n\n    if (!this._barMesh) {\n      this._barMesh = new graphicGL.Mesh({\n        geometry: new BarsGeometry(),\n        shadowDepthMaterial: new graphicGL.Material({\n          shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.sm.depth.vertex'), graphicGL.Shader.source('ecgl.sm.depth.fragment'))\n        }),\n        // Only cartesian3D enable culling\n        // FIXME Performance\n        culling: seriesModel.coordinateSystem.type === 'cartesian3D',\n        // Render after axes\n        renderOrder: 10,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n    }\n\n    this.groupGL.remove(this._prevBarMesh);\n    this.groupGL.add(this._barMesh);\n    this.groupGL.add(this._labelsBuilder.getMesh());\n    var coordSys = seriesModel.coordinateSystem;\n\n    this._doRender(seriesModel, api);\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._barMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._data = seriesModel.getData();\n\n    this._labelsBuilder.updateData(this._data);\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateAnimation(seriesModel);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevNormal', 'normal']], this._prevBarMesh, this._barMesh, seriesModel);\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var shading = seriesModel.get('shading');\n    var enableNormal = shading !== 'color';\n    var self = this;\n    var barMesh = this._barMesh;\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!barMesh.material || barMesh.material.shader.name !== shadingPrefix) {\n      barMesh.material = graphicGL.createMaterial(shadingPrefix, ['VERTEX_COLOR']);\n    }\n\n    graphicGL.setMaterialFromModel(shading, barMesh.material, seriesModel, api);\n    barMesh.geometry.enableNormal = enableNormal;\n    barMesh.geometry.resetOffset(); // Bevel settings\n\n    var bevelSize = seriesModel.get('bevelSize');\n    var bevelSegments = seriesModel.get('bevelSmoothness');\n    barMesh.geometry.bevelSegments = bevelSegments;\n    barMesh.geometry.bevelSize = bevelSize;\n    var colorArr = [];\n    var vertexColors = new Float32Array(data.count() * 4);\n    var colorOffset = 0;\n    var barCount = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        return;\n      }\n\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] > 0) {\n        barCount++;\n\n        if (colorArr[3] < 0.99) {\n          hasTransparent = true;\n        }\n      }\n    });\n    barMesh.geometry.setBarCount(barCount);\n    var orient = data.getLayout('orient'); // Map of dataIndex and barIndex.\n\n    var barIndexOfData = this._barIndexOfData = new Int32Array(data.count());\n    var barCount = 0;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        barIndexOfData[idx] = -1;\n        return;\n      }\n\n      var layout = data.getItemLayout(idx);\n      var start = layout[0];\n      var dir = layout[1];\n      var size = layout[2];\n      var idx4 = idx * 4;\n      colorArr[0] = vertexColors[idx4++];\n      colorArr[1] = vertexColors[idx4++];\n      colorArr[2] = vertexColors[idx4++];\n      colorArr[3] = vertexColors[idx4++];\n\n      if (colorArr[3] > 0) {\n        self._barMesh.geometry.addBar(start, dir, orient, size, colorArr, idx);\n\n        barIndexOfData[idx] = barCount++;\n      }\n    });\n    barMesh.geometry.dirty();\n    barMesh.geometry.updateBoundingBox();\n    var material = barMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    barMesh.geometry.sortTriangles = hasTransparent;\n\n    this._initHandler(seriesModel, api);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var barMesh = this._barMesh;\n    var isCartesian3D = seriesModel.coordinateSystem.type === 'cartesian3D';\n    barMesh.seriesIndex = seriesModel.seriesIndex;\n    var lastDataIndex = -1;\n    barMesh.off('mousemove');\n    barMesh.off('mouseout');\n    barMesh.on('mousemove', function (e) {\n      var dataIndex = barMesh.geometry.getDataIndexOfVertex(e.triangle[0]);\n\n      if (dataIndex !== lastDataIndex) {\n        this._downplay(lastDataIndex);\n\n        this._highlight(dataIndex);\n\n        this._labelsBuilder.updateLabels([dataIndex]);\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex, true)]\n          });\n        }\n      }\n\n      lastDataIndex = dataIndex;\n      barMesh.dataIndex = dataIndex;\n    }, this);\n    barMesh.on('mouseout', function (e) {\n      this._downplay(lastDataIndex);\n\n      this._labelsBuilder.updateLabels();\n\n      lastDataIndex = -1;\n      barMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer'\n        });\n      }\n    }, this);\n  },\n  _highlight: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  _downplay: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  highlight: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('highlight', seriesModel, ecModel, api, payload);\n  },\n  downplay: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('downplay', seriesModel, ecModel, api, payload);\n  },\n  _toggleStatus: function (status, seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = retrieve.queryDataIndex(data, payload);\n    var self = this;\n\n    if (dataIndex != null) {\n      echarts.util.each(format.normalizeToArray(dataIndex), function (dataIdx) {\n        status === 'highlight' ? this._highlight(dataIdx) : this._downplay(dataIdx);\n      }, this);\n    } else {\n      data.each(function (dataIdx) {\n        status === 'highlight' ? self._highlight(dataIdx) : self._downplay(dataIdx);\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n\n    this.groupGL.removeAll();\n  }\n});"]},"metadata":{},"sourceType":"module"}