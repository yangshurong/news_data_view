{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\n/**\n * Axis aligned bounding box\n * @constructor\n * @alias clay.BoundingBox\n * @param {clay.Vector3} [min]\n * @param {clay.Vector3} [max]\n */\n\nvar BoundingBox = function BoundingBox(min, max) {\n  /**\n   * Minimum coords of bounding box\n   * @type {clay.Vector3}\n   */\n  this.min = min || new Vector3(Infinity, Infinity, Infinity);\n  /**\n   * Maximum coords of bounding box\n   * @type {clay.Vector3}\n   */\n\n  this.max = max || new Vector3(-Infinity, -Infinity, -Infinity);\n  this.vertices = null;\n};\n\nBoundingBox.prototype = {\n  constructor: BoundingBox,\n\n  /**\n   * Update min and max coords from a vertices array\n   * @param  {array} vertices\n   */\n  updateFromVertices: function updateFromVertices(vertices) {\n    if (vertices.length > 0) {\n      var min = this.min;\n      var max = this.max;\n      var minArr = min.array;\n      var maxArr = max.array;\n      vec3Copy(minArr, vertices[0]);\n      vec3Copy(maxArr, vertices[0]);\n\n      for (var i = 1; i < vertices.length; i++) {\n        var vertex = vertices[i];\n\n        if (vertex[0] < minArr[0]) {\n          minArr[0] = vertex[0];\n        }\n\n        if (vertex[1] < minArr[1]) {\n          minArr[1] = vertex[1];\n        }\n\n        if (vertex[2] < minArr[2]) {\n          minArr[2] = vertex[2];\n        }\n\n        if (vertex[0] > maxArr[0]) {\n          maxArr[0] = vertex[0];\n        }\n\n        if (vertex[1] > maxArr[1]) {\n          maxArr[1] = vertex[1];\n        }\n\n        if (vertex[2] > maxArr[2]) {\n          maxArr[2] = vertex[2];\n        }\n      }\n\n      min._dirty = true;\n      max._dirty = true;\n    }\n  },\n\n  /**\n   * Union operation with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  union: function union(bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3.min(min.array, min.array, bbox.min.array);\n    vec3.max(max.array, max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n\n  /**\n   * Intersection operation with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  intersection: function intersection(bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3.max(min.array, min.array, bbox.min.array);\n    vec3.min(max.array, max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n\n  /**\n   * If intersect with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   * @return {boolean}\n   */\n  intersectBoundingBox: function intersectBoundingBox(bbox) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _min2 = bbox.min.array;\n    var _max2 = bbox.max.array;\n    return !(_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2] || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);\n  },\n\n  /**\n   * If contain another bounding box entirely\n   * @param  {clay.BoundingBox} bbox\n   * @return {boolean}\n   */\n  containBoundingBox: function containBoundingBox(bbox) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _min2 = bbox.min.array;\n    var _max2 = bbox.max.array;\n    return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2] && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];\n  },\n\n  /**\n   * If contain point entirely\n   * @param  {clay.Vector3} point\n   * @return {boolean}\n   */\n  containPoint: function containPoint(p) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _p = p.array;\n    return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2] && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];\n  },\n\n  /**\n   * If bounding box is finite\n   */\n  isFinite: function (_isFinite) {\n    function isFinite() {\n      return _isFinite.apply(this, arguments);\n    }\n\n    isFinite.toString = function () {\n      return _isFinite.toString();\n    };\n\n    return isFinite;\n  }(function () {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2]) && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);\n  }),\n\n  /**\n   * Apply an affine transform matrix to the bounding box\n   * @param  {clay.Matrix4} matrix\n   */\n  applyTransform: function applyTransform(matrix) {\n    this.transformFrom(this, matrix);\n  },\n\n  /**\n   * Get from another bounding box and an affine transform matrix.\n   * @param {clay.BoundingBox} source\n   * @param {clay.Matrix4} matrix\n   */\n  transformFrom: function () {\n    // http://dev.theomader.com/transform-bounding-boxes/\n    var xa = vec3.create();\n    var xb = vec3.create();\n    var ya = vec3.create();\n    var yb = vec3.create();\n    var za = vec3.create();\n    var zb = vec3.create();\n    return function (source, matrix) {\n      var min = source.min.array;\n      var max = source.max.array;\n      var m = matrix.array;\n      xa[0] = m[0] * min[0];\n      xa[1] = m[1] * min[0];\n      xa[2] = m[2] * min[0];\n      xb[0] = m[0] * max[0];\n      xb[1] = m[1] * max[0];\n      xb[2] = m[2] * max[0];\n      ya[0] = m[4] * min[1];\n      ya[1] = m[5] * min[1];\n      ya[2] = m[6] * min[1];\n      yb[0] = m[4] * max[1];\n      yb[1] = m[5] * max[1];\n      yb[2] = m[6] * max[1];\n      za[0] = m[8] * min[2];\n      za[1] = m[9] * min[2];\n      za[2] = m[10] * min[2];\n      zb[0] = m[8] * max[2];\n      zb[1] = m[9] * max[2];\n      zb[2] = m[10] * max[2];\n      min = this.min.array;\n      max = this.max.array;\n      min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];\n      min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];\n      min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];\n      max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];\n      max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];\n      max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];\n      this.min._dirty = true;\n      this.max._dirty = true;\n      return this;\n    };\n  }(),\n\n  /**\n   * Apply a projection matrix to the bounding box\n   * @param  {clay.Matrix4} matrix\n   */\n  applyProjection: function applyProjection(matrix) {\n    var min = this.min.array;\n    var max = this.max.array;\n    var m = matrix.array; // min in min z\n\n    var v10 = min[0];\n    var v11 = min[1];\n    var v12 = min[2]; // max in min z\n\n    var v20 = max[0];\n    var v21 = max[1];\n    var v22 = min[2]; // max in max z\n\n    var v30 = max[0];\n    var v31 = max[1];\n    var v32 = max[2];\n\n    if (m[15] === 1) {\n      // Orthographic projection\n      min[0] = m[0] * v10 + m[12];\n      min[1] = m[5] * v11 + m[13];\n      max[2] = m[10] * v12 + m[14];\n      max[0] = m[0] * v30 + m[12];\n      max[1] = m[5] * v31 + m[13];\n      min[2] = m[10] * v32 + m[14];\n    } else {\n      var w = -1 / v12;\n      min[0] = m[0] * v10 * w;\n      min[1] = m[5] * v11 * w;\n      max[2] = (m[10] * v12 + m[14]) * w;\n      w = -1 / v22;\n      max[0] = m[0] * v20 * w;\n      max[1] = m[5] * v21 * w;\n      w = -1 / v32;\n      min[2] = (m[10] * v32 + m[14]) * w;\n    }\n\n    this.min._dirty = true;\n    this.max._dirty = true;\n    return this;\n  },\n  updateVertices: function updateVertices() {\n    var vertices = this.vertices;\n\n    if (!vertices) {\n      // Cube vertices\n      vertices = [];\n\n      for (var i = 0; i < 8; i++) {\n        vertices[i] = vec3.fromValues(0, 0, 0);\n      }\n      /**\n       * Eight coords of bounding box\n       * @type {Float32Array[]}\n       */\n\n\n      this.vertices = vertices;\n    }\n\n    var min = this.min.array;\n    var max = this.max.array; //--- min z\n    // min x\n\n    vec3Set(vertices[0], min[0], min[1], min[2]);\n    vec3Set(vertices[1], min[0], max[1], min[2]); // max x\n\n    vec3Set(vertices[2], max[0], min[1], min[2]);\n    vec3Set(vertices[3], max[0], max[1], min[2]); //-- max z\n\n    vec3Set(vertices[4], min[0], min[1], max[2]);\n    vec3Set(vertices[5], min[0], max[1], max[2]);\n    vec3Set(vertices[6], max[0], min[1], max[2]);\n    vec3Set(vertices[7], max[0], max[1], max[2]);\n    return this;\n  },\n\n  /**\n   * Copy values from another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  copy: function copy(bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3Copy(min.array, bbox.min.array);\n    vec3Copy(max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new bounding box\n   * @return {clay.BoundingBox}\n   */\n  clone: function clone() {\n    var boundingBox = new BoundingBox();\n    boundingBox.copy(this);\n    return boundingBox;\n  }\n};\nexport default BoundingBox;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/math/BoundingBox.js"],"names":["Vector3","vec3","vec3Set","set","vec3Copy","copy","BoundingBox","min","max","Infinity","vertices","prototype","constructor","updateFromVertices","length","minArr","array","maxArr","i","vertex","_dirty","union","bbox","intersection","intersectBoundingBox","_min","_max","_min2","_max2","containBoundingBox","containPoint","p","_p","isFinite","applyTransform","matrix","transformFrom","xa","create","xb","ya","yb","za","zb","source","m","Math","applyProjection","v10","v11","v12","v20","v21","v22","v30","v31","v32","w","updateVertices","fromValues","clone","boundingBox"],"mappings":"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","sourcesContent":["import Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\n\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\n\n/**\n * Axis aligned bounding box\n * @constructor\n * @alias clay.BoundingBox\n * @param {clay.Vector3} [min]\n * @param {clay.Vector3} [max]\n */\nvar BoundingBox = function (min, max) {\n\n    /**\n     * Minimum coords of bounding box\n     * @type {clay.Vector3}\n     */\n    this.min = min || new Vector3(Infinity, Infinity, Infinity);\n\n    /**\n     * Maximum coords of bounding box\n     * @type {clay.Vector3}\n     */\n    this.max = max || new Vector3(-Infinity, -Infinity, -Infinity);\n\n    this.vertices = null;\n};\n\nBoundingBox.prototype = {\n\n    constructor: BoundingBox,\n    /**\n     * Update min and max coords from a vertices array\n     * @param  {array} vertices\n     */\n    updateFromVertices: function (vertices) {\n        if (vertices.length > 0) {\n            var min = this.min;\n            var max = this.max;\n            var minArr = min.array;\n            var maxArr = max.array;\n            vec3Copy(minArr, vertices[0]);\n            vec3Copy(maxArr, vertices[0]);\n            for (var i = 1; i < vertices.length; i++) {\n                var vertex = vertices[i];\n\n                if (vertex[0] < minArr[0]) { minArr[0] = vertex[0]; }\n                if (vertex[1] < minArr[1]) { minArr[1] = vertex[1]; }\n                if (vertex[2] < minArr[2]) { minArr[2] = vertex[2]; }\n\n                if (vertex[0] > maxArr[0]) { maxArr[0] = vertex[0]; }\n                if (vertex[1] > maxArr[1]) { maxArr[1] = vertex[1]; }\n                if (vertex[2] > maxArr[2]) { maxArr[2] = vertex[2]; }\n            }\n            min._dirty = true;\n            max._dirty = true;\n        }\n    },\n\n    /**\n     * Union operation with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    union: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3.min(min.array, min.array, bbox.min.array);\n        vec3.max(max.array, max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * Intersection operation with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    intersection: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3.max(min.array, min.array, bbox.min.array);\n        vec3.min(max.array, max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * If intersect with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     * @return {boolean}\n     */\n    intersectBoundingBox: function (bbox) {\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _min2 = bbox.min.array;\n        var _max2 = bbox.max.array;\n\n        return ! (_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2]\n            || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);\n    },\n\n    /**\n     * If contain another bounding box entirely\n     * @param  {clay.BoundingBox} bbox\n     * @return {boolean}\n     */\n    containBoundingBox: function (bbox) {\n\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _min2 = bbox.min.array;\n        var _max2 = bbox.max.array;\n\n        return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2]\n            && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];\n    },\n\n    /**\n     * If contain point entirely\n     * @param  {clay.Vector3} point\n     * @return {boolean}\n     */\n    containPoint: function (p) {\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _p = p.array;\n\n        return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2]\n            && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];\n    },\n\n    /**\n     * If bounding box is finite\n     */\n    isFinite: function () {\n        var _min = this.min.array;\n        var _max = this.max.array;\n        return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2])\n            && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);\n    },\n\n    /**\n     * Apply an affine transform matrix to the bounding box\n     * @param  {clay.Matrix4} matrix\n     */\n    applyTransform: function (matrix) {\n        this.transformFrom(this, matrix);\n    },\n\n    /**\n     * Get from another bounding box and an affine transform matrix.\n     * @param {clay.BoundingBox} source\n     * @param {clay.Matrix4} matrix\n     */\n    transformFrom: (function () {\n        // http://dev.theomader.com/transform-bounding-boxes/\n        var xa = vec3.create();\n        var xb = vec3.create();\n        var ya = vec3.create();\n        var yb = vec3.create();\n        var za = vec3.create();\n        var zb = vec3.create();\n\n        return function (source, matrix) {\n            var min = source.min.array;\n            var max = source.max.array;\n\n            var m = matrix.array;\n\n            xa[0] = m[0] * min[0]; xa[1] = m[1] * min[0]; xa[2] = m[2] * min[0];\n            xb[0] = m[0] * max[0]; xb[1] = m[1] * max[0]; xb[2] = m[2] * max[0];\n\n            ya[0] = m[4] * min[1]; ya[1] = m[5] * min[1]; ya[2] = m[6] * min[1];\n            yb[0] = m[4] * max[1]; yb[1] = m[5] * max[1]; yb[2] = m[6] * max[1];\n\n            za[0] = m[8] * min[2]; za[1] = m[9] * min[2]; za[2] = m[10] * min[2];\n            zb[0] = m[8] * max[2]; zb[1] = m[9] * max[2]; zb[2] = m[10] * max[2];\n\n            min = this.min.array;\n            max = this.max.array;\n            min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];\n            min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];\n            min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];\n\n            max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];\n            max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];\n            max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];\n\n            this.min._dirty = true;\n            this.max._dirty = true;\n\n            return this;\n        };\n    })(),\n\n    /**\n     * Apply a projection matrix to the bounding box\n     * @param  {clay.Matrix4} matrix\n     */\n    applyProjection: function (matrix) {\n        var min = this.min.array;\n        var max = this.max.array;\n\n        var m = matrix.array;\n        // min in min z\n        var v10 = min[0];\n        var v11 = min[1];\n        var v12 = min[2];\n        // max in min z\n        var v20 = max[0];\n        var v21 = max[1];\n        var v22 = min[2];\n        // max in max z\n        var v30 = max[0];\n        var v31 = max[1];\n        var v32 = max[2];\n\n        if (m[15] === 1) {  // Orthographic projection\n            min[0] = m[0] * v10 + m[12];\n            min[1] = m[5] * v11 + m[13];\n            max[2] = m[10] * v12 + m[14];\n\n            max[0] = m[0] * v30 + m[12];\n            max[1] = m[5] * v31 + m[13];\n            min[2] = m[10] * v32 + m[14];\n        }\n        else {\n            var w = -1 / v12;\n            min[0] = m[0] * v10 * w;\n            min[1] = m[5] * v11 * w;\n            max[2] = (m[10] * v12 + m[14]) * w;\n\n            w = -1 / v22;\n            max[0] = m[0] * v20 * w;\n            max[1] = m[5] * v21 * w;\n\n            w = -1 / v32;\n            min[2] = (m[10] * v32 + m[14]) * w;\n        }\n        this.min._dirty = true;\n        this.max._dirty = true;\n\n        return this;\n    },\n\n    updateVertices: function () {\n        var vertices = this.vertices;\n        if (!vertices) {\n            // Cube vertices\n            vertices = [];\n            for (var i = 0; i < 8; i++) {\n                vertices[i] = vec3.fromValues(0, 0, 0);\n            }\n\n            /**\n             * Eight coords of bounding box\n             * @type {Float32Array[]}\n             */\n            this.vertices = vertices;\n        }\n        var min = this.min.array;\n        var max = this.max.array;\n        //--- min z\n        // min x\n        vec3Set(vertices[0], min[0], min[1], min[2]);\n        vec3Set(vertices[1], min[0], max[1], min[2]);\n        // max x\n        vec3Set(vertices[2], max[0], min[1], min[2]);\n        vec3Set(vertices[3], max[0], max[1], min[2]);\n\n        //-- max z\n        vec3Set(vertices[4], min[0], min[1], max[2]);\n        vec3Set(vertices[5], min[0], max[1], max[2]);\n        vec3Set(vertices[6], max[0], min[1], max[2]);\n        vec3Set(vertices[7], max[0], max[1], max[2]);\n\n        return this;\n    },\n    /**\n     * Copy values from another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    copy: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3Copy(min.array, bbox.min.array);\n        vec3Copy(max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new bounding box\n     * @return {clay.BoundingBox}\n     */\n    clone: function () {\n        var boundingBox = new BoundingBox();\n        boundingBox.copy(this);\n        return boundingBox;\n    }\n};\n\nexport default BoundingBox;\n"]},"metadata":{},"sourceType":"module"}