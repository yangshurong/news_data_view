{"ast":null,"code":"import Texture from './Texture';\nimport glenum from './core/glenum';\nimport vendor from './core/vendor';\nimport mathUtil from './math/util';\nvar _isPowerOfTwo = mathUtil.isPowerOfTwo;\n\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\n\nfunction convertTextureToPowerOfTwo(texture, canvas) {\n  // var canvas = document.createElement('canvas');\n  var width = nearestPowerOfTwo(texture.width);\n  var height = nearestPowerOfTwo(texture.height);\n  canvas = canvas || document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(texture.image, 0, 0, width, height);\n  return canvas;\n}\n/**\n * @constructor clay.Texture2D\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')\n *     });\n *     var diffuseMap = new clay.Texture2D();\n *     diffuseMap.load('assets/textures/diffuse.jpg');\n *     mat.set('diffuseMap', diffuseMap);\n *     ...\n *     diffuseMap.success(function () {\n *         // Wait for the diffuse texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\n\n\nvar Texture2D = Texture.extend(function () {\n  return (\n    /** @lends clay.Texture2D# */\n    {\n      /**\n       * @type {?HTMLImageElement|HTMLCanvasElemnet}\n       */\n      // TODO mark dirty when assigned.\n      image: null,\n\n      /**\n       * Pixels data. Will be ignored if image is set.\n       * @type {?Uint8Array|Float32Array}\n       */\n      pixels: null,\n\n      /**\n       * @type {Array.<Object>}\n       * @example\n       *     [{\n       *         image: mipmap0,\n       *         pixels: null\n       *     }, {\n       *         image: mipmap1,\n       *         pixels: null\n       *     }, ....]\n       */\n      mipmaps: [],\n\n      /**\n       * If convert texture to power-of-two\n       * @type {boolean}\n       */\n      convertToPOT: false\n    }\n  );\n}, {\n  textureType: 'texture2D',\n  update: function update(renderer) {\n    var _gl = renderer.gl;\n\n    _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n\n    this.updateCommon(renderer);\n    var glFormat = this.format;\n    var glType = this.type; // Convert to pot is only available when using image/canvas/video element.\n\n    var convertToPOT = !!(this.convertToPOT && !this.mipmaps.length && this.image && (this.wrapS === Texture.REPEAT || this.wrapT === Texture.REPEAT) && this.NPOT);\n\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());\n\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());\n\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());\n\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());\n\n    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n\n    if (anisotropicExt && this.anisotropic > 1) {\n      _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n    } // Fallback to float type if browser don't have half float extension\n\n\n    if (glType === 36193) {\n      var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n\n      if (!halfFloatExt) {\n        glType = glenum.FLOAT;\n      }\n    }\n\n    if (this.mipmaps.length) {\n      var width = this.width;\n      var height = this.height;\n\n      for (var i = 0; i < this.mipmaps.length; i++) {\n        var mipmap = this.mipmaps[i];\n\n        this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);\n\n        width /= 2;\n        height /= 2;\n      }\n    } else {\n      this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);\n\n      if (this.useMipmap && (!this.NPOT || convertToPOT)) {\n        _gl.generateMipmap(_gl.TEXTURE_2D);\n      }\n    }\n\n    _gl.bindTexture(_gl.TEXTURE_2D, null);\n  },\n  _updateTextureData: function _updateTextureData(_gl, data, level, width, height, glFormat, glType, convertToPOT) {\n    if (data.image) {\n      var imgData = data.image;\n\n      if (convertToPOT) {\n        this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);\n        imgData = this._potCanvas;\n      }\n\n      _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);\n    } else {\n      // Can be used as a blank texture when writing render to texture(RTT)\n      if (glFormat <= Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT && glFormat >= Texture.COMPRESSED_RGB_S3TC_DXT1_EXT) {\n        _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);\n      } else {\n        // Is a render target if pixels is null\n        _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);\n      }\n    }\n  },\n\n  /**\n   * @param  {clay.Renderer} renderer\n   * @memberOf clay.Texture2D.prototype\n   */\n  generateMipmap: function generateMipmap(renderer) {\n    var _gl = renderer.gl;\n\n    if (this.useMipmap && !this.NPOT) {\n      _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n\n      _gl.generateMipmap(_gl.TEXTURE_2D);\n    }\n  },\n  isPowerOfTwo: function isPowerOfTwo() {\n    return _isPowerOfTwo(this.width) && _isPowerOfTwo(this.height);\n  },\n  isRenderable: function isRenderable() {\n    if (this.image) {\n      return this.image.width > 0 && this.image.height > 0;\n    } else {\n      return !!(this.width && this.height);\n    }\n  },\n  bind: function bind(renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));\n  },\n  unbind: function unbind(renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);\n  },\n  load: function load(src, crossOrigin) {\n    var image = vendor.createImage();\n\n    if (crossOrigin) {\n      image.crossOrigin = crossOrigin;\n    }\n\n    var self = this;\n\n    image.onload = function () {\n      self.dirty();\n      self.trigger('success', self);\n    };\n\n    image.onerror = function () {\n      self.trigger('error', self);\n    };\n\n    image.src = src;\n    this.image = image;\n    return this;\n  }\n});\nObject.defineProperty(Texture2D.prototype, 'width', {\n  get: function get() {\n    if (this.image) {\n      return this.image.width;\n    }\n\n    return this._width;\n  },\n  set: function set(value) {\n    if (this.image) {\n      console.warn('Texture from image can\\'t set width');\n    } else {\n      if (this._width !== value) {\n        this.dirty();\n      }\n\n      this._width = value;\n    }\n  }\n});\nObject.defineProperty(Texture2D.prototype, 'height', {\n  get: function get() {\n    if (this.image) {\n      return this.image.height;\n    }\n\n    return this._height;\n  },\n  set: function set(value) {\n    if (this.image) {\n      console.warn('Texture from image can\\'t set height');\n    } else {\n      if (this._height !== value) {\n        this.dirty();\n      }\n\n      this._height = value;\n    }\n  }\n});\nexport default Texture2D;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/Texture2D.js"],"names":["Texture","glenum","vendor","mathUtil","isPowerOfTwo","nearestPowerOfTwo","val","Math","pow","round","log","LN2","convertTextureToPowerOfTwo","texture","canvas","width","height","document","createElement","ctx","getContext","drawImage","image","Texture2D","extend","pixels","mipmaps","convertToPOT","textureType","update","renderer","_gl","gl","bindTexture","TEXTURE_2D","_cache","get","updateCommon","glFormat","format","glType","type","length","wrapS","REPEAT","wrapT","NPOT","texParameteri","TEXTURE_WRAP_S","getAvailableWrapS","TEXTURE_WRAP_T","getAvailableWrapT","TEXTURE_MAG_FILTER","magFilter","getAvailableMagFilter","TEXTURE_MIN_FILTER","minFilter","getAvailableMinFilter","anisotropicExt","getGLExtension","anisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","halfFloatExt","FLOAT","i","mipmap","_updateTextureData","useMipmap","generateMipmap","data","level","imgData","_potCanvas","texImage2D","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","compressedTexImage2D","isRenderable","bind","getWebGLTexture","unbind","load","src","crossOrigin","createImage","self","onload","dirty","trigger","onerror","Object","defineProperty","prototype","_width","set","value","console","warn","_height"],"mappings":"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","sourcesContent":["import Texture from './Texture';\nimport glenum from './core/glenum';\nimport vendor from './core/vendor';\nimport mathUtil from './math/util';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\n\nfunction nearestPowerOfTwo(val) {\n    return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\nfunction convertTextureToPowerOfTwo(texture, canvas) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(texture.image, 0, 0, width, height);\n\n    return canvas;\n}\n\n/**\n * @constructor clay.Texture2D\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')\n *     });\n *     var diffuseMap = new clay.Texture2D();\n *     diffuseMap.load('assets/textures/diffuse.jpg');\n *     mat.set('diffuseMap', diffuseMap);\n *     ...\n *     diffuseMap.success(function () {\n *         // Wait for the diffuse texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar Texture2D = Texture.extend(function () {\n    return /** @lends clay.Texture2D# */ {\n        /**\n         * @type {?HTMLImageElement|HTMLCanvasElemnet}\n         */\n        // TODO mark dirty when assigned.\n        image: null,\n        /**\n         * Pixels data. Will be ignored if image is set.\n         * @type {?Uint8Array|Float32Array}\n         */\n        pixels: null,\n        /**\n         * @type {Array.<Object>}\n         * @example\n         *     [{\n         *         image: mipmap0,\n         *         pixels: null\n         *     }, {\n         *         image: mipmap1,\n         *         pixels: null\n         *     }, ....]\n         */\n        mipmaps: [],\n\n        /**\n         * If convert texture to power-of-two\n         * @type {boolean}\n         */\n        convertToPOT: false\n    };\n}, {\n\n    textureType: 'texture2D',\n\n    update: function (renderer) {\n\n        var _gl = renderer.gl;\n        _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n\n        this.updateCommon(renderer);\n\n        var glFormat = this.format;\n        var glType = this.type;\n\n        // Convert to pot is only available when using image/canvas/video element.\n        var convertToPOT = !!(this.convertToPOT\n            && !this.mipmaps.length && this.image\n            && (this.wrapS === Texture.REPEAT || this.wrapT === Texture.REPEAT)\n            && this.NPOT\n        );\n\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());\n\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());\n\n        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n        if (anisotropicExt && this.anisotropic > 1) {\n            _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n        }\n\n        // Fallback to float type if browser don't have half float extension\n        if (glType === 36193) {\n            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n            if (!halfFloatExt) {\n                glType = glenum.FLOAT;\n            }\n        }\n\n        if (this.mipmaps.length) {\n            var width = this.width;\n            var height = this.height;\n            for (var i = 0; i < this.mipmaps.length; i++) {\n                var mipmap = this.mipmaps[i];\n                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);\n                width /= 2;\n                height /= 2;\n            }\n        }\n        else {\n            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);\n\n            if (this.useMipmap && (!this.NPOT || convertToPOT)) {\n                _gl.generateMipmap(_gl.TEXTURE_2D);\n            }\n        }\n\n        _gl.bindTexture(_gl.TEXTURE_2D, null);\n    },\n\n    _updateTextureData: function (_gl, data, level, width, height, glFormat, glType, convertToPOT) {\n        if (data.image) {\n            var imgData = data.image;\n            if (convertToPOT) {\n                this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);\n                imgData = this._potCanvas;\n            }\n            _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);\n        }\n        else {\n            // Can be used as a blank texture when writing render to texture(RTT)\n            if (\n                glFormat <= Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT\n                && glFormat >= Texture.COMPRESSED_RGB_S3TC_DXT1_EXT\n            ) {\n                _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);\n            }\n            else {\n                // Is a render target if pixels is null\n                _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);\n            }\n        }\n    },\n\n    /**\n     * @param  {clay.Renderer} renderer\n     * @memberOf clay.Texture2D.prototype\n     */\n    generateMipmap: function (renderer) {\n        var _gl = renderer.gl;\n        if (this.useMipmap && !this.NPOT) {\n            _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n            _gl.generateMipmap(_gl.TEXTURE_2D);\n        }\n    },\n\n    isPowerOfTwo: function () {\n        return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);\n    },\n\n    isRenderable: function () {\n        if (this.image) {\n            return this.image.width > 0 && this.image.height > 0;\n        }\n        else {\n            return !!(this.width && this.height);\n        }\n    },\n\n    bind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));\n    },\n\n    unbind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);\n    },\n\n    load: function (src, crossOrigin) {\n        var image = vendor.createImage();\n        if (crossOrigin) {\n            image.crossOrigin = crossOrigin;\n        }\n        var self = this;\n        image.onload = function () {\n            self.dirty();\n            self.trigger('success', self);\n        };\n        image.onerror = function () {\n            self.trigger('error', self);\n        };\n\n        image.src = src;\n        this.image = image;\n\n        return this;\n    }\n});\n\nObject.defineProperty(Texture2D.prototype, 'width', {\n    get: function () {\n        if (this.image) {\n            return this.image.width;\n        }\n        return this._width;\n    },\n    set: function (value) {\n        if (this.image) {\n            console.warn('Texture from image can\\'t set width');\n        }\n        else {\n            if (this._width !== value) {\n                this.dirty();\n            }\n            this._width = value;\n        }\n    }\n});\nObject.defineProperty(Texture2D.prototype, 'height', {\n    get: function () {\n        if (this.image) {\n            return this.image.height;\n        }\n        return this._height;\n    },\n    set: function (value) {\n        if (this.image) {\n            console.warn('Texture from image can\\'t set height');\n        }\n        else {\n            if (this._height !== value) {\n                this.dirty();\n            }\n            this._height = value;\n        }\n    }\n});\n\nexport default Texture2D;\n"]},"metadata":{},"sourceType":"module"}