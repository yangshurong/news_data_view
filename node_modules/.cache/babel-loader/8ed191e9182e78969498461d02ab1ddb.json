{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.splice.js\";\n\n/**\n * Surface texture in the 3D scene.\n * Provide management and rendering of zrender shapes and groups\n *\n * @module echarts-gl/util/EChartsSurface\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Texture2D from 'claygl/src/Texture2D';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector2 from 'claygl/src/math/Vector2';\nvar events = ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu'];\n\nfunction makeHandlerName(eventName) {\n  return '_on' + eventName;\n}\n/**\n * @constructor\n * @alias echarts-gl/util/EChartsSurface\n * @param {module:echarts~ECharts} chart\n */\n\n\nvar EChartsSurface = function EChartsSurface(chart) {\n  var self = this;\n  this._texture = new Texture2D({\n    anisotropic: 32,\n    flipY: false,\n    surface: this,\n    dispose: function dispose(renderer) {\n      self.dispose();\n      Texture2D.prototype.dispose.call(this, renderer);\n    }\n  });\n  events.forEach(function (eventName) {\n    this[makeHandlerName(eventName)] = function (eveObj) {\n      if (!eveObj.triangle) {\n        return;\n      }\n\n      this._meshes.forEach(function (mesh) {\n        this.dispatchEvent(eventName, mesh, eveObj.triangle, eveObj.point);\n      }, this);\n    };\n  }, this);\n  this._meshes = [];\n\n  if (chart) {\n    this.setECharts(chart);\n  } // Texture updated callback;\n\n\n  this.onupdate = null;\n};\n\nEChartsSurface.prototype = {\n  constructor: EChartsSurface,\n  getTexture: function getTexture() {\n    return this._texture;\n  },\n  setECharts: function setECharts(chart) {\n    this._chart = chart;\n    var canvas = chart.getDom();\n\n    if (!(canvas instanceof HTMLCanvasElement)) {\n      console.error('ECharts must init on canvas if it is used as texture.'); // Use an empty canvas\n\n      canvas = document.createElement('canvas');\n    } else {\n      var self = this; // Wrap refreshImmediately\n\n      var zr = chart.getZr();\n      var oldRefreshImmediately = zr.__oldRefreshImmediately || zr.refreshImmediately;\n\n      zr.refreshImmediately = function () {\n        oldRefreshImmediately.call(this);\n\n        self._texture.dirty();\n\n        self.onupdate && self.onupdate();\n      };\n\n      zr.__oldRefreshImmediately = oldRefreshImmediately;\n    }\n\n    this._texture.image = canvas;\n\n    this._texture.dirty();\n\n    this.onupdate && this.onupdate();\n  },\n\n  /**\n   * @method\n   * @param {clay.Mesh} attachedMesh\n   * @param {Array.<number>} triangle Triangle indices\n   * @param {clay.math.Vector3} point\n   */\n  dispatchEvent: function () {\n    var p0 = new Vector3();\n    var p1 = new Vector3();\n    var p2 = new Vector3();\n    var uv0 = new Vector2();\n    var uv1 = new Vector2();\n    var uv2 = new Vector2();\n    var uv = new Vector2();\n    var vCross = new Vector3();\n    return function (eventName, attachedMesh, triangle, point) {\n      var geo = attachedMesh.geometry;\n      var position = geo.attributes.position;\n      var texcoord = geo.attributes.texcoord0;\n      var dot = Vector3.dot;\n      var cross = Vector3.cross;\n      position.get(triangle[0], p0.array);\n      position.get(triangle[1], p1.array);\n      position.get(triangle[2], p2.array);\n      texcoord.get(triangle[0], uv0.array);\n      texcoord.get(triangle[1], uv1.array);\n      texcoord.get(triangle[2], uv2.array);\n      cross(vCross, p1, p2);\n      var det = dot(p0, vCross);\n      var t = dot(point, vCross) / det;\n      cross(vCross, p2, p0);\n      var u = dot(point, vCross) / det;\n      cross(vCross, p0, p1);\n      var v = dot(point, vCross) / det;\n      Vector2.scale(uv, uv0, t);\n      Vector2.scaleAndAdd(uv, uv, uv1, u);\n      Vector2.scaleAndAdd(uv, uv, uv2, v);\n\n      var x = uv.x * this._chart.getWidth();\n\n      var y = uv.y * this._chart.getHeight();\n\n      this._chart.getZr().handler.dispatch(eventName, {\n        zrX: x,\n        zrY: y\n      });\n    };\n  }(),\n  attachToMesh: function attachToMesh(mesh) {\n    if (this._meshes.indexOf(mesh) >= 0) {\n      return;\n    }\n\n    events.forEach(function (eventName) {\n      mesh.on(eventName, this[makeHandlerName(eventName)], this);\n    }, this);\n\n    this._meshes.push(mesh);\n  },\n  detachFromMesh: function detachFromMesh(mesh) {\n    var idx = this._meshes.indexOf(mesh);\n\n    if (idx >= 0) {\n      this._meshes.splice(idx, 1);\n    }\n\n    events.forEach(function (eventName) {\n      mesh.off(eventName, this[makeHandlerName(eventName)]);\n    }, this);\n  },\n  dispose: function dispose() {\n    this._meshes.forEach(function (mesh) {\n      this.detachFromMesh(mesh);\n    }, this);\n  }\n};\nexport default EChartsSurface;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/EChartsSurface.js"],"names":["Texture2D","Vector3","Vector2","events","makeHandlerName","eventName","EChartsSurface","chart","self","_texture","anisotropic","flipY","surface","dispose","renderer","prototype","call","forEach","eveObj","triangle","_meshes","mesh","dispatchEvent","point","setECharts","onupdate","constructor","getTexture","_chart","canvas","getDom","HTMLCanvasElement","console","error","document","createElement","zr","getZr","oldRefreshImmediately","__oldRefreshImmediately","refreshImmediately","dirty","image","p0","p1","p2","uv0","uv1","uv2","uv","vCross","attachedMesh","geo","geometry","position","attributes","texcoord","texcoord0","dot","cross","get","array","det","t","u","v","scale","scaleAndAdd","x","getWidth","y","getHeight","handler","dispatch","zrX","zrY","attachToMesh","indexOf","on","push","detachFromMesh","idx","splice","off"],"mappings":"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","sourcesContent":["/**\n * Surface texture in the 3D scene.\n * Provide management and rendering of zrender shapes and groups\n *\n * @module echarts-gl/util/EChartsSurface\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Texture2D from 'claygl/src/Texture2D';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector2 from 'claygl/src/math/Vector2';\nvar events = ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu'];\n\nfunction makeHandlerName(eventName) {\n  return '_on' + eventName;\n}\n/**\n * @constructor\n * @alias echarts-gl/util/EChartsSurface\n * @param {module:echarts~ECharts} chart\n */\n\n\nvar EChartsSurface = function (chart) {\n  var self = this;\n  this._texture = new Texture2D({\n    anisotropic: 32,\n    flipY: false,\n    surface: this,\n    dispose: function (renderer) {\n      self.dispose();\n      Texture2D.prototype.dispose.call(this, renderer);\n    }\n  });\n  events.forEach(function (eventName) {\n    this[makeHandlerName(eventName)] = function (eveObj) {\n      if (!eveObj.triangle) {\n        return;\n      }\n\n      this._meshes.forEach(function (mesh) {\n        this.dispatchEvent(eventName, mesh, eveObj.triangle, eveObj.point);\n      }, this);\n    };\n  }, this);\n  this._meshes = [];\n\n  if (chart) {\n    this.setECharts(chart);\n  } // Texture updated callback;\n\n\n  this.onupdate = null;\n};\n\nEChartsSurface.prototype = {\n  constructor: EChartsSurface,\n  getTexture: function () {\n    return this._texture;\n  },\n  setECharts: function (chart) {\n    this._chart = chart;\n    var canvas = chart.getDom();\n\n    if (!(canvas instanceof HTMLCanvasElement)) {\n      console.error('ECharts must init on canvas if it is used as texture.'); // Use an empty canvas\n\n      canvas = document.createElement('canvas');\n    } else {\n      var self = this; // Wrap refreshImmediately\n\n      var zr = chart.getZr();\n      var oldRefreshImmediately = zr.__oldRefreshImmediately || zr.refreshImmediately;\n\n      zr.refreshImmediately = function () {\n        oldRefreshImmediately.call(this);\n\n        self._texture.dirty();\n\n        self.onupdate && self.onupdate();\n      };\n\n      zr.__oldRefreshImmediately = oldRefreshImmediately;\n    }\n\n    this._texture.image = canvas;\n\n    this._texture.dirty();\n\n    this.onupdate && this.onupdate();\n  },\n\n  /**\n   * @method\n   * @param {clay.Mesh} attachedMesh\n   * @param {Array.<number>} triangle Triangle indices\n   * @param {clay.math.Vector3} point\n   */\n  dispatchEvent: function () {\n    var p0 = new Vector3();\n    var p1 = new Vector3();\n    var p2 = new Vector3();\n    var uv0 = new Vector2();\n    var uv1 = new Vector2();\n    var uv2 = new Vector2();\n    var uv = new Vector2();\n    var vCross = new Vector3();\n    return function (eventName, attachedMesh, triangle, point) {\n      var geo = attachedMesh.geometry;\n      var position = geo.attributes.position;\n      var texcoord = geo.attributes.texcoord0;\n      var dot = Vector3.dot;\n      var cross = Vector3.cross;\n      position.get(triangle[0], p0.array);\n      position.get(triangle[1], p1.array);\n      position.get(triangle[2], p2.array);\n      texcoord.get(triangle[0], uv0.array);\n      texcoord.get(triangle[1], uv1.array);\n      texcoord.get(triangle[2], uv2.array);\n      cross(vCross, p1, p2);\n      var det = dot(p0, vCross);\n      var t = dot(point, vCross) / det;\n      cross(vCross, p2, p0);\n      var u = dot(point, vCross) / det;\n      cross(vCross, p0, p1);\n      var v = dot(point, vCross) / det;\n      Vector2.scale(uv, uv0, t);\n      Vector2.scaleAndAdd(uv, uv, uv1, u);\n      Vector2.scaleAndAdd(uv, uv, uv2, v);\n\n      var x = uv.x * this._chart.getWidth();\n\n      var y = uv.y * this._chart.getHeight();\n\n      this._chart.getZr().handler.dispatch(eventName, {\n        zrX: x,\n        zrY: y\n      });\n    };\n  }(),\n  attachToMesh: function (mesh) {\n    if (this._meshes.indexOf(mesh) >= 0) {\n      return;\n    }\n\n    events.forEach(function (eventName) {\n      mesh.on(eventName, this[makeHandlerName(eventName)], this);\n    }, this);\n\n    this._meshes.push(mesh);\n  },\n  detachFromMesh: function (mesh) {\n    var idx = this._meshes.indexOf(mesh);\n\n    if (idx >= 0) {\n      this._meshes.splice(idx, 1);\n    }\n\n    events.forEach(function (eventName) {\n      mesh.off(eventName, this[makeHandlerName(eventName)]);\n    }, this);\n  },\n  dispose: function () {\n    this._meshes.forEach(function (mesh) {\n      this.detachFromMesh(mesh);\n    }, this);\n  }\n};\nexport default EChartsSurface;"]},"metadata":{},"sourceType":"module"}