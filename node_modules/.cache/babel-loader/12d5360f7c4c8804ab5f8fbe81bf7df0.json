{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar defaultRaw = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' '\n};\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nvar Stringifier = function () {\n  function Stringifier(builder) {\n    _classCallCheck(this, Stringifier);\n\n    this.builder = builder;\n  }\n\n  Stringifier.prototype.stringify = function stringify(node, semicolon) {\n    this[node.type](node, semicolon);\n  };\n\n  Stringifier.prototype.root = function root(node) {\n    this.body(node);\n    if (node.raws.after) this.builder(node.raws.after);\n  };\n\n  Stringifier.prototype.comment = function comment(node) {\n    var left = this.raw(node, 'left', 'commentLeft');\n    var right = this.raw(node, 'right', 'commentRight');\n    this.builder('/*' + left + node.text + right + '*/', node);\n  };\n\n  Stringifier.prototype.decl = function decl(node, semicolon) {\n    var between = this.raw(node, 'between', 'colon');\n    var string = node.prop + between + this.rawValue(node, 'value');\n\n    if (node.important) {\n      string += node.raws.important || ' !important';\n    }\n\n    if (semicolon) string += ';';\n    this.builder(string, node);\n  };\n\n  Stringifier.prototype.rule = function rule(node) {\n    this.block(node, this.rawValue(node, 'selector'));\n  };\n\n  Stringifier.prototype.atrule = function atrule(node, semicolon) {\n    var name = '@' + node.name;\n    var params = node.params ? this.rawValue(node, 'params') : '';\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName;\n    } else if (params) {\n      name += ' ';\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params);\n    } else {\n      var end = (node.raws.between || '') + (semicolon ? ';' : '');\n      this.builder(name + params + end, node);\n    }\n  };\n\n  Stringifier.prototype.body = function body(node) {\n    var last = node.nodes.length - 1;\n\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break;\n      last -= 1;\n    }\n\n    var semicolon = this.raw(node, 'semicolon');\n\n    for (var i = 0; i < node.nodes.length; i++) {\n      var child = node.nodes[i];\n      var before = this.raw(child, 'before');\n      if (before) this.builder(before);\n      this.stringify(child, last !== i || semicolon);\n    }\n  };\n\n  Stringifier.prototype.block = function block(node, start) {\n    var between = this.raw(node, 'between', 'beforeOpen');\n    this.builder(start + between + '{', node, 'start');\n    var after = void 0;\n\n    if (node.nodes && node.nodes.length) {\n      this.body(node);\n      after = this.raw(node, 'after');\n    } else {\n      after = this.raw(node, 'after', 'emptyBody');\n    }\n\n    if (after) this.builder(after);\n    this.builder('}', node, 'end');\n  };\n\n  Stringifier.prototype.raw = function raw(node, own, detect) {\n    var value = void 0;\n    if (!detect) detect = own; // Already had\n\n    if (own) {\n      value = node.raws[own];\n      if (typeof value !== 'undefined') return value;\n    }\n\n    var parent = node.parent; // Hack for first rule in CSS\n\n    if (detect === 'before') {\n      if (!parent || parent.type === 'root' && parent.first === node) {\n        return '';\n      }\n    } // Floating child without parent\n\n\n    if (!parent) return defaultRaw[detect]; // Detect style by other nodes\n\n    var root = node.root();\n    if (!root.rawCache) root.rawCache = {};\n\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect];\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect);\n    } else {\n      var method = 'raw' + capitalize(detect);\n\n      if (this[method]) {\n        value = this[method](root, node);\n      } else {\n        root.walk(function (i) {\n          value = i.raws[own];\n          if (typeof value !== 'undefined') return false;\n        });\n      }\n    }\n\n    if (typeof value === 'undefined') value = defaultRaw[detect];\n    root.rawCache[detect] = value;\n    return value;\n  };\n\n  Stringifier.prototype.rawSemicolon = function rawSemicolon(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawEmptyBody = function rawEmptyBody(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawIndent = function rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent;\n    var value = void 0;\n    root.walk(function (i) {\n      var p = i.parent;\n\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          var parts = i.raws.before.split('\\n');\n          value = parts[parts.length - 1];\n          value = value.replace(/[^\\s]/g, '');\n          return false;\n        }\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawBeforeComment = function rawBeforeComment(root, node) {\n    var value = void 0;\n    root.walkComments(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl');\n    }\n\n    return value;\n  };\n\n  Stringifier.prototype.rawBeforeDecl = function rawBeforeDecl(root, node) {\n    var value = void 0;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule');\n    }\n\n    return value;\n  };\n\n  Stringifier.prototype.rawBeforeRule = function rawBeforeRule(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawBeforeClose = function rawBeforeClose(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after;\n\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawBeforeOpen = function rawBeforeOpen(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.type !== 'decl') {\n        value = i.raws.between;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.rawColon = function rawColon(root) {\n    var value = void 0;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '');\n        return false;\n      }\n    });\n    return value;\n  };\n\n  Stringifier.prototype.beforeAfter = function beforeAfter(node, detect) {\n    var value = void 0;\n\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment');\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule');\n    } else {\n      value = this.raw(node, null, 'beforeClose');\n    }\n\n    var buf = node.parent;\n    var depth = 0;\n\n    while (buf && buf.type !== 'root') {\n      depth += 1;\n      buf = buf.parent;\n    }\n\n    if (value.indexOf('\\n') !== -1) {\n      var indent = this.raw(node, null, 'indent');\n\n      if (indent.length) {\n        for (var step = 0; step < depth; step++) {\n          value += indent;\n        }\n      }\n    }\n\n    return value;\n  };\n\n  Stringifier.prototype.rawValue = function rawValue(node, prop) {\n    var value = node[prop];\n    var raw = node.raws[prop];\n\n    if (raw && raw.value === value) {\n      return raw.raw;\n    } else {\n      return value;\n    }\n  };\n\n  return Stringifier;\n}();\n\nexports.default = Stringifier;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["defaultRaw","colon","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","after","emptyBody","commentLeft","commentRight","capitalize","str","toUpperCase","slice","Stringifier","builder","_classCallCheck","stringify","node","semicolon","type","root","body","raws","comment","left","raw","right","text","decl","between","string","prop","rawValue","important","rule","block","atrule","name","params","afterName","nodes","end","last","length","i","child","before","start","own","detect","value","parent","first","rawCache","beforeAfter","method","walk","rawSemicolon","rawEmptyBody","rawIndent","p","parts","split","replace","rawBeforeComment","walkComments","indexOf","rawBeforeDecl","walkDecls","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","buf","depth","step"],"sources":["stringifier.es6"],"sourcesContent":["const defaultRaw = {\n    colon:         ': ',\n    indent:        '    ',\n    beforeDecl:    '\\n',\n    beforeRule:    '\\n',\n    beforeOpen:    ' ',\n    beforeClose:   '\\n',\n    beforeComment: '\\n',\n    after:         '\\n',\n    emptyBody:     '',\n    commentLeft:   ' ',\n    commentRight:  ' '\n};\n\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\n\nclass Stringifier {\n\n    constructor(builder) {\n        this.builder = builder;\n    }\n\n    stringify(node, semicolon) {\n        this[node.type](node, semicolon);\n    }\n\n    root(node) {\n        this.body(node);\n        if ( node.raws.after ) this.builder(node.raws.after);\n    }\n\n    comment(node) {\n        let left  = this.raw(node, 'left',  'commentLeft');\n        let right = this.raw(node, 'right', 'commentRight');\n        this.builder('/*' + left + node.text + right + '*/', node);\n    }\n\n    decl(node, semicolon) {\n        let between = this.raw(node, 'between', 'colon');\n        let string  = node.prop + between + this.rawValue(node, 'value');\n\n        if ( node.important ) {\n            string += node.raws.important || ' !important';\n        }\n\n        if ( semicolon ) string += ';';\n        this.builder(string, node);\n    }\n\n    rule(node) {\n        this.block(node, this.rawValue(node, 'selector'));\n    }\n\n    atrule(node, semicolon) {\n        let name   = '@' + node.name;\n        let params = node.params ? this.rawValue(node, 'params') : '';\n\n        if ( typeof node.raws.afterName !== 'undefined' ) {\n            name += node.raws.afterName;\n        } else if ( params ) {\n            name += ' ';\n        }\n\n        if ( node.nodes ) {\n            this.block(node, name + params);\n        } else {\n            let end = (node.raws.between || '') + (semicolon ? ';' : '');\n            this.builder(name + params + end, node);\n        }\n    }\n\n    body(node) {\n        let last = node.nodes.length - 1;\n        while ( last > 0 ) {\n            if ( node.nodes[last].type !== 'comment' ) break;\n            last -= 1;\n        }\n\n        let semicolon = this.raw(node, 'semicolon');\n        for ( let i = 0; i < node.nodes.length; i++ ) {\n            let child  = node.nodes[i];\n            let before = this.raw(child, 'before');\n            if ( before ) this.builder(before);\n            this.stringify(child, last !== i || semicolon);\n        }\n    }\n\n    block(node, start) {\n        let between = this.raw(node, 'between', 'beforeOpen');\n        this.builder(start + between + '{', node, 'start');\n\n        let after;\n        if ( node.nodes && node.nodes.length ) {\n            this.body(node);\n            after = this.raw(node, 'after');\n        } else {\n            after = this.raw(node, 'after', 'emptyBody');\n        }\n\n        if ( after ) this.builder(after);\n        this.builder('}', node, 'end');\n    }\n\n    raw(node, own, detect) {\n        let value;\n        if ( !detect ) detect = own;\n\n        // Already had\n        if ( own ) {\n            value = node.raws[own];\n            if ( typeof value !== 'undefined' ) return value;\n        }\n\n        let parent = node.parent;\n\n        // Hack for first rule in CSS\n        if ( detect === 'before' ) {\n            if ( !parent || parent.type === 'root' && parent.first === node ) {\n                return '';\n            }\n        }\n\n        // Floating child without parent\n        if ( !parent ) return defaultRaw[detect];\n\n        // Detect style by other nodes\n        let root = node.root();\n        if ( !root.rawCache ) root.rawCache = { };\n        if ( typeof root.rawCache[detect] !== 'undefined' ) {\n            return root.rawCache[detect];\n        }\n\n        if ( detect === 'before' || detect === 'after' ) {\n            return this.beforeAfter(node, detect);\n        } else {\n            let method = 'raw' + capitalize(detect);\n            if ( this[method] ) {\n                value = this[method](root, node);\n            } else {\n                root.walk( i => {\n                    value = i.raws[own];\n                    if ( typeof value !== 'undefined' ) return false;\n                });\n            }\n        }\n\n        if ( typeof value === 'undefined' ) value = defaultRaw[detect];\n\n        root.rawCache[detect] = value;\n        return value;\n    }\n\n    rawSemicolon(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length && i.last.type === 'decl' ) {\n                value = i.raws.semicolon;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawEmptyBody(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length === 0 ) {\n                value = i.raws.after;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawIndent(root) {\n        if ( root.raws.indent ) return root.raws.indent;\n        let value;\n        root.walk( i => {\n            let p = i.parent;\n            if ( p && p !== root && p.parent && p.parent === root ) {\n                if ( typeof i.raws.before !== 'undefined' ) {\n                    let parts = i.raws.before.split('\\n');\n                    value = parts[parts.length - 1];\n                    value = value.replace(/[^\\s]/g, '');\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n\n    rawBeforeComment(root, node) {\n        let value;\n        root.walkComments( i => {\n            if ( typeof i.raws.before !== 'undefined' ) {\n                value = i.raws.before;\n                if ( value.indexOf('\\n') !== -1 ) {\n                    value = value.replace(/[^\\n]+$/, '');\n                }\n                return false;\n            }\n        });\n        if ( typeof value === 'undefined' ) {\n            value = this.raw(node, null, 'beforeDecl');\n        }\n        return value;\n    }\n\n    rawBeforeDecl(root, node) {\n        let value;\n        root.walkDecls( i => {\n            if ( typeof i.raws.before !== 'undefined' ) {\n                value = i.raws.before;\n                if ( value.indexOf('\\n') !== -1 ) {\n                    value = value.replace(/[^\\n]+$/, '');\n                }\n                return false;\n            }\n        });\n        if ( typeof value === 'undefined' ) {\n            value = this.raw(node, null, 'beforeRule');\n        }\n        return value;\n    }\n\n    rawBeforeRule(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && (i.parent !== root || root.first !== i) ) {\n                if ( typeof i.raws.before !== 'undefined' ) {\n                    value = i.raws.before;\n                    if ( value.indexOf('\\n') !== -1 ) {\n                        value = value.replace(/[^\\n]+$/, '');\n                    }\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n\n    rawBeforeClose(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length > 0 ) {\n                if ( typeof i.raws.after !== 'undefined' ) {\n                    value = i.raws.after;\n                    if ( value.indexOf('\\n') !== -1 ) {\n                        value = value.replace(/[^\\n]+$/, '');\n                    }\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n\n    rawBeforeOpen(root) {\n        let value;\n        root.walk( i => {\n            if ( i.type !== 'decl' ) {\n                value = i.raws.between;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawColon(root) {\n        let value;\n        root.walkDecls( i => {\n            if ( typeof i.raws.between !== 'undefined' ) {\n                value = i.raws.between.replace(/[^\\s:]/g, '');\n                return false;\n            }\n        });\n        return value;\n    }\n\n    beforeAfter(node, detect) {\n        let value;\n        if ( node.type === 'decl' ) {\n            value = this.raw(node, null, 'beforeDecl');\n        } else if ( node.type === 'comment' ) {\n            value = this.raw(node, null, 'beforeComment');\n        } else if ( detect === 'before' ) {\n            value = this.raw(node, null, 'beforeRule');\n        } else {\n            value = this.raw(node, null, 'beforeClose');\n        }\n\n        let buf   = node.parent;\n        let depth = 0;\n        while ( buf && buf.type !== 'root' ) {\n            depth += 1;\n            buf = buf.parent;\n        }\n\n        if ( value.indexOf('\\n') !== -1 ) {\n            let indent = this.raw(node, null, 'indent');\n            if ( indent.length ) {\n                for ( let step = 0; step < depth; step++ ) value += indent;\n            }\n        }\n\n        return value;\n    }\n\n    rawValue(node, prop) {\n        let value = node[prop];\n        let raw   = node.raws[prop];\n        if ( raw && raw.value === value ) {\n            return raw.raw;\n        } else {\n            return value;\n        }\n    }\n\n}\n\nexport default Stringifier;\n"]},"metadata":{},"sourceType":"script"}