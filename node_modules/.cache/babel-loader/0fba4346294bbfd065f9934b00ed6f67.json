{"ast":null,"code":"// TODO Should not derived from mesh?\nimport Mesh from '../Mesh';\nimport CubeGeometry from '../geometry/Cube';\nimport Shader from '../Shader';\nimport Material from '../Material';\nimport Texture from '../Texture';\nimport PerspectiveCamera from '../camera/Perspective';\nimport Matrix4 from '../math/Matrix4';\nimport skyboxEssl from '../shader/source/skybox.glsl.js';\nShader.import(skyboxEssl);\n/**\n * @constructor clay.plugin.Skybox\n *\n * @example\n *     var skyTex = new clay.TextureCube();\n *     skyTex.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     var skybox = new clay.plugin.Skybox({\n *         scene: scene\n *     });\n *     skybox.material.set('environmentMap', skyTex);\n */\n\nvar Skybox = Mesh.extend(function () {\n  var skyboxShader = new Shader({\n    vertex: Shader.source('clay.skybox.vertex'),\n    fragment: Shader.source('clay.skybox.fragment')\n  });\n  var material = new Material({\n    shader: skyboxShader,\n    depthMask: false\n  });\n  return {\n    /**\n     * @type {clay.Scene}\n     * @memberOf clay.plugin.Skybox.prototype\n     */\n    scene: null,\n    geometry: new CubeGeometry(),\n    material: material,\n    environmentMap: null,\n    culling: false,\n    _dummyCamera: new PerspectiveCamera()\n  };\n}, function () {\n  var scene = this.scene;\n\n  if (scene) {\n    this.attachScene(scene);\n  }\n\n  if (this.environmentMap) {\n    this.setEnvironmentMap(this.environmentMap);\n  }\n},\n/** @lends clay.plugin.Skybox# */\n{\n  /**\n   * Attach the skybox to the scene\n   * @param  {clay.Scene} scene\n   */\n  attachScene: function attachScene(scene) {\n    if (this.scene) {\n      this.detachScene();\n    }\n\n    scene.skybox = this;\n    this.scene = scene;\n    scene.on('beforerender', this._beforeRenderScene, this);\n  },\n\n  /**\n   * Detach from scene\n   */\n  detachScene: function detachScene() {\n    if (this.scene) {\n      this.scene.off('beforerender', this._beforeRenderScene);\n      this.scene.skybox = null;\n    }\n\n    this.scene = null;\n  },\n\n  /**\n   * Dispose skybox\n   * @param  {clay.Renderer} renderer\n   */\n  dispose: function dispose(renderer) {\n    this.detachScene();\n    this.geometry.dispose(renderer);\n  },\n\n  /**\n   * Set environment map\n   * @param {clay.TextureCube} envMap\n   */\n  setEnvironmentMap: function setEnvironmentMap(envMap) {\n    if (envMap.textureType === 'texture2D') {\n      this.material.define('EQUIRECTANGULAR'); // LINEAR filter can remove the artifacts in pole\n\n      envMap.minFilter = Texture.LINEAR;\n    } else {\n      this.material.undefine('EQUIRECTANGULAR');\n    }\n\n    this.material.set('environmentMap', envMap);\n  },\n\n  /**\n   * Get environment map\n   * @return {clay.TextureCube}\n   */\n  getEnvironmentMap: function getEnvironmentMap() {\n    return this.material.get('environmentMap');\n  },\n  _beforeRenderScene: function _beforeRenderScene(renderer, scene, camera) {\n    this.renderSkybox(renderer, camera);\n  },\n  renderSkybox: function renderSkybox(renderer, camera) {\n    var dummyCamera = this._dummyCamera;\n    dummyCamera.aspect = renderer.getViewportAspect();\n    dummyCamera.fov = camera.fov || 50;\n    dummyCamera.updateProjectionMatrix();\n    Matrix4.invert(dummyCamera.invProjectionMatrix, dummyCamera.projectionMatrix);\n    dummyCamera.worldTransform.copy(camera.worldTransform);\n    dummyCamera.viewMatrix.copy(camera.viewMatrix);\n    this.position.copy(camera.getWorldPosition());\n    this.update(); // Don't remember to disable blend\n\n    renderer.gl.disable(renderer.gl.BLEND);\n\n    if (this.material.get('lod') > 0) {\n      this.material.define('fragment', 'LOD');\n    } else {\n      this.material.undefine('fragment', 'LOD');\n    }\n\n    renderer.renderPass([this], dummyCamera);\n  }\n});\nexport default Skybox;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/plugin/Skybox.js"],"names":["Mesh","CubeGeometry","Shader","Material","Texture","PerspectiveCamera","Matrix4","skyboxEssl","import","Skybox","extend","skyboxShader","vertex","source","fragment","material","shader","depthMask","scene","geometry","environmentMap","culling","_dummyCamera","attachScene","setEnvironmentMap","detachScene","skybox","on","_beforeRenderScene","off","dispose","renderer","envMap","textureType","define","minFilter","LINEAR","undefine","set","getEnvironmentMap","get","camera","renderSkybox","dummyCamera","aspect","getViewportAspect","fov","updateProjectionMatrix","invert","invProjectionMatrix","projectionMatrix","worldTransform","copy","viewMatrix","position","getWorldPosition","update","gl","disable","BLEND","renderPass"],"mappings":"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","sourcesContent":["// TODO Should not derived from mesh?\nimport Mesh from '../Mesh';\nimport CubeGeometry from '../geometry/Cube';\nimport Shader from '../Shader';\nimport Material from '../Material';\nimport Texture from '../Texture';\nimport PerspectiveCamera from '../camera/Perspective';\nimport Matrix4 from '../math/Matrix4';\n\nimport skyboxEssl from '../shader/source/skybox.glsl.js';\nShader.import(skyboxEssl);\n/**\n * @constructor clay.plugin.Skybox\n *\n * @example\n *     var skyTex = new clay.TextureCube();\n *     skyTex.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     var skybox = new clay.plugin.Skybox({\n *         scene: scene\n *     });\n *     skybox.material.set('environmentMap', skyTex);\n */\nvar Skybox = Mesh.extend(function () {\n\n    var skyboxShader = new Shader({\n        vertex: Shader.source('clay.skybox.vertex'),\n        fragment: Shader.source('clay.skybox.fragment')\n    });\n    var material = new Material({\n        shader: skyboxShader,\n        depthMask: false\n    });\n\n    return {\n        /**\n         * @type {clay.Scene}\n         * @memberOf clay.plugin.Skybox.prototype\n         */\n        scene: null,\n\n        geometry: new CubeGeometry(),\n\n        material: material,\n\n        environmentMap: null,\n\n        culling: false,\n\n        _dummyCamera: new PerspectiveCamera()\n    };\n}, function () {\n    var scene = this.scene;\n    if (scene) {\n        this.attachScene(scene);\n    }\n    if (this.environmentMap) {\n        this.setEnvironmentMap(this.environmentMap);\n    }\n}, /** @lends clay.plugin.Skybox# */ {\n    /**\n     * Attach the skybox to the scene\n     * @param  {clay.Scene} scene\n     */\n    attachScene: function (scene) {\n        if (this.scene) {\n            this.detachScene();\n        }\n        scene.skybox = this;\n\n        this.scene = scene;\n        scene.on('beforerender', this._beforeRenderScene, this);\n    },\n    /**\n     * Detach from scene\n     */\n    detachScene: function () {\n        if (this.scene) {\n            this.scene.off('beforerender', this._beforeRenderScene);\n            this.scene.skybox = null;\n        }\n        this.scene = null;\n    },\n\n    /**\n     * Dispose skybox\n     * @param  {clay.Renderer} renderer\n     */\n    dispose: function (renderer) {\n        this.detachScene();\n        this.geometry.dispose(renderer);\n    },\n    /**\n     * Set environment map\n     * @param {clay.TextureCube} envMap\n     */\n    setEnvironmentMap: function (envMap) {\n        if (envMap.textureType === 'texture2D') {\n            this.material.define('EQUIRECTANGULAR');\n            // LINEAR filter can remove the artifacts in pole\n            envMap.minFilter = Texture.LINEAR;\n        }\n        else {\n            this.material.undefine('EQUIRECTANGULAR');\n        }\n        this.material.set('environmentMap', envMap);\n    },\n    /**\n     * Get environment map\n     * @return {clay.TextureCube}\n     */\n    getEnvironmentMap: function () {\n        return this.material.get('environmentMap');\n    },\n\n    _beforeRenderScene: function(renderer, scene, camera) {\n        this.renderSkybox(renderer, camera);\n    },\n\n    renderSkybox: function (renderer, camera) {\n        var dummyCamera = this._dummyCamera;\n        dummyCamera.aspect = renderer.getViewportAspect();\n        dummyCamera.fov = camera.fov || 50;\n        dummyCamera.updateProjectionMatrix();\n        Matrix4.invert(dummyCamera.invProjectionMatrix, dummyCamera.projectionMatrix);\n        dummyCamera.worldTransform.copy(camera.worldTransform);\n        dummyCamera.viewMatrix.copy(camera.viewMatrix);\n\n        this.position.copy(camera.getWorldPosition());\n        this.update();\n\n        // Don't remember to disable blend\n        renderer.gl.disable(renderer.gl.BLEND);\n        if (this.material.get('lod') > 0) {\n            this.material.define('fragment', 'LOD');\n        }\n        else {\n            this.material.undefine('fragment', 'LOD');\n        }\n        renderer.renderPass([this], dummyCamera);\n    }\n});\n\nexport default Skybox;\n"]},"metadata":{},"sourceType":"module"}