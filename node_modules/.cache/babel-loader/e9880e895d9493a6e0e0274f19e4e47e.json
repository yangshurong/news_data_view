{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\n\n/**\n * Geometry collecting bars data\n *\n * @module echarts-gl/chart/bars/BarsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport trianglesSortMixin from './trianglesSortMixin';\nimport Geometry from 'claygl/src/Geometry';\nimport glMatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glMatrix.vec3;\nvar mat3 = glMatrix.mat3;\n/**\n * @constructor\n * @alias module:echarts-gl/chart/bars/BarsGeometry\n * @extends clay.Geometry\n */\n\nvar BarsGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      prevPosition: new Geometry.Attribute('prevPosition', 'float', 3),\n      prevNormal: new Geometry.Attribute('prevNormal', 'float', 3)\n    },\n    dynamic: true,\n    enableNormal: false,\n    bevelSize: 1,\n    bevelSegments: 0,\n    // Map from vertexIndex to dataIndex.\n    _dataIndices: null,\n    _vertexOffset: 0,\n    _triangleOffset: 0\n  };\n},\n/** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */\n{\n  resetOffset: function resetOffset() {\n    this._vertexOffset = 0;\n    this._triangleOffset = 0;\n  },\n  setBarCount: function setBarCount(barCount) {\n    var enableNormal = this.enableNormal;\n    var vertexCount = this.getBarVertexCount() * barCount;\n    var triangleCount = this.getBarTriangleCount() * barCount;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n\n      if (enableNormal) {\n        this.attributes.normal.init(vertexCount);\n      } else {\n        this.attributes.normal.value = null;\n      }\n\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n      this._dataIndices = new Uint32Array(vertexCount);\n    }\n  },\n  getBarVertexCount: function getBarVertexCount() {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments) : this.enableNormal ? 24 : 8;\n  },\n  getBarTriangleCount: function getBarTriangleCount() {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments) : 12;\n  },\n  _getBevelBarVertexCount: function _getBevelBarVertexCount(bevelSegments) {\n    return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;\n  },\n  _getBevelBarTriangleCount: function _getBevelBarTriangleCount(bevelSegments) {\n    var widthSegments = bevelSegments * 4 + 3;\n    var heightSegments = bevelSegments * 2 + 1;\n    return (widthSegments + 1) * heightSegments * 2 + 4;\n  },\n  setColor: function setColor(idx, color) {\n    var vertexCount = this.getBarVertexCount();\n    var start = vertexCount * idx;\n    var end = vertexCount * (idx + 1);\n\n    for (var i = start; i < end; i++) {\n      this.attributes.color.set(i, color);\n    }\n\n    this.dirtyAttribute('color');\n  },\n\n  /**\n   * Get dataIndex of vertex.\n   * @param {number} vertexIndex\n   */\n  getDataIndexOfVertex: function getDataIndexOfVertex(vertexIndex) {\n    return this._dataIndices ? this._dataIndices[vertexIndex] : null;\n  },\n\n  /**\n   * Add a bar\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {Array.<number>} color\n   */\n  addBar: function () {\n    var v3Create = vec3.create;\n    var v3ScaleAndAdd = vec3.scaleAndAdd;\n    var end = v3Create();\n    var px = v3Create();\n    var py = v3Create();\n    var pz = v3Create();\n    var nx = v3Create();\n    var ny = v3Create();\n    var nz = v3Create();\n    var pts = [];\n    var normals = [];\n\n    for (var i = 0; i < 8; i++) {\n      pts[i] = v3Create();\n    }\n\n    var cubeFaces4 = [// PX\n    [0, 1, 5, 4], // NX\n    [2, 3, 7, 6], // PY\n    [4, 5, 6, 7], // NY\n    [3, 2, 1, 0], // PZ\n    [0, 4, 7, 3], // NZ\n    [1, 2, 6, 5]];\n    var face4To3 = [0, 1, 2, 0, 2, 3];\n    var cubeFaces3 = [];\n\n    for (var i = 0; i < cubeFaces4.length; i++) {\n      var face4 = cubeFaces4[i];\n\n      for (var j = 0; j < 2; j++) {\n        var face = [];\n\n        for (var k = 0; k < 3; k++) {\n          face.push(face4[face4To3[j * 3 + k]]);\n        }\n\n        cubeFaces3.push(face);\n      }\n    }\n\n    return function (start, dir, leftDir, size, color, dataIndex) {\n      // Use vertex, triangle maybe sorted.\n      var startVertex = this._vertexOffset;\n\n      if (this.bevelSize > 0 && this.bevelSegments > 0) {\n        this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);\n      } else {\n        vec3.copy(py, dir);\n        vec3.normalize(py, py); // x * y => z\n\n        vec3.cross(pz, leftDir, py);\n        vec3.normalize(pz, pz); // y * z => x\n\n        vec3.cross(px, py, pz);\n        vec3.normalize(pz, pz);\n        vec3.negate(nx, px);\n        vec3.negate(ny, py);\n        vec3.negate(nz, pz);\n        v3ScaleAndAdd(pts[0], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[1], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);\n        v3ScaleAndAdd(end, start, py, size[1]);\n        v3ScaleAndAdd(pts[4], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[5], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);\n        var attributes = this.attributes;\n\n        if (this.enableNormal) {\n          normals[0] = px;\n          normals[1] = nx;\n          normals[2] = py;\n          normals[3] = ny;\n          normals[4] = pz;\n          normals[5] = nz;\n          var vertexOffset = this._vertexOffset;\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 6; k++) {\n              this.indices[idx3++] = vertexOffset + face4To3[k];\n            }\n\n            vertexOffset += 4;\n            this._triangleOffset += 2;\n          }\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var normal = normals[i];\n\n            for (var k = 0; k < 4; k++) {\n              var idx = cubeFaces4[i][k];\n              attributes.position.set(this._vertexOffset, pts[idx]);\n              attributes.normal.set(this._vertexOffset, normal);\n              attributes.color.set(this._vertexOffset++, color);\n            }\n          }\n        } else {\n          for (var i = 0; i < cubeFaces3.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 3; k++) {\n              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;\n            }\n\n            this._triangleOffset++;\n          }\n\n          for (var i = 0; i < pts.length; i++) {\n            attributes.position.set(this._vertexOffset, pts[i]);\n            attributes.color.set(this._vertexOffset++, color);\n          }\n        }\n      }\n\n      var endVerex = this._vertexOffset;\n\n      for (var i = startVertex; i < endVerex; i++) {\n        this._dataIndices[i] = dataIndex;\n      }\n    };\n  }(),\n\n  /**\n   * Add a bar with bevel\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {number} bevelSize\n   * @param {number} bevelSegments\n   * @param {Array.<number>} color\n   */\n  _addBevelBar: function () {\n    var px = vec3.create();\n    var py = vec3.create();\n    var pz = vec3.create();\n    var rotateMat = mat3.create();\n    var bevelStartSize = [];\n    var xOffsets = [1, -1, -1, 1];\n    var zOffsets = [1, 1, -1, -1];\n    var yOffsets = [2, 0];\n    return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {\n      vec3.copy(py, dir);\n      vec3.normalize(py, py); // x * y => z\n\n      vec3.cross(pz, leftDir, py);\n      vec3.normalize(pz, pz); // y * z => x\n\n      vec3.cross(px, py, pz);\n      vec3.normalize(pz, pz);\n      rotateMat[0] = px[0];\n      rotateMat[1] = px[1];\n      rotateMat[2] = px[2];\n      rotateMat[3] = py[0];\n      rotateMat[4] = py[1];\n      rotateMat[5] = py[2];\n      rotateMat[6] = pz[0];\n      rotateMat[7] = pz[1];\n      rotateMat[8] = pz[2];\n      bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;\n\n      for (var i = 0; i < 3; i++) {\n        bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);\n      }\n\n      var rx = (size[0] - bevelStartSize[0]) / 2;\n      var ry = (size[1] - bevelStartSize[1]) / 2;\n      var rz = (size[2] - bevelStartSize[2]) / 2;\n      var pos = [];\n      var normal = [];\n      var vertexOffset = this._vertexOffset;\n      var endIndices = [];\n\n      for (var i = 0; i < 2; i++) {\n        endIndices[i] = endIndices[i] = [];\n\n        for (var m = 0; m <= bevelSegments; m++) {\n          for (var j = 0; j < 4; j++) {\n            if (m === 0 && i === 0 || i === 1 && m === bevelSegments) {\n              endIndices[i].push(vertexOffset);\n            }\n\n            for (var n = 0; n <= bevelSegments; n++) {\n              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;\n              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i; // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);\n\n              normal[0] = rx * Math.cos(phi) * Math.sin(theta);\n              normal[1] = ry * Math.cos(theta);\n              normal[2] = rz * Math.sin(phi) * Math.sin(theta);\n              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;\n              pos[1] = normal[1] + ry + yOffsets[i] * bevelStartSize[1] / 2;\n              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2; // Normal is not right if rx, ry, rz not equal.\n\n              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {\n                normal[0] /= rx * rx;\n                normal[1] /= ry * ry;\n                normal[2] /= rz * rz;\n              }\n\n              vec3.normalize(normal, normal);\n              vec3.transformMat3(pos, pos, rotateMat);\n              vec3.transformMat3(normal, normal, rotateMat);\n              vec3.add(pos, pos, start);\n              this.attributes.position.set(vertexOffset, pos);\n\n              if (this.enableNormal) {\n                this.attributes.normal.set(vertexOffset, normal);\n              }\n\n              this.attributes.color.set(vertexOffset, color);\n              vertexOffset++;\n            }\n          }\n        }\n      }\n\n      var widthSegments = bevelSegments * 4 + 3;\n      var heightSegments = bevelSegments * 2 + 1;\n      var len = widthSegments + 1;\n\n      for (var j = 0; j < heightSegments; j++) {\n        for (var i = 0; i <= widthSegments; i++) {\n          var i2 = j * len + i + this._vertexOffset;\n          var i1 = j * len + (i + 1) % len + this._vertexOffset;\n          var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;\n          var i3 = (j + 1) * len + i + this._vertexOffset;\n          this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);\n          this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);\n        }\n      } // Close top and bottom\n\n\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);\n      this._vertexOffset = vertexOffset;\n    };\n  }()\n});\necharts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);\necharts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);\nexport default BarsGeometry;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/geometry/Bars3DGeometry.js"],"names":["echarts","dynamicConvertMixin","trianglesSortMixin","Geometry","glMatrix","vec3","mat3","BarsGeometry","extend","attributes","position","Attribute","normal","color","prevPosition","prevNormal","dynamic","enableNormal","bevelSize","bevelSegments","_dataIndices","_vertexOffset","_triangleOffset","resetOffset","setBarCount","barCount","vertexCount","getBarVertexCount","triangleCount","getBarTriangleCount","init","value","indices","Uint32Array","Uint16Array","_getBevelBarVertexCount","_getBevelBarTriangleCount","widthSegments","heightSegments","setColor","idx","start","end","i","set","dirtyAttribute","getDataIndexOfVertex","vertexIndex","addBar","v3Create","create","v3ScaleAndAdd","scaleAndAdd","px","py","pz","nx","ny","nz","pts","normals","cubeFaces4","face4To3","cubeFaces3","length","face4","j","face","k","push","dir","leftDir","size","dataIndex","startVertex","_addBevelBar","copy","normalize","cross","negate","vertexOffset","idx3","endVerex","rotateMat","bevelStartSize","xOffsets","zOffsets","yOffsets","Math","min","max","rx","ry","rz","pos","endIndices","m","n","phi","PI","theta","cos","sin","abs","transformMat3","add","len","i2","i1","i4","i3","setTriangleIndices","util","defaults","prototype"],"mappings":"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","sourcesContent":["/**\n * Geometry collecting bars data\n *\n * @module echarts-gl/chart/bars/BarsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport trianglesSortMixin from './trianglesSortMixin';\nimport Geometry from 'claygl/src/Geometry';\nimport glMatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glMatrix.vec3;\nvar mat3 = glMatrix.mat3;\n/**\n * @constructor\n * @alias module:echarts-gl/chart/bars/BarsGeometry\n * @extends clay.Geometry\n */\n\nvar BarsGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      prevPosition: new Geometry.Attribute('prevPosition', 'float', 3),\n      prevNormal: new Geometry.Attribute('prevNormal', 'float', 3)\n    },\n    dynamic: true,\n    enableNormal: false,\n    bevelSize: 1,\n    bevelSegments: 0,\n    // Map from vertexIndex to dataIndex.\n    _dataIndices: null,\n    _vertexOffset: 0,\n    _triangleOffset: 0\n  };\n},\n/** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */\n{\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._triangleOffset = 0;\n  },\n  setBarCount: function (barCount) {\n    var enableNormal = this.enableNormal;\n    var vertexCount = this.getBarVertexCount() * barCount;\n    var triangleCount = this.getBarTriangleCount() * barCount;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n\n      if (enableNormal) {\n        this.attributes.normal.init(vertexCount);\n      } else {\n        this.attributes.normal.value = null;\n      }\n\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n      this._dataIndices = new Uint32Array(vertexCount);\n    }\n  },\n  getBarVertexCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments) : this.enableNormal ? 24 : 8;\n  },\n  getBarTriangleCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments) : 12;\n  },\n  _getBevelBarVertexCount: function (bevelSegments) {\n    return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;\n  },\n  _getBevelBarTriangleCount: function (bevelSegments) {\n    var widthSegments = bevelSegments * 4 + 3;\n    var heightSegments = bevelSegments * 2 + 1;\n    return (widthSegments + 1) * heightSegments * 2 + 4;\n  },\n  setColor: function (idx, color) {\n    var vertexCount = this.getBarVertexCount();\n    var start = vertexCount * idx;\n    var end = vertexCount * (idx + 1);\n\n    for (var i = start; i < end; i++) {\n      this.attributes.color.set(i, color);\n    }\n\n    this.dirtyAttribute('color');\n  },\n\n  /**\n   * Get dataIndex of vertex.\n   * @param {number} vertexIndex\n   */\n  getDataIndexOfVertex: function (vertexIndex) {\n    return this._dataIndices ? this._dataIndices[vertexIndex] : null;\n  },\n\n  /**\n   * Add a bar\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {Array.<number>} color\n   */\n  addBar: function () {\n    var v3Create = vec3.create;\n    var v3ScaleAndAdd = vec3.scaleAndAdd;\n    var end = v3Create();\n    var px = v3Create();\n    var py = v3Create();\n    var pz = v3Create();\n    var nx = v3Create();\n    var ny = v3Create();\n    var nz = v3Create();\n    var pts = [];\n    var normals = [];\n\n    for (var i = 0; i < 8; i++) {\n      pts[i] = v3Create();\n    }\n\n    var cubeFaces4 = [// PX\n    [0, 1, 5, 4], // NX\n    [2, 3, 7, 6], // PY\n    [4, 5, 6, 7], // NY\n    [3, 2, 1, 0], // PZ\n    [0, 4, 7, 3], // NZ\n    [1, 2, 6, 5]];\n    var face4To3 = [0, 1, 2, 0, 2, 3];\n    var cubeFaces3 = [];\n\n    for (var i = 0; i < cubeFaces4.length; i++) {\n      var face4 = cubeFaces4[i];\n\n      for (var j = 0; j < 2; j++) {\n        var face = [];\n\n        for (var k = 0; k < 3; k++) {\n          face.push(face4[face4To3[j * 3 + k]]);\n        }\n\n        cubeFaces3.push(face);\n      }\n    }\n\n    return function (start, dir, leftDir, size, color, dataIndex) {\n      // Use vertex, triangle maybe sorted.\n      var startVertex = this._vertexOffset;\n\n      if (this.bevelSize > 0 && this.bevelSegments > 0) {\n        this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);\n      } else {\n        vec3.copy(py, dir);\n        vec3.normalize(py, py); // x * y => z\n\n        vec3.cross(pz, leftDir, py);\n        vec3.normalize(pz, pz); // y * z => x\n\n        vec3.cross(px, py, pz);\n        vec3.normalize(pz, pz);\n        vec3.negate(nx, px);\n        vec3.negate(ny, py);\n        vec3.negate(nz, pz);\n        v3ScaleAndAdd(pts[0], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[1], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);\n        v3ScaleAndAdd(end, start, py, size[1]);\n        v3ScaleAndAdd(pts[4], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[5], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);\n        var attributes = this.attributes;\n\n        if (this.enableNormal) {\n          normals[0] = px;\n          normals[1] = nx;\n          normals[2] = py;\n          normals[3] = ny;\n          normals[4] = pz;\n          normals[5] = nz;\n          var vertexOffset = this._vertexOffset;\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 6; k++) {\n              this.indices[idx3++] = vertexOffset + face4To3[k];\n            }\n\n            vertexOffset += 4;\n            this._triangleOffset += 2;\n          }\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var normal = normals[i];\n\n            for (var k = 0; k < 4; k++) {\n              var idx = cubeFaces4[i][k];\n              attributes.position.set(this._vertexOffset, pts[idx]);\n              attributes.normal.set(this._vertexOffset, normal);\n              attributes.color.set(this._vertexOffset++, color);\n            }\n          }\n        } else {\n          for (var i = 0; i < cubeFaces3.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 3; k++) {\n              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;\n            }\n\n            this._triangleOffset++;\n          }\n\n          for (var i = 0; i < pts.length; i++) {\n            attributes.position.set(this._vertexOffset, pts[i]);\n            attributes.color.set(this._vertexOffset++, color);\n          }\n        }\n      }\n\n      var endVerex = this._vertexOffset;\n\n      for (var i = startVertex; i < endVerex; i++) {\n        this._dataIndices[i] = dataIndex;\n      }\n    };\n  }(),\n\n  /**\n   * Add a bar with bevel\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {number} bevelSize\n   * @param {number} bevelSegments\n   * @param {Array.<number>} color\n   */\n  _addBevelBar: function () {\n    var px = vec3.create();\n    var py = vec3.create();\n    var pz = vec3.create();\n    var rotateMat = mat3.create();\n    var bevelStartSize = [];\n    var xOffsets = [1, -1, -1, 1];\n    var zOffsets = [1, 1, -1, -1];\n    var yOffsets = [2, 0];\n    return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {\n      vec3.copy(py, dir);\n      vec3.normalize(py, py); // x * y => z\n\n      vec3.cross(pz, leftDir, py);\n      vec3.normalize(pz, pz); // y * z => x\n\n      vec3.cross(px, py, pz);\n      vec3.normalize(pz, pz);\n      rotateMat[0] = px[0];\n      rotateMat[1] = px[1];\n      rotateMat[2] = px[2];\n      rotateMat[3] = py[0];\n      rotateMat[4] = py[1];\n      rotateMat[5] = py[2];\n      rotateMat[6] = pz[0];\n      rotateMat[7] = pz[1];\n      rotateMat[8] = pz[2];\n      bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;\n\n      for (var i = 0; i < 3; i++) {\n        bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);\n      }\n\n      var rx = (size[0] - bevelStartSize[0]) / 2;\n      var ry = (size[1] - bevelStartSize[1]) / 2;\n      var rz = (size[2] - bevelStartSize[2]) / 2;\n      var pos = [];\n      var normal = [];\n      var vertexOffset = this._vertexOffset;\n      var endIndices = [];\n\n      for (var i = 0; i < 2; i++) {\n        endIndices[i] = endIndices[i] = [];\n\n        for (var m = 0; m <= bevelSegments; m++) {\n          for (var j = 0; j < 4; j++) {\n            if (m === 0 && i === 0 || i === 1 && m === bevelSegments) {\n              endIndices[i].push(vertexOffset);\n            }\n\n            for (var n = 0; n <= bevelSegments; n++) {\n              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;\n              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i; // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);\n\n              normal[0] = rx * Math.cos(phi) * Math.sin(theta);\n              normal[1] = ry * Math.cos(theta);\n              normal[2] = rz * Math.sin(phi) * Math.sin(theta);\n              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;\n              pos[1] = normal[1] + ry + yOffsets[i] * bevelStartSize[1] / 2;\n              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2; // Normal is not right if rx, ry, rz not equal.\n\n              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {\n                normal[0] /= rx * rx;\n                normal[1] /= ry * ry;\n                normal[2] /= rz * rz;\n              }\n\n              vec3.normalize(normal, normal);\n              vec3.transformMat3(pos, pos, rotateMat);\n              vec3.transformMat3(normal, normal, rotateMat);\n              vec3.add(pos, pos, start);\n              this.attributes.position.set(vertexOffset, pos);\n\n              if (this.enableNormal) {\n                this.attributes.normal.set(vertexOffset, normal);\n              }\n\n              this.attributes.color.set(vertexOffset, color);\n              vertexOffset++;\n            }\n          }\n        }\n      }\n\n      var widthSegments = bevelSegments * 4 + 3;\n      var heightSegments = bevelSegments * 2 + 1;\n      var len = widthSegments + 1;\n\n      for (var j = 0; j < heightSegments; j++) {\n        for (var i = 0; i <= widthSegments; i++) {\n          var i2 = j * len + i + this._vertexOffset;\n          var i1 = j * len + (i + 1) % len + this._vertexOffset;\n          var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;\n          var i3 = (j + 1) * len + i + this._vertexOffset;\n          this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);\n          this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);\n        }\n      } // Close top and bottom\n\n\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);\n      this._vertexOffset = vertexOffset;\n    };\n  }()\n});\necharts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);\necharts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);\nexport default BarsGeometry;"]},"metadata":{},"sourceType":"module"}