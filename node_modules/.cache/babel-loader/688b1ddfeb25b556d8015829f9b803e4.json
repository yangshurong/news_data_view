{"ast":null,"code":"/**\n * @namespace clay.core.color\n */\nimport LRU from '../core/LRU';\nvar colorUtil = {};\nvar kCSSColorTable = {\n  'transparent': [0, 0, 0, 0],\n  'aliceblue': [240, 248, 255, 1],\n  'antiquewhite': [250, 235, 215, 1],\n  'aqua': [0, 255, 255, 1],\n  'aquamarine': [127, 255, 212, 1],\n  'azure': [240, 255, 255, 1],\n  'beige': [245, 245, 220, 1],\n  'bisque': [255, 228, 196, 1],\n  'black': [0, 0, 0, 1],\n  'blanchedalmond': [255, 235, 205, 1],\n  'blue': [0, 0, 255, 1],\n  'blueviolet': [138, 43, 226, 1],\n  'brown': [165, 42, 42, 1],\n  'burlywood': [222, 184, 135, 1],\n  'cadetblue': [95, 158, 160, 1],\n  'chartreuse': [127, 255, 0, 1],\n  'chocolate': [210, 105, 30, 1],\n  'coral': [255, 127, 80, 1],\n  'cornflowerblue': [100, 149, 237, 1],\n  'cornsilk': [255, 248, 220, 1],\n  'crimson': [220, 20, 60, 1],\n  'cyan': [0, 255, 255, 1],\n  'darkblue': [0, 0, 139, 1],\n  'darkcyan': [0, 139, 139, 1],\n  'darkgoldenrod': [184, 134, 11, 1],\n  'darkgray': [169, 169, 169, 1],\n  'darkgreen': [0, 100, 0, 1],\n  'darkgrey': [169, 169, 169, 1],\n  'darkkhaki': [189, 183, 107, 1],\n  'darkmagenta': [139, 0, 139, 1],\n  'darkolivegreen': [85, 107, 47, 1],\n  'darkorange': [255, 140, 0, 1],\n  'darkorchid': [153, 50, 204, 1],\n  'darkred': [139, 0, 0, 1],\n  'darksalmon': [233, 150, 122, 1],\n  'darkseagreen': [143, 188, 143, 1],\n  'darkslateblue': [72, 61, 139, 1],\n  'darkslategray': [47, 79, 79, 1],\n  'darkslategrey': [47, 79, 79, 1],\n  'darkturquoise': [0, 206, 209, 1],\n  'darkviolet': [148, 0, 211, 1],\n  'deeppink': [255, 20, 147, 1],\n  'deepskyblue': [0, 191, 255, 1],\n  'dimgray': [105, 105, 105, 1],\n  'dimgrey': [105, 105, 105, 1],\n  'dodgerblue': [30, 144, 255, 1],\n  'firebrick': [178, 34, 34, 1],\n  'floralwhite': [255, 250, 240, 1],\n  'forestgreen': [34, 139, 34, 1],\n  'fuchsia': [255, 0, 255, 1],\n  'gainsboro': [220, 220, 220, 1],\n  'ghostwhite': [248, 248, 255, 1],\n  'gold': [255, 215, 0, 1],\n  'goldenrod': [218, 165, 32, 1],\n  'gray': [128, 128, 128, 1],\n  'green': [0, 128, 0, 1],\n  'greenyellow': [173, 255, 47, 1],\n  'grey': [128, 128, 128, 1],\n  'honeydew': [240, 255, 240, 1],\n  'hotpink': [255, 105, 180, 1],\n  'indianred': [205, 92, 92, 1],\n  'indigo': [75, 0, 130, 1],\n  'ivory': [255, 255, 240, 1],\n  'khaki': [240, 230, 140, 1],\n  'lavender': [230, 230, 250, 1],\n  'lavenderblush': [255, 240, 245, 1],\n  'lawngreen': [124, 252, 0, 1],\n  'lemonchiffon': [255, 250, 205, 1],\n  'lightblue': [173, 216, 230, 1],\n  'lightcoral': [240, 128, 128, 1],\n  'lightcyan': [224, 255, 255, 1],\n  'lightgoldenrodyellow': [250, 250, 210, 1],\n  'lightgray': [211, 211, 211, 1],\n  'lightgreen': [144, 238, 144, 1],\n  'lightgrey': [211, 211, 211, 1],\n  'lightpink': [255, 182, 193, 1],\n  'lightsalmon': [255, 160, 122, 1],\n  'lightseagreen': [32, 178, 170, 1],\n  'lightskyblue': [135, 206, 250, 1],\n  'lightslategray': [119, 136, 153, 1],\n  'lightslategrey': [119, 136, 153, 1],\n  'lightsteelblue': [176, 196, 222, 1],\n  'lightyellow': [255, 255, 224, 1],\n  'lime': [0, 255, 0, 1],\n  'limegreen': [50, 205, 50, 1],\n  'linen': [250, 240, 230, 1],\n  'magenta': [255, 0, 255, 1],\n  'maroon': [128, 0, 0, 1],\n  'mediumaquamarine': [102, 205, 170, 1],\n  'mediumblue': [0, 0, 205, 1],\n  'mediumorchid': [186, 85, 211, 1],\n  'mediumpurple': [147, 112, 219, 1],\n  'mediumseagreen': [60, 179, 113, 1],\n  'mediumslateblue': [123, 104, 238, 1],\n  'mediumspringgreen': [0, 250, 154, 1],\n  'mediumturquoise': [72, 209, 204, 1],\n  'mediumvioletred': [199, 21, 133, 1],\n  'midnightblue': [25, 25, 112, 1],\n  'mintcream': [245, 255, 250, 1],\n  'mistyrose': [255, 228, 225, 1],\n  'moccasin': [255, 228, 181, 1],\n  'navajowhite': [255, 222, 173, 1],\n  'navy': [0, 0, 128, 1],\n  'oldlace': [253, 245, 230, 1],\n  'olive': [128, 128, 0, 1],\n  'olivedrab': [107, 142, 35, 1],\n  'orange': [255, 165, 0, 1],\n  'orangered': [255, 69, 0, 1],\n  'orchid': [218, 112, 214, 1],\n  'palegoldenrod': [238, 232, 170, 1],\n  'palegreen': [152, 251, 152, 1],\n  'paleturquoise': [175, 238, 238, 1],\n  'palevioletred': [219, 112, 147, 1],\n  'papayawhip': [255, 239, 213, 1],\n  'peachpuff': [255, 218, 185, 1],\n  'peru': [205, 133, 63, 1],\n  'pink': [255, 192, 203, 1],\n  'plum': [221, 160, 221, 1],\n  'powderblue': [176, 224, 230, 1],\n  'purple': [128, 0, 128, 1],\n  'red': [255, 0, 0, 1],\n  'rosybrown': [188, 143, 143, 1],\n  'royalblue': [65, 105, 225, 1],\n  'saddlebrown': [139, 69, 19, 1],\n  'salmon': [250, 128, 114, 1],\n  'sandybrown': [244, 164, 96, 1],\n  'seagreen': [46, 139, 87, 1],\n  'seashell': [255, 245, 238, 1],\n  'sienna': [160, 82, 45, 1],\n  'silver': [192, 192, 192, 1],\n  'skyblue': [135, 206, 235, 1],\n  'slateblue': [106, 90, 205, 1],\n  'slategray': [112, 128, 144, 1],\n  'slategrey': [112, 128, 144, 1],\n  'snow': [255, 250, 250, 1],\n  'springgreen': [0, 255, 127, 1],\n  'steelblue': [70, 130, 180, 1],\n  'tan': [210, 180, 140, 1],\n  'teal': [0, 128, 128, 1],\n  'thistle': [216, 191, 216, 1],\n  'tomato': [255, 99, 71, 1],\n  'turquoise': [64, 224, 208, 1],\n  'violet': [238, 130, 238, 1],\n  'wheat': [245, 222, 179, 1],\n  'white': [255, 255, 255, 1],\n  'whitesmoke': [245, 245, 245, 1],\n  'yellow': [255, 255, 0, 1],\n  'yellowgreen': [154, 205, 50, 1]\n};\n\nfunction clampCssByte(i) {\n  // Clamp to integer 0 .. 255.\n  i = Math.round(i); // Seems to be what Chrome does (vs truncation).\n\n  return i < 0 ? 0 : i > 255 ? 255 : i;\n}\n\nfunction clampCssAngle(i) {\n  // Clamp to integer 0 .. 360.\n  i = Math.round(i); // Seems to be what Chrome does (vs truncation).\n\n  return i < 0 ? 0 : i > 360 ? 360 : i;\n}\n\nfunction clampCssFloat(f) {\n  // Clamp to float 0.0 .. 1.0.\n  return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n\nfunction parseCssInt(str) {\n  // int or percentage.\n  if (str.length && str.charAt(str.length - 1) === '%') {\n    return clampCssByte(parseFloat(str) / 100 * 255);\n  }\n\n  return clampCssByte(parseInt(str, 10));\n}\n\nfunction parseCssFloat(str) {\n  // float or percentage.\n  if (str.length && str.charAt(str.length - 1) === '%') {\n    return clampCssFloat(parseFloat(str) / 100);\n  }\n\n  return clampCssFloat(parseFloat(str));\n}\n\nfunction cssHueToRgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  } else if (h > 1) {\n    h -= 1;\n  }\n\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * h * 6;\n  }\n\n  if (h * 2 < 1) {\n    return m2;\n  }\n\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n\n  return m1;\n}\n\nfunction lerpNumber(a, b, p) {\n  return a + (b - a) * p;\n}\n\nfunction setRgba(out, r, g, b, a) {\n  out[0] = r;\n  out[1] = g;\n  out[2] = b;\n  out[3] = a;\n  return out;\n}\n\nfunction copyRgba(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\nvar colorCache = new LRU(20);\nvar lastRemovedArr = null;\n\nfunction putToCache(colorStr, rgbaArr) {\n  // Reuse removed array\n  if (lastRemovedArr) {\n    copyRgba(lastRemovedArr, rgbaArr);\n  }\n\n  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());\n}\n/**\n * @name clay.core.color.parse\n * @param {string} colorStr\n * @param {Array.<number>} out\n * @return {Array.<number>}\n */\n\n\ncolorUtil.parse = function (colorStr, rgbaArr) {\n  if (!colorStr) {\n    return;\n  }\n\n  rgbaArr = rgbaArr || [];\n  var cached = colorCache.get(colorStr);\n\n  if (cached) {\n    return copyRgba(rgbaArr, cached);\n  } // colorStr may be not string\n\n\n  colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.\n\n  var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.\n\n  if (str in kCSSColorTable) {\n    copyRgba(rgbaArr, kCSSColorTable[str]);\n    putToCache(colorStr, rgbaArr);\n    return rgbaArr;\n  } // #abc and #abc123 syntax.\n\n\n  if (str.charAt(0) === '#') {\n    if (str.length === 4) {\n      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n\n      if (!(iv >= 0 && iv <= 0xfff)) {\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return; // Covers NaN.\n      }\n\n      setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);\n      putToCache(colorStr, rgbaArr);\n      return rgbaArr;\n    } else if (str.length === 7) {\n      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n\n      if (!(iv >= 0 && iv <= 0xffffff)) {\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return; // Covers NaN.\n      }\n\n      setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);\n      putToCache(colorStr, rgbaArr);\n      return rgbaArr;\n    }\n\n    return;\n  }\n\n  var op = str.indexOf('('),\n      ep = str.indexOf(')');\n\n  if (op !== -1 && ep + 1 === str.length) {\n    var fname = str.substr(0, op);\n    var params = str.substr(op + 1, ep - (op + 1)).split(',');\n    var alpha = 1; // To allow case fallthrough.\n\n    switch (fname) {\n      case 'rgba':\n        if (params.length !== 4) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n\n        alpha = parseCssFloat(params.pop());\n      // jshint ignore:line\n      // Fall through.\n\n      case 'rgb':\n        if (params.length !== 3) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n\n        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n\n      case 'hsla':\n        if (params.length !== 4) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n\n        params[3] = parseCssFloat(params[3]);\n        hsla2rgba(params, rgbaArr);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n\n      case 'hsl':\n        if (params.length !== 3) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n\n        hsla2rgba(params, rgbaArr);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n\n      default:\n        return;\n    }\n  }\n\n  setRgba(rgbaArr, 0, 0, 0, 1);\n  return;\n};\n\ncolorUtil.parseToFloat = function (colorStr, rgbaArr) {\n  rgbaArr = colorUtil.parse(colorStr, rgbaArr);\n\n  if (!rgbaArr) {\n    return;\n  }\n\n  rgbaArr[0] /= 255;\n  rgbaArr[1] /= 255;\n  rgbaArr[2] /= 255;\n  return rgbaArr;\n};\n/**\n * @name clay.core.color.hsla2rgba\n * @param {Array.<number>} hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} rgba\n */\n\n\nfunction hsla2rgba(hsla, rgba) {\n  var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1\n  // NOTE(deanm): According to the CSS spec s/l should only be\n  // percentages, but we don't bother and let float or percentage.\n\n  var s = parseCssFloat(hsla[1]);\n  var l = parseCssFloat(hsla[2]);\n  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n  var m1 = l * 2 - m2;\n  rgba = rgba || [];\n  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);\n\n  if (hsla.length === 4) {\n    rgba[3] = hsla[3];\n  }\n\n  return rgba;\n}\n/**\n * @name clay.core.color.rgba2hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} hsla\n */\n\n\nfunction rgba2hsla(rgba) {\n  if (!rgba) {\n    return;\n  } // RGB from 0 to 255\n\n\n  var R = rgba[0] / 255;\n  var G = rgba[1] / 255;\n  var B = rgba[2] / 255;\n  var vMin = Math.min(R, G, B); // Min. value of RGB\n\n  var vMax = Math.max(R, G, B); // Max. value of RGB\n\n  var delta = vMax - vMin; // Delta RGB value\n\n  var L = (vMax + vMin) / 2;\n  var H;\n  var S; // HSL results from 0 to 1\n\n  if (delta === 0) {\n    H = 0;\n    S = 0;\n  } else {\n    if (L < 0.5) {\n      S = delta / (vMax + vMin);\n    } else {\n      S = delta / (2 - vMax - vMin);\n    }\n\n    var deltaR = ((vMax - R) / 6 + delta / 2) / delta;\n    var deltaG = ((vMax - G) / 6 + delta / 2) / delta;\n    var deltaB = ((vMax - B) / 6 + delta / 2) / delta;\n\n    if (R === vMax) {\n      H = deltaB - deltaG;\n    } else if (G === vMax) {\n      H = 1 / 3 + deltaR - deltaB;\n    } else if (B === vMax) {\n      H = 2 / 3 + deltaG - deltaR;\n    }\n\n    if (H < 0) {\n      H += 1;\n    }\n\n    if (H > 1) {\n      H -= 1;\n    }\n  }\n\n  var hsla = [H * 360, S, L];\n\n  if (rgba[3] != null) {\n    hsla.push(rgba[3]);\n  }\n\n  return hsla;\n}\n/**\n * @name clay.core.color.lift\n * @param {string} color\n * @param {number} level\n * @return {string}\n */\n\n\ncolorUtil.lift = function (color, level) {\n  var colorArr = colorUtil.parse(color);\n\n  if (colorArr) {\n    for (var i = 0; i < 3; i++) {\n      if (level < 0) {\n        colorArr[i] = colorArr[i] * (1 - level) | 0;\n      } else {\n        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;\n      }\n    }\n\n    return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n  }\n};\n/**\n * @name clay.core.color.toHex\n * @param {string} color\n * @return {string}\n */\n\n\ncolorUtil.toHex = function (color) {\n  var colorArr = colorUtil.parse(color);\n\n  if (colorArr) {\n    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);\n  }\n};\n/**\n * Map value to color. Faster than lerp methods because color is represented by rgba array.\n * @name clay.core.color\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<Array.<number>>} colors List of rgba color array\n * @param {Array.<number>} [out] Mapped gba color array\n * @return {Array.<number>} will be null/undefined if input illegal.\n */\n\n\ncolorUtil.fastLerp = function (normalizedValue, colors, out) {\n  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {\n    return;\n  }\n\n  out = out || [];\n  var value = normalizedValue * (colors.length - 1);\n  var leftIndex = Math.floor(value);\n  var rightIndex = Math.ceil(value);\n  var leftColor = colors[leftIndex];\n  var rightColor = colors[rightIndex];\n  var dv = value - leftIndex;\n  out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n  out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n  out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n  out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n  return out;\n};\n\ncolorUtil.fastMapToColor = colorUtil.fastLerp;\n/**\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<string>} colors Color list.\n * @param {boolean=} fullOutput Default false.\n * @return {(string|Object)} Result color. If fullOutput,\n *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n */\n\ncolorUtil.lerp = function (normalizedValue, colors, fullOutput) {\n  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {\n    return;\n  }\n\n  var value = normalizedValue * (colors.length - 1);\n  var leftIndex = Math.floor(value);\n  var rightIndex = Math.ceil(value);\n  var leftColor = colorUtil.parse(colors[leftIndex]);\n  var rightColor = colorUtil.parse(colors[rightIndex]);\n  var dv = value - leftIndex;\n  var color = colorUtil.stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');\n  return fullOutput ? {\n    color: color,\n    leftIndex: leftIndex,\n    rightIndex: rightIndex,\n    value: value\n  } : color;\n};\n/**\n * @deprecated\n */\n\n\ncolorUtil.mapToColor = colorUtil.lerp;\n/**\n * @name clay.core.color\n * @param {string} color\n * @param {number=} h 0 ~ 360, ignore when null.\n * @param {number=} s 0 ~ 1, ignore when null.\n * @param {number=} l 0 ~ 1, ignore when null.\n * @return {string} Color string in rgba format.\n */\n\ncolorUtil.modifyHSL = function (color, h, s, l) {\n  color = colorUtil.parse(color);\n\n  if (color) {\n    color = rgba2hsla(color);\n    h != null && (color[0] = clampCssAngle(h));\n    s != null && (color[1] = parseCssFloat(s));\n    l != null && (color[2] = parseCssFloat(l));\n    return colorUtil.stringify(hsla2rgba(color), 'rgba');\n  }\n};\n/**\n * @param {string} color\n * @param {number=} alpha 0 ~ 1\n * @return {string} Color string in rgba format.\n */\n\n\ncolorUtil.modifyAlpha = function (color, alpha) {\n  color = colorUtil.parse(color);\n\n  if (color && alpha != null) {\n    color[3] = clampCssFloat(alpha);\n    return colorUtil.stringify(color, 'rgba');\n  }\n};\n/**\n * @param {Array.<number>} arrColor like [12,33,44,0.4]\n * @param {string} type 'rgba', 'hsva', ...\n * @return {string} Result color. (If input illegal, return undefined).\n */\n\n\ncolorUtil.stringify = function (arrColor, type) {\n  if (!arrColor || !arrColor.length) {\n    return;\n  }\n\n  var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n\n  if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n    colorStr += ',' + arrColor[3];\n  }\n\n  return type + '(' + colorStr + ')';\n};\n\nexport default colorUtil;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/core/color.js"],"names":["LRU","colorUtil","kCSSColorTable","clampCssByte","i","Math","round","clampCssAngle","clampCssFloat","f","parseCssInt","str","length","charAt","parseFloat","parseInt","parseCssFloat","cssHueToRgb","m1","m2","h","lerpNumber","a","b","p","setRgba","out","r","g","copyRgba","colorCache","lastRemovedArr","putToCache","colorStr","rgbaArr","put","slice","parse","cached","get","replace","toLowerCase","iv","substr","op","indexOf","ep","fname","params","split","alpha","pop","hsla2rgba","parseToFloat","hsla","rgba","s","l","rgba2hsla","R","G","B","vMin","min","vMax","max","delta","L","H","S","deltaR","deltaG","deltaB","push","lift","color","level","colorArr","stringify","toHex","toString","fastLerp","normalizedValue","colors","value","leftIndex","floor","rightIndex","ceil","leftColor","rightColor","dv","fastMapToColor","lerp","fullOutput","mapToColor","modifyHSL","modifyAlpha","arrColor","type"],"mappings":"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","sourcesContent":["/**\n * @namespace clay.core.color\n */\nimport LRU from '../core/LRU';\n\nvar colorUtil = {};\n\nvar kCSSColorTable = {\n    'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n    'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n    'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n    'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n    'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n    'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n    'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n    'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n    'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n    'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n    'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n    'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n    'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n    'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n    'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n    'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n    'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n    'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n    'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n    'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n    'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n    'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n    'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n    'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n    'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n    'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n    'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n    'gray': [128,128,128,1], 'green': [0,128,0,1],\n    'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n    'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n    'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n    'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n    'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n    'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n    'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n    'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n    'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n    'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n    'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n    'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n    'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n    'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n    'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n    'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n    'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n    'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n    'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n    'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n    'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n    'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n    'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n    'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n    'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n    'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n    'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n    'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n    'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n    'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n    'pink': [255,192,203,1], 'plum': [221,160,221,1],\n    'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n    'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n    'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n    'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n    'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n    'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n    'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n    'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n    'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n    'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n    'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n    'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n    'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n    'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n    'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n};\n\nfunction clampCssByte(i) {  // Clamp to integer 0 .. 255.\n    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n    return i < 0 ? 0 : i > 255 ? 255 : i;\n}\n\nfunction clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n    return i < 0 ? 0 : i > 360 ? 360 : i;\n}\n\nfunction clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n    return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n\nfunction parseCssInt(str) {  // int or percentage.\n    if (str.length && str.charAt(str.length - 1) === '%') {\n        return clampCssByte(parseFloat(str) / 100 * 255);\n    }\n    return clampCssByte(parseInt(str, 10));\n}\n\nfunction parseCssFloat(str) {  // float or percentage.\n    if (str.length && str.charAt(str.length - 1) === '%') {\n        return clampCssFloat(parseFloat(str) / 100);\n    }\n    return clampCssFloat(parseFloat(str));\n}\n\nfunction cssHueToRgb(m1, m2, h) {\n    if (h < 0) {\n        h += 1;\n    }\n    else if (h > 1) {\n        h -= 1;\n    }\n\n    if (h * 6 < 1) {\n        return m1 + (m2 - m1) * h * 6;\n    }\n    if (h * 2 < 1) {\n        return m2;\n    }\n    if (h * 3 < 2) {\n        return m1 + (m2 - m1) * (2/3 - h) * 6;\n    }\n    return m1;\n}\n\nfunction lerpNumber(a, b, p) {\n    return a + (b - a) * p;\n}\n\nfunction setRgba(out, r, g, b, a) {\n    out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n    return out;\n}\nfunction copyRgba(out, a) {\n    out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n    return out;\n}\n\nvar colorCache = new LRU(20);\nvar lastRemovedArr = null;\n\nfunction putToCache(colorStr, rgbaArr) {\n    // Reuse removed array\n    if (lastRemovedArr) {\n        copyRgba(lastRemovedArr, rgbaArr);\n    }\n    lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n}\n\n/**\n * @name clay.core.color.parse\n * @param {string} colorStr\n * @param {Array.<number>} out\n * @return {Array.<number>}\n */\ncolorUtil.parse = function (colorStr, rgbaArr) {\n    if (!colorStr) {\n        return;\n    }\n    rgbaArr = rgbaArr || [];\n\n    var cached = colorCache.get(colorStr);\n    if (cached) {\n        return copyRgba(rgbaArr, cached);\n    }\n\n    // colorStr may be not string\n    colorStr = colorStr + '';\n    // Remove all whitespace, not compliant, but should just be more accepting.\n    var str = colorStr.replace(/ /g, '').toLowerCase();\n\n    // Color keywords (and transparent) lookup.\n    if (str in kCSSColorTable) {\n        copyRgba(rgbaArr, kCSSColorTable[str]);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n    }\n\n    // #abc and #abc123 syntax.\n    if (str.charAt(0) === '#') {\n        if (str.length === 4) {\n            var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n            if (!(iv >= 0 && iv <= 0xfff)) {\n                setRgba(rgbaArr, 0, 0, 0, 1);\n                return;  // Covers NaN.\n            }\n            setRgba(rgbaArr,\n                ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                (iv & 0xf) | ((iv & 0xf) << 4),\n                1\n            );\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n        else if (str.length === 7) {\n            var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n            if (!(iv >= 0 && iv <= 0xffffff)) {\n                setRgba(rgbaArr, 0, 0, 0, 1);\n                return;  // Covers NaN.\n            }\n            setRgba(rgbaArr,\n                (iv & 0xff0000) >> 16,\n                (iv & 0xff00) >> 8,\n                iv & 0xff,\n                1\n            );\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        return;\n    }\n    var op = str.indexOf('('), ep = str.indexOf(')');\n    if (op !== -1 && ep + 1 === str.length) {\n        var fname = str.substr(0, op);\n        var params = str.substr(op + 1, ep - (op + 1)).split(',');\n        var alpha = 1;  // To allow case fallthrough.\n        switch (fname) {\n            case 'rgba':\n                if (params.length !== 4) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                alpha = parseCssFloat(params.pop()); // jshint ignore:line\n            // Fall through.\n            case 'rgb':\n                if (params.length !== 3) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                setRgba(rgbaArr,\n                    parseCssInt(params[0]),\n                    parseCssInt(params[1]),\n                    parseCssInt(params[2]),\n                    alpha\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            case 'hsla':\n                if (params.length !== 4) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                params[3] = parseCssFloat(params[3]);\n                hsla2rgba(params, rgbaArr);\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            case 'hsl':\n                if (params.length !== 3) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                hsla2rgba(params, rgbaArr);\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            default:\n                return;\n        }\n    }\n\n    setRgba(rgbaArr, 0, 0, 0, 1);\n    return;\n};\n\ncolorUtil.parseToFloat = function (colorStr, rgbaArr) {\n    rgbaArr = colorUtil.parse(colorStr, rgbaArr);\n    if (!rgbaArr) {\n        return;\n    }\n    rgbaArr[0] /= 255;\n    rgbaArr[1] /= 255;\n    rgbaArr[2] /= 255;\n    return rgbaArr;\n}\n\n/**\n * @name clay.core.color.hsla2rgba\n * @param {Array.<number>} hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} rgba\n */\nfunction hsla2rgba(hsla, rgba) {\n    var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n    // NOTE(deanm): According to the CSS spec s/l should only be\n    // percentages, but we don't bother and let float or percentage.\n    var s = parseCssFloat(hsla[1]);\n    var l = parseCssFloat(hsla[2]);\n    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n    var m1 = l * 2 - m2;\n\n    rgba = rgba || [];\n    setRgba(rgba,\n        clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n        clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n        clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n        1\n    );\n\n    if (hsla.length === 4) {\n        rgba[3] = hsla[3];\n    }\n\n    return rgba;\n}\n\n/**\n * @name clay.core.color.rgba2hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} hsla\n */\nfunction rgba2hsla(rgba) {\n    if (!rgba) {\n        return;\n    }\n\n    // RGB from 0 to 255\n    var R = rgba[0] / 255;\n    var G = rgba[1] / 255;\n    var B = rgba[2] / 255;\n\n    var vMin = Math.min(R, G, B); // Min. value of RGB\n    var vMax = Math.max(R, G, B); // Max. value of RGB\n    var delta = vMax - vMin; // Delta RGB value\n\n    var L = (vMax + vMin) / 2;\n    var H;\n    var S;\n    // HSL results from 0 to 1\n    if (delta === 0) {\n        H = 0;\n        S = 0;\n    }\n    else {\n        if (L < 0.5) {\n            S = delta / (vMax + vMin);\n        }\n        else {\n            S = delta / (2 - vMax - vMin);\n        }\n\n        var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n        var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n        var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n        if (R === vMax) {\n            H = deltaB - deltaG;\n        }\n        else if (G === vMax) {\n            H = (1 / 3) + deltaR - deltaB;\n        }\n        else if (B === vMax) {\n            H = (2 / 3) + deltaG - deltaR;\n        }\n\n        if (H < 0) {\n            H += 1;\n        }\n\n        if (H > 1) {\n            H -= 1;\n        }\n    }\n\n    var hsla = [H * 360, S, L];\n\n    if (rgba[3] != null) {\n        hsla.push(rgba[3]);\n    }\n\n    return hsla;\n}\n\n/**\n * @name clay.core.color.lift\n * @param {string} color\n * @param {number} level\n * @return {string}\n */\ncolorUtil.lift = function (color, level) {\n    var colorArr = colorUtil.parse(color);\n    if (colorArr) {\n        for (var i = 0; i < 3; i++) {\n            if (level < 0) {\n                colorArr[i] = colorArr[i] * (1 - level) | 0;\n            }\n            else {\n                colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n            }\n        }\n        return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n    }\n}\n\n/**\n * @name clay.core.color.toHex\n * @param {string} color\n * @return {string}\n */\ncolorUtil.toHex = function (color) {\n    var colorArr = colorUtil.parse(color);\n    if (colorArr) {\n        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n    }\n};\n\n/**\n * Map value to color. Faster than lerp methods because color is represented by rgba array.\n * @name clay.core.color\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<Array.<number>>} colors List of rgba color array\n * @param {Array.<number>} [out] Mapped gba color array\n * @return {Array.<number>} will be null/undefined if input illegal.\n */\ncolorUtil.fastLerp = function (normalizedValue, colors, out) {\n    if (!(colors && colors.length)\n        || !(normalizedValue >= 0 && normalizedValue <= 1)\n    ) {\n        return;\n    }\n\n    out = out || [];\n\n    var value = normalizedValue * (colors.length - 1);\n    var leftIndex = Math.floor(value);\n    var rightIndex = Math.ceil(value);\n    var leftColor = colors[leftIndex];\n    var rightColor = colors[rightIndex];\n    var dv = value - leftIndex;\n    out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n    out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n    out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n    out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n\n    return out;\n}\n\ncolorUtil.fastMapToColor = colorUtil.fastLerp;\n\n/**\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<string>} colors Color list.\n * @param {boolean=} fullOutput Default false.\n * @return {(string|Object)} Result color. If fullOutput,\n *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n */\ncolorUtil.lerp = function (normalizedValue, colors, fullOutput) {\n    if (!(colors && colors.length)\n        || !(normalizedValue >= 0 && normalizedValue <= 1)\n    ) {\n        return;\n    }\n\n    var value = normalizedValue * (colors.length - 1);\n    var leftIndex = Math.floor(value);\n    var rightIndex = Math.ceil(value);\n    var leftColor = colorUtil.parse(colors[leftIndex]);\n    var rightColor = colorUtil.parse(colors[rightIndex]);\n    var dv = value - leftIndex;\n\n    var color = colorUtil.stringify(\n        [\n            clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),\n            clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),\n            clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),\n            clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))\n        ],\n        'rgba'\n    );\n\n    return fullOutput\n        ? {\n            color: color,\n            leftIndex: leftIndex,\n            rightIndex: rightIndex,\n            value: value\n        }\n        : color;\n}\n\n/**\n * @deprecated\n */\ncolorUtil.mapToColor = colorUtil.lerp;\n\n/**\n * @name clay.core.color\n * @param {string} color\n * @param {number=} h 0 ~ 360, ignore when null.\n * @param {number=} s 0 ~ 1, ignore when null.\n * @param {number=} l 0 ~ 1, ignore when null.\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyHSL = function (color, h, s, l) {\n    color = colorUtil.parse(color);\n\n    if (color) {\n        color = rgba2hsla(color);\n        h != null && (color[0] = clampCssAngle(h));\n        s != null && (color[1] = parseCssFloat(s));\n        l != null && (color[2] = parseCssFloat(l));\n\n        return colorUtil.stringify(hsla2rgba(color), 'rgba');\n    }\n}\n\n/**\n * @param {string} color\n * @param {number=} alpha 0 ~ 1\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyAlpha = function (color, alpha) {\n    color = colorUtil.parse(color);\n\n    if (color && alpha != null) {\n        color[3] = clampCssFloat(alpha);\n        return colorUtil.stringify(color, 'rgba');\n    }\n}\n\n/**\n * @param {Array.<number>} arrColor like [12,33,44,0.4]\n * @param {string} type 'rgba', 'hsva', ...\n * @return {string} Result color. (If input illegal, return undefined).\n */\ncolorUtil.stringify = function (arrColor, type) {\n    if (!arrColor || !arrColor.length) {\n        return;\n    }\n    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n        colorStr += ',' + arrColor[3];\n    }\n    return type + '(' + colorStr + ')';\n};\n\n\n\nexport default colorUtil;"]},"metadata":{},"sourceType":"module"}