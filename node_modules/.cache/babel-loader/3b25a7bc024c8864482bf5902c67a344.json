{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nexport default function (seriesModel, dims, source) {\n  source = source || seriesModel.getSource();\n  var coordSysDimensions = dims || echarts.getCoordinateSystemDimensions(seriesModel.get('coordinateSystem')) || ['x', 'y', 'z'];\n  var dimensions = echarts.helper.createDimensions(source, {\n    dimensionsDefine: source.dimensionsDefine || seriesModel.get('dimensions'),\n    encodeDefine: source.encodeDefine || seriesModel.get('encode'),\n    coordDimensions: coordSysDimensions.map(function (dim) {\n      var axis3DModel = seriesModel.getReferringComponents(dim + 'Axis3D').models[0];\n      return {\n        type: axis3DModel && axis3DModel.get('type') === 'category' ? 'ordinal' : 'float',\n        name: dim // Find stackable dimension. Which will represent value.\n        // stackable: dim === 'z'\n\n      };\n    })\n  });\n\n  if (seriesModel.get('coordinateSystem') === 'cartesian3D') {\n    dimensions.forEach(function (dimInfo) {\n      if (coordSysDimensions.indexOf(dimInfo.coordDim) >= 0) {\n        var axis3DModel = seriesModel.getReferringComponents(dimInfo.coordDim + 'Axis3D').models[0];\n\n        if (axis3DModel && axis3DModel.get('type') === 'category') {\n          dimInfo.ordinalMeta = axis3DModel.getOrdinalMeta();\n        }\n      }\n    });\n  }\n\n  var stackCalculationInfo = echarts.helper.dataStack.enableDataStack( // Only support 'z' and `byIndex` now.\n  seriesModel, dimensions, {\n    byIndex: true,\n    stackedCoordDimension: 'z'\n  });\n  var data = new echarts.List(dimensions, seriesModel);\n  data.setCalculationInfo(stackCalculationInfo);\n  data.initData(source);\n  return data;\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/common/createList.js"],"names":["echarts","seriesModel","dims","source","getSource","coordSysDimensions","getCoordinateSystemDimensions","get","dimensions","helper","createDimensions","dimensionsDefine","encodeDefine","coordDimensions","map","dim","axis3DModel","getReferringComponents","models","type","name","forEach","dimInfo","indexOf","coordDim","ordinalMeta","getOrdinalMeta","stackCalculationInfo","dataStack","enableDataStack","byIndex","stackedCoordDimension","data","List","setCalculationInfo","initData"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,eAAe,UAAUC,WAAV,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AAClDA,EAAAA,MAAM,GAAGA,MAAM,IAAIF,WAAW,CAACG,SAAZ,EAAnB;AACA,MAAIC,kBAAkB,GAAGH,IAAI,IAAIF,OAAO,CAACM,6BAAR,CAAsCL,WAAW,CAACM,GAAZ,CAAgB,kBAAhB,CAAtC,CAAR,IAAsF,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/G;AACA,MAAIC,UAAU,GAAGR,OAAO,CAACS,MAAR,CAAeC,gBAAf,CAAgCP,MAAhC,EAAwC;AACvDQ,IAAAA,gBAAgB,EAAER,MAAM,CAACQ,gBAAP,IAA2BV,WAAW,CAACM,GAAZ,CAAgB,YAAhB,CADU;AAEvDK,IAAAA,YAAY,EAAET,MAAM,CAACS,YAAP,IAAuBX,WAAW,CAACM,GAAZ,CAAgB,QAAhB,CAFkB;AAGvDM,IAAAA,eAAe,EAAER,kBAAkB,CAACS,GAAnB,CAAuB,UAAUC,GAAV,EAAe;AACrD,UAAIC,WAAW,GAAGf,WAAW,CAACgB,sBAAZ,CAAmCF,GAAG,GAAG,QAAzC,EAAmDG,MAAnD,CAA0D,CAA1D,CAAlB;AACA,aAAO;AACLC,QAAAA,IAAI,EAAEH,WAAW,IAAIA,WAAW,CAACT,GAAZ,CAAgB,MAAhB,MAA4B,UAA3C,GAAwD,SAAxD,GAAoE,OADrE;AAELa,QAAAA,IAAI,EAAEL,GAFD,CAEK;AACV;;AAHK,OAAP;AAMD,KARgB;AAHsC,GAAxC,CAAjB;;AAcA,MAAId,WAAW,CAACM,GAAZ,CAAgB,kBAAhB,MAAwC,aAA5C,EAA2D;AACzDC,IAAAA,UAAU,CAACa,OAAX,CAAmB,UAAUC,OAAV,EAAmB;AACpC,UAAIjB,kBAAkB,CAACkB,OAAnB,CAA2BD,OAAO,CAACE,QAAnC,KAAgD,CAApD,EAAuD;AACrD,YAAIR,WAAW,GAAGf,WAAW,CAACgB,sBAAZ,CAAmCK,OAAO,CAACE,QAAR,GAAmB,QAAtD,EAAgEN,MAAhE,CAAuE,CAAvE,CAAlB;;AAEA,YAAIF,WAAW,IAAIA,WAAW,CAACT,GAAZ,CAAgB,MAAhB,MAA4B,UAA/C,EAA2D;AACzDe,UAAAA,OAAO,CAACG,WAAR,GAAsBT,WAAW,CAACU,cAAZ,EAAtB;AACD;AACF;AACF,KARD;AASD;;AAED,MAAIC,oBAAoB,GAAG3B,OAAO,CAACS,MAAR,CAAemB,SAAf,CAAyBC,eAAzB,EAA0C;AACrE5B,EAAAA,WAD2B,EACdO,UADc,EACF;AACvBsB,IAAAA,OAAO,EAAE,IADc;AAEvBC,IAAAA,qBAAqB,EAAE;AAFA,GADE,CAA3B;AAKA,MAAIC,IAAI,GAAG,IAAIhC,OAAO,CAACiC,IAAZ,CAAiBzB,UAAjB,EAA6BP,WAA7B,CAAX;AACA+B,EAAAA,IAAI,CAACE,kBAAL,CAAwBP,oBAAxB;AACAK,EAAAA,IAAI,CAACG,QAAL,CAAchC,MAAd;AACA,SAAO6B,IAAP;AACD","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nexport default function (seriesModel, dims, source) {\n  source = source || seriesModel.getSource();\n  var coordSysDimensions = dims || echarts.getCoordinateSystemDimensions(seriesModel.get('coordinateSystem')) || ['x', 'y', 'z'];\n  var dimensions = echarts.helper.createDimensions(source, {\n    dimensionsDefine: source.dimensionsDefine || seriesModel.get('dimensions'),\n    encodeDefine: source.encodeDefine || seriesModel.get('encode'),\n    coordDimensions: coordSysDimensions.map(function (dim) {\n      var axis3DModel = seriesModel.getReferringComponents(dim + 'Axis3D').models[0];\n      return {\n        type: axis3DModel && axis3DModel.get('type') === 'category' ? 'ordinal' : 'float',\n        name: dim // Find stackable dimension. Which will represent value.\n        // stackable: dim === 'z'\n\n      };\n    })\n  });\n\n  if (seriesModel.get('coordinateSystem') === 'cartesian3D') {\n    dimensions.forEach(function (dimInfo) {\n      if (coordSysDimensions.indexOf(dimInfo.coordDim) >= 0) {\n        var axis3DModel = seriesModel.getReferringComponents(dimInfo.coordDim + 'Axis3D').models[0];\n\n        if (axis3DModel && axis3DModel.get('type') === 'category') {\n          dimInfo.ordinalMeta = axis3DModel.getOrdinalMeta();\n        }\n      }\n    });\n  }\n\n  var stackCalculationInfo = echarts.helper.dataStack.enableDataStack( // Only support 'z' and `byIndex` now.\n  seriesModel, dimensions, {\n    byIndex: true,\n    stackedCoordDimension: 'z'\n  });\n  var data = new echarts.List(dimensions, seriesModel);\n  data.setCalculationInfo(stackCalculationInfo);\n  data.initData(source);\n  return data;\n}"]},"metadata":{},"sourceType":"module"}