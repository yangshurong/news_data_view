{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport PointsBuilder from '../common/PointsBuilder';\nimport GLViewHelper from '../common/GLViewHelper';\nexport default echarts.ChartView.extend({\n  type: 'scatterGL',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilderList = [];\n    this._currentStep = 0;\n    this._sizeScale = 1;\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n  },\n  render: function render(seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    if (!seriesModel.getData().count()) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[0];\n\n    if (!pointsBuilder) {\n      pointsBuilder = this._pointsBuilderList[0] = new PointsBuilder(true, api);\n    }\n\n    this._pointsBuilderList.length = 1;\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.update(seriesModel, ecModel, api);\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function incrementalPrepareRender(seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function incrementalRender(params, seriesModel, ecModel, api) {\n    if (params.end <= params.start) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[this._currentStep];\n\n    if (!pointsBuilder) {\n      pointsBuilder = new PointsBuilder(true, api);\n      this._pointsBuilderList[this._currentStep] = pointsBuilder;\n    }\n\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.setSizeScale(this._sizeScale);\n    pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function updateTransform(seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n\n      var zoom = this._glViewHelper.getZoom();\n\n      var sizeScale = Math.max((seriesModel.get('zoomScale') || 0) * (zoom - 1) + 1, 0);\n      this._sizeScale = sizeScale;\n\n      this._pointsBuilderList.forEach(function (pointsBuilder) {\n        pointsBuilder.setSizeScale(sizeScale);\n      });\n    }\n  },\n  _removeTransformInPoints: function _removeTransformInPoints(points) {\n    if (!points) {\n      return;\n    }\n\n    var pt = [];\n\n    for (var i = 0; i < points.length; i += 2) {\n      pt[0] = points[i];\n      pt[1] = points[i + 1];\n\n      this._glViewHelper.removeTransformInPoint(pt);\n\n      points[i] = pt[0];\n      points[i + 1] = pt[1];\n    }\n  },\n  dispose: function dispose() {\n    this.groupGL.removeAll();\n\n    this._pointsBuilderList.forEach(function (pointsBuilder) {\n      pointsBuilder.dispose();\n    });\n  },\n  remove: function remove() {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/scatterGL/ScatterGLView.js"],"names":["echarts","graphicGL","ViewGL","PointsBuilder","GLViewHelper","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","viewGL","add","_pointsBuilderList","_currentStep","_sizeScale","_glViewHelper","render","seriesModel","removeAll","reset","getData","count","pointsBuilder","length","rootNode","_removeTransformInPoints","getLayout","update","setPostEffect","getModel","incrementalPrepareRender","incrementalRender","params","end","start","setSizeScale","getZr","refresh","updateTransform","coordinateSystem","getRoamTransform","zoom","getZoom","sizeScale","Math","max","get","forEach","points","pt","i","removeTransformInPoint","dispose","remove"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport PointsBuilder from '../common/PointsBuilder';\nimport GLViewHelper from '../common/GLViewHelper';\nexport default echarts.ChartView.extend({\n  type: 'scatterGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilderList = [];\n    this._currentStep = 0;\n    this._sizeScale = 1;\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    if (!seriesModel.getData().count()) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[0];\n\n    if (!pointsBuilder) {\n      pointsBuilder = this._pointsBuilderList[0] = new PointsBuilder(true, api);\n    }\n\n    this._pointsBuilderList.length = 1;\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.update(seriesModel, ecModel, api);\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    if (params.end <= params.start) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[this._currentStep];\n\n    if (!pointsBuilder) {\n      pointsBuilder = new PointsBuilder(true, api);\n      this._pointsBuilderList[this._currentStep] = pointsBuilder;\n    }\n\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.setSizeScale(this._sizeScale);\n    pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n\n      var zoom = this._glViewHelper.getZoom();\n\n      var sizeScale = Math.max((seriesModel.get('zoomScale') || 0) * (zoom - 1) + 1, 0);\n      this._sizeScale = sizeScale;\n\n      this._pointsBuilderList.forEach(function (pointsBuilder) {\n        pointsBuilder.setSizeScale(sizeScale);\n      });\n    }\n  },\n  _removeTransformInPoints: function (points) {\n    if (!points) {\n      return;\n    }\n\n    var pt = [];\n\n    for (var i = 0; i < points.length; i += 2) {\n      pt[0] = points[i];\n      pt[1] = points[i + 1];\n\n      this._glViewHelper.removeTransformInPoint(pt);\n\n      points[i] = pt[0];\n      points[i + 1] = pt[1];\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._pointsBuilderList.forEach(function (pointsBuilder) {\n      pointsBuilder.dispose();\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});"]},"metadata":{},"sourceType":"module"}