{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport workerFunc from './forceAtlas2Worker.js';\nvar workerUrl = workerFunc.toString();\nworkerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));\nvar defaultConfigs = {\n  barnesHutOptimize: true,\n  barnesHutTheta: 1.5,\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nvar ForceAtlas2 = function (options) {\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  }\n\n  if (options) {\n    for (var name in options) {\n      this[name] = options[name];\n    }\n  }\n\n  this._nodes = [];\n  this._edges = [];\n  this._disposed = false;\n  this._positionTex = new Texture2D({\n    type: Texture.FLOAT,\n    flipY: false,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST\n  });\n};\n\nForceAtlas2.prototype.initData = function (nodes, edges) {\n  var bb = new Blob([workerUrl]);\n  var blobURL = window.URL.createObjectURL(bb);\n  this._worker = new Worker(blobURL);\n  this._worker.onmessage = this._$onupdate.bind(this);\n  this._nodes = nodes;\n  this._edges = edges;\n  this._frame = 0;\n  var nNodes = nodes.length;\n  var nEdges = edges.length;\n  var positionArr = new Float32Array(nNodes * 2);\n  var massArr = new Float32Array(nNodes);\n  var sizeArr = new Float32Array(nNodes);\n  var edgeArr = new Float32Array(nEdges * 2);\n  var edgeWeightArr = new Float32Array(nEdges);\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionArr[i * 2] = node.x;\n    positionArr[i * 2 + 1] = node.y;\n    massArr[i] = node.mass == null ? 1 : node.mass;\n    sizeArr[i] = node.size == null ? 1 : node.size;\n  }\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var source = edge.node1;\n    var target = edge.node2;\n    edgeArr[i * 2] = source;\n    edgeArr[i * 2 + 1] = target;\n    edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;\n  }\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var pixels = new Float32Array(textureWidth * textureHeight * 4);\n  var positionTex = this._positionTex;\n  positionTex.width = textureWidth;\n  positionTex.height = textureHeight;\n  positionTex.pixels = pixels;\n\n  this._worker.postMessage({\n    cmd: 'init',\n    nodesPosition: positionArr,\n    nodesMass: massArr,\n    nodesSize: sizeArr,\n    edges: edgeArr,\n    edgesWeight: edgeWeightArr\n  });\n\n  this._globalSpeed = Infinity;\n};\n\nForceAtlas2.prototype.updateOption = function (options) {\n  var config = {}; // Default config\n\n  for (var name in defaultConfigs) {\n    config[name] = defaultConfigs[name];\n  }\n\n  var nodes = this._nodes;\n  var edges = this._edges; // Config according to data scale\n\n  var nNodes = nodes.length;\n\n  if (nNodes > 50000) {\n    config.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    config.jitterTolerence = 1;\n  } else {\n    config.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    config.scaling = 2.0;\n  } else {\n    config.scaling = 10.0;\n  }\n\n  if (nNodes > 1000) {\n    config.barnesHutOptimize = true;\n  } else {\n    config.barnesHutOptimize = false;\n  }\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        config[name] = options[name];\n      }\n    }\n  }\n\n  if (!config.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'updateConfig',\n      config: config\n    });\n  }\n}; // Steps per call, to keep sync with rendering\n\n\nForceAtlas2.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n  this._frame += steps;\n  this._onupdate = cb;\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'update',\n      steps: Math.round(steps)\n    });\n  }\n};\n\nForceAtlas2.prototype._$onupdate = function (e) {\n  // Incase the worker keep postMessage of last frame after it is disposed\n  if (this._disposed) {\n    return;\n  }\n\n  var positionArr = new Float32Array(e.data.buffer);\n  this._globalSpeed = e.data.globalSpeed;\n  this._positionArr = positionArr;\n\n  this._updateTexture(positionArr);\n\n  this._onupdate && this._onupdate();\n};\n\nForceAtlas2.prototype.getNodePositionTexture = function () {\n  return this._positionTex;\n};\n\nForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);\n  return uv;\n};\n\nForceAtlas2.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2.prototype.getNodePosition = function (renderer, out) {\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  if (this._positionArr) {\n    for (var i = 0; i < this._positionArr.length; i++) {\n      out[i] = this._positionArr[i];\n    }\n  }\n\n  return out;\n};\n\nForceAtlas2.prototype._updateTexture = function (positionArr) {\n  var pixels = this._positionTex.pixels;\n  var offset = 0;\n\n  for (var i = 0; i < positionArr.length;) {\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = 1;\n    pixels[offset++] = 1;\n  }\n\n  this._positionTex.dirty();\n};\n\nForceAtlas2.prototype.dispose = function (renderer) {\n  this._disposed = true;\n  this._worker = null;\n};\n\nexport default ForceAtlas2;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/graphGL/ForceAtlas2.js"],"names":["Texture2D","Texture","workerFunc","workerUrl","toString","slice","indexOf","lastIndexOf","defaultConfigs","barnesHutOptimize","barnesHutTheta","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","gravityCenter","ForceAtlas2","options","name","_nodes","_edges","_disposed","_positionTex","type","FLOAT","flipY","minFilter","NEAREST","magFilter","prototype","initData","nodes","edges","bb","Blob","blobURL","window","URL","createObjectURL","_worker","Worker","onmessage","_$onupdate","bind","_frame","nNodes","length","nEdges","positionArr","Float32Array","massArr","sizeArr","edgeArr","edgeWeightArr","i","node","x","y","mass","size","edge","source","node1","target","node2","weight","textureWidth","Math","ceil","sqrt","textureHeight","pixels","positionTex","width","height","postMessage","cmd","nodesPosition","nodesMass","nodesSize","edgesWeight","_globalSpeed","Infinity","updateOption","config","min","max","degree","update","renderer","steps","cb","_onupdate","round","e","data","buffer","globalSpeed","_positionArr","_updateTexture","getNodePositionTexture","getNodeUV","nodeIndex","uv","floor","getNodes","getEdges","isFinished","maxSteps","getNodePosition","out","offset","dirty","dispose"],"mappings":"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","sourcesContent":["import Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport workerFunc from './forceAtlas2Worker.js';\nvar workerUrl = workerFunc.toString();\nworkerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));\nvar defaultConfigs = {\n  barnesHutOptimize: true,\n  barnesHutTheta: 1.5,\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nvar ForceAtlas2 = function (options) {\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  }\n\n  if (options) {\n    for (var name in options) {\n      this[name] = options[name];\n    }\n  }\n\n  this._nodes = [];\n  this._edges = [];\n  this._disposed = false;\n  this._positionTex = new Texture2D({\n    type: Texture.FLOAT,\n    flipY: false,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST\n  });\n};\n\nForceAtlas2.prototype.initData = function (nodes, edges) {\n  var bb = new Blob([workerUrl]);\n  var blobURL = window.URL.createObjectURL(bb);\n  this._worker = new Worker(blobURL);\n  this._worker.onmessage = this._$onupdate.bind(this);\n  this._nodes = nodes;\n  this._edges = edges;\n  this._frame = 0;\n  var nNodes = nodes.length;\n  var nEdges = edges.length;\n  var positionArr = new Float32Array(nNodes * 2);\n  var massArr = new Float32Array(nNodes);\n  var sizeArr = new Float32Array(nNodes);\n  var edgeArr = new Float32Array(nEdges * 2);\n  var edgeWeightArr = new Float32Array(nEdges);\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionArr[i * 2] = node.x;\n    positionArr[i * 2 + 1] = node.y;\n    massArr[i] = node.mass == null ? 1 : node.mass;\n    sizeArr[i] = node.size == null ? 1 : node.size;\n  }\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var source = edge.node1;\n    var target = edge.node2;\n    edgeArr[i * 2] = source;\n    edgeArr[i * 2 + 1] = target;\n    edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;\n  }\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var pixels = new Float32Array(textureWidth * textureHeight * 4);\n  var positionTex = this._positionTex;\n  positionTex.width = textureWidth;\n  positionTex.height = textureHeight;\n  positionTex.pixels = pixels;\n\n  this._worker.postMessage({\n    cmd: 'init',\n    nodesPosition: positionArr,\n    nodesMass: massArr,\n    nodesSize: sizeArr,\n    edges: edgeArr,\n    edgesWeight: edgeWeightArr\n  });\n\n  this._globalSpeed = Infinity;\n};\n\nForceAtlas2.prototype.updateOption = function (options) {\n  var config = {}; // Default config\n\n  for (var name in defaultConfigs) {\n    config[name] = defaultConfigs[name];\n  }\n\n  var nodes = this._nodes;\n  var edges = this._edges; // Config according to data scale\n\n  var nNodes = nodes.length;\n\n  if (nNodes > 50000) {\n    config.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    config.jitterTolerence = 1;\n  } else {\n    config.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    config.scaling = 2.0;\n  } else {\n    config.scaling = 10.0;\n  }\n\n  if (nNodes > 1000) {\n    config.barnesHutOptimize = true;\n  } else {\n    config.barnesHutOptimize = false;\n  }\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        config[name] = options[name];\n      }\n    }\n  }\n\n  if (!config.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'updateConfig',\n      config: config\n    });\n  }\n}; // Steps per call, to keep sync with rendering\n\n\nForceAtlas2.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n  this._frame += steps;\n  this._onupdate = cb;\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'update',\n      steps: Math.round(steps)\n    });\n  }\n};\n\nForceAtlas2.prototype._$onupdate = function (e) {\n  // Incase the worker keep postMessage of last frame after it is disposed\n  if (this._disposed) {\n    return;\n  }\n\n  var positionArr = new Float32Array(e.data.buffer);\n  this._globalSpeed = e.data.globalSpeed;\n  this._positionArr = positionArr;\n\n  this._updateTexture(positionArr);\n\n  this._onupdate && this._onupdate();\n};\n\nForceAtlas2.prototype.getNodePositionTexture = function () {\n  return this._positionTex;\n};\n\nForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);\n  return uv;\n};\n\nForceAtlas2.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2.prototype.getNodePosition = function (renderer, out) {\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  if (this._positionArr) {\n    for (var i = 0; i < this._positionArr.length; i++) {\n      out[i] = this._positionArr[i];\n    }\n  }\n\n  return out;\n};\n\nForceAtlas2.prototype._updateTexture = function (positionArr) {\n  var pixels = this._positionTex.pixels;\n  var offset = 0;\n\n  for (var i = 0; i < positionArr.length;) {\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = 1;\n    pixels[offset++] = 1;\n  }\n\n  this._positionTex.dirty();\n};\n\nForceAtlas2.prototype.dispose = function (renderer) {\n  this._disposed = true;\n  this._worker = null;\n};\n\nexport default ForceAtlas2;"]},"metadata":{},"sourceType":"module"}