{"ast":null,"code":"import BoundingBox from './BoundingBox';\nimport Plane from './Plane';\nimport vec3 from '../glmatrix/vec3';\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\nvar vec3TranformMat4 = vec3.transformMat4;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\n/**\n * @constructor\n * @alias clay.Frustum\n */\n\nvar Frustum = function Frustum() {\n  /**\n   * Eight planes to enclose the frustum\n   * @type {clay.Plane[]}\n   */\n  this.planes = [];\n\n  for (var i = 0; i < 6; i++) {\n    this.planes.push(new Plane());\n  }\n  /**\n   * Bounding box of frustum\n   * @type {clay.BoundingBox}\n   */\n\n\n  this.boundingBox = new BoundingBox();\n  /**\n   * Eight vertices of frustum\n   * @type {Float32Array[]}\n   */\n\n  this.vertices = [];\n\n  for (var i = 0; i < 8; i++) {\n    this.vertices[i] = vec3.fromValues(0, 0, 0);\n  }\n};\n\nFrustum.prototype = {\n  // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n\n  /**\n   * Set frustum from a projection matrix\n   * @param {clay.Matrix4} projectionMatrix\n   */\n  setFromProjection: function setFromProjection(projectionMatrix) {\n    var planes = this.planes;\n    var m = projectionMatrix.array;\n    var m0 = m[0],\n        m1 = m[1],\n        m2 = m[2],\n        m3 = m[3];\n    var m4 = m[4],\n        m5 = m[5],\n        m6 = m[6],\n        m7 = m[7];\n    var m8 = m[8],\n        m9 = m[9],\n        m10 = m[10],\n        m11 = m[11];\n    var m12 = m[12],\n        m13 = m[13],\n        m14 = m[14],\n        m15 = m[15]; // Update planes\n\n    vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);\n    planes[0].distance = -(m15 - m12);\n    planes[0].normalize();\n    vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);\n    planes[1].distance = -(m15 + m12);\n    planes[1].normalize();\n    vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);\n    planes[2].distance = -(m15 + m13);\n    planes[2].normalize();\n    vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);\n    planes[3].distance = -(m15 - m13);\n    planes[3].normalize();\n    vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);\n    planes[4].distance = -(m15 - m14);\n    planes[4].normalize();\n    vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);\n    planes[5].distance = -(m15 + m14);\n    planes[5].normalize(); // Perspective projection\n\n    var boundingBox = this.boundingBox;\n    var vertices = this.vertices;\n\n    if (m15 === 0) {\n      var aspect = m5 / m0;\n      var zNear = -m14 / (m10 - 1);\n      var zFar = -m14 / (m10 + 1);\n      var farY = -zFar / m5;\n      var nearY = -zNear / m5; // Update bounding box\n\n      boundingBox.min.set(-farY * aspect, -farY, zFar);\n      boundingBox.max.set(farY * aspect, farY, zNear); // update vertices\n      //--- min z\n      // min x\n\n      vec3Set(vertices[0], -farY * aspect, -farY, zFar);\n      vec3Set(vertices[1], -farY * aspect, farY, zFar); // max x\n\n      vec3Set(vertices[2], farY * aspect, -farY, zFar);\n      vec3Set(vertices[3], farY * aspect, farY, zFar); //-- max z\n\n      vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);\n      vec3Set(vertices[5], -nearY * aspect, nearY, zNear);\n      vec3Set(vertices[6], nearY * aspect, -nearY, zNear);\n      vec3Set(vertices[7], nearY * aspect, nearY, zNear);\n    } else {\n      // Orthographic projection\n      var left = (-1 - m12) / m0;\n      var right = (1 - m12) / m0;\n      var top = (1 - m13) / m5;\n      var bottom = (-1 - m13) / m5;\n      var near = (-1 - m14) / m10;\n      var far = (1 - m14) / m10;\n      boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));\n      boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));\n      var min = boundingBox.min.array;\n      var max = boundingBox.max.array; //--- min z\n      // min x\n\n      vec3Set(vertices[0], min[0], min[1], min[2]);\n      vec3Set(vertices[1], min[0], max[1], min[2]); // max x\n\n      vec3Set(vertices[2], max[0], min[1], min[2]);\n      vec3Set(vertices[3], max[0], max[1], min[2]); //-- max z\n\n      vec3Set(vertices[4], min[0], min[1], max[2]);\n      vec3Set(vertices[5], min[0], max[1], max[2]);\n      vec3Set(vertices[6], max[0], min[1], max[2]);\n      vec3Set(vertices[7], max[0], max[1], max[2]);\n    }\n  },\n\n  /**\n   * Apply a affine transform matrix and set to the given bounding box\n   * @function\n   * @param {clay.BoundingBox}\n   * @param {clay.Matrix4}\n   * @return {clay.BoundingBox}\n   */\n  getTransformedBoundingBox: function () {\n    var tmpVec3 = vec3.create();\n    return function (bbox, matrix) {\n      var vertices = this.vertices;\n      var m4 = matrix.array;\n      var min = bbox.min;\n      var max = bbox.max;\n      var minArr = min.array;\n      var maxArr = max.array;\n      var v = vertices[0];\n      vec3TranformMat4(tmpVec3, v, m4);\n      vec3Copy(minArr, tmpVec3);\n      vec3Copy(maxArr, tmpVec3);\n\n      for (var i = 1; i < 8; i++) {\n        v = vertices[i];\n        vec3TranformMat4(tmpVec3, v, m4);\n        minArr[0] = mathMin(tmpVec3[0], minArr[0]);\n        minArr[1] = mathMin(tmpVec3[1], minArr[1]);\n        minArr[2] = mathMin(tmpVec3[2], minArr[2]);\n        maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);\n        maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);\n        maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);\n      }\n\n      min._dirty = true;\n      max._dirty = true;\n      return bbox;\n    };\n  }()\n};\nexport default Frustum;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/math/Frustum.js"],"names":["BoundingBox","Plane","vec3","vec3Set","set","vec3Copy","copy","vec3TranformMat4","transformMat4","mathMin","Math","min","mathMax","max","Frustum","planes","i","push","boundingBox","vertices","fromValues","prototype","setFromProjection","projectionMatrix","m","array","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","normal","distance","normalize","aspect","zNear","zFar","farY","nearY","left","right","top","bottom","near","far","getTransformedBoundingBox","tmpVec3","create","bbox","matrix","minArr","maxArr","v","_dirty"],"mappings":"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","sourcesContent":["import BoundingBox from './BoundingBox';\nimport Plane from './Plane';\n\nimport vec3 from '../glmatrix/vec3';\n\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\nvar vec3TranformMat4 = vec3.transformMat4;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\n/**\n * @constructor\n * @alias clay.Frustum\n */\nvar Frustum = function() {\n\n    /**\n     * Eight planes to enclose the frustum\n     * @type {clay.Plane[]}\n     */\n    this.planes = [];\n\n    for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n    }\n\n    /**\n     * Bounding box of frustum\n     * @type {clay.BoundingBox}\n     */\n    this.boundingBox = new BoundingBox();\n\n    /**\n     * Eight vertices of frustum\n     * @type {Float32Array[]}\n     */\n    this.vertices = [];\n    for (var i = 0; i < 8; i++) {\n        this.vertices[i] = vec3.fromValues(0, 0, 0);\n    }\n};\n\nFrustum.prototype = {\n\n    // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n    /**\n     * Set frustum from a projection matrix\n     * @param {clay.Matrix4} projectionMatrix\n     */\n    setFromProjection: function(projectionMatrix) {\n\n        var planes = this.planes;\n        var m = projectionMatrix.array;\n        var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];\n        var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];\n        var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];\n        var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];\n\n        // Update planes\n        vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);\n        planes[0].distance = -(m15 - m12);\n        planes[0].normalize();\n\n        vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);\n        planes[1].distance = -(m15 + m12);\n        planes[1].normalize();\n\n        vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);\n        planes[2].distance = -(m15 + m13);\n        planes[2].normalize();\n\n        vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);\n        planes[3].distance = -(m15 - m13);\n        planes[3].normalize();\n\n        vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);\n        planes[4].distance = -(m15 - m14);\n        planes[4].normalize();\n\n        vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);\n        planes[5].distance = -(m15 + m14);\n        planes[5].normalize();\n\n        // Perspective projection\n        var boundingBox = this.boundingBox;\n        var vertices = this.vertices;\n        if (m15 === 0)  {\n            var aspect = m5 / m0;\n            var zNear = -m14 / (m10 - 1);\n            var zFar = -m14 / (m10 + 1);\n            var farY = -zFar / m5;\n            var nearY = -zNear / m5;\n            // Update bounding box\n            boundingBox.min.set(-farY * aspect, -farY, zFar);\n            boundingBox.max.set(farY * aspect, farY, zNear);\n            // update vertices\n            //--- min z\n            // min x\n            vec3Set(vertices[0], -farY * aspect, -farY, zFar);\n            vec3Set(vertices[1], -farY * aspect, farY, zFar);\n            // max x\n            vec3Set(vertices[2], farY * aspect, -farY, zFar);\n            vec3Set(vertices[3], farY * aspect, farY, zFar);\n            //-- max z\n            vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);\n            vec3Set(vertices[5], -nearY * aspect, nearY, zNear);\n            vec3Set(vertices[6], nearY * aspect, -nearY, zNear);\n            vec3Set(vertices[7], nearY * aspect, nearY, zNear);\n        }\n        else { // Orthographic projection\n            var left = (-1 - m12) / m0;\n            var right = (1 - m12) / m0;\n            var top = (1 - m13) / m5;\n            var bottom = (-1 - m13) / m5;\n            var near = (-1 - m14) / m10;\n            var far = (1 - m14) / m10;\n\n\n            boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));\n            boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));\n\n            var min = boundingBox.min.array;\n            var max = boundingBox.max.array;\n            //--- min z\n            // min x\n            vec3Set(vertices[0], min[0], min[1], min[2]);\n            vec3Set(vertices[1], min[0], max[1], min[2]);\n            // max x\n            vec3Set(vertices[2], max[0], min[1], min[2]);\n            vec3Set(vertices[3], max[0], max[1], min[2]);\n            //-- max z\n            vec3Set(vertices[4], min[0], min[1], max[2]);\n            vec3Set(vertices[5], min[0], max[1], max[2]);\n            vec3Set(vertices[6], max[0], min[1], max[2]);\n            vec3Set(vertices[7], max[0], max[1], max[2]);\n        }\n    },\n\n    /**\n     * Apply a affine transform matrix and set to the given bounding box\n     * @function\n     * @param {clay.BoundingBox}\n     * @param {clay.Matrix4}\n     * @return {clay.BoundingBox}\n     */\n    getTransformedBoundingBox: (function() {\n\n        var tmpVec3 = vec3.create();\n\n        return function(bbox, matrix) {\n            var vertices = this.vertices;\n\n            var m4 = matrix.array;\n            var min = bbox.min;\n            var max = bbox.max;\n            var minArr = min.array;\n            var maxArr = max.array;\n            var v = vertices[0];\n            vec3TranformMat4(tmpVec3, v, m4);\n            vec3Copy(minArr, tmpVec3);\n            vec3Copy(maxArr, tmpVec3);\n\n            for (var i = 1; i < 8; i++) {\n                v = vertices[i];\n                vec3TranformMat4(tmpVec3, v, m4);\n\n                minArr[0] = mathMin(tmpVec3[0], minArr[0]);\n                minArr[1] = mathMin(tmpVec3[1], minArr[1]);\n                minArr[2] = mathMin(tmpVec3[2], minArr[2]);\n\n                maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);\n                maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);\n                maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);\n            }\n\n            min._dirty = true;\n            max._dirty = true;\n\n            return bbox;\n        };\n    }) ()\n};\nexport default Frustum;\n"]},"metadata":{},"sourceType":"module"}