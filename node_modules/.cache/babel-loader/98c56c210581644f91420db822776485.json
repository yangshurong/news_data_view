{"ast":null,"code":"import _typeof from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport vendor from '../core/vendor';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport Skydome from '../plugin/Skydome';\nimport Scene from '../Scene';\nimport dds from './dds';\nimport hdr from './hdr';\n/**\n * @alias clay.util.texture\n */\n\nvar textureUtil = {\n  /**\n   * @param  {string|object} path\n   * @param  {object} [option]\n   * @param  {Function} [onsuccess]\n   * @param  {Function} [onerror]\n   * @return {clay.Texture}\n   */\n  loadTexture: function loadTexture(path, option, onsuccess, onerror) {\n    var texture;\n\n    if (typeof option === 'function') {\n      onsuccess = option;\n      onerror = onsuccess;\n      option = {};\n    } else {\n      option = option || {};\n    }\n\n    if (typeof path === 'string') {\n      if (path.match(/.hdr$/) || option.fileType === 'hdr') {\n        texture = new Texture2D({\n          width: 0,\n          height: 0,\n          sRGB: false\n        });\n\n        textureUtil._fetchTexture(path, function (data) {\n          hdr.parseRGBE(data, texture, option.exposure);\n          texture.dirty();\n          onsuccess && onsuccess(texture);\n        }, onerror);\n\n        return texture;\n      } else if (path.match(/.dds$/) || option.fileType === 'dds') {\n        texture = new Texture2D({\n          width: 0,\n          height: 0\n        });\n\n        textureUtil._fetchTexture(path, function (data) {\n          dds.parse(data, texture);\n          texture.dirty();\n          onsuccess && onsuccess(texture);\n        }, onerror);\n      } else {\n        texture = new Texture2D();\n        texture.load(path);\n        texture.success(onsuccess);\n        texture.error(onerror);\n      }\n    } else if (_typeof(path) === 'object' && typeof path.px !== 'undefined') {\n      texture = new TextureCube();\n      texture.load(path);\n      texture.success(onsuccess);\n      texture.error(onerror);\n    }\n\n    return texture;\n  },\n\n  /**\n   * Load a panorama texture and render it to a cube map\n   * @param  {clay.Renderer} renderer\n   * @param  {string} path\n   * @param  {clay.TextureCube} cubeMap\n   * @param  {object} [option]\n   * @param  {boolean} [option.encodeRGBM]\n   * @param  {number} [option.exposure]\n   * @param  {Function} [onsuccess]\n   * @param  {Function} [onerror]\n   */\n  loadPanorama: function loadPanorama(renderer, path, cubeMap, option, onsuccess, onerror) {\n    var self = this;\n\n    if (typeof option === 'function') {\n      onsuccess = option;\n      onerror = onsuccess;\n      option = {};\n    } else {\n      option = option || {};\n    }\n\n    textureUtil.loadTexture(path, option, function (texture) {\n      // PENDING\n      texture.flipY = option.flipY || false;\n      self.panoramaToCubeMap(renderer, texture, cubeMap, option);\n      texture.dispose(renderer);\n      onsuccess && onsuccess(cubeMap);\n    }, onerror);\n  },\n\n  /**\n   * Render a panorama texture to a cube map\n   * @param  {clay.Renderer} renderer\n   * @param  {clay.Texture2D} panoramaMap\n   * @param  {clay.TextureCube} cubeMap\n   * @param  {Object} option\n   * @param  {boolean} [option.encodeRGBM]\n   */\n  panoramaToCubeMap: function panoramaToCubeMap(renderer, panoramaMap, cubeMap, option) {\n    var environmentMapPass = new EnvironmentMapPass();\n    var skydome = new Skydome({\n      scene: new Scene()\n    });\n    skydome.setEnvironmentMap(panoramaMap);\n    option = option || {};\n\n    if (option.encodeRGBM) {\n      skydome.material.define('fragment', 'RGBM_ENCODE');\n    } // Share sRGB\n\n\n    cubeMap.sRGB = panoramaMap.sRGB;\n    environmentMapPass.texture = cubeMap;\n    environmentMapPass.render(renderer, skydome.scene);\n    environmentMapPass.texture = null;\n    environmentMapPass.dispose(renderer);\n    return cubeMap;\n  },\n\n  /**\n   * Convert height map to normal map\n   * @param {HTMLImageElement|HTMLCanvasElement} image\n   * @param {boolean} [checkBump=false]\n   * @return {HTMLCanvasElement}\n   */\n  heightToNormal: function heightToNormal(image, checkBump) {\n    var canvas = document.createElement('canvas');\n    var width = canvas.width = image.width;\n    var height = canvas.height = image.height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, width, height);\n    checkBump = checkBump || false;\n    var srcData = ctx.getImageData(0, 0, width, height);\n    var dstData = ctx.createImageData(width, height);\n\n    for (var i = 0; i < srcData.data.length; i += 4) {\n      if (checkBump) {\n        var r = srcData.data[i];\n        var g = srcData.data[i + 1];\n        var b = srcData.data[i + 2];\n        var diff = Math.abs(r - g) + Math.abs(g - b);\n\n        if (diff > 20) {\n          console.warn('Given image is not a height map');\n          return image;\n        }\n      } // Modified from http://mrdoob.com/lab/javascript/height2normal/\n\n\n      var x1, y1, x2, y2;\n\n      if (i % (width * 4) === 0) {\n        // left edge\n        x1 = srcData.data[i];\n        x2 = srcData.data[i + 4];\n      } else if (i % (width * 4) === (width - 1) * 4) {\n        // right edge\n        x1 = srcData.data[i - 4];\n        x2 = srcData.data[i];\n      } else {\n        x1 = srcData.data[i - 4];\n        x2 = srcData.data[i + 4];\n      }\n\n      if (i < width * 4) {\n        // top edge\n        y1 = srcData.data[i];\n        y2 = srcData.data[i + width * 4];\n      } else if (i > width * (height - 1) * 4) {\n        // bottom edge\n        y1 = srcData.data[i - width * 4];\n        y2 = srcData.data[i];\n      } else {\n        y1 = srcData.data[i - width * 4];\n        y2 = srcData.data[i + width * 4];\n      }\n\n      dstData.data[i] = x1 - x2 + 127;\n      dstData.data[i + 1] = y1 - y2 + 127;\n      dstData.data[i + 2] = 255;\n      dstData.data[i + 3] = 255;\n    }\n\n    ctx.putImageData(dstData, 0, 0);\n    return canvas;\n  },\n\n  /**\n   * Convert height map to normal map\n   * @param {HTMLImageElement|HTMLCanvasElement} image\n   * @param {boolean} [checkBump=false]\n   * @param {number} [threshold=20]\n   * @return {HTMLCanvasElement}\n   */\n  isHeightImage: function isHeightImage(img, downScaleSize, threshold) {\n    if (!img || !img.width || !img.height) {\n      return false;\n    }\n\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var size = downScaleSize || 32;\n    threshold = threshold || 20;\n    canvas.width = canvas.height = size;\n    ctx.drawImage(img, 0, 0, size, size);\n    var srcData = ctx.getImageData(0, 0, size, size);\n\n    for (var i = 0; i < srcData.data.length; i += 4) {\n      var r = srcData.data[i];\n      var g = srcData.data[i + 1];\n      var b = srcData.data[i + 2];\n      var diff = Math.abs(r - g) + Math.abs(g - b);\n\n      if (diff > threshold) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  _fetchTexture: function _fetchTexture(path, onsuccess, onerror) {\n    vendor.request.get({\n      url: path,\n      responseType: 'arraybuffer',\n      onload: onsuccess,\n      onerror: onerror\n    });\n  },\n\n  /**\n   * Create a chessboard texture\n   * @param  {number} [size]\n   * @param  {number} [unitSize]\n   * @param  {string} [color1]\n   * @param  {string} [color2]\n   * @return {clay.Texture2D}\n   */\n  createChessboard: function createChessboard(size, unitSize, color1, color2) {\n    size = size || 512;\n    unitSize = unitSize || 64;\n    color1 = color1 || 'black';\n    color2 = color2 || 'white';\n    var repeat = Math.ceil(size / unitSize);\n    var canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = color2;\n    ctx.fillRect(0, 0, size, size);\n    ctx.fillStyle = color1;\n\n    for (var i = 0; i < repeat; i++) {\n      for (var j = 0; j < repeat; j++) {\n        var isFill = j % 2 ? i % 2 : i % 2 - 1;\n\n        if (isFill) {\n          ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);\n        }\n      }\n    }\n\n    var texture = new Texture2D({\n      image: canvas,\n      anisotropic: 8\n    });\n    return texture;\n  },\n\n  /**\n   * Create a blank pure color 1x1 texture\n   * @param  {string} color\n   * @return {clay.Texture2D}\n   */\n  createBlank: function createBlank(color) {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, 1, 1);\n    var texture = new Texture2D({\n      image: canvas\n    });\n    return texture;\n  }\n};\nexport default textureUtil;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/util/texture.js"],"names":["Texture2D","TextureCube","vendor","EnvironmentMapPass","Skydome","Scene","dds","hdr","textureUtil","loadTexture","path","option","onsuccess","onerror","texture","match","fileType","width","height","sRGB","_fetchTexture","data","parseRGBE","exposure","dirty","parse","load","success","error","px","loadPanorama","renderer","cubeMap","self","flipY","panoramaToCubeMap","dispose","panoramaMap","environmentMapPass","skydome","scene","setEnvironmentMap","encodeRGBM","material","define","render","heightToNormal","image","checkBump","canvas","document","createElement","ctx","getContext","drawImage","srcData","getImageData","dstData","createImageData","i","length","r","g","b","diff","Math","abs","console","warn","x1","y1","x2","y2","putImageData","isHeightImage","img","downScaleSize","threshold","size","request","get","url","responseType","onload","createChessboard","unitSize","color1","color2","repeat","ceil","fillStyle","fillRect","j","isFill","anisotropic","createBlank","color"],"mappings":"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","sourcesContent":["import Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport vendor from '../core/vendor';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport Skydome from '../plugin/Skydome';\nimport Scene from '../Scene';\n\nimport dds from './dds';\nimport hdr from './hdr';\n\n/**\n * @alias clay.util.texture\n */\nvar textureUtil = {\n    /**\n     * @param  {string|object} path\n     * @param  {object} [option]\n     * @param  {Function} [onsuccess]\n     * @param  {Function} [onerror]\n     * @return {clay.Texture}\n     */\n    loadTexture: function (path, option, onsuccess, onerror) {\n        var texture;\n        if (typeof(option) === 'function') {\n            onsuccess = option;\n            onerror = onsuccess;\n            option = {};\n        }\n        else {\n            option = option || {};\n        }\n        if (typeof(path) === 'string') {\n            if (path.match(/.hdr$/) || option.fileType === 'hdr') {\n                texture = new Texture2D({\n                    width: 0,\n                    height: 0,\n                    sRGB: false\n                });\n                textureUtil._fetchTexture(\n                    path,\n                    function (data) {\n                        hdr.parseRGBE(data, texture, option.exposure);\n                        texture.dirty();\n                        onsuccess && onsuccess(texture);\n                    },\n                    onerror\n                );\n                return texture;\n            }\n            else if (path.match(/.dds$/) || option.fileType === 'dds') {\n                texture = new Texture2D({\n                    width: 0,\n                    height: 0\n                });\n                textureUtil._fetchTexture(\n                    path,\n                    function (data) {\n                        dds.parse(data, texture);\n                        texture.dirty();\n                        onsuccess && onsuccess(texture);\n                    },\n                    onerror\n                );\n            }\n            else {\n                texture = new Texture2D();\n                texture.load(path);\n                texture.success(onsuccess);\n                texture.error(onerror);\n            }\n        }\n        else if (typeof path === 'object' && typeof(path.px) !== 'undefined') {\n            texture = new TextureCube();\n            texture.load(path);\n            texture.success(onsuccess);\n            texture.error(onerror);\n        }\n        return texture;\n    },\n\n    /**\n     * Load a panorama texture and render it to a cube map\n     * @param  {clay.Renderer} renderer\n     * @param  {string} path\n     * @param  {clay.TextureCube} cubeMap\n     * @param  {object} [option]\n     * @param  {boolean} [option.encodeRGBM]\n     * @param  {number} [option.exposure]\n     * @param  {Function} [onsuccess]\n     * @param  {Function} [onerror]\n     */\n    loadPanorama: function (renderer, path, cubeMap, option, onsuccess, onerror) {\n        var self = this;\n\n        if (typeof(option) === 'function') {\n            onsuccess = option;\n            onerror = onsuccess;\n            option = {};\n        }\n        else {\n            option = option || {};\n        }\n\n        textureUtil.loadTexture(path, option, function (texture) {\n            // PENDING\n            texture.flipY = option.flipY || false;\n            self.panoramaToCubeMap(renderer, texture, cubeMap, option);\n            texture.dispose(renderer);\n            onsuccess && onsuccess(cubeMap);\n        }, onerror);\n    },\n\n    /**\n     * Render a panorama texture to a cube map\n     * @param  {clay.Renderer} renderer\n     * @param  {clay.Texture2D} panoramaMap\n     * @param  {clay.TextureCube} cubeMap\n     * @param  {Object} option\n     * @param  {boolean} [option.encodeRGBM]\n     */\n    panoramaToCubeMap: function (renderer, panoramaMap, cubeMap, option) {\n        var environmentMapPass = new EnvironmentMapPass();\n        var skydome = new Skydome({\n            scene: new Scene()\n        });\n        skydome.setEnvironmentMap(panoramaMap);\n\n        option = option || {};\n        if (option.encodeRGBM) {\n            skydome.material.define('fragment', 'RGBM_ENCODE');\n        }\n\n        // Share sRGB\n        cubeMap.sRGB = panoramaMap.sRGB;\n\n        environmentMapPass.texture = cubeMap;\n        environmentMapPass.render(renderer, skydome.scene);\n        environmentMapPass.texture = null;\n        environmentMapPass.dispose(renderer);\n        return cubeMap;\n    },\n\n    /**\n     * Convert height map to normal map\n     * @param {HTMLImageElement|HTMLCanvasElement} image\n     * @param {boolean} [checkBump=false]\n     * @return {HTMLCanvasElement}\n     */\n    heightToNormal: function (image, checkBump) {\n        var canvas = document.createElement('canvas');\n        var width = canvas.width = image.width;\n        var height = canvas.height = image.height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0, width, height);\n        checkBump = checkBump || false;\n        var srcData = ctx.getImageData(0, 0, width, height);\n        var dstData = ctx.createImageData(width, height);\n        for (var i = 0; i < srcData.data.length; i += 4) {\n            if (checkBump) {\n                var r = srcData.data[i];\n                var g = srcData.data[i + 1];\n                var b = srcData.data[i + 2];\n                var diff = Math.abs(r - g) + Math.abs(g - b);\n                if (diff > 20) {\n                    console.warn('Given image is not a height map');\n                    return image;\n                }\n            }\n            // Modified from http://mrdoob.com/lab/javascript/height2normal/\n            var x1, y1, x2, y2;\n            if (i % (width * 4) === 0) {\n                // left edge\n                x1 = srcData.data[i];\n                x2 = srcData.data[i + 4];\n            }\n            else if (i % (width * 4) === (width - 1) * 4) {\n                // right edge\n                x1 = srcData.data[i - 4];\n                x2 = srcData.data[i];\n            }\n            else {\n                x1 = srcData.data[i - 4];\n                x2 = srcData.data[i + 4];\n            }\n\n            if (i < width * 4) {\n                // top edge\n                y1 = srcData.data[i];\n                y2 = srcData.data[i + width * 4];\n            }\n            else if (i > width * (height - 1) * 4) {\n                // bottom edge\n                y1 = srcData.data[i - width * 4];\n                y2 = srcData.data[i];\n            }\n            else {\n                y1 = srcData.data[i - width * 4];\n                y2 = srcData.data[i + width * 4];\n            }\n\n            dstData.data[i] = (x1 - x2) + 127;\n            dstData.data[i + 1] = (y1 - y2) + 127;\n            dstData.data[i + 2] = 255;\n            dstData.data[i + 3] = 255;\n        }\n        ctx.putImageData(dstData, 0, 0);\n        return canvas;\n    },\n\n    /**\n     * Convert height map to normal map\n     * @param {HTMLImageElement|HTMLCanvasElement} image\n     * @param {boolean} [checkBump=false]\n     * @param {number} [threshold=20]\n     * @return {HTMLCanvasElement}\n     */\n    isHeightImage: function (img, downScaleSize, threshold) {\n        if (!img || !img.width || !img.height) {\n            return false;\n        }\n\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        var size = downScaleSize || 32;\n        threshold = threshold || 20;\n        canvas.width = canvas.height = size;\n        ctx.drawImage(img, 0, 0, size, size);\n        var srcData = ctx.getImageData(0, 0, size, size);\n        for (var i = 0; i < srcData.data.length; i += 4) {\n            var r = srcData.data[i];\n            var g = srcData.data[i + 1];\n            var b = srcData.data[i + 2];\n            var diff = Math.abs(r - g) + Math.abs(g - b);\n            if (diff > threshold) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    _fetchTexture: function (path, onsuccess, onerror) {\n        vendor.request.get({\n            url: path,\n            responseType: 'arraybuffer',\n            onload: onsuccess,\n            onerror: onerror\n        });\n    },\n\n    /**\n     * Create a chessboard texture\n     * @param  {number} [size]\n     * @param  {number} [unitSize]\n     * @param  {string} [color1]\n     * @param  {string} [color2]\n     * @return {clay.Texture2D}\n     */\n    createChessboard: function (size, unitSize, color1, color2) {\n        size = size || 512;\n        unitSize = unitSize || 64;\n        color1 = color1 || 'black';\n        color2 = color2 || 'white';\n\n        var repeat = Math.ceil(size / unitSize);\n\n        var canvas = document.createElement('canvas');\n        canvas.width = size;\n        canvas.height = size;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = color2;\n        ctx.fillRect(0, 0, size, size);\n\n        ctx.fillStyle = color1;\n        for (var i = 0; i < repeat; i++) {\n            for (var j = 0; j < repeat; j++) {\n                var isFill = j % 2 ? (i % 2) : (i % 2 - 1);\n                if (isFill) {\n                    ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);\n                }\n            }\n        }\n\n        var texture = new Texture2D({\n            image: canvas,\n            anisotropic: 8\n        });\n\n        return texture;\n    },\n\n    /**\n     * Create a blank pure color 1x1 texture\n     * @param  {string} color\n     * @return {clay.Texture2D}\n     */\n    createBlank: function (color) {\n        var canvas = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, 1, 1);\n\n        var texture = new Texture2D({\n            image: canvas\n        });\n\n        return texture;\n    }\n};\n\nexport default textureUtil;\n"]},"metadata":{},"sourceType":"module"}