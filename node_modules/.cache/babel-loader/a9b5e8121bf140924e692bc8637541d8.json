{"ast":null,"code":"import Base from '../core/Base';\nimport Vector3 from '../math/Vector3';\nimport PerspectiveCamera from '../camera/Perspective';\nimport FrameBuffer from '../FrameBuffer';\nvar targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n/**\n * Pass rendering scene to a environment cube map\n *\n * @constructor clay.prePass.EnvironmentMap\n * @extends clay.core.Base\n * @example\n *     // Example of car reflection\n *     var envMap = new clay.TextureCube({\n *         width: 256,\n *         height: 256\n *     });\n *     var envPass = new clay.prePass.EnvironmentMap({\n *         position: car.position,\n *         texture: envMap\n *     });\n *     var carBody = car.getChildByName('body');\n *     carBody.material.enableTexture('environmentMap');\n *     carBody.material.set('environmentMap', envMap);\n *     ...\n *     animation.on('frame', function(frameTime) {\n *         envPass.render(renderer, scene);\n *         renderer.render(scene, camera);\n *     });\n */\n\nvar EnvironmentMapPass = Base.extend(function () {\n  var ret =\n  /** @lends clay.prePass.EnvironmentMap# */\n  {\n    /**\n     * Camera position\n     * @type {clay.Vector3}\n     * @memberOf clay.prePass.EnvironmentMap#\n     */\n    position: new Vector3(),\n\n    /**\n     * Camera far plane\n     * @type {number}\n     * @memberOf clay.prePass.EnvironmentMap#\n     */\n    far: 1000,\n\n    /**\n     * Camera near plane\n     * @type {number}\n     * @memberOf clay.prePass.EnvironmentMap#\n     */\n    near: 0.1,\n\n    /**\n     * Environment cube map\n     * @type {clay.TextureCube}\n     * @memberOf clay.prePass.EnvironmentMap#\n     */\n    texture: null,\n\n    /**\n     * Used if you wan't have shadow in environment map\n     * @type {clay.prePass.ShadowMap}\n     */\n    shadowMapPass: null\n  };\n  var cameras = ret._cameras = {\n    px: new PerspectiveCamera({\n      fov: 90\n    }),\n    nx: new PerspectiveCamera({\n      fov: 90\n    }),\n    py: new PerspectiveCamera({\n      fov: 90\n    }),\n    ny: new PerspectiveCamera({\n      fov: 90\n    }),\n    pz: new PerspectiveCamera({\n      fov: 90\n    }),\n    nz: new PerspectiveCamera({\n      fov: 90\n    })\n  };\n  cameras.px.lookAt(Vector3.POSITIVE_X, Vector3.NEGATIVE_Y);\n  cameras.nx.lookAt(Vector3.NEGATIVE_X, Vector3.NEGATIVE_Y);\n  cameras.py.lookAt(Vector3.POSITIVE_Y, Vector3.POSITIVE_Z);\n  cameras.ny.lookAt(Vector3.NEGATIVE_Y, Vector3.NEGATIVE_Z);\n  cameras.pz.lookAt(Vector3.POSITIVE_Z, Vector3.NEGATIVE_Y);\n  cameras.nz.lookAt(Vector3.NEGATIVE_Z, Vector3.NEGATIVE_Y); // FIXME In windows, use one framebuffer only renders one side of cubemap\n\n  ret._frameBuffer = new FrameBuffer();\n  return ret;\n},\n/** @lends clay.prePass.EnvironmentMap# */\n{\n  /**\n   * @param  {string} target\n   * @return  {clay.Camera}\n   */\n  getCamera: function getCamera(target) {\n    return this._cameras[target];\n  },\n\n  /**\n   * @param  {clay.Renderer} renderer\n   * @param  {clay.Scene} scene\n   * @param  {boolean} [notUpdateScene=false]\n   */\n  render: function render(renderer, scene, notUpdateScene) {\n    var _gl = renderer.gl;\n\n    if (!notUpdateScene) {\n      scene.update();\n    } // Tweak fov\n    // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/\n\n\n    var n = this.texture.width;\n    var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;\n\n    for (var i = 0; i < 6; i++) {\n      var target = targets[i];\n      var camera = this._cameras[target];\n      Vector3.copy(camera.position, this.position);\n      camera.far = this.far;\n      camera.near = this.near;\n      camera.fov = fov;\n\n      if (this.shadowMapPass) {\n        camera.update(); // update boundingBoxLastFrame\n\n        var bbox = scene.getBoundingBox();\n        bbox.applyTransform(camera.viewMatrix);\n        scene.viewBoundingBoxLastFrame.copy(bbox);\n        this.shadowMapPass.render(renderer, scene, camera, true);\n      }\n\n      this._frameBuffer.attach(this.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\n      this._frameBuffer.bind(renderer);\n\n      renderer.render(scene, camera, true);\n\n      this._frameBuffer.unbind(renderer);\n    }\n  },\n\n  /**\n   * @param {clay.Renderer} renderer\n   */\n  dispose: function dispose(renderer) {\n    this._frameBuffer.dispose(renderer);\n  }\n});\nexport default EnvironmentMapPass;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/prePass/EnvironmentMap.js"],"names":["Base","Vector3","PerspectiveCamera","FrameBuffer","targets","EnvironmentMapPass","extend","ret","position","far","near","texture","shadowMapPass","cameras","_cameras","px","fov","nx","py","ny","pz","nz","lookAt","POSITIVE_X","NEGATIVE_Y","NEGATIVE_X","POSITIVE_Y","POSITIVE_Z","NEGATIVE_Z","_frameBuffer","getCamera","target","render","renderer","scene","notUpdateScene","_gl","gl","update","n","width","Math","atan","PI","i","camera","copy","bbox","getBoundingBox","applyTransform","viewMatrix","viewBoundingBoxLastFrame","attach","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","bind","unbind","dispose"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,IAAIC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAGL,IAAI,CAACM,MAAL,CAAY,YAAW;AAC5C,MAAIC,GAAG;AAAG;AAA2C;AACjD;AACR;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAE,IAAIP,OAAJ,EANuC;;AAOjD;AACR;AACA;AACA;AACA;AACQQ,IAAAA,GAAG,EAAE,IAZ4C;;AAajD;AACR;AACA;AACA;AACA;AACQC,IAAAA,IAAI,EAAE,GAlB2C;;AAmBjD;AACR;AACA;AACA;AACA;AACQC,IAAAA,OAAO,EAAE,IAxBwC;;AA0BjD;AACR;AACA;AACA;AACQC,IAAAA,aAAa,EAAE;AA9BkC,GAArD;AAgCA,MAAIC,OAAO,GAAGN,GAAG,CAACO,QAAJ,GAAe;AACzBC,IAAAA,EAAE,EAAE,IAAIb,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB,CADqB;AAEzBC,IAAAA,EAAE,EAAE,IAAIf,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB,CAFqB;AAGzBE,IAAAA,EAAE,EAAE,IAAIhB,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB,CAHqB;AAIzBG,IAAAA,EAAE,EAAE,IAAIjB,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB,CAJqB;AAKzBI,IAAAA,EAAE,EAAE,IAAIlB,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB,CALqB;AAMzBK,IAAAA,EAAE,EAAE,IAAInB,iBAAJ,CAAsB;AAAEc,MAAAA,GAAG,EAAE;AAAP,KAAtB;AANqB,GAA7B;AAQAH,EAAAA,OAAO,CAACE,EAAR,CAAWO,MAAX,CAAkBrB,OAAO,CAACsB,UAA1B,EAAsCtB,OAAO,CAACuB,UAA9C;AACAX,EAAAA,OAAO,CAACI,EAAR,CAAWK,MAAX,CAAkBrB,OAAO,CAACwB,UAA1B,EAAsCxB,OAAO,CAACuB,UAA9C;AACAX,EAAAA,OAAO,CAACK,EAAR,CAAWI,MAAX,CAAkBrB,OAAO,CAACyB,UAA1B,EAAsCzB,OAAO,CAAC0B,UAA9C;AACAd,EAAAA,OAAO,CAACM,EAAR,CAAWG,MAAX,CAAkBrB,OAAO,CAACuB,UAA1B,EAAsCvB,OAAO,CAAC2B,UAA9C;AACAf,EAAAA,OAAO,CAACO,EAAR,CAAWE,MAAX,CAAkBrB,OAAO,CAAC0B,UAA1B,EAAsC1B,OAAO,CAACuB,UAA9C;AACAX,EAAAA,OAAO,CAACQ,EAAR,CAAWC,MAAX,CAAkBrB,OAAO,CAAC2B,UAA1B,EAAsC3B,OAAO,CAACuB,UAA9C,EA9C4C,CAgD5C;;AACAjB,EAAAA,GAAG,CAACsB,YAAJ,GAAmB,IAAI1B,WAAJ,EAAnB;AAEA,SAAOI,GAAP;AACH,CApDwB;AAoDrB;AAA2C;AAC3C;AACJ;AACA;AACA;AACIuB,EAAAA,SAAS,EAAE,mBAAUC,MAAV,EAAkB;AACzB,WAAO,KAAKjB,QAAL,CAAciB,MAAd,CAAP;AACH,GAP0C;;AAQ3C;AACJ;AACA;AACA;AACA;AACIC,EAAAA,MAAM,EAAE,gBAASC,QAAT,EAAmBC,KAAnB,EAA0BC,cAA1B,EAA0C;AAC9C,QAAIC,GAAG,GAAGH,QAAQ,CAACI,EAAnB;;AACA,QAAI,CAACF,cAAL,EAAqB;AACjBD,MAAAA,KAAK,CAACI,MAAN;AACH,KAJ6C,CAK9C;AACA;;;AACA,QAAIC,CAAC,GAAG,KAAK5B,OAAL,CAAa6B,KAArB;AACA,QAAIxB,GAAG,GAAG,IAAIyB,IAAI,CAACC,IAAL,CAAUH,CAAC,IAAIA,CAAC,GAAG,GAAR,CAAX,CAAJ,GAA+BE,IAAI,CAACE,EAApC,GAAyC,GAAnD;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIb,MAAM,GAAG3B,OAAO,CAACwC,CAAD,CAApB;AACA,UAAIC,MAAM,GAAG,KAAK/B,QAAL,CAAciB,MAAd,CAAb;AACA9B,MAAAA,OAAO,CAAC6C,IAAR,CAAaD,MAAM,CAACrC,QAApB,EAA8B,KAAKA,QAAnC;AAEAqC,MAAAA,MAAM,CAACpC,GAAP,GAAa,KAAKA,GAAlB;AACAoC,MAAAA,MAAM,CAACnC,IAAP,GAAc,KAAKA,IAAnB;AACAmC,MAAAA,MAAM,CAAC7B,GAAP,GAAaA,GAAb;;AAEA,UAAI,KAAKJ,aAAT,EAAwB;AACpBiC,QAAAA,MAAM,CAACP,MAAP,GADoB,CAGpB;;AACA,YAAIS,IAAI,GAAGb,KAAK,CAACc,cAAN,EAAX;AACAD,QAAAA,IAAI,CAACE,cAAL,CAAoBJ,MAAM,CAACK,UAA3B;AACAhB,QAAAA,KAAK,CAACiB,wBAAN,CAA+BL,IAA/B,CAAoCC,IAApC;AAEA,aAAKnC,aAAL,CAAmBoB,MAAnB,CAA0BC,QAA1B,EAAoCC,KAApC,EAA2CW,MAA3C,EAAmD,IAAnD;AACH;;AACD,WAAKhB,YAAL,CAAkBuB,MAAlB,CACI,KAAKzC,OADT,EACkByB,GAAG,CAACiB,iBADtB,EAEIjB,GAAG,CAACkB,2BAAJ,GAAkCV,CAFtC;;AAIA,WAAKf,YAAL,CAAkB0B,IAAlB,CAAuBtB,QAAvB;;AACAA,MAAAA,QAAQ,CAACD,MAAT,CAAgBE,KAAhB,EAAuBW,MAAvB,EAA+B,IAA/B;;AACA,WAAKhB,YAAL,CAAkB2B,MAAlB,CAAyBvB,QAAzB;AACH;AACJ,GAlD0C;;AAmD3C;AACJ;AACA;AACIwB,EAAAA,OAAO,EAAE,iBAAUxB,QAAV,EAAoB;AACzB,SAAKJ,YAAL,CAAkB4B,OAAlB,CAA0BxB,QAA1B;AACH;AAxD0C,CApDtB,CAAzB;AA+GA,eAAe5B,kBAAf","sourcesContent":["import Base from '../core/Base';\nimport Vector3 from '../math/Vector3';\nimport PerspectiveCamera from '../camera/Perspective';\nimport FrameBuffer from '../FrameBuffer';\n\nvar targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n\n/**\n * Pass rendering scene to a environment cube map\n *\n * @constructor clay.prePass.EnvironmentMap\n * @extends clay.core.Base\n * @example\n *     // Example of car reflection\n *     var envMap = new clay.TextureCube({\n *         width: 256,\n *         height: 256\n *     });\n *     var envPass = new clay.prePass.EnvironmentMap({\n *         position: car.position,\n *         texture: envMap\n *     });\n *     var carBody = car.getChildByName('body');\n *     carBody.material.enableTexture('environmentMap');\n *     carBody.material.set('environmentMap', envMap);\n *     ...\n *     animation.on('frame', function(frameTime) {\n *         envPass.render(renderer, scene);\n *         renderer.render(scene, camera);\n *     });\n */\nvar EnvironmentMapPass = Base.extend(function() {\n    var ret = /** @lends clay.prePass.EnvironmentMap# */ {\n        /**\n         * Camera position\n         * @type {clay.Vector3}\n         * @memberOf clay.prePass.EnvironmentMap#\n         */\n        position: new Vector3(),\n        /**\n         * Camera far plane\n         * @type {number}\n         * @memberOf clay.prePass.EnvironmentMap#\n         */\n        far: 1000,\n        /**\n         * Camera near plane\n         * @type {number}\n         * @memberOf clay.prePass.EnvironmentMap#\n         */\n        near: 0.1,\n        /**\n         * Environment cube map\n         * @type {clay.TextureCube}\n         * @memberOf clay.prePass.EnvironmentMap#\n         */\n        texture: null,\n\n        /**\n         * Used if you wan't have shadow in environment map\n         * @type {clay.prePass.ShadowMap}\n         */\n        shadowMapPass: null,\n    };\n    var cameras = ret._cameras = {\n        px: new PerspectiveCamera({ fov: 90 }),\n        nx: new PerspectiveCamera({ fov: 90 }),\n        py: new PerspectiveCamera({ fov: 90 }),\n        ny: new PerspectiveCamera({ fov: 90 }),\n        pz: new PerspectiveCamera({ fov: 90 }),\n        nz: new PerspectiveCamera({ fov: 90 })\n    };\n    cameras.px.lookAt(Vector3.POSITIVE_X, Vector3.NEGATIVE_Y);\n    cameras.nx.lookAt(Vector3.NEGATIVE_X, Vector3.NEGATIVE_Y);\n    cameras.py.lookAt(Vector3.POSITIVE_Y, Vector3.POSITIVE_Z);\n    cameras.ny.lookAt(Vector3.NEGATIVE_Y, Vector3.NEGATIVE_Z);\n    cameras.pz.lookAt(Vector3.POSITIVE_Z, Vector3.NEGATIVE_Y);\n    cameras.nz.lookAt(Vector3.NEGATIVE_Z, Vector3.NEGATIVE_Y);\n\n    // FIXME In windows, use one framebuffer only renders one side of cubemap\n    ret._frameBuffer = new FrameBuffer();\n\n    return ret;\n},  /** @lends clay.prePass.EnvironmentMap# */ {\n    /**\n     * @param  {string} target\n     * @return  {clay.Camera}\n     */\n    getCamera: function (target) {\n        return this._cameras[target];\n    },\n    /**\n     * @param  {clay.Renderer} renderer\n     * @param  {clay.Scene} scene\n     * @param  {boolean} [notUpdateScene=false]\n     */\n    render: function(renderer, scene, notUpdateScene) {\n        var _gl = renderer.gl;\n        if (!notUpdateScene) {\n            scene.update();\n        }\n        // Tweak fov\n        // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/\n        var n = this.texture.width;\n        var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;\n\n        for (var i = 0; i < 6; i++) {\n            var target = targets[i];\n            var camera = this._cameras[target];\n            Vector3.copy(camera.position, this.position);\n\n            camera.far = this.far;\n            camera.near = this.near;\n            camera.fov = fov;\n\n            if (this.shadowMapPass) {\n                camera.update();\n\n                // update boundingBoxLastFrame\n                var bbox = scene.getBoundingBox();\n                bbox.applyTransform(camera.viewMatrix);\n                scene.viewBoundingBoxLastFrame.copy(bbox);\n\n                this.shadowMapPass.render(renderer, scene, camera, true);\n            }\n            this._frameBuffer.attach(\n                this.texture, _gl.COLOR_ATTACHMENT0,\n                _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i\n            );\n            this._frameBuffer.bind(renderer);\n            renderer.render(scene, camera, true);\n            this._frameBuffer.unbind(renderer);\n        }\n    },\n    /**\n     * @param {clay.Renderer} renderer\n     */\n    dispose: function (renderer) {\n        this._frameBuffer.dispose(renderer);\n    }\n});\n\nexport default EnvironmentMapPass;\n"]},"metadata":{},"sourceType":"module"}