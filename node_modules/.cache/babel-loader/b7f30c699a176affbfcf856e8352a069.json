{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport Geo3D from './geo3D/Geo3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeGeo3D(geo3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = geo3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var geoRect = this.getGeoBoundingRect();\n  var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);\n  var width = geo3DModel.get('boxWidth');\n  var depth = geo3DModel.get('boxDepth');\n  var height = geo3DModel.get('boxHeight');\n\n  if (height == null) {\n    height = 5;\n  }\n\n  if (isNaN(width) && isNaN(depth)) {\n    // Default to have 100 width\n    width = 100;\n  }\n\n  if (isNaN(depth)) {\n    depth = width / aspect;\n  } else if (isNaN(width)) {\n    width = depth / aspect;\n  }\n\n  this.setSize(width, height, depth);\n  this.regionHeight = geo3DModel.get('regionHeight');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));\n  }\n}\n\nfunction updateGeo3D(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    if (seriesModel.type === 'series.map3D') {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var mapNotExistsError = function mapNotExistsError(name) {\n    console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n  };\n}\n\nvar idStart = 0;\nvar geo3DCreator = {\n  dimensions: Geo3D.prototype.dimensions,\n  create: function create(ecModel, api) {\n    var geo3DList = [];\n\n    if (!echarts.getMap) {\n      throw new Error('geo3D component depends on geo component');\n    }\n\n    function createGeo3D(componentModel, idx) {\n      var geo3D = geo3DCreator.createGeo3D(componentModel); // FIXME\n\n      componentModel.__viewGL = componentModel.__viewGL || new ViewGL();\n      geo3D.viewGL = componentModel.__viewGL;\n      componentModel.coordinateSystem = geo3D;\n      geo3D.model = componentModel;\n      geo3DList.push(geo3D); // Inject resize\n\n      geo3D.resize = resizeGeo3D;\n      geo3D.resize(componentModel, api);\n      geo3D.update = updateGeo3D;\n    }\n\n    ecModel.eachComponent('geo3D', function (geo3DModel, idx) {\n      createGeo3D(geo3DModel, idx);\n    });\n    ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {\n      var coordSys = map3DModel.get('coordinateSystem');\n\n      if (coordSys == null) {\n        coordSys = 'geo3D';\n      }\n\n      if (coordSys === 'geo3D') {\n        createGeo3D(map3DModel, idx);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'geo3D') {\n        if (seriesModel.type === 'series.map3D') {\n          return;\n        }\n\n        var geo3DModel = seriesModel.getReferringComponents('geo3D').models[0];\n\n        if (!geo3DModel) {\n          geo3DModel = ecModel.getComponent('geo3D');\n        }\n\n        if (!geo3DModel) {\n          throw new Error('geo \"' + retrieve.firstNotNull(seriesModel.get('geo3DIndex'), seriesModel.get('geo3DId'), 0) + '\" not found');\n        }\n\n        seriesModel.coordinateSystem = geo3DModel.coordinateSystem;\n      }\n    });\n    return geo3DList;\n  },\n  createGeo3D: function createGeo3D(componentModel) {\n    var mapData = componentModel.get('map');\n    var name;\n\n    if (typeof mapData === 'string') {\n      name = mapData;\n      mapData = echarts.getMap(mapData);\n    } else {\n      if (mapData && mapData.features) {\n        mapData = {\n          geoJson: mapData\n        };\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mapData) {\n        mapNotExistsError(mapData);\n      }\n\n      if (!mapData.geoJson.features) {\n        throw new Error('Invalid GeoJSON for map3D');\n      }\n    }\n\n    if (name == null) {\n      name = 'GEO_ANONYMOUS_' + idStart++;\n    }\n\n    return new Geo3D(name + idStart++, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, componentModel.get('nameMap'));\n  }\n};\nexport default geo3DCreator;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/coord/geo3DCreator.js"],"names":["Geo3D","echarts","getLayoutRect","ViewGL","retrieve","resizeGeo3D","geo3DModel","api","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","y","viewGL","setViewport","x","getDevicePixelRatio","geoRect","getGeoBoundingRect","aspect","get","depth","isNaN","setSize","regionHeight","altitudeAxis","setExtent","Math","max","updateGeo3D","ecModel","altitudeDataExtent","Infinity","eachSeries","seriesModel","coordinateSystem","type","data","getData","altDims","coordDimToDataDim","altDim","dataExtent","getDataExtent","min","isFinite","scale","helper","createScale","Axis","resize","model","process","env","NODE_ENV","mapNotExistsError","name","console","error","idStart","geo3DCreator","dimensions","prototype","create","geo3DList","getMap","Error","createGeo3D","componentModel","idx","geo3D","__viewGL","push","update","eachComponent","eachSeriesByType","map3DModel","coordSys","getReferringComponents","models","getComponent","firstNotNull","mapData","features","geoJson","specialAreas"],"mappings":"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","sourcesContent":["import Geo3D from './geo3D/Geo3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeGeo3D(geo3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = geo3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var geoRect = this.getGeoBoundingRect();\n  var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);\n  var width = geo3DModel.get('boxWidth');\n  var depth = geo3DModel.get('boxDepth');\n  var height = geo3DModel.get('boxHeight');\n\n  if (height == null) {\n    height = 5;\n  }\n\n  if (isNaN(width) && isNaN(depth)) {\n    // Default to have 100 width\n    width = 100;\n  }\n\n  if (isNaN(depth)) {\n    depth = width / aspect;\n  } else if (isNaN(width)) {\n    width = depth / aspect;\n  }\n\n  this.setSize(width, height, depth);\n  this.regionHeight = geo3DModel.get('regionHeight');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));\n  }\n}\n\nfunction updateGeo3D(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    if (seriesModel.type === 'series.map3D') {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var mapNotExistsError = function (name) {\n    console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n  };\n}\n\nvar idStart = 0;\nvar geo3DCreator = {\n  dimensions: Geo3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var geo3DList = [];\n\n    if (!echarts.getMap) {\n      throw new Error('geo3D component depends on geo component');\n    }\n\n    function createGeo3D(componentModel, idx) {\n      var geo3D = geo3DCreator.createGeo3D(componentModel); // FIXME\n\n      componentModel.__viewGL = componentModel.__viewGL || new ViewGL();\n      geo3D.viewGL = componentModel.__viewGL;\n      componentModel.coordinateSystem = geo3D;\n      geo3D.model = componentModel;\n      geo3DList.push(geo3D); // Inject resize\n\n      geo3D.resize = resizeGeo3D;\n      geo3D.resize(componentModel, api);\n      geo3D.update = updateGeo3D;\n    }\n\n    ecModel.eachComponent('geo3D', function (geo3DModel, idx) {\n      createGeo3D(geo3DModel, idx);\n    });\n    ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {\n      var coordSys = map3DModel.get('coordinateSystem');\n\n      if (coordSys == null) {\n        coordSys = 'geo3D';\n      }\n\n      if (coordSys === 'geo3D') {\n        createGeo3D(map3DModel, idx);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'geo3D') {\n        if (seriesModel.type === 'series.map3D') {\n          return;\n        }\n\n        var geo3DModel = seriesModel.getReferringComponents('geo3D').models[0];\n\n        if (!geo3DModel) {\n          geo3DModel = ecModel.getComponent('geo3D');\n        }\n\n        if (!geo3DModel) {\n          throw new Error('geo \"' + retrieve.firstNotNull(seriesModel.get('geo3DIndex'), seriesModel.get('geo3DId'), 0) + '\" not found');\n        }\n\n        seriesModel.coordinateSystem = geo3DModel.coordinateSystem;\n      }\n    });\n    return geo3DList;\n  },\n  createGeo3D: function (componentModel) {\n    var mapData = componentModel.get('map');\n    var name;\n\n    if (typeof mapData === 'string') {\n      name = mapData;\n      mapData = echarts.getMap(mapData);\n    } else {\n      if (mapData && mapData.features) {\n        mapData = {\n          geoJson: mapData\n        };\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mapData) {\n        mapNotExistsError(mapData);\n      }\n\n      if (!mapData.geoJson.features) {\n        throw new Error('Invalid GeoJSON for map3D');\n      }\n    }\n\n    if (name == null) {\n      name = 'GEO_ANONYMOUS_' + idStart++;\n    }\n\n    return new Geo3D(name + idStart++, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, componentModel.get('nameMap'));\n  }\n};\nexport default geo3DCreator;"]},"metadata":{},"sourceType":"module"}