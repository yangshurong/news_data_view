{"ast":null,"code":"/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n'use strict'; // setImmediate\n\nimport \"core-js/modules/web.immediate.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\nif (!window.setImmediate) {\n  window.setImmediate = function setupSetImmediate() {\n    return window.msSetImmediate || window.webkitSetImmediate || window.mozSetImmediate || window.oSetImmediate || function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message'; // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' || evt.data.substr(0, message.length) !== message\n        /* ||\n        evt.source !== window */\n        ) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n        var id = parseInt(evt.data.substr(message.length), 36);\n\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n      /* specify clearImmediate() here since we need the scope */\n\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    }() || // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  }();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = function setupClearImmediate() {\n    return window.msClearImmediate || window.webkitClearImmediate || window.mozClearImmediate || window.oClearImmediate || // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  }();\n} // Check if WordCloud can run on this browser\n\n\nvar isSupported = function isSupported() {\n  var canvas = document.createElement('canvas');\n\n  if (!canvas || !canvas.getContext) {\n    return false;\n  }\n\n  var ctx = canvas.getContext('2d');\n\n  if (!ctx.getImageData) {\n    return false;\n  }\n\n  if (!ctx.fillText) {\n    return false;\n  }\n\n  if (!Array.prototype.some) {\n    return false;\n  }\n\n  if (!Array.prototype.push) {\n    return false;\n  }\n\n  return true;\n}(); // Find out if the browser impose minium font size by\n// drawing small texts on a canvas and measure it's width.\n\n\nvar minFontSize = function getMinFontSize() {\n  if (!isSupported) {\n    return;\n  }\n\n  var ctx = document.createElement('canvas').getContext('2d'); // start from 20\n\n  var size = 20; // two sizes to measure\n\n  var hanWidth, mWidth;\n\n  while (size) {\n    ctx.font = size.toString(10) + 'px sans-serif';\n\n    if (ctx.measureText(\"\\uFF37\").width === hanWidth && ctx.measureText('m').width === mWidth) {\n      return size + 1;\n    }\n\n    hanWidth = ctx.measureText(\"\\uFF37\").width;\n    mWidth = ctx.measureText('m').width;\n    size--;\n  }\n\n  return 0;\n}(); // Based on http://jsfromhell.com/array/shuffle\n\n\nvar shuffleArray = function shuffleArray(arr) {\n  for (var j, x, i = arr.length; i; j = Math.floor(Math.random() * i), x = arr[--i], arr[i] = arr[j], arr[j] = x) {}\n\n  return arr;\n};\n\nvar WordCloud = function WordCloud(elements, options) {\n  if (!isSupported) {\n    return;\n  }\n\n  if (!Array.isArray(elements)) {\n    elements = [elements];\n  }\n\n  elements.forEach(function (el, i) {\n    if (typeof el === 'string') {\n      elements[i] = document.getElementById(el);\n\n      if (!elements[i]) {\n        throw 'The element id specified is not found.';\n      }\n    } else if (!el.tagName && !el.appendChild) {\n      throw 'You must pass valid HTML elements, or ID of the element.';\n    }\n  });\n  /* Default values to be overwritten by options object */\n\n  var settings = {\n    list: [],\n    fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' + '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n    fontWeight: 'normal',\n    color: 'random-dark',\n    minSize: 0,\n    // 0 to disable\n    weightFactor: 1,\n    clearCanvas: true,\n    backgroundColor: '#fff',\n    // opaque white = rgba(255, 255, 255, 1)\n    gridSize: 8,\n    drawOutOfBound: false,\n    origin: null,\n    drawMask: false,\n    maskColor: 'rgba(255,0,0,0.3)',\n    maskGapWidth: 0.3,\n    layoutAnimation: true,\n    wait: 0,\n    abortThreshold: 0,\n    // disabled\n    abort: function noop() {},\n    minRotation: -Math.PI / 2,\n    maxRotation: Math.PI / 2,\n    rotationStep: 0.1,\n    shuffle: true,\n    rotateRatio: 0.1,\n    shape: 'circle',\n    ellipticity: 0.65,\n    classes: null,\n    hover: null,\n    click: null\n  };\n\n  if (options) {\n    for (var key in options) {\n      if (key in settings) {\n        settings[key] = options[key];\n      }\n    }\n  }\n  /* Convert weightFactor into a function */\n\n\n  if (typeof settings.weightFactor !== 'function') {\n    var factor = settings.weightFactor;\n\n    settings.weightFactor = function weightFactor(pt) {\n      return pt * factor; //in px\n    };\n  }\n  /* Convert shape into a function */\n\n\n  if (typeof settings.shape !== 'function') {\n    switch (settings.shape) {\n      case 'circle':\n      /* falls through */\n\n      default:\n        // 'circle' is the default and a shortcut in the code loop.\n        settings.shape = 'circle';\n        break;\n\n      case 'cardioid':\n        settings.shape = function shapeCardioid(theta) {\n          return 1 - Math.sin(theta);\n        };\n\n        break;\n\n      /*\n      To work out an X-gon, one has to calculate \"m\",\n      where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n      http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n      2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n      Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n      where t' equals to mod(t, 2PI/X);\n      */\n\n      case 'diamond':\n      case 'square':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n        // +0+..+2*PI\n        settings.shape = function shapeSquare(theta) {\n          var thetaPrime = theta % (2 * Math.PI / 4);\n          return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n        };\n\n        break;\n\n      case 'triangle-forward':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n        // %29%29%2C+t+%3D+0+..+2*PI\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = theta % (2 * Math.PI / 3);\n          return 1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime));\n        };\n\n        break;\n\n      case 'triangle':\n      case 'triangle-upright':\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n          return 1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime));\n        };\n\n        break;\n\n      case 'pentagon':\n        settings.shape = function shapePentagon(theta) {\n          var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n          return 1 / (Math.cos(thetaPrime) + 0.726543 * Math.sin(thetaPrime));\n        };\n\n        break;\n\n      case 'star':\n        settings.shape = function shapeStar(theta) {\n          var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n\n          if ((theta + 0.955) % (2 * Math.PI / 5) - 2 * Math.PI / 10 >= 0) {\n            return 1 / (Math.cos(2 * Math.PI / 10 - thetaPrime) + 3.07768 * Math.sin(2 * Math.PI / 10 - thetaPrime));\n          } else {\n            return 1 / (Math.cos(thetaPrime) + 3.07768 * Math.sin(thetaPrime));\n          }\n        };\n\n        break;\n    }\n  }\n  /* Make sure gridSize is a whole number and is not smaller than 4px */\n\n\n  settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n  /* shorthand */\n\n  var g = settings.gridSize;\n  var maskRectWidth = g - settings.maskGapWidth;\n  /* normalize rotation settings */\n\n  var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n  var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n  var rotationStep = settings.rotationStep;\n  /* information/object available to all functions, set when start() */\n\n  var grid, // 2d array containing filling information\n  ngx, ngy, // width and height of the grid\n  center, // position of the center of the cloud\n  maxRadius;\n  /* timestamp for measuring each putWord() action */\n\n  var escapeTime;\n  /* function for getting the color of the text */\n\n  var getTextColor;\n\n  function random_hsl_color(min, max) {\n    return 'hsl(' + (Math.random() * 360).toFixed() + ',' + (Math.random() * 30 + 70).toFixed() + '%,' + (Math.random() * (max - min) + min).toFixed() + '%)';\n  }\n\n  switch (settings.color) {\n    case 'random-dark':\n      getTextColor = function getRandomDarkColor() {\n        return random_hsl_color(10, 50);\n      };\n\n      break;\n\n    case 'random-light':\n      getTextColor = function getRandomLightColor() {\n        return random_hsl_color(50, 90);\n      };\n\n      break;\n\n    default:\n      if (typeof settings.color === 'function') {\n        getTextColor = settings.color;\n      }\n\n      break;\n  }\n  /* function for getting the classes of the text */\n\n\n  var getTextClasses = null;\n\n  if (typeof settings.classes === 'function') {\n    getTextClasses = settings.classes;\n  }\n  /* Interactive */\n\n\n  var interactive = false;\n  var infoGrid = [];\n  var hovered;\n\n  var getInfoGridFromMouseTouchEvent = function getInfoGridFromMouseTouchEvent(evt) {\n    var canvas = evt.currentTarget;\n    var rect = canvas.getBoundingClientRect();\n    var clientX;\n    var clientY;\n    /** Detect if touches are available */\n\n    if (evt.touches) {\n      clientX = evt.touches[0].clientX;\n      clientY = evt.touches[0].clientY;\n    } else {\n      clientX = evt.clientX;\n      clientY = evt.clientY;\n    }\n\n    var eventX = clientX - rect.left;\n    var eventY = clientY - rect.top;\n    var x = Math.floor(eventX * (canvas.width / rect.width || 1) / g);\n    var y = Math.floor(eventY * (canvas.height / rect.height || 1) / g);\n    return infoGrid[x][y];\n  };\n\n  var wordcloudhover = function wordcloudhover(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n\n    if (hovered === info) {\n      return;\n    }\n\n    hovered = info;\n\n    if (!info) {\n      settings.hover(undefined, undefined, evt);\n      return;\n    }\n\n    settings.hover(info.item, info.dimension, evt);\n  };\n\n  var wordcloudclick = function wordcloudclick(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n\n    if (!info) {\n      return;\n    }\n\n    settings.click(info.item, info.dimension, evt);\n    evt.preventDefault();\n  };\n  /* Get points on the grid for a given radius away from the center */\n\n\n  var pointsAtRadius = [];\n\n  var getPointsAtRadius = function getPointsAtRadius(radius) {\n    if (pointsAtRadius[radius]) {\n      return pointsAtRadius[radius];\n    } // Look for these number of points on each radius\n\n\n    var T = radius * 8; // Getting all the points at this radius\n\n    var t = T;\n    var points = [];\n\n    if (radius === 0) {\n      points.push([center[0], center[1], 0]);\n    }\n\n    while (t--) {\n      // distort the radius to put the cloud in shape\n      var rx = 1;\n\n      if (settings.shape !== 'circle') {\n        rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n      } // Push [x, y, t]; t is used solely for getTextColor()\n\n\n      points.push([center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI), center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) * settings.ellipticity, t / T * 2 * Math.PI]);\n    }\n\n    pointsAtRadius[radius] = points;\n    return points;\n  };\n  /* Return true if we had spent too much time */\n\n\n  var exceedTime = function exceedTime() {\n    return settings.abortThreshold > 0 && new Date().getTime() - escapeTime > settings.abortThreshold;\n  };\n  /* Get the deg of rotation according to settings, and luck. */\n\n\n  var getRotateDeg = function getRotateDeg() {\n    if (settings.rotateRatio === 0) {\n      return 0;\n    }\n\n    if (Math.random() > settings.rotateRatio) {\n      return 0;\n    }\n\n    if (rotationRange === 0) {\n      return minRotation;\n    }\n\n    return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n  };\n\n  var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n    // calculate the acutal font size\n    // fontSize === 0 means weightFactor function wants the text skipped,\n    // and size < minSize means we cannot draw the text.\n    var debug = false;\n    var fontSize = settings.weightFactor(weight);\n\n    if (fontSize <= settings.minSize) {\n      return false;\n    } // Scale factor here is to make sure fillText is not limited by\n    // the minium font size set by browser.\n    // It will always be 1 or 2n.\n\n\n    var mu = 1;\n\n    if (fontSize < minFontSize) {\n      mu = function calculateScaleFactor() {\n        var mu = 2;\n\n        while (mu * fontSize < minFontSize) {\n          mu += 2;\n        }\n\n        return mu;\n      }();\n    }\n\n    var fcanvas = document.createElement('canvas');\n    var fctx = fcanvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    fctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily; // Estimate the dimension of the text with measureText().\n\n    var fw = fctx.measureText(word).width / mu;\n    var fh = Math.max(fontSize * mu, fctx.measureText('m').width, fctx.measureText(\"\\uFF37\").width) / mu; // Create a boundary box that is larger than our estimates,\n    // so text don't get cut of (it sill might)\n\n    var boxWidth = fw + fh * 2;\n    var boxHeight = fh * 3;\n    var fgw = Math.ceil(boxWidth / g);\n    var fgh = Math.ceil(boxHeight / g);\n    boxWidth = fgw * g;\n    boxHeight = fgh * g; // Calculate the proper offsets to make the text centered at\n    // the preferred position.\n    // This is simply half of the width.\n\n    var fillTextOffsetX = -fw / 2; // Instead of moving the box to the exact middle of the preferred\n    // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n    // vertical centered.\n\n    var fillTextOffsetY = -fh * 0.4; // Calculate the actual dimension of the canvas, considering the rotation.\n\n    var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) + boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n    var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) + boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n    var width = cgw * g;\n    var height = cgh * g;\n    fcanvas.setAttribute('width', width);\n    fcanvas.setAttribute('height', height);\n\n    if (debug) {\n      // Attach fcanvas to the DOM\n      document.body.appendChild(fcanvas); // Save it's state so that we could restore and draw the grid correctly.\n\n      fctx.save();\n    } // Scale the canvas with |mu|.\n\n\n    fctx.scale(1 / mu, 1 / mu);\n    fctx.translate(width * mu / 2, height * mu / 2);\n    fctx.rotate(-rotateDeg); // Once the width/height is set, ctx info will be reset.\n    // Set it again here.\n\n    fctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily; // Fill the text into the fcanvas.\n    // XXX: We cannot because textBaseline = 'top' here because\n    // Firefox and Chrome uses different default line-height for canvas.\n    // Please read https://bugzil.la/737852#c6.\n    // Here, we use textBaseline = 'middle' and draw the text at exactly\n    // 0.5 * fontSize lower.\n\n    fctx.fillStyle = '#000';\n    fctx.textBaseline = 'middle';\n    fctx.fillText(word, fillTextOffsetX * mu, (fillTextOffsetY + fontSize * 0.5) * mu); // Get the pixels of the text\n\n    var imageData = fctx.getImageData(0, 0, width, height).data;\n\n    if (exceedTime()) {\n      return false;\n    }\n\n    if (debug) {\n      // Draw the box of the original estimation\n      fctx.strokeRect(fillTextOffsetX * mu, fillTextOffsetY, fw * mu, fh * mu);\n      fctx.restore();\n    } // Read the pixels and save the information to the occupied array\n\n\n    var occupied = [];\n    var gx = cgw,\n        gy,\n        x,\n        y;\n    var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n\n    while (gx--) {\n      gy = cgh;\n\n      while (gy--) {\n        y = g;\n\n        singleGridLoop: {\n          while (y--) {\n            x = g;\n\n            while (x--) {\n              if (imageData[((gy * g + y) * width + (gx * g + x)) * 4 + 3]) {\n                occupied.push([gx, gy]);\n\n                if (gx < bounds[3]) {\n                  bounds[3] = gx;\n                }\n\n                if (gx > bounds[1]) {\n                  bounds[1] = gx;\n                }\n\n                if (gy < bounds[0]) {\n                  bounds[0] = gy;\n                }\n\n                if (gy > bounds[2]) {\n                  bounds[2] = gy;\n                }\n\n                if (debug) {\n                  fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                  fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                }\n\n                break singleGridLoop;\n              }\n            }\n          }\n\n          if (debug) {\n            fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n            fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n          }\n        }\n      }\n    }\n\n    if (debug) {\n      fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n      fctx.fillRect(bounds[3] * g, bounds[0] * g, (bounds[1] - bounds[3] + 1) * g, (bounds[2] - bounds[0] + 1) * g);\n    } // Return information needed to create the text on the real canvas\n\n\n    return {\n      mu: mu,\n      occupied: occupied,\n      bounds: bounds,\n      gw: cgw,\n      gh: cgh,\n      fillTextOffsetX: fillTextOffsetX,\n      fillTextOffsetY: fillTextOffsetY,\n      fillTextWidth: fw,\n      fillTextHeight: fh,\n      fontSize: fontSize\n    };\n  };\n  /* Determine if there is room available in the given dimension */\n\n\n  var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n    // Go through the occupied points,\n    // return false if the space is not available.\n    var i = occupied.length;\n\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        if (!settings.drawOutOfBound) {\n          return false;\n        }\n\n        continue;\n      }\n\n      if (!grid[px][py]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /* Actually draw the text on the grid */\n\n\n  var drawText = function drawText(gx, gy, info, word, weight, distance, theta, rotateDeg, attributes) {\n    var fontSize = info.fontSize;\n    var color;\n\n    if (getTextColor) {\n      color = getTextColor(word, weight, fontSize, distance, theta);\n    } else {\n      color = settings.color;\n    }\n\n    var classes;\n\n    if (getTextClasses) {\n      classes = getTextClasses(word, weight, fontSize, distance, theta);\n    } else {\n      classes = settings.classes;\n    }\n\n    var dimension;\n    var bounds = info.bounds;\n    dimension = {\n      x: (gx + bounds[3]) * g,\n      y: (gy + bounds[0]) * g,\n      w: (bounds[1] - bounds[3] + 1) * g,\n      h: (bounds[2] - bounds[0] + 1) * g\n    };\n    elements.forEach(function (el) {\n      if (el.getContext) {\n        var ctx = el.getContext('2d');\n        var mu = info.mu; // Save the current state before messing it\n\n        ctx.save();\n        ctx.scale(1 / mu, 1 / mu);\n        ctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n        ctx.fillStyle = color; // Translate the canvas position to the origin coordinate of where\n        // the text should be put.\n\n        ctx.translate((gx + info.gw / 2) * g * mu, (gy + info.gh / 2) * g * mu);\n\n        if (rotateDeg !== 0) {\n          ctx.rotate(-rotateDeg);\n        } // Finally, fill the text.\n        // XXX: We cannot because textBaseline = 'top' here because\n        // Firefox and Chrome uses different default line-height for canvas.\n        // Please read https://bugzil.la/737852#c6.\n        // Here, we use textBaseline = 'middle' and draw the text at exactly\n        // 0.5 * fontSize lower.\n\n\n        ctx.textBaseline = 'middle';\n        ctx.fillText(word, info.fillTextOffsetX * mu, (info.fillTextOffsetY + fontSize * 0.5) * mu); // The below box is always matches how <span>s are positioned\n\n        /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n          info.fillTextWidth, info.fillTextHeight); */\n        // Restore the state.\n\n        ctx.restore();\n      } else {\n        // drawText on DIV element\n        var span = document.createElement('span');\n        var transformRule = '';\n        transformRule = 'rotate(' + -rotateDeg / Math.PI * 180 + 'deg) ';\n\n        if (info.mu !== 1) {\n          transformRule += 'translateX(-' + info.fillTextWidth / 4 + 'px) ' + 'scale(' + 1 / info.mu + ')';\n        }\n\n        var styleRules = {\n          'position': 'absolute',\n          'display': 'block',\n          'font': settings.fontWeight + ' ' + fontSize * info.mu + 'px ' + settings.fontFamily,\n          'left': (gx + info.gw / 2) * g + info.fillTextOffsetX + 'px',\n          'top': (gy + info.gh / 2) * g + info.fillTextOffsetY + 'px',\n          'width': info.fillTextWidth + 'px',\n          'height': info.fillTextHeight + 'px',\n          'lineHeight': fontSize + 'px',\n          'whiteSpace': 'nowrap',\n          'transform': transformRule,\n          'webkitTransform': transformRule,\n          'msTransform': transformRule,\n          'transformOrigin': '50% 40%',\n          'webkitTransformOrigin': '50% 40%',\n          'msTransformOrigin': '50% 40%'\n        };\n\n        if (color) {\n          styleRules.color = color;\n        }\n\n        span.textContent = word;\n\n        for (var cssProp in styleRules) {\n          span.style[cssProp] = styleRules[cssProp];\n        }\n\n        if (attributes) {\n          for (var attribute in attributes) {\n            span.setAttribute(attribute, attributes[attribute]);\n          }\n        }\n\n        if (classes) {\n          span.className += classes;\n        }\n\n        el.appendChild(span);\n      }\n    });\n  };\n  /* Help function to updateGrid */\n\n\n  var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n    if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n      return;\n    }\n\n    grid[x][y] = false;\n\n    if (drawMask) {\n      var ctx = elements[0].getContext('2d');\n      ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n    }\n\n    if (interactive) {\n      infoGrid[x][y] = {\n        item: item,\n        dimension: dimension\n      };\n    }\n  };\n  /* Update the filling information of the given space with occupied points.\n     Draw the mask on the canvas if necessary. */\n\n\n  var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n    var occupied = info.occupied;\n    var drawMask = settings.drawMask;\n    var ctx;\n\n    if (drawMask) {\n      ctx = elements[0].getContext('2d');\n      ctx.save();\n      ctx.fillStyle = settings.maskColor;\n    }\n\n    var dimension;\n\n    if (interactive) {\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n    }\n\n    var i = occupied.length;\n\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        continue;\n      }\n\n      fillGridAt(px, py, drawMask, dimension, item);\n    }\n\n    if (drawMask) {\n      ctx.restore();\n    }\n  };\n  /* putWord() processes each item on the list,\n     calculate it's size and determine it's position, and actually\n     put it on the canvas. */\n\n\n  var putWord = function putWord(item) {\n    var word, weight, attributes;\n\n    if (Array.isArray(item)) {\n      word = item[0];\n      weight = item[1];\n    } else {\n      word = item.word;\n      weight = item.weight;\n      attributes = item.attributes;\n    }\n\n    var rotateDeg = getRotateDeg(); // get info needed to put the text onto the canvas\n\n    var info = getTextInfo(word, weight, rotateDeg); // not getting the info means we shouldn't be drawing this one.\n\n    if (!info) {\n      return false;\n    }\n\n    if (exceedTime()) {\n      return false;\n    } // If drawOutOfBound is set to false,\n    // skip the loop if we have already know the bounding box of\n    // word is larger than the canvas.\n\n\n    if (!settings.drawOutOfBound) {\n      var bounds = info.bounds;\n\n      if (bounds[1] - bounds[3] + 1 > ngx || bounds[2] - bounds[0] + 1 > ngy) {\n        return false;\n      }\n    } // Determine the position to put the text by\n    // start looking for the nearest points\n\n\n    var r = maxRadius + 1;\n\n    var tryToPutWordAtPoint = function tryToPutWordAtPoint(gxy) {\n      var gx = Math.floor(gxy[0] - info.gw / 2);\n      var gy = Math.floor(gxy[1] - info.gh / 2);\n      var gw = info.gw;\n      var gh = info.gh; // If we cannot fit the text at this position, return false\n      // and go to the next position.\n\n      if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n        return false;\n      } // Actually put the text on the canvas\n\n\n      drawText(gx, gy, info, word, weight, maxRadius - r, gxy[2], rotateDeg, attributes); // Mark the spaces on the grid as filled\n\n      updateGrid(gx, gy, gw, gh, info, item);\n      return {\n        gx: gx,\n        gy: gy,\n        rot: rotateDeg,\n        info: info\n      };\n    };\n\n    while (r--) {\n      var points = getPointsAtRadius(maxRadius - r);\n\n      if (settings.shuffle) {\n        points = [].concat(points);\n        shuffleArray(points);\n      } // Try to fit the words by looking at each point.\n      // array.some() will stop and return true\n      // when putWordAtPoint() returns true.\n\n\n      for (var i = 0; i < points.length; i++) {\n        var res = tryToPutWordAtPoint(points[i]);\n\n        if (res) {\n          return res;\n        }\n      } // var drawn = points.some(tryToPutWordAtPoint);\n      // if (drawn) {\n      //   // leave putWord() and return true\n      //   return true;\n      // }\n\n    } // we tried all distances but text won't fit, return null\n\n\n    return null;\n  };\n  /* Send DOM event to all elements. Will stop sending event and return\n     if the previous one is canceled (for cancelable events). */\n\n\n  var sendEvent = function sendEvent(type, cancelable, detail) {\n    if (cancelable) {\n      return !elements.some(function (el) {\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(type, true, cancelable, detail || {});\n        return !el.dispatchEvent(evt);\n      }, this);\n    } else {\n      elements.forEach(function (el) {\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(type, true, cancelable, detail || {});\n        el.dispatchEvent(evt);\n      }, this);\n    }\n  };\n  /* Start drawing on a canvas */\n\n\n  var start = function start() {\n    // For dimensions, clearCanvas etc.,\n    // we only care about the first element.\n    var canvas = elements[0];\n\n    if (canvas.getContext) {\n      ngx = Math.ceil(canvas.width / g);\n      ngy = Math.ceil(canvas.height / g);\n    } else {\n      var rect = canvas.getBoundingClientRect();\n      ngx = Math.ceil(rect.width / g);\n      ngy = Math.ceil(rect.height / g);\n    } // Sending a wordcloudstart event which cause the previous loop to stop.\n    // Do nothing if the event is canceled.\n\n\n    if (!sendEvent('wordcloudstart', true)) {\n      return;\n    } // Determine the center of the word cloud\n\n\n    center = settings.origin ? [settings.origin[0] / g, settings.origin[1] / g] : [ngx / 2, ngy / 2]; // Maxium radius to look for space\n\n    maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n    /* Clear the canvas only if the clearCanvas is set,\n       if not, update the grid to the current canvas state */\n\n    grid = [];\n    var gx, gy, i;\n\n    if (!canvas.getContext || settings.clearCanvas) {\n      elements.forEach(function (el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          ctx.fillStyle = settings.backgroundColor;\n          ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n        } else {\n          el.textContent = '';\n          el.style.backgroundColor = settings.backgroundColor;\n          el.style.position = 'relative';\n        }\n      });\n      /* fill the grid with empty state */\n\n      gx = ngx;\n\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n\n        while (gy--) {\n          grid[gx][gy] = true;\n        }\n      }\n    } else {\n      /* Determine bgPixel by creating\n         another canvas and fill the specified background color. */\n      var bctx = document.createElement('canvas').getContext('2d');\n      bctx.fillStyle = settings.backgroundColor;\n      bctx.fillRect(0, 0, 1, 1);\n      var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n      /* Read back the pixels of the canvas we got to tell which part of the\n         canvas is empty.\n         (no clearCanvas only works with a canvas, not divs) */\n\n      var imageData = canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n      gx = ngx;\n      var x, y;\n\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n\n        while (gy--) {\n          y = g;\n\n          singleGridLoop: while (y--) {\n            x = g;\n\n            while (x--) {\n              i = 4;\n\n              while (i--) {\n                if (imageData[((gy * g + y) * ngx * g + (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                  grid[gx][gy] = false;\n                  break singleGridLoop;\n                }\n              }\n            }\n          }\n\n          if (grid[gx][gy] !== false) {\n            grid[gx][gy] = true;\n          }\n        }\n      }\n\n      imageData = bctx = bgPixel = undefined;\n    } // fill the infoGrid with empty state if we need it\n\n\n    if (settings.hover || settings.click) {\n      interactive = true;\n      /* fill the grid with empty state */\n\n      gx = ngx + 1;\n\n      while (gx--) {\n        infoGrid[gx] = [];\n      }\n\n      if (settings.hover) {\n        canvas.addEventListener('mousemove', wordcloudhover);\n      }\n\n      if (settings.click) {\n        canvas.addEventListener('click', wordcloudclick);\n        canvas.addEventListener('touchstart', wordcloudclick);\n        canvas.addEventListener('touchend', function (e) {\n          e.preventDefault();\n        });\n        canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n      }\n\n      canvas.addEventListener('wordcloudstart', function stopInteraction() {\n        canvas.removeEventListener('wordcloudstart', stopInteraction);\n        canvas.removeEventListener('mousemove', wordcloudhover);\n        canvas.removeEventListener('click', wordcloudclick);\n        hovered = undefined;\n      });\n    }\n\n    i = 0;\n    var loopingFunction, stoppingFunction;\n    var layouting = true;\n\n    if (!settings.layoutAnimation) {\n      loopingFunction = function loopingFunction(cb) {\n        cb();\n      };\n\n      stoppingFunction = function stoppingFunction() {\n        layouting = false;\n      };\n    } else if (settings.wait !== 0) {\n      loopingFunction = window.setTimeout;\n      stoppingFunction = window.clearTimeout;\n    } else {\n      loopingFunction = window.setImmediate;\n      stoppingFunction = window.clearImmediate;\n    }\n\n    var addEventListener = function addEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.addEventListener(type, listener);\n      }, this);\n    };\n\n    var removeEventListener = function removeEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.removeEventListener(type, listener);\n      }, this);\n    };\n\n    var anotherWordCloudStart = function anotherWordCloudStart() {\n      removeEventListener('wordcloudstart', anotherWordCloudStart);\n      stoppingFunction(timer);\n    };\n\n    addEventListener('wordcloudstart', anotherWordCloudStart); // At least wait the following code before call the first iteration.\n\n    var timer = (settings.layoutAnimation ? loopingFunction : setTimeout)(function loop() {\n      if (!layouting) {\n        return;\n      }\n\n      if (i >= settings.list.length) {\n        stoppingFunction(timer);\n        sendEvent('wordcloudstop', false);\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        return;\n      }\n\n      escapeTime = new Date().getTime();\n      var drawn = putWord(settings.list[i]);\n      var canceled = !sendEvent('wordclouddrawn', true, {\n        item: settings.list[i],\n        drawn: drawn\n      });\n\n      if (exceedTime() || canceled) {\n        stoppingFunction(timer);\n        settings.abort();\n        sendEvent('wordcloudabort', false);\n        sendEvent('wordcloudstop', false);\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        return;\n      }\n\n      i++;\n      timer = loopingFunction(loop, settings.wait);\n    }, settings.wait);\n  }; // All set, start the drawing\n\n\n  start();\n};\n\nWordCloud.isSupported = isSupported;\nWordCloud.minFontSize = minFontSize;\nexport default WordCloud;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-wordcloud/src/layout.js"],"names":["window","setImmediate","setupSetImmediate","msSetImmediate","webkitSetImmediate","mozSetImmediate","oSetImmediate","setupSetZeroTimeout","postMessage","addEventListener","callbacks","undefined","message","setZeroTimeout","callback","id","length","push","toString","setZeroTimeoutMessage","evt","data","substr","stopImmediatePropagation","parseInt","clearImmediate","clearZeroTimeout","setImmediateFallback","fn","setTimeout","setupClearImmediate","msClearImmediate","webkitClearImmediate","mozClearImmediate","oClearImmediate","clearImmediateFallback","timer","clearTimeout","isSupported","canvas","document","createElement","getContext","ctx","getImageData","fillText","Array","prototype","some","minFontSize","getMinFontSize","size","hanWidth","mWidth","font","measureText","width","shuffleArray","arr","j","x","i","Math","floor","random","WordCloud","elements","options","isArray","forEach","el","getElementById","tagName","appendChild","settings","list","fontFamily","fontWeight","color","minSize","weightFactor","clearCanvas","backgroundColor","gridSize","drawOutOfBound","origin","drawMask","maskColor","maskGapWidth","layoutAnimation","wait","abortThreshold","abort","noop","minRotation","PI","maxRotation","rotationStep","shuffle","rotateRatio","shape","ellipticity","classes","hover","click","key","factor","pt","shapeCardioid","theta","sin","shapeSquare","thetaPrime","cos","shapeTriangle","sqrt","shapePentagon","shapeStar","max","g","maskRectWidth","rotationRange","abs","min","grid","ngx","ngy","center","maxRadius","escapeTime","getTextColor","random_hsl_color","toFixed","getRandomDarkColor","getRandomLightColor","getTextClasses","interactive","infoGrid","hovered","getInfoGridFromMouseTouchEvent","currentTarget","rect","getBoundingClientRect","clientX","clientY","touches","eventX","left","eventY","top","y","height","wordcloudhover","info","item","dimension","wordcloudclick","preventDefault","pointsAtRadius","getPointsAtRadius","radius","T","t","points","rx","exceedTime","Date","getTime","getRotateDeg","round","getTextInfo","word","weight","rotateDeg","debug","fontSize","mu","calculateScaleFactor","fcanvas","fctx","willReadFrequently","fw","fh","boxWidth","boxHeight","fgw","ceil","fgh","fillTextOffsetX","fillTextOffsetY","cgh","cgw","setAttribute","body","save","scale","translate","rotate","fillStyle","textBaseline","imageData","strokeRect","restore","occupied","gx","gy","bounds","singleGridLoop","fillRect","gw","gh","fillTextWidth","fillTextHeight","canFitText","px","py","drawText","distance","attributes","w","h","span","transformRule","styleRules","textContent","cssProp","style","attribute","className","fillGridAt","updateGrid","putWord","r","tryToPutWordAtPoint","gxy","rot","concat","res","sendEvent","type","cancelable","detail","createEvent","initCustomEvent","dispatchEvent","start","clearRect","position","bctx","bgPixel","e","webkitTapHighlightColor","stopInteraction","removeEventListener","loopingFunction","stoppingFunction","layouting","cb","listener","anotherWordCloudStart","loop","drawn","canceled"],"mappings":"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","sourcesContent":["/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return window.msSetImmediate ||\n    window.webkitSetImmediate ||\n    window.mozSetImmediate ||\n    window.oSetImmediate ||\n    (function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' ||\n            evt.data.substr(0, message.length) !== message/* ||\n            evt.source !== window */) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    })() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return window.msClearImmediate ||\n    window.webkitClearImmediate ||\n    window.mozClearImmediate ||\n    window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  })();\n}\n\n  // Check if WordCloud can run on this browser\n  var isSupported = (function isSupported() {\n    var canvas = document.createElement('canvas');\n    if (!canvas || !canvas.getContext) {\n      return false;\n    }\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx.getImageData) {\n      return false;\n    }\n    if (!ctx.fillText) {\n      return false;\n    }\n\n    if (!Array.prototype.some) {\n      return false;\n    }\n    if (!Array.prototype.push) {\n      return false;\n    }\n\n    return true;\n  }());\n\n  // Find out if the browser impose minium font size by\n  // drawing small texts on a canvas and measure it's width.\n  var minFontSize = (function getMinFontSize() {\n    if (!isSupported) {\n      return;\n    }\n\n    var ctx = document.createElement('canvas').getContext('2d');\n\n    // start from 20\n    var size = 20;\n\n    // two sizes to measure\n    var hanWidth, mWidth;\n\n    while (size) {\n      ctx.font = size.toString(10) + 'px sans-serif';\n      if ((ctx.measureText('\\uFF37').width === hanWidth) &&\n          (ctx.measureText('m').width) === mWidth) {\n        return (size + 1);\n      }\n\n      hanWidth = ctx.measureText('\\uFF37').width;\n      mWidth = ctx.measureText('m').width;\n\n      size--;\n    }\n\n    return 0;\n  })();\n\n  // Based on http://jsfromhell.com/array/shuffle\n  var shuffleArray = function shuffleArray(arr) {\n    for (var j, x, i = arr.length; i;\n      j = Math.floor(Math.random() * i),\n      x = arr[--i], arr[i] = arr[j],\n      arr[j] = x) {}\n    return arr;\n  };\n\n  var WordCloud = function WordCloud(elements, options) {\n    if (!isSupported) {\n      return;\n    }\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    elements.forEach(function(el, i) {\n      if (typeof el === 'string') {\n        elements[i] = document.getElementById(el);\n        if (!elements[i]) {\n          throw 'The element id specified is not found.';\n        }\n      } else if (!el.tagName && !el.appendChild) {\n        throw 'You must pass valid HTML elements, or ID of the element.';\n      }\n    });\n\n    /* Default values to be overwritten by options object */\n    var settings = {\n      list: [],\n      fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\n                  '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n      fontWeight: 'normal',\n      color: 'random-dark',\n      minSize: 0, // 0 to disable\n      weightFactor: 1,\n      clearCanvas: true,\n      backgroundColor: '#fff',  // opaque white = rgba(255, 255, 255, 1)\n\n      gridSize: 8,\n      drawOutOfBound: false,\n      origin: null,\n\n      drawMask: false,\n      maskColor: 'rgba(255,0,0,0.3)',\n      maskGapWidth: 0.3,\n\n      layoutAnimation: true,\n\n      wait: 0,\n      abortThreshold: 0, // disabled\n      abort: function noop() {},\n\n      minRotation: - Math.PI / 2,\n      maxRotation: Math.PI / 2,\n      rotationStep: 0.1,\n\n      shuffle: true,\n      rotateRatio: 0.1,\n\n      shape: 'circle',\n      ellipticity: 0.65,\n\n      classes: null,\n\n      hover: null,\n      click: null\n    };\n\n    if (options) {\n      for (var key in options) {\n        if (key in settings) {\n          settings[key] = options[key];\n        }\n      }\n    }\n\n    /* Convert weightFactor into a function */\n    if (typeof settings.weightFactor !== 'function') {\n      var factor = settings.weightFactor;\n      settings.weightFactor = function weightFactor(pt) {\n        return pt * factor; //in px\n      };\n    }\n\n    /* Convert shape into a function */\n    if (typeof settings.shape !== 'function') {\n      switch (settings.shape) {\n        case 'circle':\n        /* falls through */\n        default:\n          // 'circle' is the default and a shortcut in the code loop.\n          settings.shape = 'circle';\n          break;\n\n        case 'cardioid':\n          settings.shape = function shapeCardioid(theta) {\n            return 1 - Math.sin(theta);\n          };\n          break;\n\n        /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n        case 'diamond':\n        case 'square':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n          // +0+..+2*PI\n          settings.shape = function shapeSquare(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 4);\n            return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle-forward':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n          // %29%29%2C+t+%3D+0+..+2*PI\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle':\n        case 'triangle-upright':\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'pentagon':\n          settings.shape = function shapePentagon(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n            return 1 / (Math.cos(thetaPrime) +\n                        0.726543 * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'star':\n          settings.shape = function shapeStar(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n            if ((theta + 0.955) % (2 * Math.PI / 5) - (2 * Math.PI / 10) >= 0) {\n              return 1 / (Math.cos((2 * Math.PI / 10) - thetaPrime) +\n                          3.07768 * Math.sin((2 * Math.PI / 10) - thetaPrime));\n            } else {\n              return 1 / (Math.cos(thetaPrime) +\n                          3.07768 * Math.sin(thetaPrime));\n            }\n          };\n          break;\n      }\n    }\n\n    /* Make sure gridSize is a whole number and is not smaller than 4px */\n    settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n    /* shorthand */\n    var g = settings.gridSize;\n    var maskRectWidth = g - settings.maskGapWidth;\n\n    /* normalize rotation settings */\n    var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n    var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n    var rotationStep = settings.rotationStep;\n\n    /* information/object available to all functions, set when start() */\n    var grid, // 2d array containing filling information\n      ngx, ngy, // width and height of the grid\n      center, // position of the center of the cloud\n      maxRadius;\n\n    /* timestamp for measuring each putWord() action */\n    var escapeTime;\n\n    /* function for getting the color of the text */\n    var getTextColor;\n    function random_hsl_color(min, max) {\n      return 'hsl(' +\n        (Math.random() * 360).toFixed() + ',' +\n        (Math.random() * 30 + 70).toFixed() + '%,' +\n        (Math.random() * (max - min) + min).toFixed() + '%)';\n    }\n    switch (settings.color) {\n      case 'random-dark':\n        getTextColor = function getRandomDarkColor() {\n          return random_hsl_color(10, 50);\n        };\n        break;\n\n      case 'random-light':\n        getTextColor = function getRandomLightColor() {\n          return random_hsl_color(50, 90);\n        };\n        break;\n\n      default:\n        if (typeof settings.color === 'function') {\n          getTextColor = settings.color;\n        }\n        break;\n    }\n\n    /* function for getting the classes of the text */\n    var getTextClasses = null;\n    if (typeof settings.classes === 'function') {\n      getTextClasses = settings.classes;\n    }\n\n    /* Interactive */\n    var interactive = false;\n    var infoGrid = [];\n    var hovered;\n\n    var getInfoGridFromMouseTouchEvent =\n    function getInfoGridFromMouseTouchEvent(evt) {\n      var canvas = evt.currentTarget;\n      var rect = canvas.getBoundingClientRect();\n      var clientX;\n      var clientY;\n      /** Detect if touches are available */\n      if (evt.touches) {\n        clientX = evt.touches[0].clientX;\n        clientY = evt.touches[0].clientY;\n      } else {\n        clientX = evt.clientX;\n        clientY = evt.clientY;\n      }\n      var eventX = clientX - rect.left;\n      var eventY = clientY - rect.top;\n\n      var x = Math.floor(eventX * ((canvas.width / rect.width) || 1) / g);\n      var y = Math.floor(eventY * ((canvas.height / rect.height) || 1) / g);\n\n      return infoGrid[x][y];\n    };\n\n    var wordcloudhover = function wordcloudhover(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n\n      if (hovered === info) {\n        return;\n      }\n\n      hovered = info;\n      if (!info) {\n        settings.hover(undefined, undefined, evt);\n\n        return;\n      }\n\n      settings.hover(info.item, info.dimension, evt);\n\n    };\n\n    var wordcloudclick = function wordcloudclick(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n      if (!info) {\n        return;\n      }\n\n      settings.click(info.item, info.dimension, evt);\n      evt.preventDefault();\n    };\n\n    /* Get points on the grid for a given radius away from the center */\n    var pointsAtRadius = [];\n    var getPointsAtRadius = function getPointsAtRadius(radius) {\n      if (pointsAtRadius[radius]) {\n        return pointsAtRadius[radius];\n      }\n\n      // Look for these number of points on each radius\n      var T = radius * 8;\n\n      // Getting all the points at this radius\n      var t = T;\n      var points = [];\n\n      if (radius === 0) {\n        points.push([center[0], center[1], 0]);\n      }\n\n      while (t--) {\n        // distort the radius to put the cloud in shape\n        var rx = 1;\n        if (settings.shape !== 'circle') {\n          rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n        }\n\n        // Push [x, y, t]; t is used solely for getTextColor()\n        points.push([\n          center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI),\n          center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) *\n            settings.ellipticity,\n          t / T * 2 * Math.PI]);\n      }\n\n      pointsAtRadius[radius] = points;\n      return points;\n    };\n\n    /* Return true if we had spent too much time */\n    var exceedTime = function exceedTime() {\n      return ((settings.abortThreshold > 0) &&\n        ((new Date()).getTime() - escapeTime > settings.abortThreshold));\n    };\n\n    /* Get the deg of rotation according to settings, and luck. */\n    var getRotateDeg = function getRotateDeg() {\n      if (settings.rotateRatio === 0) {\n        return 0;\n      }\n\n      if (Math.random() > settings.rotateRatio) {\n        return 0;\n      }\n\n      if (rotationRange === 0) {\n        return minRotation;\n      }\n\n      return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n    };\n\n    var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n      // calculate the acutal font size\n      // fontSize === 0 means weightFactor function wants the text skipped,\n      // and size < minSize means we cannot draw the text.\n      var debug = false;\n      var fontSize = settings.weightFactor(weight);\n      if (fontSize <= settings.minSize) {\n        return false;\n      }\n\n      // Scale factor here is to make sure fillText is not limited by\n      // the minium font size set by browser.\n      // It will always be 1 or 2n.\n      var mu = 1;\n      if (fontSize < minFontSize) {\n        mu = (function calculateScaleFactor() {\n          var mu = 2;\n          while (mu * fontSize < minFontSize) {\n            mu += 2;\n          }\n          return mu;\n        })();\n      }\n\n      var fcanvas = document.createElement('canvas');\n      var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Estimate the dimension of the text with measureText().\n      var fw = fctx.measureText(word).width / mu;\n      var fh = Math.max(fontSize * mu,\n                        fctx.measureText('m').width,\n                        fctx.measureText('\\uFF37').width) / mu;\n\n      // Create a boundary box that is larger than our estimates,\n      // so text don't get cut of (it sill might)\n      var boxWidth = fw + fh * 2;\n      var boxHeight = fh * 3;\n      var fgw = Math.ceil(boxWidth / g);\n      var fgh = Math.ceil(boxHeight / g);\n      boxWidth = fgw * g;\n      boxHeight = fgh * g;\n\n      // Calculate the proper offsets to make the text centered at\n      // the preferred position.\n\n      // This is simply half of the width.\n      var fillTextOffsetX = - fw / 2;\n      // Instead of moving the box to the exact middle of the preferred\n      // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n      // vertical centered.\n      var fillTextOffsetY = - fh * 0.4;\n\n      // Calculate the actual dimension of the canvas, considering the rotation.\n      var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) +\n                           boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n      var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) +\n                           boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n      var width = cgw * g;\n      var height = cgh * g;\n\n      fcanvas.setAttribute('width', width);\n      fcanvas.setAttribute('height', height);\n\n      if (debug) {\n        // Attach fcanvas to the DOM\n        document.body.appendChild(fcanvas);\n        // Save it's state so that we could restore and draw the grid correctly.\n        fctx.save();\n      }\n\n      // Scale the canvas with |mu|.\n      fctx.scale(1 / mu, 1 / mu);\n      fctx.translate(width * mu / 2, height * mu / 2);\n      fctx.rotate(- rotateDeg);\n\n      // Once the width/height is set, ctx info will be reset.\n      // Set it again here.\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Fill the text into the fcanvas.\n      // XXX: We cannot because textBaseline = 'top' here because\n      // Firefox and Chrome uses different default line-height for canvas.\n      // Please read https://bugzil.la/737852#c6.\n      // Here, we use textBaseline = 'middle' and draw the text at exactly\n      // 0.5 * fontSize lower.\n      fctx.fillStyle = '#000';\n      fctx.textBaseline = 'middle';\n      fctx.fillText(word, fillTextOffsetX * mu,\n                    (fillTextOffsetY + fontSize * 0.5) * mu);\n\n      // Get the pixels of the text\n      var imageData = fctx.getImageData(0, 0, width, height).data;\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      if (debug) {\n        // Draw the box of the original estimation\n        fctx.strokeRect(fillTextOffsetX * mu,\n                        fillTextOffsetY, fw * mu, fh * mu);\n        fctx.restore();\n      }\n\n      // Read the pixels and save the information to the occupied array\n      var occupied = [];\n      var gx = cgw, gy, x, y;\n      var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n      while (gx--) {\n        gy = cgh;\n        while (gy--) {\n          y = g;\n          singleGridLoop: {\n            while (y--) {\n              x = g;\n              while (x--) {\n                if (imageData[((gy * g + y) * width +\n                               (gx * g + x)) * 4 + 3]) {\n                  occupied.push([gx, gy]);\n\n                  if (gx < bounds[3]) {\n                    bounds[3] = gx;\n                  }\n                  if (gx > bounds[1]) {\n                    bounds[1] = gx;\n                  }\n                  if (gy < bounds[0]) {\n                    bounds[0] = gy;\n                  }\n                  if (gy > bounds[2]) {\n                    bounds[2] = gy;\n                  }\n\n                  if (debug) {\n                    fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                    fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                  }\n                  break singleGridLoop;\n                }\n              }\n            }\n            if (debug) {\n              fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n              fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n            }\n          }\n        }\n      }\n\n      if (debug) {\n        fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n        fctx.fillRect(bounds[3] * g,\n                      bounds[0] * g,\n                      (bounds[1] - bounds[3] + 1) * g,\n                      (bounds[2] - bounds[0] + 1) * g);\n      }\n\n      // Return information needed to create the text on the real canvas\n      return {\n        mu: mu,\n        occupied: occupied,\n        bounds: bounds,\n        gw: cgw,\n        gh: cgh,\n        fillTextOffsetX: fillTextOffsetX,\n        fillTextOffsetY: fillTextOffsetY,\n        fillTextWidth: fw,\n        fillTextHeight: fh,\n        fontSize: fontSize\n      };\n    };\n\n    /* Determine if there is room available in the given dimension */\n    var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n      // Go through the occupied points,\n      // return false if the space is not available.\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          if (!settings.drawOutOfBound) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!grid[px][py]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /* Actually draw the text on the grid */\n    var drawText = function drawText(gx, gy, info, word, weight,\n                                     distance, theta, rotateDeg, attributes) {\n\n      var fontSize = info.fontSize;\n      var color;\n      if (getTextColor) {\n        color = getTextColor(word, weight, fontSize, distance, theta);\n      } else {\n        color = settings.color;\n      }\n\n      var classes;\n      if (getTextClasses) {\n        classes = getTextClasses(word, weight, fontSize, distance, theta);\n      } else {\n        classes = settings.classes;\n      }\n\n      var dimension;\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n\n      elements.forEach(function(el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          var mu = info.mu;\n\n          // Save the current state before messing it\n          ctx.save();\n          ctx.scale(1 / mu, 1 / mu);\n\n          ctx.font = settings.fontWeight + ' ' +\n                     (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n          ctx.fillStyle = color;\n\n          // Translate the canvas position to the origin coordinate of where\n          // the text should be put.\n          ctx.translate((gx + info.gw / 2) * g * mu,\n                        (gy + info.gh / 2) * g * mu);\n\n          if (rotateDeg !== 0) {\n            ctx.rotate(- rotateDeg);\n          }\n\n          // Finally, fill the text.\n\n          // XXX: We cannot because textBaseline = 'top' here because\n          // Firefox and Chrome uses different default line-height for canvas.\n          // Please read https://bugzil.la/737852#c6.\n          // Here, we use textBaseline = 'middle' and draw the text at exactly\n          // 0.5 * fontSize lower.\n          ctx.textBaseline = 'middle';\n          ctx.fillText(word, info.fillTextOffsetX * mu,\n                             (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n          // The below box is always matches how <span>s are positioned\n          /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n          // Restore the state.\n          ctx.restore();\n        } else {\n          // drawText on DIV element\n          var span = document.createElement('span');\n          var transformRule = '';\n          transformRule = 'rotate(' + (- rotateDeg / Math.PI * 180) + 'deg) ';\n          if (info.mu !== 1) {\n            transformRule +=\n              'translateX(-' + (info.fillTextWidth / 4) + 'px) ' +\n              'scale(' + (1 / info.mu) + ')';\n          }\n          var styleRules = {\n            'position': 'absolute',\n            'display': 'block',\n            'font': settings.fontWeight + ' ' +\n                    (fontSize * info.mu) + 'px ' + settings.fontFamily,\n            'left': ((gx + info.gw / 2) * g + info.fillTextOffsetX) + 'px',\n            'top': ((gy + info.gh / 2) * g + info.fillTextOffsetY) + 'px',\n            'width': info.fillTextWidth + 'px',\n            'height': info.fillTextHeight + 'px',\n            'lineHeight': fontSize + 'px',\n            'whiteSpace': 'nowrap',\n            'transform': transformRule,\n            'webkitTransform': transformRule,\n            'msTransform': transformRule,\n            'transformOrigin': '50% 40%',\n            'webkitTransformOrigin': '50% 40%',\n            'msTransformOrigin': '50% 40%'\n          };\n          if (color) {\n            styleRules.color = color;\n          }\n          span.textContent = word;\n          for (var cssProp in styleRules) {\n            span.style[cssProp] = styleRules[cssProp];\n          }\n          if (attributes) {\n            for (var attribute in attributes) {\n              span.setAttribute(attribute, attributes[attribute]);\n            }\n          }\n          if (classes) {\n            span.className += classes;\n          }\n          el.appendChild(span);\n        }\n      });\n    };\n\n    /* Help function to updateGrid */\n    var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n      if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n        return;\n      }\n\n      grid[x][y] = false;\n\n      if (drawMask) {\n        var ctx = elements[0].getContext('2d');\n        ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n      }\n\n      if (interactive) {\n        infoGrid[x][y] = { item: item, dimension: dimension };\n      }\n    };\n\n    /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n    var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n      var occupied = info.occupied;\n      var drawMask = settings.drawMask;\n      var ctx;\n      if (drawMask) {\n        ctx = elements[0].getContext('2d');\n        ctx.save();\n        ctx.fillStyle = settings.maskColor;\n      }\n\n      var dimension;\n      if (interactive) {\n        var bounds = info.bounds;\n        dimension = {\n          x: (gx + bounds[3]) * g,\n          y: (gy + bounds[0]) * g,\n          w: (bounds[1] - bounds[3] + 1) * g,\n          h: (bounds[2] - bounds[0] + 1) * g\n        };\n      }\n\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          continue;\n        }\n\n        fillGridAt(px, py, drawMask, dimension, item);\n      }\n\n      if (drawMask) {\n        ctx.restore();\n      }\n    };\n\n    /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n    var putWord = function putWord(item) {\n      var word, weight, attributes;\n      if (Array.isArray(item)) {\n        word = item[0];\n        weight = item[1];\n      } else {\n        word = item.word;\n        weight = item.weight;\n        attributes = item.attributes;\n      }\n      var rotateDeg = getRotateDeg();\n\n      // get info needed to put the text onto the canvas\n      var info = getTextInfo(word, weight, rotateDeg);\n\n      // not getting the info means we shouldn't be drawing this one.\n      if (!info) {\n        return false;\n      }\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      // If drawOutOfBound is set to false,\n      // skip the loop if we have already know the bounding box of\n      // word is larger than the canvas.\n      if (!settings.drawOutOfBound) {\n        var bounds = info.bounds;\n        if ((bounds[1] - bounds[3] + 1) > ngx ||\n          (bounds[2] - bounds[0] + 1) > ngy) {\n          return false;\n        }\n      }\n\n      // Determine the position to put the text by\n      // start looking for the nearest points\n      var r = maxRadius + 1;\n\n      var tryToPutWordAtPoint = function(gxy) {\n        var gx = Math.floor(gxy[0] - info.gw / 2);\n        var gy = Math.floor(gxy[1] - info.gh / 2);\n        var gw = info.gw;\n        var gh = info.gh;\n\n        // If we cannot fit the text at this position, return false\n        // and go to the next position.\n        if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n          return false;\n        }\n\n        // Actually put the text on the canvas\n        drawText(gx, gy, info, word, weight,\n                 (maxRadius - r), gxy[2], rotateDeg, attributes);\n\n        // Mark the spaces on the grid as filled\n        updateGrid(gx, gy, gw, gh, info, item);\n\n        return {\n          gx: gx,\n          gy: gy,\n          rot: rotateDeg,\n          info: info\n        };\n      };\n\n      while (r--) {\n        var points = getPointsAtRadius(maxRadius - r);\n\n        if (settings.shuffle) {\n          points = [].concat(points);\n          shuffleArray(points);\n        }\n\n        // Try to fit the words by looking at each point.\n        // array.some() will stop and return true\n        // when putWordAtPoint() returns true.\n        for (var i = 0; i < points.length; i++) {\n          var res = tryToPutWordAtPoint(points[i]);\n          if (res) {\n            return res;\n          }\n        }\n\n        // var drawn = points.some(tryToPutWordAtPoint);\n        // if (drawn) {\n        //   // leave putWord() and return true\n        //   return true;\n        // }\n      }\n      // we tried all distances but text won't fit, return null\n      return null;\n    };\n\n    /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n    var sendEvent = function sendEvent(type, cancelable, detail) {\n      if (cancelable) {\n        return !elements.some(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          return !el.dispatchEvent(evt);\n        }, this);\n      } else {\n        elements.forEach(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          el.dispatchEvent(evt);\n        }, this);\n      }\n    };\n\n    /* Start drawing on a canvas */\n    var start = function start() {\n      // For dimensions, clearCanvas etc.,\n      // we only care about the first element.\n      var canvas = elements[0];\n\n      if (canvas.getContext) {\n        ngx = Math.ceil(canvas.width / g);\n        ngy = Math.ceil(canvas.height / g);\n      } else {\n        var rect = canvas.getBoundingClientRect();\n        ngx = Math.ceil(rect.width / g);\n        ngy = Math.ceil(rect.height / g);\n      }\n\n      // Sending a wordcloudstart event which cause the previous loop to stop.\n      // Do nothing if the event is canceled.\n      if (!sendEvent('wordcloudstart', true)) {\n        return;\n      }\n\n      // Determine the center of the word cloud\n      center = (settings.origin) ?\n        [settings.origin[0]/g, settings.origin[1]/g] :\n        [ngx / 2, ngy / 2];\n\n      // Maxium radius to look for space\n      maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n      /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n      grid = [];\n\n      var gx, gy, i;\n      if (!canvas.getContext || settings.clearCanvas) {\n        elements.forEach(function(el) {\n          if (el.getContext) {\n            var ctx = el.getContext('2d');\n            ctx.fillStyle = settings.backgroundColor;\n            ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n            ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          } else {\n            el.textContent = '';\n            el.style.backgroundColor = settings.backgroundColor;\n            el.style.position = 'relative';\n          }\n        });\n\n        /* fill the grid with empty state */\n        gx = ngx;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            grid[gx][gy] = true;\n          }\n        }\n      } else {\n        /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n        var bctx = document.createElement('canvas').getContext('2d');\n\n        bctx.fillStyle = settings.backgroundColor;\n        bctx.fillRect(0, 0, 1, 1);\n        var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n        /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n        var imageData =\n          canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n\n        gx = ngx;\n        var x, y;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            y = g;\n            singleGridLoop: while (y--) {\n              x = g;\n              while (x--) {\n                i = 4;\n                while (i--) {\n                  if (imageData[((gy * g + y) * ngx * g +\n                                 (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                    grid[gx][gy] = false;\n                    break singleGridLoop;\n                  }\n                }\n              }\n            }\n            if (grid[gx][gy] !== false) {\n              grid[gx][gy] = true;\n            }\n          }\n        }\n\n        imageData = bctx = bgPixel = undefined;\n      }\n\n      // fill the infoGrid with empty state if we need it\n      if (settings.hover || settings.click) {\n\n        interactive = true;\n\n        /* fill the grid with empty state */\n        gx = ngx + 1;\n        while (gx--) {\n          infoGrid[gx] = [];\n        }\n\n        if (settings.hover) {\n          canvas.addEventListener('mousemove', wordcloudhover);\n        }\n\n        if (settings.click) {\n          canvas.addEventListener('click', wordcloudclick);\n          canvas.addEventListener('touchstart', wordcloudclick);\n          canvas.addEventListener('touchend', function (e) {\n            e.preventDefault();\n          });\n          canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n        }\n\n        canvas.addEventListener('wordcloudstart', function stopInteraction() {\n          canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n          canvas.removeEventListener('mousemove', wordcloudhover);\n          canvas.removeEventListener('click', wordcloudclick);\n          hovered = undefined;\n        });\n      }\n\n      i = 0;\n      var loopingFunction, stoppingFunction;\n      var layouting = true;\n      if (!settings.layoutAnimation) {\n        loopingFunction = function (cb) {\n          cb();\n        }\n        stoppingFunction = function () {\n          layouting = false;\n        }\n      }\n      else if (settings.wait !== 0) {\n        loopingFunction = window.setTimeout;\n        stoppingFunction = window.clearTimeout;\n      } else {\n        loopingFunction = window.setImmediate;\n        stoppingFunction = window.clearImmediate;\n      }\n\n      var addEventListener = function addEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.addEventListener(type, listener);\n        }, this);\n      };\n\n      var removeEventListener = function removeEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.removeEventListener(type, listener);\n        }, this);\n      };\n\n      var anotherWordCloudStart = function anotherWordCloudStart() {\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        stoppingFunction(timer);\n      };\n\n      addEventListener('wordcloudstart', anotherWordCloudStart);\n\n      // At least wait the following code before call the first iteration.\n      var timer = (settings.layoutAnimation ? loopingFunction : setTimeout)(function loop() {\n        if (!layouting) {\n          return;\n        }\n        if (i >= settings.list.length) {\n          stoppingFunction(timer);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n\n          return;\n        }\n        escapeTime = (new Date()).getTime();\n        var drawn = putWord(settings.list[i]);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i], drawn: drawn });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer = loopingFunction(loop, settings.wait);\n      }, settings.wait);\n    };\n\n    // All set, start the drawing\n    start();\n  };\n\n  WordCloud.isSupported = isSupported;\n  WordCloud.minFontSize = minFontSize;\n\n  export default WordCloud;"]},"metadata":{},"sourceType":"module"}