{"ast":null,"code":"import Node from './Node';\nimport Shader from './Shader';\nimport lightShader from './shader/source/header/light';\nShader['import'](lightShader);\n/**\n * @constructor clay.Light\n * @extends clay.Node\n */\n\nvar Light = Node.extend(function () {\n  return (\n    /** @lends clay.Light# */\n    {\n      /**\n       * Light RGB color\n       * @type {number[]}\n       */\n      color: [1, 1, 1],\n\n      /**\n       * Light intensity\n       * @type {number}\n       */\n      intensity: 1.0,\n      // Config for shadow map\n\n      /**\n       * If light cast shadow\n       * @type {boolean}\n       */\n      castShadow: true,\n\n      /**\n       * Shadow map size\n       * @type {number}\n       */\n      shadowResolution: 512,\n\n      /**\n       * Light group, shader with same `lightGroup` will be affected\n       *\n       * Only useful in forward rendering\n       * @type {number}\n       */\n      group: 0\n    }\n  );\n},\n/** @lends clay.Light.prototype. */\n{\n  /**\n   * Light type\n   * @type {string}\n   * @memberOf clay.Light#\n   */\n  type: '',\n\n  /**\n   * @return {clay.Light}\n   * @memberOf clay.Light.prototype\n   */\n  clone: function () {\n    var light = Node.prototype.clone.call(this);\n    light.color = Array.prototype.slice.call(this.color);\n    light.intensity = this.intensity;\n    light.castShadow = this.castShadow;\n    light.shadowResolution = this.shadowResolution;\n    return light;\n  }\n});\nexport default Light;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/Light.js"],"names":["Node","Shader","lightShader","Light","extend","color","intensity","castShadow","shadowResolution","group","type","clone","light","prototype","call","Array","slice"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACAD,MAAM,CAAC,QAAD,CAAN,CAAiBC,WAAjB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAGH,IAAI,CAACI,MAAL,CAAY,YAAU;AAC9B;AAAO;AAA0B;AAC7B;AACR;AACA;AACA;AACQC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALsB;;AAO7B;AACR;AACA;AACA;AACQC,MAAAA,SAAS,EAAE,GAXkB;AAa7B;;AACA;AACR;AACA;AACA;AACQC,MAAAA,UAAU,EAAE,IAlBiB;;AAoB7B;AACR;AACA;AACA;AACQC,MAAAA,gBAAgB,EAAE,GAxBW;;AA0B7B;AACR;AACA;AACA;AACA;AACA;AACQC,MAAAA,KAAK,EAAE;AAhCsB;AAAjC;AAkCH,CAnCW;AAoCZ;AACA;AACI;AACJ;AACA;AACA;AACA;AACIC,EAAAA,IAAI,EAAE,EANV;;AAQI;AACJ;AACA;AACA;AACIC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,KAAK,GAAGZ,IAAI,CAACa,SAAL,CAAeF,KAAf,CAAqBG,IAArB,CAA0B,IAA1B,CAAZ;AACAF,IAAAA,KAAK,CAACP,KAAN,GAAcU,KAAK,CAACF,SAAN,CAAgBG,KAAhB,CAAsBF,IAAtB,CAA2B,KAAKT,KAAhC,CAAd;AACAO,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAKA,SAAvB;AACAM,IAAAA,KAAK,CAACL,UAAN,GAAmB,KAAKA,UAAxB;AACAK,IAAAA,KAAK,CAACJ,gBAAN,GAAyB,KAAKA,gBAA9B;AAEA,WAAOI,KAAP;AACH;AApBL,CArCY,CAAZ;AA4DA,eAAeT,KAAf","sourcesContent":["import Node from './Node';\nimport Shader from './Shader';\n\nimport lightShader from './shader/source/header/light';\nShader['import'](lightShader);\n\n/**\n * @constructor clay.Light\n * @extends clay.Node\n */\nvar Light = Node.extend(function(){\n    return /** @lends clay.Light# */ {\n        /**\n         * Light RGB color\n         * @type {number[]}\n         */\n        color: [1, 1, 1],\n\n        /**\n         * Light intensity\n         * @type {number}\n         */\n        intensity: 1.0,\n\n        // Config for shadow map\n        /**\n         * If light cast shadow\n         * @type {boolean}\n         */\n        castShadow: true,\n\n        /**\n         * Shadow map size\n         * @type {number}\n         */\n        shadowResolution: 512,\n\n        /**\n         * Light group, shader with same `lightGroup` will be affected\n         *\n         * Only useful in forward rendering\n         * @type {number}\n         */\n        group: 0\n    };\n},\n/** @lends clay.Light.prototype. */\n{\n    /**\n     * Light type\n     * @type {string}\n     * @memberOf clay.Light#\n     */\n    type: '',\n\n    /**\n     * @return {clay.Light}\n     * @memberOf clay.Light.prototype\n     */\n    clone: function() {\n        var light = Node.prototype.clone.call(this);\n        light.color = Array.prototype.slice.call(this.color);\n        light.intensity = this.intensity;\n        light.castShadow = this.castShadow;\n        light.shadowResolution = this.shadowResolution;\n\n        return light;\n    }\n});\n\nexport default Light;\n"]},"metadata":{},"sourceType":"module"}