{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport QuadsGeometry from '../../util/geometry/Quads';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction updateFacePlane(node, plane, otherAxis, dir) {\n  var coord = [0, 0, 0];\n  var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();\n  coord[dimIndicesMap[otherAxis.dim]] = distance;\n  node.position.setArray(coord);\n  node.rotation.identity(); // Negative distance because on the opposite of normal direction.\n\n  plane.distance = -Math.abs(distance);\n  plane.normal.set(0, 0, 0);\n\n  if (otherAxis.dim === 'x') {\n    node.rotation.rotateY(dir * Math.PI / 2);\n    plane.normal.x = -dir;\n  } else if (otherAxis.dim === 'z') {\n    node.rotation.rotateX(-dir * Math.PI / 2);\n    plane.normal.y = -dir;\n  } else {\n    if (dir > 0) {\n      node.rotation.rotateY(Math.PI);\n    }\n\n    plane.normal.z = -dir;\n  }\n}\n\nfunction Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {\n  this.rootNode = new graphicGL.Node();\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 1\n  });\n  var quadsMesh = new graphicGL.Mesh({\n    geometry: new QuadsGeometry(),\n    material: quadsMaterial,\n    castShadow: false,\n    culling: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 0\n  }); // Quads are behind lines.\n\n  this.rootNode.add(quadsMesh);\n  this.rootNode.add(linesMesh);\n  this.faceInfo = faceInfo;\n  this.plane = new graphicGL.Plane();\n  this.linesMesh = linesMesh;\n  this.quadsMesh = quadsMesh;\n}\n\nGrid3DFace.prototype.update = function (grid3DModel, ecModel, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axes = [cartesian.getAxis(this.faceInfo[0]), cartesian.getAxis(this.faceInfo[1])];\n  var lineGeometry = this.linesMesh.geometry;\n  var quadsGeometry = this.quadsMesh.geometry;\n  lineGeometry.convertToDynamicArray(true);\n  quadsGeometry.convertToDynamicArray(true);\n\n  this._updateSplitLines(lineGeometry, axes, grid3DModel, api);\n\n  this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);\n\n  lineGeometry.convertToTypedArray();\n  quadsGeometry.convertToTypedArray();\n  var otherAxis = cartesian.getAxis(this.faceInfo[2]);\n  updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);\n};\n\nGrid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {\n  var dpr = api.getDevicePixelRatio();\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine')); // Render splitLines\n\n    if (splitLineModel.get('show')) {\n      var lineStyleModel = splitLineModel.getModel('lineStyle');\n      var lineColors = lineStyleModel.get('color');\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n      lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitLineModel\n      });\n      var count = 0;\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);\n        lineColor[3] *= opacity;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        geometry.addLine(p0, p1, lineColor, lineWidth * dpr);\n        count++;\n      }\n    }\n  });\n};\n\nGrid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea')); // Render splitAreas\n\n    if (splitAreaModel.get('show')) {\n      var areaStyleModel = splitAreaModel.getModel('areaStyle');\n      var colors = areaStyleModel.get('color');\n      var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);\n      colors = echarts.util.isArray(colors) ? colors : [colors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitAreaModel,\n        clamp: true\n      });\n      var count = 0;\n      var prevP0 = [0, 0, 0];\n      var prevP1 = [0, 0, 0]; // 0 - x, 1 - y\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n\n        if (i === 0) {\n          prevP0 = p0;\n          prevP1 = p1;\n          continue;\n        }\n\n        var color = graphicGL.parseColor(colors[count % colors.length]);\n        color[3] *= opacity;\n        geometry.addQuad([prevP0, p0, p1, prevP1], color);\n        prevP0 = p0;\n        prevP1 = p1;\n        count++;\n      }\n    }\n  });\n};\n\nexport default Grid3DFace;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/component/grid3D/Grid3DFace.js"],"names":["echarts","graphicGL","retrieve","Lines3DGeometry","QuadsGeometry","firstNotNull","dimIndicesMap","x","y","z","updateFacePlane","node","plane","otherAxis","dir","coord","distance","getExtentMin","getExtentMax","dim","position","setArray","rotation","identity","Math","abs","normal","set","rotateY","PI","rotateX","Grid3DFace","faceInfo","linesMaterial","quadsMaterial","rootNode","Node","linesMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","$ignorePicking","renderOrder","quadsMesh","culling","add","Plane","prototype","update","grid3DModel","ecModel","api","cartesian","coordinateSystem","axes","getAxis","lineGeometry","quadsGeometry","convertToDynamicArray","_updateSplitLines","_udpateSplitAreas","convertToTypedArray","dpr","getDevicePixelRatio","forEach","axis","idx","axisModel","model","otherExtent","getExtent","scale","isBlank","splitLineModel","getModel","get","lineStyleModel","lineColors","opacity","lineWidth","util","isArray","ticksCoords","getTicksCoords","tickModel","count","i","length","tickCoord","lineColor","parseColor","p0","p1","addLine","splitAreaModel","areaStyleModel","colors","clamp","prevP0","prevP1","color","addQuad"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport QuadsGeometry from '../../util/geometry/Quads';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction updateFacePlane(node, plane, otherAxis, dir) {\n  var coord = [0, 0, 0];\n  var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();\n  coord[dimIndicesMap[otherAxis.dim]] = distance;\n  node.position.setArray(coord);\n  node.rotation.identity(); // Negative distance because on the opposite of normal direction.\n\n  plane.distance = -Math.abs(distance);\n  plane.normal.set(0, 0, 0);\n\n  if (otherAxis.dim === 'x') {\n    node.rotation.rotateY(dir * Math.PI / 2);\n    plane.normal.x = -dir;\n  } else if (otherAxis.dim === 'z') {\n    node.rotation.rotateX(-dir * Math.PI / 2);\n    plane.normal.y = -dir;\n  } else {\n    if (dir > 0) {\n      node.rotation.rotateY(Math.PI);\n    }\n\n    plane.normal.z = -dir;\n  }\n}\n\nfunction Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {\n  this.rootNode = new graphicGL.Node();\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 1\n  });\n  var quadsMesh = new graphicGL.Mesh({\n    geometry: new QuadsGeometry(),\n    material: quadsMaterial,\n    castShadow: false,\n    culling: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 0\n  }); // Quads are behind lines.\n\n  this.rootNode.add(quadsMesh);\n  this.rootNode.add(linesMesh);\n  this.faceInfo = faceInfo;\n  this.plane = new graphicGL.Plane();\n  this.linesMesh = linesMesh;\n  this.quadsMesh = quadsMesh;\n}\n\nGrid3DFace.prototype.update = function (grid3DModel, ecModel, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axes = [cartesian.getAxis(this.faceInfo[0]), cartesian.getAxis(this.faceInfo[1])];\n  var lineGeometry = this.linesMesh.geometry;\n  var quadsGeometry = this.quadsMesh.geometry;\n  lineGeometry.convertToDynamicArray(true);\n  quadsGeometry.convertToDynamicArray(true);\n\n  this._updateSplitLines(lineGeometry, axes, grid3DModel, api);\n\n  this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);\n\n  lineGeometry.convertToTypedArray();\n  quadsGeometry.convertToTypedArray();\n  var otherAxis = cartesian.getAxis(this.faceInfo[2]);\n  updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);\n};\n\nGrid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {\n  var dpr = api.getDevicePixelRatio();\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine')); // Render splitLines\n\n    if (splitLineModel.get('show')) {\n      var lineStyleModel = splitLineModel.getModel('lineStyle');\n      var lineColors = lineStyleModel.get('color');\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n      lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitLineModel\n      });\n      var count = 0;\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);\n        lineColor[3] *= opacity;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        geometry.addLine(p0, p1, lineColor, lineWidth * dpr);\n        count++;\n      }\n    }\n  });\n};\n\nGrid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea')); // Render splitAreas\n\n    if (splitAreaModel.get('show')) {\n      var areaStyleModel = splitAreaModel.getModel('areaStyle');\n      var colors = areaStyleModel.get('color');\n      var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);\n      colors = echarts.util.isArray(colors) ? colors : [colors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitAreaModel,\n        clamp: true\n      });\n      var count = 0;\n      var prevP0 = [0, 0, 0];\n      var prevP1 = [0, 0, 0]; // 0 - x, 1 - y\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n\n        if (i === 0) {\n          prevP0 = p0;\n          prevP1 = p1;\n          continue;\n        }\n\n        var color = graphicGL.parseColor(colors[count % colors.length]);\n        color[3] *= opacity;\n        geometry.addQuad([prevP0, p0, p1, prevP1], color);\n        prevP0 = p0;\n        prevP1 = p1;\n        count++;\n      }\n    }\n  });\n};\n\nexport default Grid3DFace;"]},"metadata":{},"sourceType":"module"}