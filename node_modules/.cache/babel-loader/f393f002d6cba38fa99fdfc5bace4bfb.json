{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport china from \"../assets/map/china.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\nexport default {\n  props: {\n    title_change: {\n      type: String,\n      default: \"政治\"\n    }\n  },\n  watch: {\n    title_change: function title_change(new_val, old_val) {\n      this.cur_info.title = new_val;\n      this.set_china_map();\n    }\n  },\n  data: function data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        max: 0,\n        regionName: ''\n      },\n      list: [{\n        clicked: true,\n        standard: \"2017\"\n      }, {\n        clicked: false,\n        standard: \"2018\"\n      }, {\n        clicked: false,\n        standard: \"2019\"\n      }, {\n        clicked: false,\n        standard: \"2020\"\n      }, {\n        clicked: false,\n        standard: \"2021\"\n      }]\n    };\n  },\n  methods: {\n    // 随机函数\n    randomValue: function randomValue() {\n      return Math.round(Math.random() * 1000);\n    },\n    time_change: function time_change(x, id) {\n      this.cur_info.year = x.standard;\n\n      for (var i in this.list) {\n        this.list[i].clicked = false;\n      }\n\n      this.list[id].clicked = true;\n      this.set_china_map();\n    },\n    set_tooltip_chart: function set_tooltip_chart(name) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var treemapOption, sunburstOption, currentOption;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setTimeout(500);\n\n                if (document.getElementById(\"main_page_map_tooltip\")) {\n                  if (name !== _this.cur_info.regionName) {\n                    _this.cur_info.regionName = name;\n\n                    if (_this.toolChart) {\n                      _this.toolChart.dispose();\n\n                      _this.toolChart = null;\n                    }\n\n                    _this.toolChart = _this.$echarts.init(document.getElementById(\"main_page_map_tooltip\"));\n                    treemapOption = {\n                      series: [{\n                        type: \"treemap\",\n                        id: \"echarts-package-size\",\n                        animationDurationUpdate: 1000,\n                        roam: false,\n                        nodeClick: undefined,\n                        data: main_tooltip[_this.cur_info.regionName][_this.cur_info.year],\n                        universalTransition: true,\n                        label: {\n                          show: true,\n                          fontSize: 24\n                        },\n                        breadcrumb: {\n                          show: false\n                        }\n                      }]\n                    };\n                    sunburstOption = {\n                      series: [{\n                        type: \"sunburst\",\n                        id: \"echarts-package-size\",\n                        radius: [\"10%\", \"80%\"],\n                        animationDurationUpdate: 1000,\n                        nodeClick: undefined,\n                        data: main_tooltip[_this.cur_info.regionName][_this.cur_info.year],\n                        universalTransition: true,\n                        itemStyle: {\n                          borderWidth: 1,\n                          borderColor: \"rgba(255,255,255,.5)\"\n                        },\n                        label: {\n                          show: true,\n                          color: \"rgba(255,255,255)\"\n                        }\n                      }]\n                    };\n                    currentOption = treemapOption;\n\n                    _this.toolChart.setOption(currentOption);\n\n                    clearInterval(_this.cur_region_Chart);\n                    _this.cur_region_Chart = setInterval(function () {\n                      currentOption = currentOption === treemapOption ? sunburstOption : treemapOption;\n                      this.toolChart.setOption(currentOption);\n                    }, 3000);\n                  }\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    set_china_map: function set_china_map() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var that, _data, scar_data, i, x, y, z, name_l, cur, t, options;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (_this2.myChart) {\n                  _this2.myChart.dispose();\n\n                  _this2.myChart = null;\n                }\n\n                _this2.layoutSize = \"150%\";\n                that = _this2;\n                _data = china.features, scar_data = [];\n\n                for (i in _data) {\n                  x = _data[i].properties.cp[0], y = _data[i].properties.cp[1], z = _data[i].properties.name;\n                  scar_data.push([x, y, z]);\n                }\n\n                _context2.t0 = regeneratorRuntime.keys(speed_average_data[\"scar\"]);\n\n              case 6:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                name_l = _context2.t1.value;\n                cur = speed_average_data[\"scar\"][name_l];\n\n                if (!(_this2.cur_info.title in cur == false)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"continue\", 6);\n\n              case 11:\n                t = parseInt(_this2.cur_info.year) - 2017;\n\n                if (!(t in cur[_this2.cur_info.title] == false)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.abrupt(\"continue\", 6);\n\n              case 14:\n                //console.log('x',cur[this.cur_info.title][t][1])\n                _this2.cur_info.max = Math.max(_this2.cur_info.max, cur[_this2.cur_info.title][t][1]);\n                _context2.next = 6;\n                break;\n\n              case 17:\n                if (_this2.cur_info.max == 0) _this2.cur_info.max = 1;\n                options = {\n                  tooltip: {\n                    triggerOn: \"click\",\n                    enterable: true,\n                    confine: true,\n                    backgroundColor: \"rgba(255,255,255,0)\",\n                    borderColor: \"rgba(0,0,0,0)\",\n                    formatter: function formatter(params) {\n                      var default_style = \"\\n            <div\\n            style=\\\"\\n            width: 100px;\\n            height:30px;\\n            font-size:28px;            \\n            color:rgba(255,255,255)\\\">\\n            \\u8FD8\\u6CA1\\u62FF\\u5230\\u8BE5\\u7701\\u6B64\\u5E74\\u4EFD\\u7684\\u6570\\u636E\\u5462</div>\\n            \";\n                      if (params.name in main_tooltip == false) return default_style;\n                      if (that.cur_info.year in main_tooltip[params.name] == false) return default_style;\n                      that.set_tooltip_chart(params.name); // if (that.cur_region_info) clearInterval(that.cur_region_info);\n                      // that.cur_region_info = setInterval(function () {\n                      //   if (document.getElementById(\"main_page_map_tooltip\")) {\n                      //     if (params.name !== regionName) {\n                      //       regionName = params.name;\n                      //       if (that.toolChart) {\n                      //         that.toolChart.dispose();\n                      //         that.toolChart = null;\n                      //       }\n                      //       that.toolChart = that.$echarts.init(\n                      //         document.getElementById(\"main_page_map_tooltip\")\n                      //       );\n                      //       const treemapOption = {\n                      //         series: [\n                      //           {\n                      //             type: \"treemap\",\n                      //             id: \"echarts-package-size\",\n                      //             animationDurationUpdate: 1000,\n                      //             roam: false,\n                      //             nodeClick: undefined,\n                      //             data: main_tooltip[regionName][that.cur_info.year],\n                      //             universalTransition: true,\n                      //             label: {\n                      //               show: true,\n                      //               fontSize: 24,\n                      //             },\n                      //             breadcrumb: {\n                      //               show: false,\n                      //             },\n                      //           },\n                      //         ],\n                      //       };\n                      //       const sunburstOption = {\n                      //         series: [\n                      //           {\n                      //             type: \"sunburst\",\n                      //             id: \"echarts-package-size\",\n                      //             radius: [\"10%\", \"80%\"],\n                      //             animationDurationUpdate: 1000,\n                      //             nodeClick: undefined,\n                      //             data: main_tooltip[regionName][that.cur_info.year],\n                      //             universalTransition: true,\n                      //             itemStyle: {\n                      //               borderWidth: 1,\n                      //               borderColor: \"rgba(255,255,255,.5)\",\n                      //             },\n                      //             label: {\n                      //               show: true,\n                      //               color: \"rgba(255,255,255)\",\n                      //             },\n                      //           },\n                      //         ],\n                      //       };\n                      //       let currentOption = treemapOption;\n                      //       that.toolChart.setOption(currentOption);\n                      //       clearInterval(that.cur_region_Chart);\n                      //       that.cur_region_Chart = setInterval(function () {\n                      //         currentOption =\n                      //           currentOption === treemapOption\n                      //             ? sunburstOption\n                      //             : treemapOption;\n                      //         that.toolChart.setOption(currentOption);\n                      //       }, 3000);\n                      //     }\n                      //   }\n                      // }, 500);\n\n                      return \"\\n            <div class=\\\"main_tooltip\\\" style=\\\"width: 900px;height:900px;\\\">\\n              <div id=\\\"main_page_map_tooltip\\\" style=\\\"width: 100%;height:100%; margin:100px 100px 100px 100px\\\"></div>\\n            </div>\\n            \";\n                    } //数据格式化\n\n                  },\n                  geo: {\n                    map: \"china\",\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    layoutSize: _this2.layoutSize,\n                    label: {\n                      normal: {\n                        show: false\n                      },\n                      emphasis: {\n                        show: false\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"#276fce\",\n                        shadowOffsetX: 0,\n                        shadowOffsetY: 15,\n                        opacity: 0.5\n                      },\n                      emphasis: {\n                        areaColor: \"#276fce\"\n                      }\n                    }\n                  },\n                  series: [// 常规地图\n                  {\n                    type: \"map\",\n                    mapType: \"china\",\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    layoutSize: _this2.layoutSize,\n                    zoom: 1,\n                    //当前视角的缩放比例\n                    // roam: true, //是否开启平游或缩放\n                    scaleLimit: {\n                      //滚轮缩放的极限控制\n                      min: 1,\n                      max: 2\n                    },\n                    label: {\n                      normal: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        },\n                        offset: [0, -20]\n                      },\n                      emphasis: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        },\n                        offset: [0, -20]\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        areaColor: \"#0c274b\",\n                        borderColor: \"#1cccff\",\n                        borderWidth: 1.5\n                      },\n                      emphasis: {\n                        areaColor: \"#02102b\"\n                      }\n                    }\n                  }, {\n                    show: true,\n                    type: \"effectScatter\",\n                    symbolSize: function symbolSize(params) {\n                      //\n                      var t = parseInt(that.cur_info.year) - 2017;\n                      if (params[2] in speed_average_data[\"scar\"] == false) return 0;\n                      if (that.cur_info.title in speed_average_data[\"scar\"][params[2]] == false) return 0;\n                      if (t in speed_average_data[\"scar\"][params[2]][that.cur_info.title] == false) return 0;\n                      var x = speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\n                      var cur_v = x[1] / that.cur_info.max * 2 + 1;\n                      return 15 / cur_v;\n                    },\n                    rippleEffect: {\n                      // 涟漪特效相关配置。\n                      scale: 4 // 控制涟漪大小\n\n                    },\n                    coordinateSystem: \"geo\",\n                    // series坐标系类型\n                    data: scar_data\n                  }]\n                };\n                that.myChart = _this2.$echarts.init(_this2.$refs.myEchart);\n                that.myChart.setOption(options);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  mounted: function mounted() {\n    this.$echarts.registerMap(\"china\", china);\n    this.set_china_map();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.myChart) {\n      this.myChart.dispose();\n      this.myChart = null;\n    }\n\n    if (this.myChart) {\n      this.myChart.dispose();\n      this.myChart = null;\n    }\n\n    if (this.cur_region_info) clearInterval(this.cur_region_info);\n    if (this.cur_region_Chart) clearInterval(this.cur_region_Chart);\n  }\n}; // 基于准备好的dom，初始化echarts实例","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACAA;AACAC;AACAC,kBADA;AAEAC;AAFA;AADA,GADA;AAOAC;AACAH,gBADA,wBACAI,OADA,EACAC,OADA,EACA;AACA;AACA;AACA;AAJA,GAPA;AAaAC,MAbA,kBAaA;AACA;AACAC;AACAC,oBADA;AAEAC,mBAFA;AAGAC,cAHA;AAIAC;AAJA,OADA;AAOAC,aACA;AACAC,qBADA;AAEAC;AAFA,OADA,EAKA;AACAD,sBADA;AAEAC;AAFA,OALA,EASA;AACAD,sBADA;AAEAC;AAFA,OATA,EAaA;AACAD,sBADA;AAEAC;AAFA,OAbA,EAiBA;AACAD,sBADA;AAEAC;AAFA,OAjBA;AAPA;AA8BA,GA5CA;AA6CAC;AACA;AACAC,eAFA,yBAEA;AACA;AACA,KAJA;AAKAC,eALA,uBAKAC,CALA,EAKAC,EALA,EAKA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,KAZA;AAaAC,qBAbA,6BAaAC,IAbA,EAaA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA,0DACAC,gDADA;AAGAC,iCATA,GASA;AACAC,+BACA;AACAxB,uCADA;AAEAkB,kDAFA;AAGAO,qDAHA;AAIAC,mCAJA;AAKAC,4CALA;AAMAtB,0FANA;AAOAuB,iDAPA;AAQAC;AACAC,oCADA;AAEAC;AAFA,yBARA;AAYAC;AACAF;AADA;AAZA,uBADA;AADA,qBATA;AA6BAG,kCA7BA,GA6BA;AACAT,+BACA;AACAxB,wCADA;AAEAkB,kDAFA;AAGAgB,8CAHA;AAIAT,qDAJA;AAKAE,4CALA;AAMAtB,0FANA;AAOAuB,iDAPA;AAQAO;AACAC,wCADA;AAEAC;AAFA,yBARA;AAYAR;AACAC,oCADA;AAEAQ;AAFA;AAZA,uBADA;AADA,qBA7BA;AAkDAC,iCAlDA,GAkDAhB,aAlDA;;AAmDA;;AACAiB;AACA;AACAD,sCACAA,gEADA;AAEA;AACA,qBAJA,EAIA,IAJA;AAKA;AACA;;AA9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+DA,KA5EA;AA6EAE,iBA7EA,2BA6EA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;;AACA;AACAC,oBANA,GAMA,MANA;AAOAC,qBAPA,GAOAC,cAPA,EAQAC,SARA,GAQA,EARA;;AASA;AACA5B,mBADA,GACA0B,yBADA,EAEAG,CAFA,GAEAH,yBAFA,EAGAI,CAHA,GAGAJ,wBAHA;AAIAE;AACA;;AAdA,uDAeAG,0BAfA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeAC,sBAfA;AAgBAC,mBAhBA,GAgBAF,kCAhBA;;AAAA,sBAiBA,qCAjBA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmBAG,iBAnBA,GAmBAC,qCAnBA;;AAAA,sBAoBAD,wCApBA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqBA;AACA,+CACA,mBADA,EAEAD,gCAFA;AAtBA;AAAA;;AAAA;AA2BA;AACAG,uBA5BA,GA4BA;AACAC;AACAC,sCADA;AAEAC,mCAFA;AAGAC,iCAHA;AAIAC,0DAJA;AAKArB,gDALA;AAMAsB;AACA;AASA;AACA,oFACA;AAEAjB,0DAdA,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAKA,qBA5FA,CA4FA;;AA5FA,mBADA;AAgGAkB;AACAC,gCADA;AAEAC,kCAFA;AAGAC,gDAHA;AAGA;AACAC,iDAJA;AAKAnC;AACAoC;AACAnC;AADA,uBADA;AAIAoC;AACApC;AADA;AAJA,qBALA;AAaAK;AACA8B;AACAE,8CADA;AAEAC,wCAFA;AAGAC,yCAHA;AAIAC;AAJA,uBADA;AAOAJ;AACAK;AADA;AAPA;AAbA,mBAhGA;AAyHA/C,2BACA;AACA;AACAxB,+BADA;AAEAwE,oCAFA;AAGAV,kCAHA;AAIAC,gDAJA;AAIA;AACAC,iDALA;AAMAS,2BANA;AAMA;AACA;AACAC;AACA;AACAC,4BAFA;AAGAlE;AAHA,qBARA;AAaAoB;AACAoC;AACAnC,kCADA;AAEA8C;AACAtC,0CADA;AAEAP;AAFA,yBAFA;AAMA8C;AANA,uBADA;AASAX;AACApC,kCADA;AAEA8C;AACAtC,0CADA;AAEAP;AAFA,yBAFA;AAMA8C;AANA;AATA,qBAbA;AA+BA1C;AACA8B;AACAM,4CADA;AAEAlC,8CAFA;AAGAD;AAHA,uBADA;AAOA8B;AACAK;AADA;AAPA;AA/BA,mBAFA,EA6CA;AACAzC,8BADA;AAEA9B,yCAFA;AAGA8E;AACA;AACA;AACA;AACA,0BACApC,gEACA,KAFA,EAIA;AACA,0BACAS,KACAH,0DADA,IAEA,KAHA,EAKA;AACA,8BACAA,6DADA;AAEA;AAEA;AACA,qBAvBA;AAwBA+B;AACA;AACAC,8BAFA,CAEA;;AAFA,qBAxBA;AA4BAC,2CA5BA;AA4BA;AACA5E;AA7BA,mBA7CA;AAzHA,iBA5BA;AAoOAqC;AACAA;;AArOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsOA;AAnTA,GA7CA;AAkWAwC,SAlWA,qBAkWA;AACA;AACA;AACA,GArWA;AAsWAC,eAtWA,2BAsWA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAjXA,E,CAmXA","names":["props","title_change","type","default","watch","new_val","old_val","data","cur_info","year","title","max","regionName","list","clicked","standard","methods","randomValue","time_change","x","id","set_tooltip_chart","name","setTimeout","document","treemapOption","series","animationDurationUpdate","roam","nodeClick","universalTransition","label","show","fontSize","breadcrumb","sunburstOption","radius","itemStyle","borderWidth","borderColor","color","currentOption","clearInterval","set_china_map","that","_data","china","scar_data","y","z","speed_average_data","name_l","cur","t","parseInt","options","tooltip","triggerOn","enterable","confine","backgroundColor","formatter","geo","map","aspectScale","layoutCenter","layoutSize","normal","emphasis","shadowColor","shadowOffsetX","shadowOffsetY","opacity","areaColor","mapType","zoom","scaleLimit","min","textStyle","offset","symbolSize","rippleEffect","scale","coordinateSystem","mounted","beforeDestroy"],"sourceRoot":"src/components","sources":["MainPageRightMap.vue"],"sourcesContent":["<template>\r\n  <div class=\"h-3\">\r\n    <div ref=\"myEchart\" style=\"width: 1231px; height: 808px\"></div>\r\n    <div class=\"time_content\">\r\n      <div class=\"Timeline\">\r\n        <div class=\"timeaxis\">\r\n          <div v-for=\"(item, i) in list\" :key=\"i\">\r\n            <div class=\"timeaxis-box\">\r\n              <div\r\n                class=\"timeaxis-topText\"\r\n                :class=\"{ 'bd-empty': i == list.length - 1 }\"\r\n              ></div>\r\n              <div\r\n                class=\"circular\"\r\n                @click=\"time_change(item, i)\"\r\n                :class=\"{ circular_click: item.clicked }\"\r\n              ></div>\r\n              <div class=\"timeaxis-bootomText\">\r\n                <div class=\"text\">{{ item.standard }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport china from \"../assets/map/china.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\r\nexport default {\r\n  props: {\r\n    title_change: {\r\n      type: String,\r\n      default: \"政治\",\r\n    },\r\n  },\r\n  watch: {\r\n    title_change(new_val, old_val) {\r\n      this.cur_info.title = new_val;\r\n      this.set_china_map();\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        max: 0,\r\n        regionName:''\r\n      },\r\n      list: [\r\n        {\r\n          clicked: true,\r\n          standard: \"2017\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2018\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2019\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2020\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2021\",\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    // 随机函数\r\n    randomValue() {\r\n      return Math.round(Math.random() * 1000);\r\n    },\r\n    time_change(x, id) {\r\n      this.cur_info.year = x.standard;\r\n      for (let i in this.list) {\r\n        this.list[i].clicked = false;\r\n      }\r\n      this.list[id].clicked = true;\r\n      this.set_china_map();\r\n    },\r\n    async set_tooltip_chart(name) {\r\n      setTimeout(500)\r\n      if (document.getElementById(\"main_page_map_tooltip\")) {\r\n        if (name !== this.cur_info.regionName) {\r\n          this.cur_info.regionName = name;\r\n          if (this.toolChart) {\r\n            this.toolChart.dispose();\r\n            this.toolChart = null;\r\n          }\r\n          this.toolChart = this.$echarts.init(\r\n            document.getElementById(\"main_page_map_tooltip\")\r\n          );\r\n          const treemapOption = {\r\n            series: [\r\n              {\r\n                type: \"treemap\",\r\n                id: \"echarts-package-size\",\r\n                animationDurationUpdate: 1000,\r\n                roam: false,\r\n                nodeClick: undefined,\r\n                data: main_tooltip[this.cur_info.regionName][this.cur_info.year],\r\n                universalTransition: true,\r\n                label: {\r\n                  show: true,\r\n                  fontSize: 24,\r\n                },\r\n                breadcrumb: {\r\n                  show: false,\r\n                },\r\n              },\r\n            ],\r\n          };\r\n          const sunburstOption = {\r\n            series: [\r\n              {\r\n                type: \"sunburst\",\r\n                id: \"echarts-package-size\",\r\n                radius: [\"10%\", \"80%\"],\r\n                animationDurationUpdate: 1000,\r\n                nodeClick: undefined,\r\n                data: main_tooltip[this.cur_info.regionName][this.cur_info.year],\r\n                universalTransition: true,\r\n                itemStyle: {\r\n                  borderWidth: 1,\r\n                  borderColor: \"rgba(255,255,255,.5)\",\r\n                },\r\n                label: {\r\n                  show: true,\r\n                  color: \"rgba(255,255,255)\",\r\n                },\r\n              },\r\n            ],\r\n          };\r\n          let currentOption = treemapOption;\r\n          this.toolChart.setOption(currentOption);\r\n          clearInterval(this.cur_region_Chart);\r\n          this.cur_region_Chart = setInterval(function () {\r\n            currentOption =\r\n              currentOption === treemapOption ? sunburstOption : treemapOption;\r\n            this.toolChart.setOption(currentOption);\r\n          }, 3000);\r\n        }\r\n      }\r\n    },\r\n    async set_china_map() {\r\n      if (this.myChart) {\r\n        this.myChart.dispose();\r\n        this.myChart = null;\r\n      }\r\n      this.layoutSize = \"150%\";\r\n      let that = this;\r\n      let _data = china.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.cp[0],\r\n          y = _data[i].properties.cp[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      for (let name_l in speed_average_data[\"scar\"]) {\r\n        let cur = speed_average_data[\"scar\"][name_l];\r\n        if (this.cur_info.title in cur == false) continue;\r\n\r\n        let t = parseInt(this.cur_info.year) - 2017;\r\n        if (t in cur[this.cur_info.title] == false) continue;\r\n        //console.log('x',cur[this.cur_info.title][t][1])\r\n        this.cur_info.max = Math.max(\r\n          this.cur_info.max,\r\n          cur[this.cur_info.title][t][1]\r\n        );\r\n      }\r\n      if (this.cur_info.max == 0) this.cur_info.max = 1;\r\n      let options = {\r\n        tooltip: {\r\n          triggerOn: \"click\",\r\n          enterable: true,\r\n          confine: true,\r\n          backgroundColor: \"rgba(255,255,255,0)\",\r\n          borderColor: \"rgba(0,0,0,0)\",\r\n          formatter: function (params) {\r\n            const default_style = `\r\n            <div\r\n            style=\"\r\n            width: 100px;\r\n            height:30px;\r\n            font-size:28px;            \r\n            color:rgba(255,255,255)\">\r\n            还没拿到该省此年份的数据呢</div>\r\n            `;\r\n            if (params.name in main_tooltip == false) return default_style;\r\n            if (that.cur_info.year in main_tooltip[params.name] == false)\r\n              return default_style;\r\n\r\n            that.set_tooltip_chart(params.name)\r\n            // if (that.cur_region_info) clearInterval(that.cur_region_info);\r\n            // that.cur_region_info = setInterval(function () {\r\n            //   if (document.getElementById(\"main_page_map_tooltip\")) {\r\n            //     if (params.name !== regionName) {\r\n            //       regionName = params.name;\r\n            //       if (that.toolChart) {\r\n            //         that.toolChart.dispose();\r\n            //         that.toolChart = null;\r\n            //       }\r\n            //       that.toolChart = that.$echarts.init(\r\n            //         document.getElementById(\"main_page_map_tooltip\")\r\n            //       );\r\n            //       const treemapOption = {\r\n            //         series: [\r\n            //           {\r\n            //             type: \"treemap\",\r\n            //             id: \"echarts-package-size\",\r\n            //             animationDurationUpdate: 1000,\r\n            //             roam: false,\r\n            //             nodeClick: undefined,\r\n            //             data: main_tooltip[regionName][that.cur_info.year],\r\n            //             universalTransition: true,\r\n            //             label: {\r\n            //               show: true,\r\n            //               fontSize: 24,\r\n            //             },\r\n            //             breadcrumb: {\r\n            //               show: false,\r\n            //             },\r\n            //           },\r\n            //         ],\r\n            //       };\r\n            //       const sunburstOption = {\r\n            //         series: [\r\n            //           {\r\n            //             type: \"sunburst\",\r\n            //             id: \"echarts-package-size\",\r\n            //             radius: [\"10%\", \"80%\"],\r\n            //             animationDurationUpdate: 1000,\r\n            //             nodeClick: undefined,\r\n            //             data: main_tooltip[regionName][that.cur_info.year],\r\n            //             universalTransition: true,\r\n            //             itemStyle: {\r\n            //               borderWidth: 1,\r\n            //               borderColor: \"rgba(255,255,255,.5)\",\r\n            //             },\r\n            //             label: {\r\n            //               show: true,\r\n            //               color: \"rgba(255,255,255)\",\r\n            //             },\r\n            //           },\r\n            //         ],\r\n            //       };\r\n            //       let currentOption = treemapOption;\r\n            //       that.toolChart.setOption(currentOption);\r\n            //       clearInterval(that.cur_region_Chart);\r\n            //       that.cur_region_Chart = setInterval(function () {\r\n            //         currentOption =\r\n            //           currentOption === treemapOption\r\n            //             ? sunburstOption\r\n            //             : treemapOption;\r\n            //         that.toolChart.setOption(currentOption);\r\n            //       }, 3000);\r\n            //     }\r\n            //   }\r\n            // }, 500);\r\n            return `\r\n            <div class=\"main_tooltip\" style=\"width: 900px;height:900px;\">\r\n              <div id=\"main_page_map_tooltip\" style=\"width: 100%;height:100%; margin:100px 100px 100px 100px\"></div>\r\n            </div>\r\n            `;\r\n          }, //数据格式化\r\n        },\r\n\r\n        geo: {\r\n          map: \"china\",\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          layoutSize: this.layoutSize,\r\n          label: {\r\n            normal: {\r\n              show: false,\r\n            },\r\n            emphasis: {\r\n              show: false,\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"#276fce\",\r\n              shadowOffsetX: 0,\r\n              shadowOffsetY: 15,\r\n              opacity: 0.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"#276fce\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          // 常规地图\r\n          {\r\n            type: \"map\",\r\n            mapType: \"china\",\r\n            aspectScale: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            layoutSize: this.layoutSize,\r\n            zoom: 1, //当前视角的缩放比例\r\n            // roam: true, //是否开启平游或缩放\r\n            scaleLimit: {\r\n              //滚轮缩放的极限控制\r\n              min: 1,\r\n              max: 2,\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n              emphasis: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: \"#0c274b\",\r\n                borderColor: \"#1cccff\",\r\n                borderWidth: 1.5,\r\n              },\r\n\r\n              emphasis: {\r\n                areaColor: \"#02102b\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            symbolSize: function (params) {\r\n              //\r\n              let t = parseInt(that.cur_info.year) - 2017;\r\n              if (params[2] in speed_average_data[\"scar\"] == false) return 0;\r\n              if (\r\n                that.cur_info.title in speed_average_data[\"scar\"][params[2]] ==\r\n                false\r\n              )\r\n                return 0;\r\n              if (\r\n                t in\r\n                  speed_average_data[\"scar\"][params[2]][that.cur_info.title] ==\r\n                false\r\n              )\r\n                return 0;\r\n              let x =\r\n                speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\r\n              let cur_v = (x[1] / that.cur_info.max) * 2 + 1;\r\n\r\n              return 15 / cur_v;\r\n            },\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n\r\n      that.myChart = this.$echarts.init(this.$refs.myEchart);\r\n      that.myChart.setOption(options);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$echarts.registerMap(\"china\", china);\r\n    this.set_china_map();\r\n  },\r\n  beforeDestroy() {\r\n    if (this.myChart) {\r\n      this.myChart.dispose();\r\n      this.myChart = null;\r\n    }\r\n    if (this.myChart) {\r\n      this.myChart.dispose();\r\n      this.myChart = null;\r\n    }\r\n    if (this.cur_region_info) clearInterval(this.cur_region_info);\r\n    if (this.cur_region_Chart) clearInterval(this.cur_region_Chart);\r\n  },\r\n};\r\n// 基于准备好的dom，初始化echarts实例\r\n</script>\r\n<style lang=\"less\">\r\n/*懒加载图标动画*/\r\n.main_tooltip {\r\n  background: url(../assets/main_time/main_tooltip.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  background-position: center top;\r\n}\r\n.h-3 {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-flow: column;\r\n  .time_content {\r\n    width: 1231px;\r\n    height: 0px;\r\n    font-size: 20px;\r\n    z-index: 999999;\r\n    .Timeline {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin-top: 40px;\r\n      .timeaxis {\r\n        height: 50px;\r\n        margin-top: 80px;\r\n        margin-left: 4em;\r\n        display: flex;\r\n        .timeaxis-box {\r\n          width: 330px;\r\n          .circular {\r\n            width: 20px;\r\n            height: 20px;\r\n            border-radius: 50%;\r\n            background: #165dff;\r\n            //margin-bottom: -10px;\r\n            position: relative;\r\n            top: -10px;\r\n            box-shadow: 0px 0px 5px 5px #fff;\r\n          }\r\n          .circular:hover {\r\n            width: 30px;\r\n            height: 30px;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -10px;\r\n            position: relative;\r\n            top: -15px;\r\n            left: -5px;\r\n            box-shadow: 0px 0px 5px 5px #fff;\r\n          }\r\n          .circular_click {\r\n            width: 30px;\r\n            height: 30px;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -10px;\r\n            position: relative;\r\n            top: -15px;\r\n            left: -5px;\r\n            box-shadow: 0px 0px 5px 5px #fff;\r\n          }\r\n          .timeaxis-topText {\r\n            border-bottom: 5px solid #c9cdd4; //时间轴线的宽度和颜色\r\n            position: relative;\r\n          }\r\n          .bd-empty {\r\n            // border: 0;\r\n            //margin-top: 5px;\r\n            border-bottom: 5px solid #c9cdd4; //时间轴线的宽度和颜色\r\n            opacity: 0;\r\n            position: relative;\r\n          }\r\n          .timeaxis-bootomText {\r\n            position: relative;\r\n            .text {\r\n              position: absolute;\r\n              top: 10px;\r\n              font-size: 28px;\r\n              left: -20px;\r\n              color: #fff;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}