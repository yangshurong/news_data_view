{"ast":null,"code":"// TODO orthographic camera\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nimport ZRTextureAtlasSurface from '../../util/ZRTextureAtlasSurface';\nimport SceneHelper from '../common/SceneHelper';\nimport Grid3DFace from './Grid3DFace';\nimport Grid3DAxis from './Grid3DAxis';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nexport default echarts.ComponentView.extend({\n  type: 'grid3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var FACES = [// planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.\n    ['y', 'z', 'x', -1, 'left'], ['y', 'z', 'x', 1, 'right'], ['x', 'y', 'z', -1, 'bottom'], ['x', 'y', 'z', 1, 'top'], ['x', 'z', 'y', -1, 'far'], ['x', 'z', 'y', 1, 'near']];\n    var DIMS = ['x', 'y', 'z'];\n    var quadsMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.color'),\n      depthMask: false,\n      transparent: true\n    });\n    var linesMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      depthMask: false,\n      transparent: true\n    });\n    quadsMaterial.define('fragment', 'DOUBLE_SIDED');\n    quadsMaterial.define('both', 'VERTEX_COLOR');\n    this.groupGL = new graphicGL.Node();\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init(); // Save mesh and other infos for each face.\n\n\n    this._faces = FACES.map(function (faceInfo) {\n      var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);\n      this.groupGL.add(face.rootNode);\n      return face;\n    }, this); // Save mesh and other infos for each axis.\n\n    this._axes = DIMS.map(function (dim) {\n      var axis = new Grid3DAxis(dim, linesMaterial);\n      this.groupGL.add(axis.rootNode);\n      return axis;\n    }, this);\n    var dpr = api.getDevicePixelRatio(); // Texture surface for label.\n\n    this._axisLabelSurface = new ZRTextureAtlasSurface({\n      width: 256,\n      height: 256,\n      devicePixelRatio: dpr\n    });\n\n    this._axisLabelSurface.onupdate = function () {\n      api.getZr().refresh();\n    };\n\n    this._axisPointerLineMesh = new graphicGL.Mesh({\n      geometry: new Lines3DGeometry({\n        useNativeLine: false\n      }),\n      material: linesMaterial,\n      castShadow: false,\n      // PENDING\n      ignorePicking: true,\n      renderOrder: 3\n    });\n    this.groupGL.add(this._axisPointerLineMesh);\n    this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({\n      width: 128,\n      height: 128,\n      devicePixelRatio: dpr\n    });\n    this._axisPointerLabelsMesh = new LabelsMesh({\n      ignorePicking: true,\n      renderOrder: 4,\n      castShadow: false\n    });\n\n    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());\n\n    this.groupGL.add(this._axisPointerLabelsMesh);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n  },\n  render: function (grid3DModel, ecModel, api) {\n    this._model = grid3DModel;\n    this._api = api;\n    var cartesian = grid3DModel.coordinateSystem; // Always have light.\n\n    cartesian.viewGL.add(this._lightRoot);\n\n    if (grid3DModel.get('show')) {\n      cartesian.viewGL.add(this.groupGL);\n    } else {\n      cartesian.viewGL.remove(this.groupGL);\n    } // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));\n\n\n    var control = this._control;\n    control.setViewGL(cartesian.viewGL);\n    var viewControlModel = grid3DModel.getModel('viewControl');\n    control.setFromViewControlModel(viewControlModel, 0);\n\n    this._axisLabelSurface.clear();\n\n    control.off('update');\n\n    if (grid3DModel.get('show')) {\n      this._faces.forEach(function (face) {\n        face.update(grid3DModel, ecModel, api);\n      }, this);\n\n      this._axes.forEach(function (axis) {\n        axis.update(grid3DModel, this._axisLabelSurface, api);\n      }, this);\n    }\n\n    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);\n\n    this._sceneHelper.setScene(cartesian.viewGL.scene);\n\n    this._sceneHelper.updateLight(grid3DModel); // Set post effect\n\n\n    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);\n    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));\n\n    this._initMouseHandler(grid3DModel);\n  },\n  afterRender: function (grid3DModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);\n  },\n\n  /**\n   * showAxisPointer will be triggered by action.\n   */\n  showAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doShowAxisPointer();\n\n    this._updateAxisPointer(payload.value);\n  },\n\n  /**\n   * hideAxisPointer will be triggered by action.\n   */\n  hideAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doHideAxisPointer();\n  },\n  _initMouseHandler: function (grid3DModel) {\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL; // TODO xAxis3D.axisPointer.show ?\n\n    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {\n      viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);\n    } else {\n      viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);\n    }\n  },\n\n  /**\n   * Try find and show axisPointer on the intersect point\n   * of mouse ray with grid plane.\n   */\n  _updateAxisPointerOnMousePosition: function (e) {\n    // Ignore if mouse is on the element.\n    if (e.target) {\n      return;\n    }\n\n    var grid3DModel = this._model;\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL;\n    var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());\n    var nearestIntersectPoint;\n\n    for (var i = 0; i < this._faces.length; i++) {\n      var face = this._faces[i];\n\n      if (face.rootNode.invisible) {\n        continue;\n      } // Plane is not face the camera. flip it\n\n\n      if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {\n        face.plane.normal.negate();\n      }\n\n      var point = ray.intersectPlane(face.plane);\n\n      if (!point) {\n        continue;\n      }\n\n      var axis0 = cartesian.getAxis(face.faceInfo[0]);\n      var axis1 = cartesian.getAxis(face.faceInfo[1]);\n      var idx0 = dimIndicesMap[face.faceInfo[0]];\n      var idx1 = dimIndicesMap[face.faceInfo[1]];\n\n      if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {\n        nearestIntersectPoint = point;\n      }\n    }\n\n    if (nearestIntersectPoint) {\n      var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);\n\n      this._updateAxisPointer(data);\n\n      this._doShowAxisPointer();\n    } else {\n      this._doHideAxisPointer();\n    }\n  },\n  _onCameraChange: function (grid3DModel, api) {\n    if (grid3DModel.get('show')) {\n      this._updateFaceVisibility();\n\n      this._updateAxisLinePosition();\n    }\n\n    var control = this._control;\n    api.dispatchAction({\n      type: 'grid3DChangeCamera',\n      alpha: control.getAlpha(),\n      beta: control.getBeta(),\n      distance: control.getDistance(),\n      center: control.getCenter(),\n      from: this.uid,\n      grid3DId: grid3DModel.id\n    });\n  },\n\n  /**\n   * Update visibility of each face when camera view changed, front face will be invisible.\n   * @private\n   */\n  _updateFaceVisibility: function () {\n    var camera = this._control.getCamera();\n\n    var viewSpacePos = new graphicGL.Vector3();\n    camera.update();\n\n    for (var idx = 0; idx < this._faces.length / 2; idx++) {\n      var depths = [];\n\n      for (var k = 0; k < 2; k++) {\n        var face = this._faces[idx * 2 + k];\n        face.rootNode.getWorldPosition(viewSpacePos);\n        viewSpacePos.transformMat4(camera.viewMatrix);\n        depths[k] = viewSpacePos.z;\n      } // Set the front face invisible\n\n\n      var frontIndex = depths[0] > depths[1] ? 0 : 1;\n      var frontFace = this._faces[idx * 2 + frontIndex];\n      var backFace = this._faces[idx * 2 + 1 - frontIndex]; // Update rotation.\n\n      frontFace.rootNode.invisible = true;\n      backFace.rootNode.invisible = false;\n    }\n  },\n\n  /**\n   * Update axis line position when camera view changed.\n   * @private\n   */\n  _updateAxisLinePosition: function () {\n    // Put xAxis, yAxis on x, y visible plane.\n    // Put zAxis on the left.\n    // TODO\n    var cartesian = this._model.coordinateSystem;\n    var xAxis = cartesian.getAxis('x');\n    var yAxis = cartesian.getAxis('y');\n    var zAxis = cartesian.getAxis('z');\n    var top = zAxis.getExtentMax();\n    var bottom = zAxis.getExtentMin();\n    var left = xAxis.getExtentMin();\n    var right = xAxis.getExtentMax();\n    var near = yAxis.getExtentMax();\n    var far = yAxis.getExtentMin();\n    var xAxisNode = this._axes[0].rootNode;\n    var yAxisNode = this._axes[1].rootNode;\n    var zAxisNode = this._axes[2].rootNode;\n    var faces = this._faces; // Notice: in cartesian up axis is z, but in webgl up axis is y.\n\n    var xAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    var xAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var yAxisXOffset = faces[0].rootNode.invisible ? left : right;\n    var yAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var zAxisXOffset = faces[0].rootNode.invisible ? right : left;\n    var zAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    xAxisNode.rotation.identity();\n    yAxisNode.rotation.identity();\n    zAxisNode.rotation.identity();\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[0].flipped = true;\n      xAxisNode.rotation.rotateX(Math.PI);\n    }\n\n    if (faces[0].rootNode.invisible) {\n      this._axes[1].flipped = true;\n      yAxisNode.rotation.rotateZ(Math.PI);\n    }\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[2].flipped = true;\n      zAxisNode.rotation.rotateY(Math.PI);\n    }\n\n    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);\n    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z\n\n    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y\n\n    xAxisNode.update();\n    yAxisNode.update();\n    zAxisNode.update();\n\n    this._updateAxisLabelAlign();\n  },\n\n  /**\n   * Update label align on axis when axisLine position changed.\n   * @private\n   */\n  _updateAxisLabelAlign: function () {\n    // var cartesian = this._model.coordinateSystem;\n    var camera = this._control.getCamera();\n\n    var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];\n    var center = new graphicGL.Vector4();\n    this.groupGL.getWorldPosition(center);\n    center.w = 1.0;\n    center.transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n    center.x /= center.w;\n    center.y /= center.w;\n\n    this._axes.forEach(function (axisInfo) {\n      var lineCoords = axisInfo.axisLineCoords;\n      var labelGeo = axisInfo.labelsMesh.geometry;\n\n      for (var i = 0; i < coords.length; i++) {\n        coords[i].setArray(lineCoords[i]);\n        coords[i].w = 1.0;\n        coords[i].transformMat4(axisInfo.rootNode.worldTransform).transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n        coords[i].x /= coords[i].w;\n        coords[i].y /= coords[i].w;\n      }\n\n      var dx = coords[1].x - coords[0].x;\n      var dy = coords[1].y - coords[0].y;\n      var cx = (coords[1].x + coords[0].x) / 2;\n      var cy = (coords[1].y + coords[0].y) / 2;\n      var textAlign;\n      var verticalAlign;\n\n      if (Math.abs(dy / dx) < 0.5) {\n        textAlign = 'center';\n        verticalAlign = cy > center.y ? 'bottom' : 'top';\n      } else {\n        verticalAlign = 'middle';\n        textAlign = cx > center.x ? 'left' : 'right';\n      } // axis labels\n\n\n      axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);\n    }, this);\n  },\n  _doShowAxisPointer: function () {\n    if (!this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = false;\n    this._axisPointerLabelsMesh.invisible = false;\n\n    this._api.getZr().refresh();\n  },\n  _doHideAxisPointer: function () {\n    if (this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = true;\n    this._axisPointerLabelsMesh.invisible = true;\n\n    this._api.getZr().refresh();\n  },\n\n  /**\n   * @private updateAxisPointer.\n   */\n  _updateAxisPointer: function (data) {\n    var cartesian = this._model.coordinateSystem;\n    var point = cartesian.dataToPoint(data);\n    var axisPointerLineMesh = this._axisPointerLineMesh;\n    var linesGeo = axisPointerLineMesh.geometry;\n\n    var axisPointerParentModel = this._model.getModel('axisPointer');\n\n    var dpr = this._api.getDevicePixelRatio();\n\n    linesGeo.convertToDynamicArray(true);\n\n    function ifShowAxisPointer(axis) {\n      return retrieve.firstNotNull(axis.model.get('axisPointer.show'), axisPointerParentModel.get('show'));\n    }\n\n    function getAxisColorAndLineWidth(axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);\n      var lineStyleModel = axisPointerModel.getModel('lineStyle');\n      var color = graphicGL.parseColor(lineStyleModel.get('color'));\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);\n      color[3] *= opacity;\n      return {\n        color: color,\n        lineWidth: lineWidth\n      };\n    }\n\n    for (var k = 0; k < this._faces.length; k++) {\n      var face = this._faces[k];\n\n      if (face.rootNode.invisible) {\n        continue;\n      }\n\n      var faceInfo = face.faceInfo;\n      var otherCoord = faceInfo[3] < 0 ? cartesian.getAxis(faceInfo[2]).getExtentMin() : cartesian.getAxis(faceInfo[2]).getExtentMax();\n      var otherDimIdx = dimIndicesMap[faceInfo[2]]; // Line on face.\n\n      for (var i = 0; i < 2; i++) {\n        var dim = faceInfo[i];\n        var faceOtherDim = faceInfo[1 - i];\n        var axis = cartesian.getAxis(dim);\n        var faceOtherAxis = cartesian.getAxis(faceOtherDim);\n\n        if (!ifShowAxisPointer(axis)) {\n          continue;\n        }\n\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0];\n        var dimIdx = dimIndicesMap[dim];\n        var faceOtherDimIdx = dimIndicesMap[faceOtherDim];\n        p0[dimIdx] = p1[dimIdx] = point[dimIdx];\n        p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;\n        p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();\n        p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();\n        var colorAndLineWidth = getAxisColorAndLineWidth(axis);\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      } // Project line.\n\n\n      if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {\n        var p0 = point.slice();\n        var p1 = point.slice();\n        p1[otherDimIdx] = otherCoord;\n        var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      }\n    }\n\n    linesGeo.convertToTypedArray();\n\n    this._updateAxisPointerLabelsMesh(data);\n\n    this._api.getZr().refresh();\n  },\n  _updateAxisPointerLabelsMesh: function (data) {\n    var grid3dModel = this._model;\n    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;\n    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;\n    var cartesian = grid3dModel.coordinateSystem;\n    var axisPointerParentModel = grid3dModel.getModel('axisPointer');\n    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);\n    axisPointerLabelsSurface.clear();\n    var otherDim = {\n      x: 'y',\n      y: 'x',\n      z: 'y'\n    };\n\n    this._axes.forEach(function (axisInfo, idx) {\n      var axis = cartesian.getAxis(axisInfo.dim);\n      var axisModel = axis.model;\n      var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);\n      var labelModel = axisPointerModel.getModel('label');\n      var lineColor = axisPointerModel.get('lineStyle.color');\n\n      if (!labelModel.get('show') || !axisPointerModel.get('show')) {\n        return;\n      }\n\n      var val = data[idx];\n      var formatter = labelModel.get('formatter');\n      var text = axis.scale.getLabel({\n        value: val\n      });\n\n      if (formatter != null) {\n        text = formatter(text, data);\n      } else {\n        if (axis.scale.type === 'interval' || axis.scale.type === 'log') {\n          var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);\n          text = val.toFixed(precision + 2);\n        }\n      }\n\n      var labelColor = labelModel.get('color');\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(labelModel, {\n          text: text,\n          fill: labelColor || lineColor,\n          align: 'left',\n          verticalAlign: 'top'\n        })\n      });\n      var coords = axisPointerLabelsSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n\n      var dpr = this._api.getDevicePixelRatio();\n\n      var pos = axisInfo.rootNode.position.toArray();\n      var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];\n      pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');\n      pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);\n      axisPointerLabelsMesh.geometry.addSprite(pos, [rect.width * dpr, rect.height * dpr], coords, axisInfo.textAlign, axisInfo.textVerticalAlign);\n    }, this);\n\n    axisPointerLabelsSurface.getZr().refreshImmediately();\n    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());\n    axisPointerLabelsMesh.geometry.convertToTypedArray();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._axisLabelSurface.dispose();\n\n    this._axisPointerLabelsSurface.dispose();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/component/grid3D/Grid3DView.js"],"names":["echarts","createTextStyle","graphicGL","OrbitControl","Lines3DGeometry","retrieve","firstNotNull","ZRTextureAtlasSurface","SceneHelper","Grid3DFace","Grid3DAxis","LabelsMesh","lines3DGLSL","Shader","import","dimIndicesMap","x","y","z","ComponentView","extend","type","__ecgl__","init","ecModel","api","FACES","DIMS","quadsMaterial","Material","shader","createShader","depthMask","transparent","linesMaterial","define","groupGL","Node","_control","zr","getZr","_faces","map","faceInfo","face","add","rootNode","_axes","dim","axis","dpr","getDevicePixelRatio","_axisLabelSurface","width","height","devicePixelRatio","onupdate","refresh","_axisPointerLineMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","renderOrder","_axisPointerLabelsSurface","_axisPointerLabelsMesh","set","getTexture","_lightRoot","_sceneHelper","initLight","render","grid3DModel","_model","_api","cartesian","coordinateSystem","viewGL","get","remove","control","setViewGL","viewControlModel","getModel","setFromViewControlModel","clear","off","forEach","update","on","_onCameraChange","bind","setScene","scene","updateLight","setPostEffect","setTemporalSuperSampling","_initMouseHandler","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","showAxisPointer","grid3dModel","payload","_doShowAxisPointer","_updateAxisPointer","value","hideAxisPointer","_doHideAxisPointer","_updateAxisPointerOnMousePosition","e","target","ray","castRay","offsetX","offsetY","Ray","nearestIntersectPoint","i","length","invisible","plane","normal","dot","camera","worldTransform","negate","point","intersectPlane","axis0","getAxis","axis1","idx0","idx1","contain","array","data","pointToData","_updateFaceVisibility","_updateAxisLinePosition","dispatchAction","alpha","getAlpha","beta","getBeta","distance","getDistance","center","getCenter","from","uid","grid3DId","id","getCamera","viewSpacePos","Vector3","idx","depths","k","getWorldPosition","transformMat4","viewMatrix","frontIndex","frontFace","backFace","xAxis","yAxis","zAxis","top","getExtentMax","bottom","getExtentMin","left","right","near","far","xAxisNode","yAxisNode","zAxisNode","faces","xAxisZOffset","xAxisYOffset","yAxisXOffset","yAxisYOffset","zAxisXOffset","zAxisZOffset","rotation","identity","flipped","rotateX","Math","PI","rotateZ","rotateY","position","_updateAxisLabelAlign","coords","Vector4","w","projectionMatrix","axisInfo","lineCoords","axisLineCoords","labelGeo","labelsMesh","setArray","dx","dy","cx","cy","textAlign","verticalAlign","abs","setSpriteAlign","dataToPoint","axisPointerLineMesh","linesGeo","axisPointerParentModel","convertToDynamicArray","ifShowAxisPointer","model","getAxisColorAndLineWidth","axisPointerModel","lineStyleModel","color","parseColor","lineWidth","opacity","otherCoord","otherDimIdx","faceOtherDim","faceOtherAxis","p0","p1","dimIdx","faceOtherDimIdx","colorAndLineWidth","addLine","slice","convertToTypedArray","_updateAxisPointerLabelsMesh","axisPointerLabelsMesh","axisPointerLabelsSurface","otherDim","axisModel","labelModel","lineColor","val","formatter","text","scale","getLabel","precision","number","getPrecisionSafe","getTicks","toFixed","labelColor","textEl","graphic","Text","style","fill","align","rect","getBoundingRect","pos","toArray","otherIdx","dataToCoord","addSprite","textVerticalAlign","refreshImmediately","getCoordsScale","dispose","removeAll"],"mappings":"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","sourcesContent":["// TODO orthographic camera\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nimport ZRTextureAtlasSurface from '../../util/ZRTextureAtlasSurface';\nimport SceneHelper from '../common/SceneHelper';\nimport Grid3DFace from './Grid3DFace';\nimport Grid3DAxis from './Grid3DAxis';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nexport default echarts.ComponentView.extend({\n  type: 'grid3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var FACES = [// planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.\n    ['y', 'z', 'x', -1, 'left'], ['y', 'z', 'x', 1, 'right'], ['x', 'y', 'z', -1, 'bottom'], ['x', 'y', 'z', 1, 'top'], ['x', 'z', 'y', -1, 'far'], ['x', 'z', 'y', 1, 'near']];\n    var DIMS = ['x', 'y', 'z'];\n    var quadsMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.color'),\n      depthMask: false,\n      transparent: true\n    });\n    var linesMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      depthMask: false,\n      transparent: true\n    });\n    quadsMaterial.define('fragment', 'DOUBLE_SIDED');\n    quadsMaterial.define('both', 'VERTEX_COLOR');\n    this.groupGL = new graphicGL.Node();\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init(); // Save mesh and other infos for each face.\n\n\n    this._faces = FACES.map(function (faceInfo) {\n      var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);\n      this.groupGL.add(face.rootNode);\n      return face;\n    }, this); // Save mesh and other infos for each axis.\n\n    this._axes = DIMS.map(function (dim) {\n      var axis = new Grid3DAxis(dim, linesMaterial);\n      this.groupGL.add(axis.rootNode);\n      return axis;\n    }, this);\n    var dpr = api.getDevicePixelRatio(); // Texture surface for label.\n\n    this._axisLabelSurface = new ZRTextureAtlasSurface({\n      width: 256,\n      height: 256,\n      devicePixelRatio: dpr\n    });\n\n    this._axisLabelSurface.onupdate = function () {\n      api.getZr().refresh();\n    };\n\n    this._axisPointerLineMesh = new graphicGL.Mesh({\n      geometry: new Lines3DGeometry({\n        useNativeLine: false\n      }),\n      material: linesMaterial,\n      castShadow: false,\n      // PENDING\n      ignorePicking: true,\n      renderOrder: 3\n    });\n    this.groupGL.add(this._axisPointerLineMesh);\n    this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({\n      width: 128,\n      height: 128,\n      devicePixelRatio: dpr\n    });\n    this._axisPointerLabelsMesh = new LabelsMesh({\n      ignorePicking: true,\n      renderOrder: 4,\n      castShadow: false\n    });\n\n    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());\n\n    this.groupGL.add(this._axisPointerLabelsMesh);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n  },\n  render: function (grid3DModel, ecModel, api) {\n    this._model = grid3DModel;\n    this._api = api;\n    var cartesian = grid3DModel.coordinateSystem; // Always have light.\n\n    cartesian.viewGL.add(this._lightRoot);\n\n    if (grid3DModel.get('show')) {\n      cartesian.viewGL.add(this.groupGL);\n    } else {\n      cartesian.viewGL.remove(this.groupGL);\n    } // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));\n\n\n    var control = this._control;\n    control.setViewGL(cartesian.viewGL);\n    var viewControlModel = grid3DModel.getModel('viewControl');\n    control.setFromViewControlModel(viewControlModel, 0);\n\n    this._axisLabelSurface.clear();\n\n    control.off('update');\n\n    if (grid3DModel.get('show')) {\n      this._faces.forEach(function (face) {\n        face.update(grid3DModel, ecModel, api);\n      }, this);\n\n      this._axes.forEach(function (axis) {\n        axis.update(grid3DModel, this._axisLabelSurface, api);\n      }, this);\n    }\n\n    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);\n\n    this._sceneHelper.setScene(cartesian.viewGL.scene);\n\n    this._sceneHelper.updateLight(grid3DModel); // Set post effect\n\n\n    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);\n    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));\n\n    this._initMouseHandler(grid3DModel);\n  },\n  afterRender: function (grid3DModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);\n  },\n\n  /**\n   * showAxisPointer will be triggered by action.\n   */\n  showAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doShowAxisPointer();\n\n    this._updateAxisPointer(payload.value);\n  },\n\n  /**\n   * hideAxisPointer will be triggered by action.\n   */\n  hideAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doHideAxisPointer();\n  },\n  _initMouseHandler: function (grid3DModel) {\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL; // TODO xAxis3D.axisPointer.show ?\n\n    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {\n      viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);\n    } else {\n      viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);\n    }\n  },\n\n  /**\n   * Try find and show axisPointer on the intersect point\n   * of mouse ray with grid plane.\n   */\n  _updateAxisPointerOnMousePosition: function (e) {\n    // Ignore if mouse is on the element.\n    if (e.target) {\n      return;\n    }\n\n    var grid3DModel = this._model;\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL;\n    var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());\n    var nearestIntersectPoint;\n\n    for (var i = 0; i < this._faces.length; i++) {\n      var face = this._faces[i];\n\n      if (face.rootNode.invisible) {\n        continue;\n      } // Plane is not face the camera. flip it\n\n\n      if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {\n        face.plane.normal.negate();\n      }\n\n      var point = ray.intersectPlane(face.plane);\n\n      if (!point) {\n        continue;\n      }\n\n      var axis0 = cartesian.getAxis(face.faceInfo[0]);\n      var axis1 = cartesian.getAxis(face.faceInfo[1]);\n      var idx0 = dimIndicesMap[face.faceInfo[0]];\n      var idx1 = dimIndicesMap[face.faceInfo[1]];\n\n      if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {\n        nearestIntersectPoint = point;\n      }\n    }\n\n    if (nearestIntersectPoint) {\n      var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);\n\n      this._updateAxisPointer(data);\n\n      this._doShowAxisPointer();\n    } else {\n      this._doHideAxisPointer();\n    }\n  },\n  _onCameraChange: function (grid3DModel, api) {\n    if (grid3DModel.get('show')) {\n      this._updateFaceVisibility();\n\n      this._updateAxisLinePosition();\n    }\n\n    var control = this._control;\n    api.dispatchAction({\n      type: 'grid3DChangeCamera',\n      alpha: control.getAlpha(),\n      beta: control.getBeta(),\n      distance: control.getDistance(),\n      center: control.getCenter(),\n      from: this.uid,\n      grid3DId: grid3DModel.id\n    });\n  },\n\n  /**\n   * Update visibility of each face when camera view changed, front face will be invisible.\n   * @private\n   */\n  _updateFaceVisibility: function () {\n    var camera = this._control.getCamera();\n\n    var viewSpacePos = new graphicGL.Vector3();\n    camera.update();\n\n    for (var idx = 0; idx < this._faces.length / 2; idx++) {\n      var depths = [];\n\n      for (var k = 0; k < 2; k++) {\n        var face = this._faces[idx * 2 + k];\n        face.rootNode.getWorldPosition(viewSpacePos);\n        viewSpacePos.transformMat4(camera.viewMatrix);\n        depths[k] = viewSpacePos.z;\n      } // Set the front face invisible\n\n\n      var frontIndex = depths[0] > depths[1] ? 0 : 1;\n      var frontFace = this._faces[idx * 2 + frontIndex];\n      var backFace = this._faces[idx * 2 + 1 - frontIndex]; // Update rotation.\n\n      frontFace.rootNode.invisible = true;\n      backFace.rootNode.invisible = false;\n    }\n  },\n\n  /**\n   * Update axis line position when camera view changed.\n   * @private\n   */\n  _updateAxisLinePosition: function () {\n    // Put xAxis, yAxis on x, y visible plane.\n    // Put zAxis on the left.\n    // TODO\n    var cartesian = this._model.coordinateSystem;\n    var xAxis = cartesian.getAxis('x');\n    var yAxis = cartesian.getAxis('y');\n    var zAxis = cartesian.getAxis('z');\n    var top = zAxis.getExtentMax();\n    var bottom = zAxis.getExtentMin();\n    var left = xAxis.getExtentMin();\n    var right = xAxis.getExtentMax();\n    var near = yAxis.getExtentMax();\n    var far = yAxis.getExtentMin();\n    var xAxisNode = this._axes[0].rootNode;\n    var yAxisNode = this._axes[1].rootNode;\n    var zAxisNode = this._axes[2].rootNode;\n    var faces = this._faces; // Notice: in cartesian up axis is z, but in webgl up axis is y.\n\n    var xAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    var xAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var yAxisXOffset = faces[0].rootNode.invisible ? left : right;\n    var yAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var zAxisXOffset = faces[0].rootNode.invisible ? right : left;\n    var zAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    xAxisNode.rotation.identity();\n    yAxisNode.rotation.identity();\n    zAxisNode.rotation.identity();\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[0].flipped = true;\n      xAxisNode.rotation.rotateX(Math.PI);\n    }\n\n    if (faces[0].rootNode.invisible) {\n      this._axes[1].flipped = true;\n      yAxisNode.rotation.rotateZ(Math.PI);\n    }\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[2].flipped = true;\n      zAxisNode.rotation.rotateY(Math.PI);\n    }\n\n    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);\n    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z\n\n    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y\n\n    xAxisNode.update();\n    yAxisNode.update();\n    zAxisNode.update();\n\n    this._updateAxisLabelAlign();\n  },\n\n  /**\n   * Update label align on axis when axisLine position changed.\n   * @private\n   */\n  _updateAxisLabelAlign: function () {\n    // var cartesian = this._model.coordinateSystem;\n    var camera = this._control.getCamera();\n\n    var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];\n    var center = new graphicGL.Vector4();\n    this.groupGL.getWorldPosition(center);\n    center.w = 1.0;\n    center.transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n    center.x /= center.w;\n    center.y /= center.w;\n\n    this._axes.forEach(function (axisInfo) {\n      var lineCoords = axisInfo.axisLineCoords;\n      var labelGeo = axisInfo.labelsMesh.geometry;\n\n      for (var i = 0; i < coords.length; i++) {\n        coords[i].setArray(lineCoords[i]);\n        coords[i].w = 1.0;\n        coords[i].transformMat4(axisInfo.rootNode.worldTransform).transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n        coords[i].x /= coords[i].w;\n        coords[i].y /= coords[i].w;\n      }\n\n      var dx = coords[1].x - coords[0].x;\n      var dy = coords[1].y - coords[0].y;\n      var cx = (coords[1].x + coords[0].x) / 2;\n      var cy = (coords[1].y + coords[0].y) / 2;\n      var textAlign;\n      var verticalAlign;\n\n      if (Math.abs(dy / dx) < 0.5) {\n        textAlign = 'center';\n        verticalAlign = cy > center.y ? 'bottom' : 'top';\n      } else {\n        verticalAlign = 'middle';\n        textAlign = cx > center.x ? 'left' : 'right';\n      } // axis labels\n\n\n      axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);\n    }, this);\n  },\n  _doShowAxisPointer: function () {\n    if (!this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = false;\n    this._axisPointerLabelsMesh.invisible = false;\n\n    this._api.getZr().refresh();\n  },\n  _doHideAxisPointer: function () {\n    if (this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = true;\n    this._axisPointerLabelsMesh.invisible = true;\n\n    this._api.getZr().refresh();\n  },\n\n  /**\n   * @private updateAxisPointer.\n   */\n  _updateAxisPointer: function (data) {\n    var cartesian = this._model.coordinateSystem;\n    var point = cartesian.dataToPoint(data);\n    var axisPointerLineMesh = this._axisPointerLineMesh;\n    var linesGeo = axisPointerLineMesh.geometry;\n\n    var axisPointerParentModel = this._model.getModel('axisPointer');\n\n    var dpr = this._api.getDevicePixelRatio();\n\n    linesGeo.convertToDynamicArray(true);\n\n    function ifShowAxisPointer(axis) {\n      return retrieve.firstNotNull(axis.model.get('axisPointer.show'), axisPointerParentModel.get('show'));\n    }\n\n    function getAxisColorAndLineWidth(axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);\n      var lineStyleModel = axisPointerModel.getModel('lineStyle');\n      var color = graphicGL.parseColor(lineStyleModel.get('color'));\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);\n      color[3] *= opacity;\n      return {\n        color: color,\n        lineWidth: lineWidth\n      };\n    }\n\n    for (var k = 0; k < this._faces.length; k++) {\n      var face = this._faces[k];\n\n      if (face.rootNode.invisible) {\n        continue;\n      }\n\n      var faceInfo = face.faceInfo;\n      var otherCoord = faceInfo[3] < 0 ? cartesian.getAxis(faceInfo[2]).getExtentMin() : cartesian.getAxis(faceInfo[2]).getExtentMax();\n      var otherDimIdx = dimIndicesMap[faceInfo[2]]; // Line on face.\n\n      for (var i = 0; i < 2; i++) {\n        var dim = faceInfo[i];\n        var faceOtherDim = faceInfo[1 - i];\n        var axis = cartesian.getAxis(dim);\n        var faceOtherAxis = cartesian.getAxis(faceOtherDim);\n\n        if (!ifShowAxisPointer(axis)) {\n          continue;\n        }\n\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0];\n        var dimIdx = dimIndicesMap[dim];\n        var faceOtherDimIdx = dimIndicesMap[faceOtherDim];\n        p0[dimIdx] = p1[dimIdx] = point[dimIdx];\n        p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;\n        p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();\n        p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();\n        var colorAndLineWidth = getAxisColorAndLineWidth(axis);\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      } // Project line.\n\n\n      if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {\n        var p0 = point.slice();\n        var p1 = point.slice();\n        p1[otherDimIdx] = otherCoord;\n        var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      }\n    }\n\n    linesGeo.convertToTypedArray();\n\n    this._updateAxisPointerLabelsMesh(data);\n\n    this._api.getZr().refresh();\n  },\n  _updateAxisPointerLabelsMesh: function (data) {\n    var grid3dModel = this._model;\n    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;\n    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;\n    var cartesian = grid3dModel.coordinateSystem;\n    var axisPointerParentModel = grid3dModel.getModel('axisPointer');\n    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);\n    axisPointerLabelsSurface.clear();\n    var otherDim = {\n      x: 'y',\n      y: 'x',\n      z: 'y'\n    };\n\n    this._axes.forEach(function (axisInfo, idx) {\n      var axis = cartesian.getAxis(axisInfo.dim);\n      var axisModel = axis.model;\n      var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);\n      var labelModel = axisPointerModel.getModel('label');\n      var lineColor = axisPointerModel.get('lineStyle.color');\n\n      if (!labelModel.get('show') || !axisPointerModel.get('show')) {\n        return;\n      }\n\n      var val = data[idx];\n      var formatter = labelModel.get('formatter');\n      var text = axis.scale.getLabel({\n        value: val\n      });\n\n      if (formatter != null) {\n        text = formatter(text, data);\n      } else {\n        if (axis.scale.type === 'interval' || axis.scale.type === 'log') {\n          var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);\n          text = val.toFixed(precision + 2);\n        }\n      }\n\n      var labelColor = labelModel.get('color');\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(labelModel, {\n          text: text,\n          fill: labelColor || lineColor,\n          align: 'left',\n          verticalAlign: 'top'\n        })\n      });\n      var coords = axisPointerLabelsSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n\n      var dpr = this._api.getDevicePixelRatio();\n\n      var pos = axisInfo.rootNode.position.toArray();\n      var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];\n      pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');\n      pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);\n      axisPointerLabelsMesh.geometry.addSprite(pos, [rect.width * dpr, rect.height * dpr], coords, axisInfo.textAlign, axisInfo.textVerticalAlign);\n    }, this);\n\n    axisPointerLabelsSurface.getZr().refreshImmediately();\n    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());\n    axisPointerLabelsMesh.geometry.convertToTypedArray();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._axisLabelSurface.dispose();\n\n    this._axisPointerLabelsSurface.dispose();\n  }\n});"]},"metadata":{},"sourceType":"module"}