{"ast":null,"code":"/**\n * Base class for all textures like compressed texture, texture2d, texturecube\n * TODO mapping\n */\nimport Base from './core/Base';\nimport glenum from './core/glenum';\nimport Cache from './core/Cache';\n/**\n * @constructor\n * @alias clay.Texture\n * @extends clay.core.Base\n */\n\nvar Texture = Base.extend(\n/** @lends clay.Texture# */\n{\n  /**\n   * Texture width, readonly when the texture source is image\n   * @type {number}\n   */\n  width: 512,\n\n  /**\n   * Texture height, readonly when the texture source is image\n   * @type {number}\n   */\n  height: 512,\n\n  /**\n   * Texel data type.\n   * Possible values:\n   *  + {@link clay.Texture.UNSIGNED_BYTE}\n   *  + {@link clay.Texture.HALF_FLOAT}\n   *  + {@link clay.Texture.FLOAT}\n   *  + {@link clay.Texture.UNSIGNED_INT_24_8_WEBGL}\n   *  + {@link clay.Texture.UNSIGNED_INT}\n   * @type {number}\n   */\n  type: glenum.UNSIGNED_BYTE,\n\n  /**\n   * Format of texel data\n   * Possible values:\n   *  + {@link clay.Texture.RGBA}\n   *  + {@link clay.Texture.DEPTH_COMPONENT}\n   *  + {@link clay.Texture.DEPTH_STENCIL}\n   * @type {number}\n   */\n  format: glenum.RGBA,\n\n  /**\n   * Texture wrap. Default to be REPEAT.\n   * Possible values:\n   *  + {@link clay.Texture.CLAMP_TO_EDGE}\n   *  + {@link clay.Texture.REPEAT}\n   *  + {@link clay.Texture.MIRRORED_REPEAT}\n   * @type {number}\n   */\n  wrapS: glenum.REPEAT,\n\n  /**\n   * Texture wrap. Default to be REPEAT.\n   * Possible values:\n   *  + {@link clay.Texture.CLAMP_TO_EDGE}\n   *  + {@link clay.Texture.REPEAT}\n   *  + {@link clay.Texture.MIRRORED_REPEAT}\n   * @type {number}\n   */\n  wrapT: glenum.REPEAT,\n\n  /**\n   * Possible values:\n   *  + {@link clay.Texture.NEAREST}\n   *  + {@link clay.Texture.LINEAR}\n   *  + {@link clay.Texture.NEAREST_MIPMAP_NEAREST}\n   *  + {@link clay.Texture.LINEAR_MIPMAP_NEAREST}\n   *  + {@link clay.Texture.NEAREST_MIPMAP_LINEAR}\n   *  + {@link clay.Texture.LINEAR_MIPMAP_LINEAR}\n   * @type {number}\n   */\n  minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n\n  /**\n   * Possible values:\n   *  + {@link clay.Texture.NEAREST}\n   *  + {@link clay.Texture.LINEAR}\n   * @type {number}\n   */\n  magFilter: glenum.LINEAR,\n\n  /**\n   * If enable mimap.\n   * @type {boolean}\n   */\n  useMipmap: true,\n\n  /**\n   * Anisotropic filtering, enabled if value is larger than 1\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic\n   * @type {number}\n   */\n  anisotropic: 1,\n  // pixelStorei parameters, not available when texture is used as render target\n  // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml\n\n  /**\n   * If flip in y axis for given image source\n   * @type {boolean}\n   * @default true\n   */\n  flipY: true,\n\n  /**\n   * A flag to indicate if texture source is sRGB\n   */\n  sRGB: true,\n\n  /**\n   * @type {number}\n   * @default 4\n   */\n  unpackAlignment: 4,\n\n  /**\n   * @type {boolean}\n   * @default false\n   */\n  premultiplyAlpha: false,\n\n  /**\n   * Dynamic option for texture like video\n   * @type {boolean}\n   */\n  dynamic: false,\n  NPOT: false,\n  // PENDING\n  // Init it here to avoid deoptimization when it's assigned in application dynamically\n  __used: 0\n}, function () {\n  this._cache = new Cache();\n},\n/** @lends clay.Texture.prototype */\n{\n  getWebGLTexture: function getWebGLTexture(renderer) {\n    var _gl = renderer.gl;\n    var cache = this._cache;\n    cache.use(renderer.__uid__);\n\n    if (cache.miss('webgl_texture')) {\n      // In a new gl context, create new texture and set dirty true\n      cache.put('webgl_texture', _gl.createTexture());\n    }\n\n    if (this.dynamic) {\n      this.update(renderer);\n    } else if (cache.isDirty()) {\n      this.update(renderer);\n      cache.fresh();\n    }\n\n    return cache.get('webgl_texture');\n  },\n  bind: function bind() {},\n  unbind: function unbind() {},\n\n  /**\n   * Mark texture is dirty and update in the next frame\n   */\n  dirty: function dirty() {\n    if (this._cache) {\n      this._cache.dirtyAll();\n    }\n  },\n  update: function update(renderer) {},\n  // Update the common parameters of texture\n  updateCommon: function updateCommon(renderer) {\n    var _gl = renderer.gl;\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment); // Use of none-power of two texture\n    // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences\n\n\n    if (this.format === glenum.DEPTH_COMPONENT) {\n      this.useMipmap = false;\n    }\n\n    var sRGBExt = renderer.getGLExtension('EXT_sRGB'); // Fallback\n\n    if (this.format === Texture.SRGB && !sRGBExt) {\n      this.format = Texture.RGB;\n    }\n\n    if (this.format === Texture.SRGB_ALPHA && !sRGBExt) {\n      this.format = Texture.RGBA;\n    }\n\n    this.NPOT = !this.isPowerOfTwo();\n  },\n  getAvailableWrapS: function getAvailableWrapS() {\n    if (this.NPOT) {\n      return glenum.CLAMP_TO_EDGE;\n    }\n\n    return this.wrapS;\n  },\n  getAvailableWrapT: function getAvailableWrapT() {\n    if (this.NPOT) {\n      return glenum.CLAMP_TO_EDGE;\n    }\n\n    return this.wrapT;\n  },\n  getAvailableMinFilter: function getAvailableMinFilter() {\n    var minFilter = this.minFilter;\n\n    if (this.NPOT || !this.useMipmap) {\n      if (minFilter === glenum.NEAREST_MIPMAP_NEAREST || minFilter === glenum.NEAREST_MIPMAP_LINEAR) {\n        return glenum.NEAREST;\n      } else if (minFilter === glenum.LINEAR_MIPMAP_LINEAR || minFilter === glenum.LINEAR_MIPMAP_NEAREST) {\n        return glenum.LINEAR;\n      } else {\n        return minFilter;\n      }\n    } else {\n      return minFilter;\n    }\n  },\n  getAvailableMagFilter: function getAvailableMagFilter() {\n    return this.magFilter;\n  },\n  nextHighestPowerOfTwo: function nextHighestPowerOfTwo(x) {\n    --x;\n\n    for (var i = 1; i < 32; i <<= 1) {\n      x = x | x >> i;\n    }\n\n    return x + 1;\n  },\n\n  /**\n   * @param  {clay.Renderer} renderer\n   */\n  dispose: function dispose(renderer) {\n    var cache = this._cache;\n    cache.use(renderer.__uid__);\n    var webglTexture = cache.get('webgl_texture');\n\n    if (webglTexture) {\n      renderer.gl.deleteTexture(webglTexture);\n    }\n\n    cache.deleteContext(renderer.__uid__);\n  },\n\n  /**\n   * Test if image of texture is valid and loaded.\n   * @return {boolean}\n   */\n  isRenderable: function isRenderable() {},\n\n  /**\n   * Test if texture size is power of two\n   * @return {boolean}\n   */\n  isPowerOfTwo: function isPowerOfTwo() {}\n});\nObject.defineProperty(Texture.prototype, 'width', {\n  get: function get() {\n    return this._width;\n  },\n  set: function set(value) {\n    this._width = value;\n  }\n});\nObject.defineProperty(Texture.prototype, 'height', {\n  get: function get() {\n    return this._height;\n  },\n  set: function set(value) {\n    this._height = value;\n  }\n});\n/* DataType */\n\n/**\n * @type {number}\n */\n\nTexture.BYTE = glenum.BYTE;\n/**\n * @type {number}\n */\n\nTexture.UNSIGNED_BYTE = glenum.UNSIGNED_BYTE;\n/**\n * @type {number}\n */\n\nTexture.SHORT = glenum.SHORT;\n/**\n * @type {number}\n */\n\nTexture.UNSIGNED_SHORT = glenum.UNSIGNED_SHORT;\n/**\n * @type {number}\n */\n\nTexture.INT = glenum.INT;\n/**\n * @type {number}\n */\n\nTexture.UNSIGNED_INT = glenum.UNSIGNED_INT;\n/**\n * @type {number}\n */\n\nTexture.FLOAT = glenum.FLOAT;\n/**\n * @type {number}\n */\n\nTexture.HALF_FLOAT = 0x8D61;\n/**\n * UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension\n * @type {number}\n */\n\nTexture.UNSIGNED_INT_24_8_WEBGL = 34042;\n/* PixelFormat */\n\n/**\n * @type {number}\n */\n\nTexture.DEPTH_COMPONENT = glenum.DEPTH_COMPONENT;\n/**\n * @type {number}\n */\n\nTexture.DEPTH_STENCIL = glenum.DEPTH_STENCIL;\n/**\n * @type {number}\n */\n\nTexture.ALPHA = glenum.ALPHA;\n/**\n * @type {number}\n */\n\nTexture.RGB = glenum.RGB;\n/**\n * @type {number}\n */\n\nTexture.RGBA = glenum.RGBA;\n/**\n * @type {number}\n */\n\nTexture.LUMINANCE = glenum.LUMINANCE;\n/**\n * @type {number}\n */\n\nTexture.LUMINANCE_ALPHA = glenum.LUMINANCE_ALPHA;\n/**\n * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/\n * @type {number}\n */\n\nTexture.SRGB = 0x8C40;\n/**\n * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/\n * @type {number}\n */\n\nTexture.SRGB_ALPHA = 0x8C42;\n/* Compressed Texture */\n\nTexture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\nTexture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\nTexture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\nTexture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n/* TextureMagFilter */\n\n/**\n * @type {number}\n */\n\nTexture.NEAREST = glenum.NEAREST;\n/**\n * @type {number}\n */\n\nTexture.LINEAR = glenum.LINEAR;\n/* TextureMinFilter */\n\n/**\n * @type {number}\n */\n\nTexture.NEAREST_MIPMAP_NEAREST = glenum.NEAREST_MIPMAP_NEAREST;\n/**\n * @type {number}\n */\n\nTexture.LINEAR_MIPMAP_NEAREST = glenum.LINEAR_MIPMAP_NEAREST;\n/**\n * @type {number}\n */\n\nTexture.NEAREST_MIPMAP_LINEAR = glenum.NEAREST_MIPMAP_LINEAR;\n/**\n * @type {number}\n */\n\nTexture.LINEAR_MIPMAP_LINEAR = glenum.LINEAR_MIPMAP_LINEAR;\n/* TextureWrapMode */\n\n/**\n * @type {number}\n */\n\nTexture.REPEAT = glenum.REPEAT;\n/**\n * @type {number}\n */\n\nTexture.CLAMP_TO_EDGE = glenum.CLAMP_TO_EDGE;\n/**\n * @type {number}\n */\n\nTexture.MIRRORED_REPEAT = glenum.MIRRORED_REPEAT;\nexport default Texture;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/Texture.js"],"names":["Base","glenum","Cache","Texture","extend","width","height","type","UNSIGNED_BYTE","format","RGBA","wrapS","REPEAT","wrapT","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","useMipmap","anisotropic","flipY","sRGB","unpackAlignment","premultiplyAlpha","dynamic","NPOT","__used","_cache","getWebGLTexture","renderer","_gl","gl","cache","use","__uid__","miss","put","createTexture","update","isDirty","fresh","get","bind","unbind","dirty","dirtyAll","updateCommon","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","DEPTH_COMPONENT","sRGBExt","getGLExtension","SRGB","RGB","SRGB_ALPHA","isPowerOfTwo","getAvailableWrapS","CLAMP_TO_EDGE","getAvailableWrapT","getAvailableMinFilter","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST","LINEAR_MIPMAP_NEAREST","getAvailableMagFilter","nextHighestPowerOfTwo","x","i","dispose","webglTexture","deleteTexture","deleteContext","isRenderable","Object","defineProperty","prototype","_width","set","value","_height","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT","UNSIGNED_INT_24_8_WEBGL","DEPTH_STENCIL","ALPHA","LUMINANCE","LUMINANCE_ALPHA","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","MIRRORED_REPEAT"],"mappings":"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AACA7E,OAAO,CAAC+E,IAAR,GAAejF,MAAM,CAACiF,IAAtB;AACA;AACA;AACA;;AACA/E,OAAO,CAACK,aAAR,GAAwBP,MAAM,CAACO,aAA/B;AACA;AACA;AACA;;AACAL,OAAO,CAACgF,KAAR,GAAgBlF,MAAM,CAACkF,KAAvB;AACA;AACA;AACA;;AACAhF,OAAO,CAACiF,cAAR,GAAyBnF,MAAM,CAACmF,cAAhC;AACA;AACA;AACA;;AACAjF,OAAO,CAACkF,GAAR,GAAcpF,MAAM,CAACoF,GAArB;AACA;AACA;AACA;;AACAlF,OAAO,CAACmF,YAAR,GAAuBrF,MAAM,CAACqF,YAA9B;AACA;AACA;AACA;;AACAnF,OAAO,CAACoF,KAAR,GAAgBtF,MAAM,CAACsF,KAAvB;AACA;AACA;AACA;;AACApF,OAAO,CAACqF,UAAR,GAAqB,MAArB;AAEA;AACA;AACA;AACA;;AACArF,OAAO,CAACsF,uBAAR,GAAkC,KAAlC;AAEA;;AACA;AACA;AACA;;AACAtF,OAAO,CAACgD,eAAR,GAA0BlD,MAAM,CAACkD,eAAjC;AACA;AACA;AACA;;AACAhD,OAAO,CAACuF,aAAR,GAAwBzF,MAAM,CAACyF,aAA/B;AACA;AACA;AACA;;AACAvF,OAAO,CAACwF,KAAR,GAAgB1F,MAAM,CAAC0F,KAAvB;AACA;AACA;AACA;;AACAxF,OAAO,CAACoD,GAAR,GAActD,MAAM,CAACsD,GAArB;AACA;AACA;AACA;;AACApD,OAAO,CAACO,IAAR,GAAeT,MAAM,CAACS,IAAtB;AACA;AACA;AACA;;AACAP,OAAO,CAACyF,SAAR,GAAoB3F,MAAM,CAAC2F,SAA3B;AACA;AACA;AACA;;AACAzF,OAAO,CAAC0F,eAAR,GAA0B5F,MAAM,CAAC4F,eAAjC;AAEA;AACA;AACA;AACA;;AACA1F,OAAO,CAACmD,IAAR,GAAe,MAAf;AACA;AACA;AACA;AACA;;AACAnD,OAAO,CAACqD,UAAR,GAAqB,MAArB;AAEA;;AACArD,OAAO,CAAC2F,4BAAR,GAAuC,MAAvC;AACA3F,OAAO,CAAC4F,6BAAR,GAAwC,MAAxC;AACA5F,OAAO,CAAC6F,6BAAR,GAAwC,MAAxC;AACA7F,OAAO,CAAC8F,6BAAR,GAAwC,MAAxC;AAEA;;AACA;AACA;AACA;;AACA9F,OAAO,CAAC6D,OAAR,GAAkB/D,MAAM,CAAC+D,OAAzB;AACA;AACA;AACA;;AACA7D,OAAO,CAACc,MAAR,GAAiBhB,MAAM,CAACgB,MAAxB;AAEA;;AACA;AACA;AACA;;AACAd,OAAO,CAAC2D,sBAAR,GAAiC7D,MAAM,CAAC6D,sBAAxC;AACA;AACA;AACA;;AACA3D,OAAO,CAAC8D,qBAAR,GAAgChE,MAAM,CAACgE,qBAAvC;AACA;AACA;AACA;;AACA9D,OAAO,CAAC4D,qBAAR,GAAgC9D,MAAM,CAAC8D,qBAAvC;AACA;AACA;AACA;;AACA5D,OAAO,CAACY,oBAAR,GAA+Bd,MAAM,CAACc,oBAAtC;AAEA;;AACA;AACA;AACA;;AACAZ,OAAO,CAACS,MAAR,GAAiBX,MAAM,CAACW,MAAxB;AACA;AACA;AACA;;AACAT,OAAO,CAACwD,aAAR,GAAwB1D,MAAM,CAAC0D,aAA/B;AACA;AACA;AACA;;AACAxD,OAAO,CAAC+F,eAAR,GAA0BjG,MAAM,CAACiG,eAAjC;AAGA,eAAe/F,OAAf","sourcesContent":["/**\n * Base class for all textures like compressed texture, texture2d, texturecube\n * TODO mapping\n */\nimport Base from './core/Base';\nimport glenum from './core/glenum';\nimport Cache from './core/Cache';\n\n/**\n * @constructor\n * @alias clay.Texture\n * @extends clay.core.Base\n */\nvar Texture = Base.extend( /** @lends clay.Texture# */ {\n    /**\n     * Texture width, readonly when the texture source is image\n     * @type {number}\n     */\n    width: 512,\n    /**\n     * Texture height, readonly when the texture source is image\n     * @type {number}\n     */\n    height: 512,\n    /**\n     * Texel data type.\n     * Possible values:\n     *  + {@link clay.Texture.UNSIGNED_BYTE}\n     *  + {@link clay.Texture.HALF_FLOAT}\n     *  + {@link clay.Texture.FLOAT}\n     *  + {@link clay.Texture.UNSIGNED_INT_24_8_WEBGL}\n     *  + {@link clay.Texture.UNSIGNED_INT}\n     * @type {number}\n     */\n    type: glenum.UNSIGNED_BYTE,\n    /**\n     * Format of texel data\n     * Possible values:\n     *  + {@link clay.Texture.RGBA}\n     *  + {@link clay.Texture.DEPTH_COMPONENT}\n     *  + {@link clay.Texture.DEPTH_STENCIL}\n     * @type {number}\n     */\n    format: glenum.RGBA,\n    /**\n     * Texture wrap. Default to be REPEAT.\n     * Possible values:\n     *  + {@link clay.Texture.CLAMP_TO_EDGE}\n     *  + {@link clay.Texture.REPEAT}\n     *  + {@link clay.Texture.MIRRORED_REPEAT}\n     * @type {number}\n     */\n    wrapS: glenum.REPEAT,\n    /**\n     * Texture wrap. Default to be REPEAT.\n     * Possible values:\n     *  + {@link clay.Texture.CLAMP_TO_EDGE}\n     *  + {@link clay.Texture.REPEAT}\n     *  + {@link clay.Texture.MIRRORED_REPEAT}\n     * @type {number}\n     */\n    wrapT: glenum.REPEAT,\n    /**\n     * Possible values:\n     *  + {@link clay.Texture.NEAREST}\n     *  + {@link clay.Texture.LINEAR}\n     *  + {@link clay.Texture.NEAREST_MIPMAP_NEAREST}\n     *  + {@link clay.Texture.LINEAR_MIPMAP_NEAREST}\n     *  + {@link clay.Texture.NEAREST_MIPMAP_LINEAR}\n     *  + {@link clay.Texture.LINEAR_MIPMAP_LINEAR}\n     * @type {number}\n     */\n    minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n    /**\n     * Possible values:\n     *  + {@link clay.Texture.NEAREST}\n     *  + {@link clay.Texture.LINEAR}\n     * @type {number}\n     */\n    magFilter: glenum.LINEAR,\n    /**\n     * If enable mimap.\n     * @type {boolean}\n     */\n    useMipmap: true,\n\n    /**\n     * Anisotropic filtering, enabled if value is larger than 1\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic\n     * @type {number}\n     */\n    anisotropic: 1,\n    // pixelStorei parameters, not available when texture is used as render target\n    // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml\n    /**\n     * If flip in y axis for given image source\n     * @type {boolean}\n     * @default true\n     */\n    flipY: true,\n\n    /**\n     * A flag to indicate if texture source is sRGB\n     */\n    sRGB: true,\n    /**\n     * @type {number}\n     * @default 4\n     */\n    unpackAlignment: 4,\n    /**\n     * @type {boolean}\n     * @default false\n     */\n    premultiplyAlpha: false,\n\n    /**\n     * Dynamic option for texture like video\n     * @type {boolean}\n     */\n    dynamic: false,\n\n    NPOT: false,\n\n    // PENDING\n    // Init it here to avoid deoptimization when it's assigned in application dynamically\n    __used: 0\n\n}, function () {\n    this._cache = new Cache();\n},\n/** @lends clay.Texture.prototype */\n{\n\n    getWebGLTexture: function (renderer) {\n        var _gl = renderer.gl;\n        var cache = this._cache;\n        cache.use(renderer.__uid__);\n\n        if (cache.miss('webgl_texture')) {\n            // In a new gl context, create new texture and set dirty true\n            cache.put('webgl_texture', _gl.createTexture());\n        }\n        if (this.dynamic) {\n            this.update(renderer);\n        }\n        else if (cache.isDirty()) {\n            this.update(renderer);\n            cache.fresh();\n        }\n\n        return cache.get('webgl_texture');\n    },\n\n    bind: function () {},\n    unbind: function () {},\n\n    /**\n     * Mark texture is dirty and update in the next frame\n     */\n    dirty: function () {\n        if (this._cache) {\n            this._cache.dirtyAll();\n        }\n    },\n\n    update: function (renderer) {},\n\n    // Update the common parameters of texture\n    updateCommon: function (renderer) {\n        var _gl = renderer.gl;\n        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n\n        // Use of none-power of two texture\n        // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences\n        if (this.format === glenum.DEPTH_COMPONENT) {\n            this.useMipmap = false;\n        }\n\n        var sRGBExt = renderer.getGLExtension('EXT_sRGB');\n        // Fallback\n        if (this.format === Texture.SRGB && !sRGBExt) {\n            this.format = Texture.RGB;\n        }\n        if (this.format === Texture.SRGB_ALPHA && !sRGBExt) {\n            this.format = Texture.RGBA;\n        }\n\n        this.NPOT = !this.isPowerOfTwo();\n    },\n\n    getAvailableWrapS: function () {\n        if (this.NPOT) {\n            return glenum.CLAMP_TO_EDGE;\n        }\n        return this.wrapS;\n    },\n    getAvailableWrapT: function () {\n        if (this.NPOT) {\n            return glenum.CLAMP_TO_EDGE;\n        }\n        return this.wrapT;\n    },\n    getAvailableMinFilter: function () {\n        var minFilter = this.minFilter;\n        if (this.NPOT || !this.useMipmap) {\n            if (minFilter === glenum.NEAREST_MIPMAP_NEAREST ||\n                minFilter === glenum.NEAREST_MIPMAP_LINEAR\n            ) {\n                return glenum.NEAREST;\n            }\n            else if (minFilter === glenum.LINEAR_MIPMAP_LINEAR ||\n                minFilter === glenum.LINEAR_MIPMAP_NEAREST\n            ) {\n                return glenum.LINEAR;\n            }\n            else {\n                return minFilter;\n            }\n        }\n        else {\n            return minFilter;\n        }\n    },\n    getAvailableMagFilter: function () {\n        return this.magFilter;\n    },\n\n    nextHighestPowerOfTwo: function (x) {\n        --x;\n        for (var i = 1; i < 32; i <<= 1) {\n            x = x | x >> i;\n        }\n        return x + 1;\n    },\n    /**\n     * @param  {clay.Renderer} renderer\n     */\n    dispose: function (renderer) {\n\n        var cache = this._cache;\n\n        cache.use(renderer.__uid__);\n\n        var webglTexture = cache.get('webgl_texture');\n        if (webglTexture){\n            renderer.gl.deleteTexture(webglTexture);\n        }\n        cache.deleteContext(renderer.__uid__);\n\n    },\n    /**\n     * Test if image of texture is valid and loaded.\n     * @return {boolean}\n     */\n    isRenderable: function () {},\n\n    /**\n     * Test if texture size is power of two\n     * @return {boolean}\n     */\n    isPowerOfTwo: function () {}\n});\n\nObject.defineProperty(Texture.prototype, 'width', {\n    get: function () {\n        return this._width;\n    },\n    set: function (value) {\n        this._width = value;\n    }\n});\nObject.defineProperty(Texture.prototype, 'height', {\n    get: function () {\n        return this._height;\n    },\n    set: function (value) {\n        this._height = value;\n    }\n});\n\n/* DataType */\n\n/**\n * @type {number}\n */\nTexture.BYTE = glenum.BYTE;\n/**\n * @type {number}\n */\nTexture.UNSIGNED_BYTE = glenum.UNSIGNED_BYTE;\n/**\n * @type {number}\n */\nTexture.SHORT = glenum.SHORT;\n/**\n * @type {number}\n */\nTexture.UNSIGNED_SHORT = glenum.UNSIGNED_SHORT;\n/**\n * @type {number}\n */\nTexture.INT = glenum.INT;\n/**\n * @type {number}\n */\nTexture.UNSIGNED_INT = glenum.UNSIGNED_INT;\n/**\n * @type {number}\n */\nTexture.FLOAT = glenum.FLOAT;\n/**\n * @type {number}\n */\nTexture.HALF_FLOAT = 0x8D61;\n\n/**\n * UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension\n * @type {number}\n */\nTexture.UNSIGNED_INT_24_8_WEBGL = 34042;\n\n/* PixelFormat */\n/**\n * @type {number}\n */\nTexture.DEPTH_COMPONENT = glenum.DEPTH_COMPONENT;\n/**\n * @type {number}\n */\nTexture.DEPTH_STENCIL = glenum.DEPTH_STENCIL;\n/**\n * @type {number}\n */\nTexture.ALPHA = glenum.ALPHA;\n/**\n * @type {number}\n */\nTexture.RGB = glenum.RGB;\n/**\n * @type {number}\n */\nTexture.RGBA = glenum.RGBA;\n/**\n * @type {number}\n */\nTexture.LUMINANCE = glenum.LUMINANCE;\n/**\n * @type {number}\n */\nTexture.LUMINANCE_ALPHA = glenum.LUMINANCE_ALPHA;\n\n/**\n * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/\n * @type {number}\n */\nTexture.SRGB = 0x8C40;\n/**\n * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/\n * @type {number}\n */\nTexture.SRGB_ALPHA = 0x8C42;\n\n/* Compressed Texture */\nTexture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\nTexture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\nTexture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\nTexture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n\n/* TextureMagFilter */\n/**\n * @type {number}\n */\nTexture.NEAREST = glenum.NEAREST;\n/**\n * @type {number}\n */\nTexture.LINEAR = glenum.LINEAR;\n\n/* TextureMinFilter */\n/**\n * @type {number}\n */\nTexture.NEAREST_MIPMAP_NEAREST = glenum.NEAREST_MIPMAP_NEAREST;\n/**\n * @type {number}\n */\nTexture.LINEAR_MIPMAP_NEAREST = glenum.LINEAR_MIPMAP_NEAREST;\n/**\n * @type {number}\n */\nTexture.NEAREST_MIPMAP_LINEAR = glenum.NEAREST_MIPMAP_LINEAR;\n/**\n * @type {number}\n */\nTexture.LINEAR_MIPMAP_LINEAR = glenum.LINEAR_MIPMAP_LINEAR;\n\n/* TextureWrapMode */\n/**\n * @type {number}\n */\nTexture.REPEAT = glenum.REPEAT;\n/**\n * @type {number}\n */\nTexture.CLAMP_TO_EDGE = glenum.CLAMP_TO_EDGE;\n/**\n * @type {number}\n */\nTexture.MIRRORED_REPEAT = glenum.MIRRORED_REPEAT;\n\n\nexport default Texture;\n"]},"metadata":{},"sourceType":"module"}