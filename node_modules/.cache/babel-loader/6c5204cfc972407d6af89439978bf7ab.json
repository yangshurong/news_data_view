{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\n\n/**\n * Provide orbit control for 3D objects\n *\n * @module echarts-gl/util/OrbitControl\n * @author Yi Shen(http://github.com/pissang)\n */\n// TODO Remove magic numbers on sensitivity\nimport Base from 'claygl/src/core/Base';\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport retrieve from './retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nvar MOUSE_BUTTON_KEY_MAP = {\n  left: 0,\n  middle: 1,\n  right: 2\n};\n\nfunction convertToArray(val) {\n  if (!(val instanceof Array)) {\n    val = [val, val];\n  }\n\n  return val;\n}\n/**\n * @alias module:echarts-x/util/OrbitControl\n */\n\n\nvar OrbitControl = Base.extend(function () {\n  return {\n    /**\n     * @type {module:zrender~ZRender}\n     */\n    zr: null,\n\n    /**\n     * @type {module:echarts-gl/core/ViewGL}\n     */\n    viewGL: null,\n\n    /**\n     * @type {clay.math.Vector3}\n     */\n    _center: new Vector3(),\n\n    /**\n     * Minimum distance to the center\n     * Only available when camera is perspective.\n     * @type {number}\n     * @default 0.5\n     */\n    minDistance: 0.5,\n\n    /**\n     * Maximum distance to the center\n     * Only available when camera is perspective.\n     * @type {number}\n     * @default 2\n     */\n    maxDistance: 1.5,\n\n    /**\n     * Only available when camera is orthographic\n     */\n    maxOrthographicSize: 300,\n\n    /**\n     * Only available when camera is orthographic\n     */\n    minOrthographicSize: 30,\n\n    /**\n     * Minimum alpha rotation\n     */\n    minAlpha: -90,\n\n    /**\n     * Maximum alpha rotation\n     */\n    maxAlpha: 90,\n\n    /**\n     * Minimum beta rotation\n     */\n    minBeta: -Infinity,\n\n    /**\n     * Maximum beta rotation\n     */\n    maxBeta: Infinity,\n\n    /**\n     * Start auto rotating after still for the given time\n     */\n    autoRotateAfterStill: 0,\n\n    /**\n     * Direction of autoRotate. cw or ccw when looking top down.\n     */\n    autoRotateDirection: 'cw',\n\n    /**\n     * Degree per second\n     */\n    autoRotateSpeed: 60,\n\n    /**\n     * @param {number}\n     */\n    damping: 0.8,\n\n    /**\n     * @param {number}\n     */\n    rotateSensitivity: 1,\n\n    /**\n     * @param {number}\n     */\n    zoomSensitivity: 1,\n\n    /**\n     * @param {number}\n     */\n    panSensitivity: 1,\n    panMouseButton: 'middle',\n    rotateMouseButton: 'left',\n\n    /**\n     * Pan or rotate\n     * @private\n     * @type {String}\n     */\n    _mode: 'rotate',\n\n    /**\n     * @private\n     * @type {clay.Camera}\n     */\n    _camera: null,\n    _needsUpdate: false,\n    _rotating: false,\n    // Rotation around yAxis in radian\n    _phi: 0,\n    // Rotation around xAxis in radian\n    _theta: 0,\n    _mouseX: 0,\n    _mouseY: 0,\n    _rotateVelocity: new Vector2(),\n    _panVelocity: new Vector2(),\n    _distance: 500,\n    _zoomSpeed: 0,\n    _stillTimeout: 0,\n    _animators: []\n  };\n}, function () {\n  // Each OrbitControl has it's own handler\n  ['_mouseDownHandler', '_mouseWheelHandler', '_mouseMoveHandler', '_mouseUpHandler', '_pinchHandler', '_contextMenuHandler', '_update'].forEach(function (hdlName) {\n    this[hdlName] = this[hdlName].bind(this);\n  }, this);\n}, {\n  /**\n   * Initialize.\n   * Mouse event binding\n   */\n  init: function init() {\n    var zr = this.zr;\n\n    if (zr) {\n      zr.on('mousedown', this._mouseDownHandler);\n      zr.on('globalout', this._mouseUpHandler);\n      zr.on('mousewheel', this._mouseWheelHandler);\n      zr.on('pinch', this._pinchHandler);\n      zr.animation.on('frame', this._update);\n      zr.dom.addEventListener('contextmenu', this._contextMenuHandler);\n    }\n  },\n\n  /**\n   * Dispose.\n   * Mouse event unbinding\n   */\n  dispose: function dispose() {\n    var zr = this.zr;\n\n    if (zr) {\n      zr.off('mousedown', this._mouseDownHandler);\n      zr.off('mousemove', this._mouseMoveHandler);\n      zr.off('mouseup', this._mouseUpHandler);\n      zr.off('mousewheel', this._mouseWheelHandler);\n      zr.off('pinch', this._pinchHandler);\n      zr.off('globalout', this._mouseUpHandler);\n      zr.dom.removeEventListener('contextmenu', this._contextMenuHandler);\n      zr.animation.off('frame', this._update);\n    }\n\n    this.stopAllAnimation();\n  },\n\n  /**\n   * Get distance\n   * @return {number}\n   */\n  getDistance: function getDistance() {\n    return this._distance;\n  },\n\n  /**\n   * Set distance\n   * @param {number} distance\n   */\n  setDistance: function setDistance(distance) {\n    this._distance = distance;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Get size of orthographic viewing volume\n   * @return {number}\n   */\n  getOrthographicSize: function getOrthographicSize() {\n    return this._orthoSize;\n  },\n\n  /**\n   * Set size of orthographic viewing volume\n   * @param {number} size\n   */\n  setOrthographicSize: function setOrthographicSize(size) {\n    this._orthoSize = size;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Get alpha rotation\n   * Alpha angle for top-down rotation. Positive to rotate to top.\n   *\n   * Which means camera rotation around x axis.\n   */\n  getAlpha: function getAlpha() {\n    return this._theta / Math.PI * 180;\n  },\n\n  /**\n   * Get beta rotation\n   * Beta angle for left-right rotation. Positive to rotate to right.\n   *\n   * Which means camera rotation around y axis.\n   */\n  getBeta: function getBeta() {\n    return -this._phi / Math.PI * 180;\n  },\n\n  /**\n   * Get control center\n   * @return {Array.<number>}\n   */\n  getCenter: function getCenter() {\n    return this._center.toArray();\n  },\n\n  /**\n   * Set alpha rotation angle\n   * @param {number} alpha\n   */\n  setAlpha: function setAlpha(alpha) {\n    alpha = Math.max(Math.min(this.maxAlpha, alpha), this.minAlpha);\n    this._theta = alpha / 180 * Math.PI;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Set beta rotation angle\n   * @param {number} beta\n   */\n  setBeta: function setBeta(beta) {\n    beta = Math.max(Math.min(this.maxBeta, beta), this.minBeta);\n    this._phi = -beta / 180 * Math.PI;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Set control center\n   * @param {Array.<number>} center\n   */\n  setCenter: function setCenter(centerArr) {\n    this._center.setArray(centerArr);\n  },\n\n  /**\n   * @param {module:echarts-gl/core/ViewGL} viewGL\n   */\n  setViewGL: function setViewGL(viewGL) {\n    this.viewGL = viewGL;\n  },\n\n  /**\n   * @return {clay.Camera}\n   */\n  getCamera: function getCamera() {\n    return this.viewGL.camera;\n  },\n  setFromViewControlModel: function setFromViewControlModel(viewControlModel, extraOpts) {\n    extraOpts = extraOpts || {};\n    var baseDistance = extraOpts.baseDistance || 0;\n    var baseOrthoSize = extraOpts.baseOrthoSize || 1;\n    var projection = viewControlModel.get('projection');\n\n    if (projection !== 'perspective' && projection !== 'orthographic' && projection !== 'isometric') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Unkown projection type %s, use perspective projection instead.', projection);\n      }\n\n      projection = 'perspective';\n    }\n\n    this._projection = projection;\n    this.viewGL.setProjection(projection);\n    var targetDistance = viewControlModel.get('distance') + baseDistance;\n    var targetOrthographicSize = viewControlModel.get('orthographicSize') + baseOrthoSize;\n    [['damping', 0.8], ['autoRotate', false], ['autoRotateAfterStill', 3], ['autoRotateDirection', 'cw'], ['autoRotateSpeed', 10], ['minDistance', 30], ['maxDistance', 400], ['minOrthographicSize', 30], ['maxOrthographicSize', 300], ['minAlpha', -90], ['maxAlpha', 90], ['minBeta', -Infinity], ['maxBeta', Infinity], ['rotateSensitivity', 1], ['zoomSensitivity', 1], ['panSensitivity', 1], ['panMouseButton', 'left'], ['rotateMouseButton', 'middle']].forEach(function (prop) {\n      this[prop[0]] = firstNotNull(viewControlModel.get(prop[0]), prop[1]);\n    }, this);\n    this.minDistance += baseDistance;\n    this.maxDistance += baseDistance;\n    this.minOrthographicSize += baseOrthoSize, this.maxOrthographicSize += baseOrthoSize;\n    var ecModel = viewControlModel.ecModel;\n    var animationOpts = {};\n    ['animation', 'animationDurationUpdate', 'animationEasingUpdate'].forEach(function (key) {\n      animationOpts[key] = firstNotNull(viewControlModel.get(key), ecModel && ecModel.get(key));\n    });\n    var alpha = firstNotNull(extraOpts.alpha, viewControlModel.get('alpha')) || 0;\n    var beta = firstNotNull(extraOpts.beta, viewControlModel.get('beta')) || 0;\n    var center = firstNotNull(extraOpts.center, viewControlModel.get('center')) || [0, 0, 0];\n\n    if (animationOpts.animation && animationOpts.animationDurationUpdate > 0 && this._notFirst) {\n      this.animateTo({\n        alpha: alpha,\n        beta: beta,\n        center: center,\n        distance: targetDistance,\n        orthographicSize: targetOrthographicSize,\n        easing: animationOpts.animationEasingUpdate,\n        duration: animationOpts.animationDurationUpdate\n      });\n    } else {\n      this.setDistance(targetDistance);\n      this.setAlpha(alpha);\n      this.setBeta(beta);\n      this.setCenter(center);\n      this.setOrthographicSize(targetOrthographicSize);\n    }\n\n    this._notFirst = true;\n\n    this._validateProperties();\n  },\n  _validateProperties: function _validateProperties() {\n    if (process.env.NODE_ENV !== 'production') {\n      if (MOUSE_BUTTON_KEY_MAP[this.panMouseButton] == null) {\n        console.error('Unkown panMouseButton %s. It should be left|middle|right', this.panMouseButton);\n      }\n\n      if (MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton] == null) {\n        console.error('Unkown rotateMouseButton %s. It should be left|middle|right', this.rotateMouseButton);\n      }\n\n      if (this.autoRotateDirection !== 'cw' && this.autoRotateDirection !== 'ccw') {\n        console.error('Unkown autoRotateDirection %s. It should be cw|ccw', this.autoRotateDirection);\n      }\n    }\n  },\n\n  /**\n   * @param {Object} opts\n   * @param {number} opts.distance\n   * @param {number} opts.alpha\n   * @param {number} opts.beta\n   * @param {number} opts.orthographicSize\n   * @param {number} [opts.duration=1000]\n   * @param {number} [opts.easing='linear']\n   */\n  animateTo: function animateTo(opts) {\n    var zr = this.zr;\n    var self = this;\n    var obj = {};\n    var target = {};\n\n    if (opts.distance != null) {\n      obj.distance = this.getDistance();\n      target.distance = opts.distance;\n    }\n\n    if (opts.orthographicSize != null) {\n      obj.orthographicSize = this.getOrthographicSize();\n      target.orthographicSize = opts.orthographicSize;\n    }\n\n    if (opts.alpha != null) {\n      obj.alpha = this.getAlpha();\n      target.alpha = opts.alpha;\n    }\n\n    if (opts.beta != null) {\n      obj.beta = this.getBeta();\n      target.beta = opts.beta;\n    }\n\n    if (opts.center != null) {\n      obj.center = this.getCenter();\n      target.center = opts.center;\n    }\n\n    return this._addAnimator(zr.animation.animate(obj).when(opts.duration || 1000, target).during(function () {\n      if (obj.alpha != null) {\n        self.setAlpha(obj.alpha);\n      }\n\n      if (obj.beta != null) {\n        self.setBeta(obj.beta);\n      }\n\n      if (obj.distance != null) {\n        self.setDistance(obj.distance);\n      }\n\n      if (obj.center != null) {\n        self.setCenter(obj.center);\n      }\n\n      if (obj.orthographicSize != null) {\n        self.setOrthographicSize(obj.orthographicSize);\n      }\n\n      self._needsUpdate = true;\n    })).start(opts.easing || 'linear');\n  },\n\n  /**\n   * Stop all animation\n   */\n  stopAllAnimation: function stopAllAnimation() {\n    for (var i = 0; i < this._animators.length; i++) {\n      this._animators[i].stop();\n    }\n\n    this._animators.length = 0;\n  },\n  update: function update() {\n    this._needsUpdate = true;\n\n    this._update(20);\n  },\n  _isAnimating: function _isAnimating() {\n    return this._animators.length > 0;\n  },\n\n  /**\n   * Call update each frame\n   * @param  {number} deltaTime Frame time\n   */\n  _update: function _update(deltaTime) {\n    if (this._rotating) {\n      var radian = (this.autoRotateDirection === 'cw' ? 1 : -1) * this.autoRotateSpeed / 180 * Math.PI;\n      this._phi -= radian * deltaTime / 1000;\n      this._needsUpdate = true;\n    } else if (this._rotateVelocity.len() > 0) {\n      this._needsUpdate = true;\n    }\n\n    if (Math.abs(this._zoomSpeed) > 0.1 || this._panVelocity.len() > 0) {\n      this._needsUpdate = true;\n    }\n\n    if (!this._needsUpdate) {\n      return;\n    }\n\n    deltaTime = Math.min(deltaTime, 50);\n\n    this._updateDistanceOrSize(deltaTime);\n\n    this._updatePan(deltaTime);\n\n    this._updateRotate(deltaTime);\n\n    this._updateTransform();\n\n    this.getCamera().update();\n    this.zr && this.zr.refresh();\n    this.trigger('update');\n    this._needsUpdate = false;\n  },\n  _updateRotate: function _updateRotate(deltaTime) {\n    var velocity = this._rotateVelocity;\n    this._phi = velocity.y * deltaTime / 20 + this._phi;\n    this._theta = velocity.x * deltaTime / 20 + this._theta;\n    this.setAlpha(this.getAlpha());\n    this.setBeta(this.getBeta());\n\n    this._vectorDamping(velocity, Math.pow(this.damping, deltaTime / 16));\n  },\n  _updateDistanceOrSize: function _updateDistanceOrSize(deltaTime) {\n    if (this._projection === 'perspective') {\n      this._setDistance(this._distance + this._zoomSpeed * deltaTime / 20);\n    } else {\n      this._setOrthoSize(this._orthoSize + this._zoomSpeed * deltaTime / 20);\n    }\n\n    this._zoomSpeed *= Math.pow(this.damping, deltaTime / 16);\n  },\n  _setDistance: function _setDistance(distance) {\n    this._distance = Math.max(Math.min(distance, this.maxDistance), this.minDistance);\n  },\n  _setOrthoSize: function _setOrthoSize(size) {\n    this._orthoSize = Math.max(Math.min(size, this.maxOrthographicSize), this.minOrthographicSize);\n    var camera = this.getCamera();\n    var cameraHeight = this._orthoSize;\n    var cameraWidth = cameraHeight / this.viewGL.viewport.height * this.viewGL.viewport.width;\n    camera.left = -cameraWidth / 2;\n    camera.right = cameraWidth / 2;\n    camera.top = cameraHeight / 2;\n    camera.bottom = -cameraHeight / 2;\n  },\n  _updatePan: function _updatePan(deltaTime) {\n    var velocity = this._panVelocity;\n    var len = this._distance;\n    var target = this.getCamera();\n    var yAxis = target.worldTransform.y;\n    var xAxis = target.worldTransform.x; // PENDING\n\n    this._center.scaleAndAdd(xAxis, -velocity.x * len / 200).scaleAndAdd(yAxis, -velocity.y * len / 200);\n\n    this._vectorDamping(velocity, 0);\n  },\n  _updateTransform: function _updateTransform() {\n    var camera = this.getCamera();\n    var dir = new Vector3();\n    var theta = this._theta + Math.PI / 2;\n    var phi = this._phi + Math.PI / 2;\n    var r = Math.sin(theta);\n    dir.x = r * Math.cos(phi);\n    dir.y = -Math.cos(theta);\n    dir.z = r * Math.sin(phi);\n    camera.position.copy(this._center).scaleAndAdd(dir, this._distance);\n    camera.rotation.identity() // First around y, then around x\n    .rotateY(-this._phi).rotateX(-this._theta);\n  },\n  _startCountingStill: function _startCountingStill() {\n    clearTimeout(this._stillTimeout);\n    var time = this.autoRotateAfterStill;\n    var self = this;\n\n    if (!isNaN(time) && time > 0) {\n      this._stillTimeout = setTimeout(function () {\n        self._rotating = true;\n      }, time * 1000);\n    }\n  },\n  _vectorDamping: function _vectorDamping(v, damping) {\n    var speed = v.len();\n    speed = speed * damping;\n\n    if (speed < 1e-4) {\n      speed = 0;\n    }\n\n    v.normalize().scale(speed);\n  },\n  _decomposeTransform: function _decomposeTransform() {\n    if (!this.getCamera()) {\n      return;\n    }\n\n    this.getCamera().updateWorldTransform();\n    var forward = this.getCamera().worldTransform.z;\n    var alpha = Math.asin(forward.y);\n    var beta = Math.atan2(forward.x, forward.z);\n    this._theta = alpha;\n    this._phi = -beta;\n    this.setBeta(this.getBeta());\n    this.setAlpha(this.getAlpha()); // Is perspective\n\n    if (this.getCamera().aspect) {\n      this._setDistance(this.getCamera().position.dist(this._center));\n    } else {\n      this._setOrthoSize(this.getCamera().top - this.getCamera().bottom);\n    }\n  },\n  _mouseDownHandler: function _mouseDownHandler(e) {\n    if (e.target) {\n      // If mouseon some zrender element.\n      return;\n    }\n\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    this.zr.on('mousemove', this._mouseMoveHandler);\n    this.zr.on('mouseup', this._mouseUpHandler);\n\n    if (e.event.targetTouches) {\n      if (e.event.targetTouches.length === 1) {\n        this._mode = 'rotate';\n      }\n    } else {\n      if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton]) {\n        this._mode = 'rotate';\n      } else if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.panMouseButton]) {\n        this._mode = 'pan';\n      } else {\n        this._mode = '';\n      }\n    } // Reset rotate velocity\n\n\n    this._rotateVelocity.set(0, 0);\n\n    this._rotating = false;\n\n    if (this.autoRotate) {\n      this._startCountingStill();\n    }\n\n    this._mouseX = e.offsetX;\n    this._mouseY = e.offsetY;\n  },\n  _mouseMoveHandler: function _mouseMoveHandler(e) {\n    if (e.target && e.target.__isGLToZRProxy) {\n      return;\n    }\n\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var panSensitivity = convertToArray(this.panSensitivity);\n    var rotateSensitivity = convertToArray(this.rotateSensitivity);\n\n    if (this._mode === 'rotate') {\n      this._rotateVelocity.y = (e.offsetX - this._mouseX) / this.zr.getHeight() * 2 * rotateSensitivity[0];\n      this._rotateVelocity.x = (e.offsetY - this._mouseY) / this.zr.getWidth() * 2 * rotateSensitivity[1];\n    } else if (this._mode === 'pan') {\n      this._panVelocity.x = (e.offsetX - this._mouseX) / this.zr.getWidth() * panSensitivity[0] * 400;\n      this._panVelocity.y = (-e.offsetY + this._mouseY) / this.zr.getHeight() * panSensitivity[1] * 400;\n    }\n\n    this._mouseX = e.offsetX;\n    this._mouseY = e.offsetY;\n    e.event.preventDefault();\n  },\n  _mouseWheelHandler: function _mouseWheelHandler(e) {\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var delta = e.event.wheelDelta // Webkit\n    || -e.event.detail; // Firefox\n\n    this._zoomHandler(e, delta);\n  },\n  _pinchHandler: function _pinchHandler(e) {\n    if (this._isAnimating()) {\n      return;\n    }\n\n    this._zoomHandler(e, e.pinchScale > 1 ? 1 : -1); // Not rotate when pinch\n\n\n    this._mode = '';\n  },\n  _zoomHandler: function _zoomHandler(e, delta) {\n    if (delta === 0) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    var speed;\n\n    if (this._projection === 'perspective') {\n      speed = Math.max(Math.max(Math.min(this._distance - this.minDistance, this.maxDistance - this._distance)) / 20, 0.5);\n    } else {\n      speed = Math.max(Math.max(Math.min(this._orthoSize - this.minOrthographicSize, this.maxOrthographicSize - this._orthoSize)) / 20, 0.5);\n    }\n\n    this._zoomSpeed = (delta > 0 ? -1 : 1) * speed * this.zoomSensitivity;\n    this._rotating = false;\n\n    if (this.autoRotate && this._mode === 'rotate') {\n      this._startCountingStill();\n    }\n\n    e.event.preventDefault();\n  },\n  _mouseUpHandler: function _mouseUpHandler() {\n    this.zr.off('mousemove', this._mouseMoveHandler);\n    this.zr.off('mouseup', this._mouseUpHandler);\n  },\n  _isRightMouseButtonUsed: function _isRightMouseButtonUsed() {\n    return this.rotateMouseButton === 'right' || this.panMouseButton === 'right';\n  },\n  _contextMenuHandler: function _contextMenuHandler(e) {\n    if (this._isRightMouseButtonUsed()) {\n      e.preventDefault();\n    }\n  },\n  _addAnimator: function _addAnimator(animator) {\n    var animators = this._animators;\n    animators.push(animator);\n    animator.done(function () {\n      var idx = animators.indexOf(animator);\n\n      if (idx >= 0) {\n        animators.splice(idx, 1);\n      }\n    });\n    return animator;\n  }\n});\n/**\n * If auto rotate the target\n * @type {boolean}\n * @default false\n */\n\nObject.defineProperty(OrbitControl.prototype, 'autoRotate', {\n  get: function get(val) {\n    return this._autoRotate;\n  },\n  set: function set(val) {\n    this._autoRotate = val;\n    this._rotating = val;\n  }\n});\nexport default OrbitControl;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/util/OrbitControl.js"],"names":["Base","Vector2","Vector3","Quaternion","retrieve","firstNotNull","MOUSE_BUTTON_KEY_MAP","left","middle","right","convertToArray","val","Array","OrbitControl","extend","zr","viewGL","_center","minDistance","maxDistance","maxOrthographicSize","minOrthographicSize","minAlpha","maxAlpha","minBeta","Infinity","maxBeta","autoRotateAfterStill","autoRotateDirection","autoRotateSpeed","damping","rotateSensitivity","zoomSensitivity","panSensitivity","panMouseButton","rotateMouseButton","_mode","_camera","_needsUpdate","_rotating","_phi","_theta","_mouseX","_mouseY","_rotateVelocity","_panVelocity","_distance","_zoomSpeed","_stillTimeout","_animators","forEach","hdlName","bind","init","on","_mouseDownHandler","_mouseUpHandler","_mouseWheelHandler","_pinchHandler","animation","_update","dom","addEventListener","_contextMenuHandler","dispose","off","_mouseMoveHandler","removeEventListener","stopAllAnimation","getDistance","setDistance","distance","getOrthographicSize","_orthoSize","setOrthographicSize","size","getAlpha","Math","PI","getBeta","getCenter","toArray","setAlpha","alpha","max","min","setBeta","beta","setCenter","centerArr","setArray","setViewGL","getCamera","camera","setFromViewControlModel","viewControlModel","extraOpts","baseDistance","baseOrthoSize","projection","get","process","env","NODE_ENV","console","error","_projection","setProjection","targetDistance","targetOrthographicSize","prop","ecModel","animationOpts","key","center","animationDurationUpdate","_notFirst","animateTo","orthographicSize","easing","animationEasingUpdate","duration","_validateProperties","opts","self","obj","target","_addAnimator","animate","when","during","start","i","length","stop","update","_isAnimating","deltaTime","radian","len","abs","_updateDistanceOrSize","_updatePan","_updateRotate","_updateTransform","refresh","trigger","velocity","y","x","_vectorDamping","pow","_setDistance","_setOrthoSize","cameraHeight","cameraWidth","viewport","height","width","top","bottom","yAxis","worldTransform","xAxis","scaleAndAdd","dir","theta","phi","r","sin","cos","z","position","copy","rotation","identity","rotateY","rotateX","_startCountingStill","clearTimeout","time","isNaN","setTimeout","v","speed","normalize","scale","_decomposeTransform","updateWorldTransform","forward","asin","atan2","aspect","dist","e","offsetX","offsetY","containPoint","event","targetTouches","button","set","autoRotate","__isGLToZRProxy","getHeight","getWidth","preventDefault","delta","wheelDelta","detail","_zoomHandler","pinchScale","_isRightMouseButtonUsed","animator","animators","push","done","idx","indexOf","splice","Object","defineProperty","prototype","_autoRotate"],"mappings":"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","sourcesContent":["/**\n * Provide orbit control for 3D objects\n *\n * @module echarts-gl/util/OrbitControl\n * @author Yi Shen(http://github.com/pissang)\n */\n// TODO Remove magic numbers on sensitivity\nimport Base from 'claygl/src/core/Base';\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport retrieve from './retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nvar MOUSE_BUTTON_KEY_MAP = {\n  left: 0,\n  middle: 1,\n  right: 2\n};\n\nfunction convertToArray(val) {\n  if (!(val instanceof Array)) {\n    val = [val, val];\n  }\n\n  return val;\n}\n/**\n * @alias module:echarts-x/util/OrbitControl\n */\n\n\nvar OrbitControl = Base.extend(function () {\n  return {\n    /**\n     * @type {module:zrender~ZRender}\n     */\n    zr: null,\n\n    /**\n     * @type {module:echarts-gl/core/ViewGL}\n     */\n    viewGL: null,\n\n    /**\n     * @type {clay.math.Vector3}\n     */\n    _center: new Vector3(),\n\n    /**\n     * Minimum distance to the center\n     * Only available when camera is perspective.\n     * @type {number}\n     * @default 0.5\n     */\n    minDistance: 0.5,\n\n    /**\n     * Maximum distance to the center\n     * Only available when camera is perspective.\n     * @type {number}\n     * @default 2\n     */\n    maxDistance: 1.5,\n\n    /**\n     * Only available when camera is orthographic\n     */\n    maxOrthographicSize: 300,\n\n    /**\n     * Only available when camera is orthographic\n     */\n    minOrthographicSize: 30,\n\n    /**\n     * Minimum alpha rotation\n     */\n    minAlpha: -90,\n\n    /**\n     * Maximum alpha rotation\n     */\n    maxAlpha: 90,\n\n    /**\n     * Minimum beta rotation\n     */\n    minBeta: -Infinity,\n\n    /**\n     * Maximum beta rotation\n     */\n    maxBeta: Infinity,\n\n    /**\n     * Start auto rotating after still for the given time\n     */\n    autoRotateAfterStill: 0,\n\n    /**\n     * Direction of autoRotate. cw or ccw when looking top down.\n     */\n    autoRotateDirection: 'cw',\n\n    /**\n     * Degree per second\n     */\n    autoRotateSpeed: 60,\n\n    /**\n     * @param {number}\n     */\n    damping: 0.8,\n\n    /**\n     * @param {number}\n     */\n    rotateSensitivity: 1,\n\n    /**\n     * @param {number}\n     */\n    zoomSensitivity: 1,\n\n    /**\n     * @param {number}\n     */\n    panSensitivity: 1,\n    panMouseButton: 'middle',\n    rotateMouseButton: 'left',\n\n    /**\n     * Pan or rotate\n     * @private\n     * @type {String}\n     */\n    _mode: 'rotate',\n\n    /**\n     * @private\n     * @type {clay.Camera}\n     */\n    _camera: null,\n    _needsUpdate: false,\n    _rotating: false,\n    // Rotation around yAxis in radian\n    _phi: 0,\n    // Rotation around xAxis in radian\n    _theta: 0,\n    _mouseX: 0,\n    _mouseY: 0,\n    _rotateVelocity: new Vector2(),\n    _panVelocity: new Vector2(),\n    _distance: 500,\n    _zoomSpeed: 0,\n    _stillTimeout: 0,\n    _animators: []\n  };\n}, function () {\n  // Each OrbitControl has it's own handler\n  ['_mouseDownHandler', '_mouseWheelHandler', '_mouseMoveHandler', '_mouseUpHandler', '_pinchHandler', '_contextMenuHandler', '_update'].forEach(function (hdlName) {\n    this[hdlName] = this[hdlName].bind(this);\n  }, this);\n}, {\n  /**\n   * Initialize.\n   * Mouse event binding\n   */\n  init: function () {\n    var zr = this.zr;\n\n    if (zr) {\n      zr.on('mousedown', this._mouseDownHandler);\n      zr.on('globalout', this._mouseUpHandler);\n      zr.on('mousewheel', this._mouseWheelHandler);\n      zr.on('pinch', this._pinchHandler);\n      zr.animation.on('frame', this._update);\n      zr.dom.addEventListener('contextmenu', this._contextMenuHandler);\n    }\n  },\n\n  /**\n   * Dispose.\n   * Mouse event unbinding\n   */\n  dispose: function () {\n    var zr = this.zr;\n\n    if (zr) {\n      zr.off('mousedown', this._mouseDownHandler);\n      zr.off('mousemove', this._mouseMoveHandler);\n      zr.off('mouseup', this._mouseUpHandler);\n      zr.off('mousewheel', this._mouseWheelHandler);\n      zr.off('pinch', this._pinchHandler);\n      zr.off('globalout', this._mouseUpHandler);\n      zr.dom.removeEventListener('contextmenu', this._contextMenuHandler);\n      zr.animation.off('frame', this._update);\n    }\n\n    this.stopAllAnimation();\n  },\n\n  /**\n   * Get distance\n   * @return {number}\n   */\n  getDistance: function () {\n    return this._distance;\n  },\n\n  /**\n   * Set distance\n   * @param {number} distance\n   */\n  setDistance: function (distance) {\n    this._distance = distance;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Get size of orthographic viewing volume\n   * @return {number}\n   */\n  getOrthographicSize: function () {\n    return this._orthoSize;\n  },\n\n  /**\n   * Set size of orthographic viewing volume\n   * @param {number} size\n   */\n  setOrthographicSize: function (size) {\n    this._orthoSize = size;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Get alpha rotation\n   * Alpha angle for top-down rotation. Positive to rotate to top.\n   *\n   * Which means camera rotation around x axis.\n   */\n  getAlpha: function () {\n    return this._theta / Math.PI * 180;\n  },\n\n  /**\n   * Get beta rotation\n   * Beta angle for left-right rotation. Positive to rotate to right.\n   *\n   * Which means camera rotation around y axis.\n   */\n  getBeta: function () {\n    return -this._phi / Math.PI * 180;\n  },\n\n  /**\n   * Get control center\n   * @return {Array.<number>}\n   */\n  getCenter: function () {\n    return this._center.toArray();\n  },\n\n  /**\n   * Set alpha rotation angle\n   * @param {number} alpha\n   */\n  setAlpha: function (alpha) {\n    alpha = Math.max(Math.min(this.maxAlpha, alpha), this.minAlpha);\n    this._theta = alpha / 180 * Math.PI;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Set beta rotation angle\n   * @param {number} beta\n   */\n  setBeta: function (beta) {\n    beta = Math.max(Math.min(this.maxBeta, beta), this.minBeta);\n    this._phi = -beta / 180 * Math.PI;\n    this._needsUpdate = true;\n  },\n\n  /**\n   * Set control center\n   * @param {Array.<number>} center\n   */\n  setCenter: function (centerArr) {\n    this._center.setArray(centerArr);\n  },\n\n  /**\n   * @param {module:echarts-gl/core/ViewGL} viewGL\n   */\n  setViewGL: function (viewGL) {\n    this.viewGL = viewGL;\n  },\n\n  /**\n   * @return {clay.Camera}\n   */\n  getCamera: function () {\n    return this.viewGL.camera;\n  },\n  setFromViewControlModel: function (viewControlModel, extraOpts) {\n    extraOpts = extraOpts || {};\n    var baseDistance = extraOpts.baseDistance || 0;\n    var baseOrthoSize = extraOpts.baseOrthoSize || 1;\n    var projection = viewControlModel.get('projection');\n\n    if (projection !== 'perspective' && projection !== 'orthographic' && projection !== 'isometric') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Unkown projection type %s, use perspective projection instead.', projection);\n      }\n\n      projection = 'perspective';\n    }\n\n    this._projection = projection;\n    this.viewGL.setProjection(projection);\n    var targetDistance = viewControlModel.get('distance') + baseDistance;\n    var targetOrthographicSize = viewControlModel.get('orthographicSize') + baseOrthoSize;\n    [['damping', 0.8], ['autoRotate', false], ['autoRotateAfterStill', 3], ['autoRotateDirection', 'cw'], ['autoRotateSpeed', 10], ['minDistance', 30], ['maxDistance', 400], ['minOrthographicSize', 30], ['maxOrthographicSize', 300], ['minAlpha', -90], ['maxAlpha', 90], ['minBeta', -Infinity], ['maxBeta', Infinity], ['rotateSensitivity', 1], ['zoomSensitivity', 1], ['panSensitivity', 1], ['panMouseButton', 'left'], ['rotateMouseButton', 'middle']].forEach(function (prop) {\n      this[prop[0]] = firstNotNull(viewControlModel.get(prop[0]), prop[1]);\n    }, this);\n    this.minDistance += baseDistance;\n    this.maxDistance += baseDistance;\n    this.minOrthographicSize += baseOrthoSize, this.maxOrthographicSize += baseOrthoSize;\n    var ecModel = viewControlModel.ecModel;\n    var animationOpts = {};\n    ['animation', 'animationDurationUpdate', 'animationEasingUpdate'].forEach(function (key) {\n      animationOpts[key] = firstNotNull(viewControlModel.get(key), ecModel && ecModel.get(key));\n    });\n    var alpha = firstNotNull(extraOpts.alpha, viewControlModel.get('alpha')) || 0;\n    var beta = firstNotNull(extraOpts.beta, viewControlModel.get('beta')) || 0;\n    var center = firstNotNull(extraOpts.center, viewControlModel.get('center')) || [0, 0, 0];\n\n    if (animationOpts.animation && animationOpts.animationDurationUpdate > 0 && this._notFirst) {\n      this.animateTo({\n        alpha: alpha,\n        beta: beta,\n        center: center,\n        distance: targetDistance,\n        orthographicSize: targetOrthographicSize,\n        easing: animationOpts.animationEasingUpdate,\n        duration: animationOpts.animationDurationUpdate\n      });\n    } else {\n      this.setDistance(targetDistance);\n      this.setAlpha(alpha);\n      this.setBeta(beta);\n      this.setCenter(center);\n      this.setOrthographicSize(targetOrthographicSize);\n    }\n\n    this._notFirst = true;\n\n    this._validateProperties();\n  },\n  _validateProperties: function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (MOUSE_BUTTON_KEY_MAP[this.panMouseButton] == null) {\n        console.error('Unkown panMouseButton %s. It should be left|middle|right', this.panMouseButton);\n      }\n\n      if (MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton] == null) {\n        console.error('Unkown rotateMouseButton %s. It should be left|middle|right', this.rotateMouseButton);\n      }\n\n      if (this.autoRotateDirection !== 'cw' && this.autoRotateDirection !== 'ccw') {\n        console.error('Unkown autoRotateDirection %s. It should be cw|ccw', this.autoRotateDirection);\n      }\n    }\n  },\n\n  /**\n   * @param {Object} opts\n   * @param {number} opts.distance\n   * @param {number} opts.alpha\n   * @param {number} opts.beta\n   * @param {number} opts.orthographicSize\n   * @param {number} [opts.duration=1000]\n   * @param {number} [opts.easing='linear']\n   */\n  animateTo: function (opts) {\n    var zr = this.zr;\n    var self = this;\n    var obj = {};\n    var target = {};\n\n    if (opts.distance != null) {\n      obj.distance = this.getDistance();\n      target.distance = opts.distance;\n    }\n\n    if (opts.orthographicSize != null) {\n      obj.orthographicSize = this.getOrthographicSize();\n      target.orthographicSize = opts.orthographicSize;\n    }\n\n    if (opts.alpha != null) {\n      obj.alpha = this.getAlpha();\n      target.alpha = opts.alpha;\n    }\n\n    if (opts.beta != null) {\n      obj.beta = this.getBeta();\n      target.beta = opts.beta;\n    }\n\n    if (opts.center != null) {\n      obj.center = this.getCenter();\n      target.center = opts.center;\n    }\n\n    return this._addAnimator(zr.animation.animate(obj).when(opts.duration || 1000, target).during(function () {\n      if (obj.alpha != null) {\n        self.setAlpha(obj.alpha);\n      }\n\n      if (obj.beta != null) {\n        self.setBeta(obj.beta);\n      }\n\n      if (obj.distance != null) {\n        self.setDistance(obj.distance);\n      }\n\n      if (obj.center != null) {\n        self.setCenter(obj.center);\n      }\n\n      if (obj.orthographicSize != null) {\n        self.setOrthographicSize(obj.orthographicSize);\n      }\n\n      self._needsUpdate = true;\n    })).start(opts.easing || 'linear');\n  },\n\n  /**\n   * Stop all animation\n   */\n  stopAllAnimation: function () {\n    for (var i = 0; i < this._animators.length; i++) {\n      this._animators[i].stop();\n    }\n\n    this._animators.length = 0;\n  },\n  update: function () {\n    this._needsUpdate = true;\n\n    this._update(20);\n  },\n  _isAnimating: function () {\n    return this._animators.length > 0;\n  },\n\n  /**\n   * Call update each frame\n   * @param  {number} deltaTime Frame time\n   */\n  _update: function (deltaTime) {\n    if (this._rotating) {\n      var radian = (this.autoRotateDirection === 'cw' ? 1 : -1) * this.autoRotateSpeed / 180 * Math.PI;\n      this._phi -= radian * deltaTime / 1000;\n      this._needsUpdate = true;\n    } else if (this._rotateVelocity.len() > 0) {\n      this._needsUpdate = true;\n    }\n\n    if (Math.abs(this._zoomSpeed) > 0.1 || this._panVelocity.len() > 0) {\n      this._needsUpdate = true;\n    }\n\n    if (!this._needsUpdate) {\n      return;\n    }\n\n    deltaTime = Math.min(deltaTime, 50);\n\n    this._updateDistanceOrSize(deltaTime);\n\n    this._updatePan(deltaTime);\n\n    this._updateRotate(deltaTime);\n\n    this._updateTransform();\n\n    this.getCamera().update();\n    this.zr && this.zr.refresh();\n    this.trigger('update');\n    this._needsUpdate = false;\n  },\n  _updateRotate: function (deltaTime) {\n    var velocity = this._rotateVelocity;\n    this._phi = velocity.y * deltaTime / 20 + this._phi;\n    this._theta = velocity.x * deltaTime / 20 + this._theta;\n    this.setAlpha(this.getAlpha());\n    this.setBeta(this.getBeta());\n\n    this._vectorDamping(velocity, Math.pow(this.damping, deltaTime / 16));\n  },\n  _updateDistanceOrSize: function (deltaTime) {\n    if (this._projection === 'perspective') {\n      this._setDistance(this._distance + this._zoomSpeed * deltaTime / 20);\n    } else {\n      this._setOrthoSize(this._orthoSize + this._zoomSpeed * deltaTime / 20);\n    }\n\n    this._zoomSpeed *= Math.pow(this.damping, deltaTime / 16);\n  },\n  _setDistance: function (distance) {\n    this._distance = Math.max(Math.min(distance, this.maxDistance), this.minDistance);\n  },\n  _setOrthoSize: function (size) {\n    this._orthoSize = Math.max(Math.min(size, this.maxOrthographicSize), this.minOrthographicSize);\n    var camera = this.getCamera();\n    var cameraHeight = this._orthoSize;\n    var cameraWidth = cameraHeight / this.viewGL.viewport.height * this.viewGL.viewport.width;\n    camera.left = -cameraWidth / 2;\n    camera.right = cameraWidth / 2;\n    camera.top = cameraHeight / 2;\n    camera.bottom = -cameraHeight / 2;\n  },\n  _updatePan: function (deltaTime) {\n    var velocity = this._panVelocity;\n    var len = this._distance;\n    var target = this.getCamera();\n    var yAxis = target.worldTransform.y;\n    var xAxis = target.worldTransform.x; // PENDING\n\n    this._center.scaleAndAdd(xAxis, -velocity.x * len / 200).scaleAndAdd(yAxis, -velocity.y * len / 200);\n\n    this._vectorDamping(velocity, 0);\n  },\n  _updateTransform: function () {\n    var camera = this.getCamera();\n    var dir = new Vector3();\n    var theta = this._theta + Math.PI / 2;\n    var phi = this._phi + Math.PI / 2;\n    var r = Math.sin(theta);\n    dir.x = r * Math.cos(phi);\n    dir.y = -Math.cos(theta);\n    dir.z = r * Math.sin(phi);\n    camera.position.copy(this._center).scaleAndAdd(dir, this._distance);\n    camera.rotation.identity() // First around y, then around x\n    .rotateY(-this._phi).rotateX(-this._theta);\n  },\n  _startCountingStill: function () {\n    clearTimeout(this._stillTimeout);\n    var time = this.autoRotateAfterStill;\n    var self = this;\n\n    if (!isNaN(time) && time > 0) {\n      this._stillTimeout = setTimeout(function () {\n        self._rotating = true;\n      }, time * 1000);\n    }\n  },\n  _vectorDamping: function (v, damping) {\n    var speed = v.len();\n    speed = speed * damping;\n\n    if (speed < 1e-4) {\n      speed = 0;\n    }\n\n    v.normalize().scale(speed);\n  },\n  _decomposeTransform: function () {\n    if (!this.getCamera()) {\n      return;\n    }\n\n    this.getCamera().updateWorldTransform();\n    var forward = this.getCamera().worldTransform.z;\n    var alpha = Math.asin(forward.y);\n    var beta = Math.atan2(forward.x, forward.z);\n    this._theta = alpha;\n    this._phi = -beta;\n    this.setBeta(this.getBeta());\n    this.setAlpha(this.getAlpha()); // Is perspective\n\n    if (this.getCamera().aspect) {\n      this._setDistance(this.getCamera().position.dist(this._center));\n    } else {\n      this._setOrthoSize(this.getCamera().top - this.getCamera().bottom);\n    }\n  },\n  _mouseDownHandler: function (e) {\n    if (e.target) {\n      // If mouseon some zrender element.\n      return;\n    }\n\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    this.zr.on('mousemove', this._mouseMoveHandler);\n    this.zr.on('mouseup', this._mouseUpHandler);\n\n    if (e.event.targetTouches) {\n      if (e.event.targetTouches.length === 1) {\n        this._mode = 'rotate';\n      }\n    } else {\n      if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton]) {\n        this._mode = 'rotate';\n      } else if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.panMouseButton]) {\n        this._mode = 'pan';\n      } else {\n        this._mode = '';\n      }\n    } // Reset rotate velocity\n\n\n    this._rotateVelocity.set(0, 0);\n\n    this._rotating = false;\n\n    if (this.autoRotate) {\n      this._startCountingStill();\n    }\n\n    this._mouseX = e.offsetX;\n    this._mouseY = e.offsetY;\n  },\n  _mouseMoveHandler: function (e) {\n    if (e.target && e.target.__isGLToZRProxy) {\n      return;\n    }\n\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var panSensitivity = convertToArray(this.panSensitivity);\n    var rotateSensitivity = convertToArray(this.rotateSensitivity);\n\n    if (this._mode === 'rotate') {\n      this._rotateVelocity.y = (e.offsetX - this._mouseX) / this.zr.getHeight() * 2 * rotateSensitivity[0];\n      this._rotateVelocity.x = (e.offsetY - this._mouseY) / this.zr.getWidth() * 2 * rotateSensitivity[1];\n    } else if (this._mode === 'pan') {\n      this._panVelocity.x = (e.offsetX - this._mouseX) / this.zr.getWidth() * panSensitivity[0] * 400;\n      this._panVelocity.y = (-e.offsetY + this._mouseY) / this.zr.getHeight() * panSensitivity[1] * 400;\n    }\n\n    this._mouseX = e.offsetX;\n    this._mouseY = e.offsetY;\n    e.event.preventDefault();\n  },\n  _mouseWheelHandler: function (e) {\n    if (this._isAnimating()) {\n      return;\n    }\n\n    var delta = e.event.wheelDelta // Webkit\n    || -e.event.detail; // Firefox\n\n    this._zoomHandler(e, delta);\n  },\n  _pinchHandler: function (e) {\n    if (this._isAnimating()) {\n      return;\n    }\n\n    this._zoomHandler(e, e.pinchScale > 1 ? 1 : -1); // Not rotate when pinch\n\n\n    this._mode = '';\n  },\n  _zoomHandler: function (e, delta) {\n    if (delta === 0) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    var speed;\n\n    if (this._projection === 'perspective') {\n      speed = Math.max(Math.max(Math.min(this._distance - this.minDistance, this.maxDistance - this._distance)) / 20, 0.5);\n    } else {\n      speed = Math.max(Math.max(Math.min(this._orthoSize - this.minOrthographicSize, this.maxOrthographicSize - this._orthoSize)) / 20, 0.5);\n    }\n\n    this._zoomSpeed = (delta > 0 ? -1 : 1) * speed * this.zoomSensitivity;\n    this._rotating = false;\n\n    if (this.autoRotate && this._mode === 'rotate') {\n      this._startCountingStill();\n    }\n\n    e.event.preventDefault();\n  },\n  _mouseUpHandler: function () {\n    this.zr.off('mousemove', this._mouseMoveHandler);\n    this.zr.off('mouseup', this._mouseUpHandler);\n  },\n  _isRightMouseButtonUsed: function () {\n    return this.rotateMouseButton === 'right' || this.panMouseButton === 'right';\n  },\n  _contextMenuHandler: function (e) {\n    if (this._isRightMouseButtonUsed()) {\n      e.preventDefault();\n    }\n  },\n  _addAnimator: function (animator) {\n    var animators = this._animators;\n    animators.push(animator);\n    animator.done(function () {\n      var idx = animators.indexOf(animator);\n\n      if (idx >= 0) {\n        animators.splice(idx, 1);\n      }\n    });\n    return animator;\n  }\n});\n/**\n * If auto rotate the target\n * @type {boolean}\n * @default false\n */\n\nObject.defineProperty(OrbitControl.prototype, 'autoRotate', {\n  get: function (val) {\n    return this._autoRotate;\n  },\n  set: function (val) {\n    this._autoRotate = val;\n    this._rotating = val;\n  }\n});\nexport default OrbitControl;"]},"metadata":{},"sourceType":"module"}