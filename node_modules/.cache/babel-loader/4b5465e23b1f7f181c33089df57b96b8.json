{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LeftPage from \"../components/MainPageLeft.vue\";\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud.json\";\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nexport default {\n  data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        region: \"\",\n        region_data: \"\"\n      },\n      locate_data_url: {\n        河北: \"https://geo.datav.aliyun.com/areas_v3/bound/130000_full.json\",\n        山东: \"https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json\",\n        山西: 'https://geo.datav.aliyun.com/areas_v3/bound/140000_full.json',\n        河南: 'https://geo.datav.aliyun.com/areas_v3/bound/410000_full.json',\n        辽宁: 'https://geo.datav.aliyun.com/areas_v3/bound/210000_full.json'\n      },\n      news_value: 0,\n      news_list: [{\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\"\n      }],\n      time_select_value: 0\n    };\n  },\n\n  mounted() {\n    this.cur_info.region = this.$route.params.region;\n    console.log(this.$route.params.region);\n    this.set_wordcloud();\n    this.set_speed_average();\n    this.set_speed_tag();\n    this.set_speed_region();\n    this.set_num_tag();\n    this.set_speed_region();\n  },\n\n  methods: {\n    title_change(new_title) {\n      //title变化后\n      this.cur_info.title = new_title;\n      this.set_num_tag();\n      this.set_speed_tag();\n    },\n\n    get_time_change(new_time) {\n      //时间变化后\n      this.cur_info.year = new_time.toString();\n      this.set_num_tag();\n      this.set_speed_tag();\n    },\n\n    async set_num_tag() {\n      let Chart = this.$echarts.init(this.$refs.num_tag);\n      Chart.setOption({\n        dataset: {\n          source: num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title]\n        },\n        grid: {\n          containLabel: true\n        },\n        xAxis: {\n          name: \"数量\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          type: \"category\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        visualMap: {\n          orient: \"horizontal\",\n          left: \"center\",\n          min: 0,\n          max: 10,\n          text: [\"慢速响应\", \"快速响应\"],\n          // Map the score column to color\n          dimension: \"avg\",\n          inRange: {\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"]\n          },\n          textStyle: {\n            color: \"#FFFFFF\"\n          }\n        },\n        series: [{\n          type: \"bar\",\n          encode: {\n            x: \"num\",\n            y: \"sub_title\"\n          }\n        }]\n      });\n    },\n\n    async set_wordcloud() {\n      //-------------------------set wordcloud\n      let word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\n      var maskImage = new Image();\n      maskImage.src = word_cloud_data.image;\n      word_cloud_Chart.setOption({\n        series: [{\n          type: \"wordCloud\",\n          shape: \"circle\",\n          keepAspect: false,\n          left: \"center\",\n          top: \"center\",\n          width: \"70%\",\n          height: \"70%\",\n          right: null,\n          bottom: null,\n          //maskImage:maskImage,\n          sizeRange: [12, 30],\n          rotationRange: [-45, 45],\n          rotationStep: 90,\n          // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\n          gridSize: 2,\n          // 允许词太大的时候，超出画布的范围\n          drawOutOfBound: false,\n          // 布局的时候是否有动画\n          layoutAnimation: false,\n          textStyle: {\n            fontWeight: \"bold\",\n            color: function () {\n              return \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n            }\n          },\n          emphasis: {\n            focus: \"self\",\n            textStyle: {\n              textShadowBlur: 10,\n              textShadowColor: \"#333\"\n            }\n          },\n          // Data is an array. Each array item must have name and value property.\n          data: word_cloud_data.value\n        }]\n      });\n    },\n\n    async set_speed_average() {\n      //--------------------set speed_average\n      //-------------------------------------------------------------set scar\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\n      let scar_series = [];\n\n      for (let title_name in scar_data) {\n        scar_series.push({\n          type: \"line\",\n          id: title_name,\n          dataGroupId: title_name,\n          universalTransition: {\n            enabled: true,\n            delay: function (idx, count) {\n              return Math.random() * 400;\n            }\n          },\n          data: scar_data[title_name]\n        });\n      }\n\n      let speed_region_average_scatterOption = {\n        xAxis: {\n          scale: true,\n          name: \"年份\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          scale: true,\n          name: \"响应时间\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        series: scar_series\n      }; //-------------------------------------------------------设置bar\n\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\n      let bar_series = [],\n          bar_x_data = [];\n\n      for (let title_name in bar_data) {\n        bar_x_data.push(title_name);\n        bar_series.push({\n          value: bar_data[title_name],\n          groupId: title_name\n        });\n      }\n\n      let bar_key = bar_x_data;\n      let speed_region_average_barOption = {\n        xAxis: {\n          type: \"category\",\n          data: bar_x_data,\n          name: \"类别\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        yAxis: {\n          name: \"响应时间\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        series: [{\n          type: \"bar\",\n          id: \"total\",\n          data: bar_series,\n          universalTransition: {\n            enabled: true,\n            seriesKey: bar_key,\n            delay: function (idx, count) {\n              return Math.random() * 400;\n            }\n          }\n        }]\n      };\n      let speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\n      let currentOption = speed_region_average_scatterOption;\n      setInterval(function () {\n        currentOption = currentOption === speed_region_average_scatterOption ? speed_region_average_barOption : speed_region_average_scatterOption;\n        speed_average_Chart.setOption(currentOption, true);\n      }, 2000);\n    },\n\n    async set_speed_region() {\n      //--------------------set speed_region\n      await this.$axios({\n        url: this.locate_data_url[this.cur_info.region],\n        method: \"get\"\n      }).then(res => {\n        this.cur_info.region_data = res.data;\n      });\n      this.$echarts.registerMap(this.cur_info.region, this.cur_info.region_data);\n      let _data = this.cur_info.region_data.features,\n          scar_data = [];\n\n      for (let i in _data) {\n        let x = _data[i].properties.center[0],\n            y = _data[i].properties.center[1],\n            z = _data[i].properties.name;\n        scar_data.push([x, y, z]);\n      }\n\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\n      let speed_region_option = {\n        geo: {\n          map: this.cur_info.region,\n          z: 2,\n          aspectScale: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          zoom: 1,\n          //当前视角的缩放比例\n          scaleLimit: {\n            //滚轮缩放的极限控制\n            min: 1,\n            max: 2\n          },\n          label: {\n            normal: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              }\n            },\n            emphasis: {\n              show: true,\n              textStyle: {\n                color: \"#FFFFFF\",\n                fontSize: 18\n              }\n            }\n          },\n          itemStyle: {\n            normal: {\n              shadowColor: \"rgba(21,55,112,255)\",\n              shadowOffsetX: 10,\n              shadowOffsetY: 10,\n              areaColor: \"rgba(24,48,82,255)\",\n              borderColor: \"rgba(84,113,166)\",\n              borderWidth: 1.5\n            },\n            emphasis: {\n              areaColor: \"rgba(7,69,162)\"\n            }\n          }\n        },\n        series: [{\n          type: \"map\",\n          mapType: this.cur_info.region,\n          aspectScale: 1,\n          zoom: 1,\n          z: 1,\n          layoutCenter: [\"50%\", \"50%\"],\n          //地图位置\n          label: {\n            normal: {\n              show: false\n            },\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              shadowColor: \"rgba(22,57,89,255)\",\n              shadowOffsetX: 20,\n              shadowOffsetY: 20,\n              //areaColor: \"rgba(22,57,89,255)\",\n              borderColor: \"#4a75ff\",\n              borderWidth: 7\n            },\n            emphasis: {\n              areaColor: \"rgba(22,57,89,0)\"\n            }\n          }\n        }, {\n          show: true,\n          type: \"effectScatter\",\n          rippleEffect: {\n            // 涟漪特效相关配置。\n            scale: 4 // 控制涟漪大小\n\n          },\n          coordinateSystem: \"geo\",\n          // series坐标系类型\n          data: scar_data\n        }]\n      };\n      this.speed_region_Chart.setOption(speed_region_option);\n    },\n\n    async set_speed_tag() {\n      //--------------------------set speedTag\n      let speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\n      speed_tag_Chart.setOption({\n        dataset: {\n          source: num_tag_data[this.cur_info.region][this.cur_info.year][this.cur_info.title]\n        },\n        polar: {\n          radius: [30, \"70%\"]\n        },\n        radiusAxis: {\n          type: \"category\",\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          show: false,\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        angleAxis: {\n          startAngle: 75,\n          name: '响应时间',\n          nameTextStyle: {\n            color: \"rgba(255,255,255)\"\n          },\n          axisLabel: {\n            textStyle: {\n              color: \"rgba(255,255,255)\"\n            }\n          }\n        },\n        tooltip: {},\n        series: {\n          type: \"bar\",\n          coordinateSystem: \"polar\",\n          encode: {\n            radius: 0,\n            angle: 1\n          },\n          label: {\n            show: false,\n            position: \"middle\"\n          },\n          itemStyle: {\n            color: function (params) {\n              let colors = ['#4587E7', '#35AB33', '#F5AD1D', '#ff7f50', '#da70d6', '#32cd32', '#6495ed', '#F3FA00'];\n              return colors[params.dataIndex];\n            }\n          }\n        }\n      });\n    }\n\n  },\n  components: {\n    LeftPage\n  }\n};","map":{"version":3,"mappings":"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","names":["data","cur_info","year","title","region","region_data","locate_data_url","河北","山东","山西","河南","辽宁","news_value","news_list","url","time_select_value","mounted","console","methods","title_change","get_time_change","Chart","dataset","source","num_tag_data","grid","containLabel","xAxis","name","nameTextStyle","color","axisLabel","textStyle","yAxis","type","visualMap","orient","left","min","max","text","dimension","inRange","series","encode","x","y","maskImage","word_cloud_Chart","shape","keepAspect","top","width","height","right","bottom","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","layoutAnimation","fontWeight","Math","join","emphasis","focus","textShadowBlur","textShadowColor","scar_series","id","dataGroupId","universalTransition","enabled","delay","scale","bar_x_data","bar_series","value","groupId","seriesKey","setInterval","currentOption","speed_region_average_barOption","speed_region_average_scatterOption","speed_average_Chart","method","then","res","scar_data","z","geo","map","aspectScale","layoutCenter","zoom","scaleLimit","label","normal","show","fontSize","itemStyle","shadowColor","shadowOffsetX","shadowOffsetY","areaColor","borderColor","borderWidth","mapType","rippleEffect","coordinateSystem","speed_tag_Chart","polar","radius","radiusAxis","angleAxis","startAngle","tooltip","angle","position","components","LeftPage"],"sourceRoot":"src/views","sources":["ShengView.vue"],"sourcesContent":["<template>\r\n  <div class=\"ShengBackground\">\r\n    <section class=\"item_left\">\r\n      <LeftPage @title_change=\"title_change\" />\r\n    </section>\r\n    <div class=\"item_right\">\r\n      <div class=\"title\"></div>\r\n      <div class=\"content\">\r\n        <div class=\"left\">\r\n          <div class=\"speed_region\" style=\"display: flex\">\r\n            <div class=\"time_select\">\r\n              <div style=\"font-size: 18px; color: #ffffff; margin-bottom: 5px\">\r\n                2021\r\n              </div>\r\n              <el-slider\r\n                v-model=\"time_select_value\"\r\n                :max=\"2021\"\r\n                :min=\"2017\"\r\n                vertical\r\n                @change=\"get_time_change\"\r\n                height=\"252px\"\r\n                :step=\"1\"\r\n              >\r\n              </el-slider>\r\n              <div style=\"font-size: 18px; color: #ffffff; margin-top: 10px\">\r\n                2017\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"speed_region_chart\"\r\n              ref=\"speed_region\"\r\n              style=\"width: 776px; height: 530px; margin-top: 60px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"down\">\r\n            <div class=\"news\">\r\n              <Carousel\r\n                autoplay\r\n                v-model=\"news_value\"\r\n                loop\r\n                style=\"width: 100%; height: 100%\"\r\n              >\r\n                <CarouselItem v-for=\"(item, i) in news_list\" :key=\"i\">\r\n                  <img\r\n                    :src=\"item.url\"\r\n                    alt=\"加载失败\"\r\n                    width=\"407\"\r\n                    height=\"209\"\r\n                    style=\"margin: 86px 0 0 70px\"\r\n                  />\r\n                </CarouselItem>\r\n              </Carousel>\r\n            </div>\r\n            <div class=\"speed_average\">\r\n              <div\r\n                ref=\"speed_average\"\r\n                style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"right\">\r\n          <div class=\"num_tag\">\r\n            <div\r\n              ref=\"num_tag\"\r\n              style=\"width: 95%; height: 95%; margin-top: 10px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"word_cloud\">\r\n            <div\r\n              ref=\"word_cloud\"\r\n              style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"speed_tag\">\r\n            <div\r\n              ref=\"speed_tag\"\r\n              style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport LeftPage from \"../components/MainPageLeft.vue\";\r\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud.json\";\r\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        region: \"\",\r\n        region_data: \"\",\r\n      },\r\n      locate_data_url: {\r\n        河北: \"https://geo.datav.aliyun.com/areas_v3/bound/130000_full.json\",\r\n        山东: \"https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json\",\r\n        山西:'https://geo.datav.aliyun.com/areas_v3/bound/140000_full.json',\r\n        河南:'https://geo.datav.aliyun.com/areas_v3/bound/410000_full.json',\r\n        辽宁:'https://geo.datav.aliyun.com/areas_v3/bound/210000_full.json'\r\n      },\r\n      news_value: 0,\r\n      news_list: [\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\",\r\n        },\r\n      ],\r\n\r\n      time_select_value: 0,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.cur_info.region = this.$route.params.region;\r\n    console.log(this.$route.params.region)\r\n    this.set_wordcloud();\r\n    this.set_speed_average();\r\n    this.set_speed_tag();\r\n    this.set_speed_region();\r\n    this.set_num_tag();\r\n    this.set_speed_region();\r\n  },\r\n  methods: {\r\n    title_change(new_title) {\r\n      //title变化后\r\n      this.cur_info.title = new_title;\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n    },\r\n    get_time_change(new_time) {\r\n      //时间变化后\r\n      this.cur_info.year = new_time.toString();\r\n      this.set_num_tag();\r\n      this.set_speed_tag();\r\n    },\r\n    async set_num_tag() {\r\n      let Chart = this.$echarts.init(this.$refs.num_tag);\r\n      Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        grid: { containLabel: true },\r\n        xAxis: {\r\n          name: \"数量\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        visualMap: {\r\n          orient: \"horizontal\",\r\n          left: \"center\",\r\n          min: 0,\r\n          max: 10,\r\n          text: [\"慢速响应\", \"快速响应\"],\r\n          // Map the score column to color\r\n          dimension: \"avg\",\r\n          inRange: {\r\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"],\r\n          },\r\n          textStyle: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            encode: {\r\n              x: \"num\",\r\n              y: \"sub_title\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_wordcloud() {\r\n      //-------------------------set wordcloud\r\n      let word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\r\n      var maskImage = new Image();\r\n      maskImage.src = word_cloud_data.image;\r\n      word_cloud_Chart.setOption({\r\n        series: [\r\n          {\r\n            type: \"wordCloud\",\r\n            shape: \"circle\",\r\n            keepAspect: false,\r\n            left: \"center\",\r\n            top: \"center\",\r\n            width: \"70%\",\r\n            height: \"70%\",\r\n            right: null,\r\n            bottom: null,\r\n            //maskImage:maskImage,\r\n            sizeRange: [12, 30],\r\n            rotationRange: [-45, 45],\r\n            rotationStep: 90,\r\n            // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\r\n            gridSize: 2,\r\n            // 允许词太大的时候，超出画布的范围\r\n            drawOutOfBound: false,\r\n            // 布局的时候是否有动画\r\n            layoutAnimation: false,\r\n            textStyle: {\r\n              fontWeight: \"bold\",\r\n              color: function () {\r\n                return (\r\n                  \"rgb(\" +\r\n                  [\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                  ].join(\",\") +\r\n                  \")\"\r\n                );\r\n              },\r\n            },\r\n            emphasis: {\r\n              focus: \"self\",\r\n              textStyle: {\r\n                textShadowBlur: 10,\r\n                textShadowColor: \"#333\",\r\n              },\r\n            },\r\n\r\n            // Data is an array. Each array item must have name and value property.\r\n            data: word_cloud_data.value,\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_speed_average() {\r\n      //--------------------set speed_average\r\n      //-------------------------------------------------------------set scar\r\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\r\n      let scar_series = [];\r\n      for (let title_name in scar_data) {\r\n        scar_series.push({\r\n          type: \"line\",\r\n          id: title_name,\r\n          dataGroupId: title_name,\r\n          universalTransition: {\r\n            enabled: true,\r\n            delay: function (idx, count) {\r\n              return Math.random() * 400;\r\n            },\r\n          },\r\n          data: scar_data[title_name],\r\n        });\r\n      }\r\n      let speed_region_average_scatterOption = {\r\n        xAxis: {\r\n          scale: true,\r\n          name: \"年份\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          scale: true,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: scar_series,\r\n      };\r\n      //-------------------------------------------------------设置bar\r\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\r\n      let bar_series = [],\r\n        bar_x_data = [];\r\n      for (let title_name in bar_data) {\r\n        bar_x_data.push(title_name);\r\n        bar_series.push({\r\n          value: bar_data[title_name],\r\n          groupId: title_name,\r\n        });\r\n      }\r\n      let bar_key = bar_x_data;\r\n      let speed_region_average_barOption = {\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: bar_x_data,\r\n          name: \"类别\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            id: \"total\",\r\n            data: bar_series,\r\n            universalTransition: {\r\n              enabled: true,\r\n              seriesKey: bar_key,\r\n              delay: function (idx, count) {\r\n                return Math.random() * 400;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      let speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\r\n      let currentOption = speed_region_average_scatterOption;\r\n      setInterval(function () {\r\n        currentOption =\r\n          currentOption === speed_region_average_scatterOption\r\n            ? speed_region_average_barOption\r\n            : speed_region_average_scatterOption;\r\n        speed_average_Chart.setOption(currentOption, true);\r\n      }, 2000);\r\n    },\r\n    async set_speed_region() {\r\n      //--------------------set speed_region\r\n      await this.$axios({\r\n        url: this.locate_data_url[this.cur_info.region],\r\n        method: \"get\",\r\n      }).then((res) => {\r\n        this.cur_info.region_data = res.data;\r\n      });\r\n      this.$echarts.registerMap(\r\n        this.cur_info.region,\r\n        this.cur_info.region_data\r\n      );\r\n      let _data = this.cur_info.region_data.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.center[0],\r\n          y = _data[i].properties.center[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\r\n      let speed_region_option = {\r\n        geo: {\r\n          map: this.cur_info.region,\r\n          z: 2,\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          zoom: 1, //当前视角的缩放比例\r\n          scaleLimit: {\r\n            //滚轮缩放的极限控制\r\n            min: 1,\r\n            max: 2,\r\n          },\r\n          label: {\r\n            normal: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n            emphasis: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"rgba(21,55,112,255)\",\r\n              shadowOffsetX: 10,\r\n              shadowOffsetY: 10,\r\n              areaColor: \"rgba(24,48,82,255)\",\r\n              borderColor: \"rgba(84,113,166)\",\r\n              borderWidth: 1.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"rgba(7,69,162)\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            mapType: this.cur_info.region,\r\n            aspectScale: 1,\r\n            zoom: 1,\r\n            z: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            label: {\r\n              normal: {\r\n                show: false,\r\n              },\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                shadowColor: \"rgba(22,57,89,255)\",\r\n                shadowOffsetX: 20,\r\n                shadowOffsetY: 20,\r\n                //areaColor: \"rgba(22,57,89,255)\",\r\n                borderColor: \"#4a75ff\",\r\n                borderWidth: 7,\r\n              },\r\n              emphasis: {\r\n                areaColor: \"rgba(22,57,89,0)\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n      this.speed_region_Chart.setOption(speed_region_option);\r\n    },\r\n    async set_speed_tag() {\r\n      //--------------------------set speedTag\r\n      let speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\r\n      speed_tag_Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        polar: {\r\n          radius: [30, \"70%\"],\r\n        },\r\n        radiusAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          show:false,\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        angleAxis: {\r\n          startAngle: 75,\r\n          name:'响应时间',\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        tooltip: {},\r\n        series: {\r\n          type: \"bar\",\r\n          coordinateSystem: \"polar\",\r\n          encode: {\r\n            radius: 0,\r\n            angle: 1,\r\n          },\r\n          label: {\r\n            show: false,\r\n            position: \"middle\",\r\n          },\r\n          itemStyle:{\r\n            color:function(params){\r\n              let colors = ['#4587E7','#35AB33','#F5AD1D','#ff7f50','#da70d6','#32cd32','#6495ed','#F3FA00']\r\n              return colors[params.dataIndex]\r\n            }\r\n          }\r\n        },\r\n      });\r\n    },\r\n  },\r\n  components: {\r\n    LeftPage,\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.time_select {\r\n  width: 28px;\r\n  height: 252px;\r\n  margin-left: 108px;\r\n  margin-top: 327px-50px;\r\n}\r\n.speed_region {\r\n  width: 1051px;\r\n  height: 598px;\r\n  //width: 1920px;\r\n  //height: 1080px;\r\n  margin-top: 126px;\r\n  background: url(../assets/Sheng/speed_region.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  justify-content: center;\r\n}\r\n.news {\r\n  width: 546px;\r\n  height: 325px;\r\n  margin-top: 13px;\r\n  background: url(../assets/Sheng/news.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_average {\r\n  width: 479px;\r\n  height: 325px;\r\n  margin-top: 16px;\r\n  margin-left: 22px;\r\n  background: url(../assets/Sheng/speed_average.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.num_tag {\r\n  width: 576px;\r\n  height: 340px;\r\n  background: url(../assets/Sheng/num_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.word_cloud {\r\n  width: 576px;\r\n  height: 340px;\r\n  margin-top: 10px;\r\n\r\n  background: url(../assets/Sheng/word_cloud.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_tag {\r\n  width: 576px;\r\n  height: 267px+35px;\r\n  margin-top: 10px;\r\n\r\n  background: url(../assets/Sheng/speed_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.ShengBackground {\r\n  width: 1936px;\r\n  height: 1083px;\r\n  background: url(../assets/Sheng/ShengBackground.PNG) no-repeat;\r\n  background-size: 100% 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  //background-position: center top;\r\n  .item_left {\r\n    margin-left: 0px;\r\n    margin-top: 0px;\r\n    width: 267px;\r\n    height: 100%;\r\n    line-height: 20px;\r\n    opacity: 0.89;\r\n    background-color: rgba(29, 76, 170, 100);\r\n    text-align: center;\r\n  }\r\n  .item_right {\r\n    //display: flex;\r\n    //flex-flow: column;\r\n    .title {\r\n      margin-left: 0px;\r\n      margin-top: 0px;\r\n      width: 1936px-267px;\r\n      height: 300px;\r\n      background: url(../assets/main_page_title.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      background-position: center top;\r\n    }\r\n    .content {\r\n      margin-top: -300px;\r\n      display: flex;\r\n      .left {\r\n        margin-left: 44px;\r\n        display: flex;\r\n        flex-flow: column;\r\n        .down {\r\n          display: flex;\r\n        }\r\n      }\r\n      .right {\r\n        display: flex;\r\n        flex-flow: column;\r\n        margin-left: 10px;\r\n        margin-top: 60px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}