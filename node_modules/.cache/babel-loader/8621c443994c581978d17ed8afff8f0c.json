{"ast":null,"code":"import \"core-js/modules/es.string.sub.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar vec2 = glmatrix.vec2;\nvar normalize = vec3.normalize;\nvar cross = vec3.cross;\nvar sub = vec3.sub;\nvar add = vec3.add;\nvar create = vec3.create;\nvar normal = create();\nvar tangent = create();\nvar bitangent = create();\nvar halfVector = create();\nvar coord0 = [];\nvar coord1 = [];\n\nfunction getCubicPointsOnGlobe(coords, coordSys) {\n  vec2.copy(coord0, coords[0]);\n  vec2.copy(coord1, coords[1]);\n  var pts = [];\n  var p0 = pts[0] = create();\n  var p1 = pts[1] = create();\n  var p2 = pts[2] = create();\n  var p3 = pts[3] = create();\n  coordSys.dataToPoint(coord0, p0);\n  coordSys.dataToPoint(coord1, p3); // Get p1\n\n  normalize(normal, p0); // TODO p0-p3 is parallel with normal\n\n  sub(tangent, p3, p0);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p1 is half vector of p0 and tangent on p0\n\n  add(p1, normal, tangent);\n  normalize(p1, p1); // Get p2\n\n  normalize(normal, p3);\n  sub(tangent, p0, p3);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p2 is half vector of p3 and tangent on p3\n\n  add(p2, normal, tangent);\n  normalize(p2, p2); // Project distance of p0 on halfVector\n\n  add(halfVector, p0, p3);\n  normalize(halfVector, halfVector);\n  var projDist = vec3.dot(p0, halfVector); // Angle of halfVector and p1\n\n  var cosTheta = vec3.dot(halfVector, p1);\n  var len = (Math.max(vec3.len(p0), vec3.len(p3)) - projDist) / cosTheta * 2;\n  vec3.scaleAndAdd(p1, p0, p1, len);\n  vec3.scaleAndAdd(p2, p3, p2, len);\n  return pts;\n}\n\nfunction getCubicPointsOnPlane(coords, coordSys, up) {\n  var pts = [];\n  var p0 = pts[0] = vec3.create();\n  var p1 = pts[1] = vec3.create();\n  var p2 = pts[2] = vec3.create();\n  var p3 = pts[3] = vec3.create();\n  coordSys.dataToPoint(coords[0], p0);\n  coordSys.dataToPoint(coords[1], p3);\n  var len = vec3.dist(p0, p3);\n  vec3.lerp(p1, p0, p3, 0.3);\n  vec3.lerp(p2, p0, p3, 0.3);\n  vec3.scaleAndAdd(p1, p1, up, Math.min(len * 0.1, 10));\n  vec3.scaleAndAdd(p2, p2, up, Math.min(len * 0.1, 10));\n  return pts;\n}\n\nfunction getPolylinePoints(coords, coordSys) {\n  var pts = new Float32Array(coords.length * 3);\n  var off = 0;\n  var pt = [];\n\n  for (var i = 0; i < coords.length; i++) {\n    coordSys.dataToPoint(coords[i], pt);\n    pts[off++] = pt[0];\n    pts[off++] = pt[1];\n    pts[off++] = pt[2];\n  }\n\n  return pts;\n}\n\nfunction prepareCoords(data) {\n  var coordsList = [];\n  data.each(function (idx) {\n    var itemModel = data.getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    coordsList.push(coords);\n  });\n  return {\n    coordsList: coordsList\n  };\n}\n\nfunction layoutGlobe(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  var res = prepareCoords(data);\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var getPointsMethod = isPolyline ? getPolylinePoints : getCubicPointsOnGlobe;\n    data.setItemLayout(idx, getPointsMethod(coords, coordSys));\n  });\n}\n\nfunction layoutOnPlane(seriesModel, coordSys, normal) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  var res = prepareCoords(data);\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var pts = isPolyline ? getPolylinePoints(coords, coordSys) : getCubicPointsOnPlane(coords, coordSys, normal);\n    data.setItemLayout(idx, pts);\n  });\n}\n\nexport default function lines3DLayout(ecModel, api) {\n  ecModel.eachSeriesByType('lines3D', function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys.type === 'globe') {\n      layoutGlobe(seriesModel, coordSys);\n    } else if (coordSys.type === 'geo3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 1, 0]);\n    } else if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 0, 1]);\n    }\n  });\n}\n;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/lines3D/lines3DLayout.js"],"names":["echarts","glmatrix","vec3","vec2","normalize","cross","sub","add","create","normal","tangent","bitangent","halfVector","coord0","coord1","getCubicPointsOnGlobe","coords","coordSys","copy","pts","p0","p1","p2","p3","dataToPoint","projDist","dot","cosTheta","len","Math","max","scaleAndAdd","getCubicPointsOnPlane","up","dist","lerp","min","getPolylinePoints","Float32Array","length","off","pt","i","prepareCoords","data","coordsList","each","idx","itemModel","getItemModel","option","Array","getShallow","process","env","NODE_ENV","Error","JSON","stringify","push","layoutGlobe","seriesModel","getData","isPolyline","get","setLayout","res","getPointsMethod","setItemLayout","layoutOnPlane","lines3DLayout","ecModel","api","eachSeriesByType","coordinateSystem","type"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar vec2 = glmatrix.vec2;\nvar normalize = vec3.normalize;\nvar cross = vec3.cross;\nvar sub = vec3.sub;\nvar add = vec3.add;\nvar create = vec3.create;\nvar normal = create();\nvar tangent = create();\nvar bitangent = create();\nvar halfVector = create();\nvar coord0 = [];\nvar coord1 = [];\n\nfunction getCubicPointsOnGlobe(coords, coordSys) {\n  vec2.copy(coord0, coords[0]);\n  vec2.copy(coord1, coords[1]);\n  var pts = [];\n  var p0 = pts[0] = create();\n  var p1 = pts[1] = create();\n  var p2 = pts[2] = create();\n  var p3 = pts[3] = create();\n  coordSys.dataToPoint(coord0, p0);\n  coordSys.dataToPoint(coord1, p3); // Get p1\n\n  normalize(normal, p0); // TODO p0-p3 is parallel with normal\n\n  sub(tangent, p3, p0);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p1 is half vector of p0 and tangent on p0\n\n  add(p1, normal, tangent);\n  normalize(p1, p1); // Get p2\n\n  normalize(normal, p3);\n  sub(tangent, p0, p3);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p2 is half vector of p3 and tangent on p3\n\n  add(p2, normal, tangent);\n  normalize(p2, p2); // Project distance of p0 on halfVector\n\n  add(halfVector, p0, p3);\n  normalize(halfVector, halfVector);\n  var projDist = vec3.dot(p0, halfVector); // Angle of halfVector and p1\n\n  var cosTheta = vec3.dot(halfVector, p1);\n  var len = (Math.max(vec3.len(p0), vec3.len(p3)) - projDist) / cosTheta * 2;\n  vec3.scaleAndAdd(p1, p0, p1, len);\n  vec3.scaleAndAdd(p2, p3, p2, len);\n  return pts;\n}\n\nfunction getCubicPointsOnPlane(coords, coordSys, up) {\n  var pts = [];\n  var p0 = pts[0] = vec3.create();\n  var p1 = pts[1] = vec3.create();\n  var p2 = pts[2] = vec3.create();\n  var p3 = pts[3] = vec3.create();\n  coordSys.dataToPoint(coords[0], p0);\n  coordSys.dataToPoint(coords[1], p3);\n  var len = vec3.dist(p0, p3);\n  vec3.lerp(p1, p0, p3, 0.3);\n  vec3.lerp(p2, p0, p3, 0.3);\n  vec3.scaleAndAdd(p1, p1, up, Math.min(len * 0.1, 10));\n  vec3.scaleAndAdd(p2, p2, up, Math.min(len * 0.1, 10));\n  return pts;\n}\n\nfunction getPolylinePoints(coords, coordSys) {\n  var pts = new Float32Array(coords.length * 3);\n  var off = 0;\n  var pt = [];\n\n  for (var i = 0; i < coords.length; i++) {\n    coordSys.dataToPoint(coords[i], pt);\n    pts[off++] = pt[0];\n    pts[off++] = pt[1];\n    pts[off++] = pt[2];\n  }\n\n  return pts;\n}\n\nfunction prepareCoords(data) {\n  var coordsList = [];\n  data.each(function (idx) {\n    var itemModel = data.getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    coordsList.push(coords);\n  });\n  return {\n    coordsList: coordsList\n  };\n}\n\nfunction layoutGlobe(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  var res = prepareCoords(data);\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var getPointsMethod = isPolyline ? getPolylinePoints : getCubicPointsOnGlobe;\n    data.setItemLayout(idx, getPointsMethod(coords, coordSys));\n  });\n}\n\nfunction layoutOnPlane(seriesModel, coordSys, normal) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  var res = prepareCoords(data);\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var pts = isPolyline ? getPolylinePoints(coords, coordSys) : getCubicPointsOnPlane(coords, coordSys, normal);\n    data.setItemLayout(idx, pts);\n  });\n}\n\nexport default function lines3DLayout(ecModel, api) {\n  ecModel.eachSeriesByType('lines3D', function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys.type === 'globe') {\n      layoutGlobe(seriesModel, coordSys);\n    } else if (coordSys.type === 'geo3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 1, 0]);\n    } else if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 0, 1]);\n    }\n  });\n}\n;"]},"metadata":{},"sourceType":"module"}