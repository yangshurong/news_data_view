{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport spriteUtil from '../../util/sprite';\nimport PointsMesh from './PointsMesh';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport retrieve from '../../util/retrieve';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport { getVisualColor, getVisualOpacity } from '../../util/visual';\nvar SDF_RANGE = 20;\nvar Z_2D = -10;\n\nfunction isSymbolSizeSame(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // TODO gl_PointSize has max value.\n\n\nfunction PointsBuilder(is2D, api) {\n  this.rootNode = new graphicGL.Node();\n  /**\n   * @type {boolean}\n   */\n\n  this.is2D = is2D;\n  this._labelsBuilder = new LabelsBuilder(256, 256, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n  this._api = api;\n  this._spriteImageCanvas = document.createElement('canvas');\n  this._startDataIndex = 0;\n  this._endDataIndex = 0;\n  this._sizeScale = 1;\n}\n\nPointsBuilder.prototype = {\n  constructor: PointsBuilder,\n\n  /**\n   * If highlight on over\n   */\n  highlightOnMouseover: true,\n  update: function update(seriesModel, ecModel, api, start, end) {\n    // Swap barMesh\n    var tmp = this._prevMesh;\n    this._prevMesh = this._mesh;\n    this._mesh = tmp;\n    var data = seriesModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startDataIndex = start;\n    this._endDataIndex = end - 1;\n\n    if (!this._mesh) {\n      var material = this._prevMesh && this._prevMesh.material;\n      this._mesh = new PointsMesh({\n        // Render after axes\n        renderOrder: 10,\n        // FIXME\n        frustumCulling: false\n      });\n\n      if (material) {\n        this._mesh.material = material;\n      }\n    }\n\n    var material = this._mesh.material;\n    var geometry = this._mesh.geometry;\n    var attributes = geometry.attributes;\n    this.rootNode.remove(this._prevMesh);\n    this.rootNode.add(this._mesh);\n\n    this._setPositionTextureToMesh(this._mesh, this._positionTexture);\n\n    var symbolInfo = this._getSymbolInfo(seriesModel, start, end);\n\n    var dpr = api.getDevicePixelRatio(); // TODO image symbol\n\n    var itemStyle = seriesModel.getModel('itemStyle').getItemStyle();\n    var largeMode = seriesModel.get('large');\n    var pointSizeScale = 1;\n\n    if (symbolInfo.maxSize > 2) {\n      pointSizeScale = this._updateSymbolSprite(seriesModel, itemStyle, symbolInfo, dpr);\n      material.enableTexture('sprite');\n    } else {\n      material.disableTexture('sprite');\n    }\n\n    attributes.position.init(end - start);\n    var rgbaArr = [];\n\n    if (largeMode) {\n      material.undefine('VERTEX_SIZE');\n      material.undefine('VERTEX_COLOR');\n      var color = getVisualColor(data);\n      var opacity = getVisualOpacity(data);\n      graphicGL.parseColor(color, rgbaArr);\n      rgbaArr[3] *= opacity;\n      material.set({\n        color: rgbaArr,\n        'u_Size': symbolInfo.maxSize * this._sizeScale\n      });\n    } else {\n      material.set({\n        color: [1, 1, 1, 1]\n      });\n      material.define('VERTEX_SIZE');\n      material.define('VERTEX_COLOR');\n      attributes.size.init(end - start);\n      attributes.color.init(end - start);\n      this._originalOpacity = new Float32Array(end - start);\n    }\n\n    var points = data.getLayout('points');\n    var positionArr = attributes.position.value;\n    var hasTransparentPoint = false;\n\n    for (var i = 0; i < end - start; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n\n      if (this.is2D) {\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      } else {\n        positionArr[i3] = points[i3];\n        positionArr[i3 + 1] = points[i3 + 1];\n        positionArr[i3 + 2] = points[i3 + 2];\n      }\n\n      if (!largeMode) {\n        var color = getItemVisualColor(data, i);\n        var opacity = getItemVisualOpacity(data, i);\n        graphicGL.parseColor(color, rgbaArr);\n        rgbaArr[3] *= opacity;\n        attributes.color.set(i, rgbaArr);\n\n        if (rgbaArr[3] < 0.99) {\n          hasTransparentPoint = true;\n        }\n\n        var symbolSize = data.getItemVisual(i, 'symbolSize');\n        symbolSize = symbolSize instanceof Array ? Math.max(symbolSize[0], symbolSize[1]) : symbolSize; // NaN pointSize may have strange result.\n\n        if (isNaN(symbolSize)) {\n          symbolSize = 0;\n        } // Scale point size because canvas has margin.\n\n\n        attributes.size.value[i] = symbolSize * pointSizeScale * this._sizeScale; // Save the original opacity for recover from fadeIn.\n\n        this._originalOpacity[i] = rgbaArr[3];\n      }\n    }\n\n    this._mesh.sizeScale = pointSizeScale;\n    geometry.updateBoundingBox();\n    geometry.dirty(); // Update material.\n\n    this._updateMaterial(seriesModel, itemStyle);\n\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n      material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    if (!largeMode) {\n      this._updateLabelBuilder(seriesModel, start, end);\n    }\n\n    this._updateHandler(seriesModel, ecModel, api);\n\n    this._updateAnimation(seriesModel);\n\n    this._api = api;\n  },\n  getPointsMesh: function getPointsMesh() {\n    return this._mesh;\n  },\n  updateLabels: function updateLabels(highlightDataIndices) {\n    this._labelsBuilder.updateLabels(highlightDataIndices);\n  },\n  hideLabels: function hideLabels() {\n    this.rootNode.remove(this._labelsBuilder.getMesh());\n  },\n  showLabels: function showLabels() {\n    this.rootNode.add(this._labelsBuilder.getMesh());\n  },\n  dispose: function dispose() {\n    this._labelsBuilder.dispose();\n  },\n  _updateSymbolSprite: function _updateSymbolSprite(seriesModel, itemStyle, symbolInfo, dpr) {\n    symbolInfo.maxSize = Math.min(symbolInfo.maxSize * 2, 200);\n    var symbolSize = [];\n\n    if (symbolInfo.aspect > 1) {\n      symbolSize[0] = symbolInfo.maxSize;\n      symbolSize[1] = symbolInfo.maxSize / symbolInfo.aspect;\n    } else {\n      symbolSize[1] = symbolInfo.maxSize;\n      symbolSize[0] = symbolInfo.maxSize * symbolInfo.aspect;\n    } // In case invalid data.\n\n\n    symbolSize[0] = symbolSize[0] || 1;\n    symbolSize[1] = symbolSize[1] || 1;\n\n    if (this._symbolType !== symbolInfo.type || !isSymbolSizeSame(this._symbolSize, symbolSize) || this._lineWidth !== itemStyle.lineWidth) {\n      spriteUtil.createSymbolSprite(symbolInfo.type, symbolSize, {\n        fill: '#fff',\n        lineWidth: itemStyle.lineWidth,\n        stroke: 'transparent',\n        shadowColor: 'transparent',\n        minMargin: Math.min(symbolSize[0] / 2, 10)\n      }, this._spriteImageCanvas);\n      spriteUtil.createSDFFromCanvas(this._spriteImageCanvas, Math.min(this._spriteImageCanvas.width, 32), SDF_RANGE, this._mesh.material.get('sprite').image);\n      this._symbolType = symbolInfo.type;\n      this._symbolSize = symbolSize;\n      this._lineWidth = itemStyle.lineWidth;\n    }\n\n    return this._spriteImageCanvas.width / symbolInfo.maxSize * dpr;\n  },\n  _updateMaterial: function _updateMaterial(seriesModel, itemStyle) {\n    var blendFunc = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var material = this._mesh.material;\n    material.blend = blendFunc;\n    material.set('lineWidth', itemStyle.lineWidth / SDF_RANGE);\n    var strokeColor = graphicGL.parseColor(itemStyle.stroke);\n    material.set('strokeColor', strokeColor); // Because of symbol texture, we always needs it be transparent.\n\n    material.transparent = true;\n    material.depthMask = false;\n    material.depthTest = !this.is2D;\n    material.sortVertices = !this.is2D;\n  },\n  _updateLabelBuilder: function _updateLabelBuilder(seriesModel, start, end) {\n    var data = seriesModel.getData();\n    var geometry = this._mesh.geometry;\n    var positionArr = geometry.attributes.position.value;\n    var start = this._startDataIndex;\n    var pointSizeScale = this._mesh.sizeScale;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var idx3 = (dataIndex - start) * 3;\n      return [positionArr[idx3], positionArr[idx3 + 1], positionArr[idx3 + 2]];\n    };\n\n    this._labelsBuilder.getLabelDistance = function (dataIndex, positionDesc, distance) {\n      var size = geometry.attributes.size.get(dataIndex - start) / pointSizeScale;\n      return size / 2 + distance;\n    };\n\n    this._labelsBuilder.updateLabels();\n  },\n  _updateAnimation: function _updateAnimation(seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevSize', 'size']], this._prevMesh, this._mesh, seriesModel);\n  },\n  _updateHandler: function _updateHandler(seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pointsMesh = this._mesh;\n    var self = this;\n    var lastDataIndex = -1;\n    var isCartesian3D = seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian3D';\n    var grid3DModel;\n\n    if (isCartesian3D) {\n      grid3DModel = seriesModel.coordinateSystem.model;\n    }\n\n    pointsMesh.seriesIndex = seriesModel.seriesIndex;\n    pointsMesh.off('mousemove');\n    pointsMesh.off('mouseout');\n    pointsMesh.on('mousemove', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (dataIndex !== lastDataIndex) {\n        if (this.highlightOnMouseover) {\n          this.downplay(data, lastDataIndex);\n          this.highlight(data, dataIndex);\n\n          this._labelsBuilder.updateLabels([dataIndex]);\n        }\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get(seriesModel.coordDimToDataDim('x')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('y')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('z')[0], dataIndex)],\n            grid3DIndex: grid3DModel.componentIndex\n          });\n        }\n      }\n\n      pointsMesh.dataIndex = dataIndex;\n      lastDataIndex = dataIndex;\n    }, this);\n    pointsMesh.on('mouseout', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (this.highlightOnMouseover) {\n        this.downplay(data, dataIndex);\n\n        this._labelsBuilder.updateLabels();\n      }\n\n      lastDataIndex = -1;\n      pointsMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer',\n          grid3DIndex: grid3DModel.componentIndex\n        });\n      }\n    }, this);\n  },\n  updateLayout: function updateLayout(seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    if (!this._mesh) {\n      return;\n    }\n\n    var positionArr = this._mesh.geometry.attributes.position.value;\n    var points = data.getLayout('points');\n\n    if (this.is2D) {\n      for (var i = 0; i < points.length / 2; i++) {\n        var i3 = i * 3;\n        var i2 = i * 2;\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      }\n    } else {\n      for (var i = 0; i < points.length; i++) {\n        positionArr[i] = points[i];\n      }\n    }\n\n    this._mesh.geometry.dirty();\n\n    api.getZr().refresh();\n  },\n  updateView: function updateView(camera) {\n    if (!this._mesh) {\n      return;\n    }\n\n    var worldViewProjection = new Matrix4();\n    Matrix4.mul(worldViewProjection, camera.viewMatrix, this._mesh.worldTransform);\n    Matrix4.mul(worldViewProjection, camera.projectionMatrix, worldViewProjection);\n\n    this._mesh.updateNDCPosition(worldViewProjection, this.is2D, this._api);\n  },\n  highlight: function highlight(data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  downplay: function downplay(data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  fadeOutAll: function fadeOutAll(fadeOutPercent) {\n    if (this._originalOpacity) {\n      var geo = this._mesh.geometry;\n\n      for (var i = 0; i < geo.vertexCount; i++) {\n        var fadeOutOpacity = this._originalOpacity[i] * fadeOutPercent;\n        geo.attributes.color.value[i * 4 + 3] = fadeOutOpacity;\n      }\n\n      geo.dirtyAttribute('color');\n\n      this._api.getZr().refresh();\n    }\n  },\n  fadeInAll: function fadeInAll() {\n    this.fadeOutAll(1);\n  },\n  setPositionTexture: function setPositionTexture(texture) {\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, texture);\n    }\n\n    this._positionTexture = texture;\n  },\n  removePositionTexture: function removePositionTexture() {\n    this._positionTexture = null;\n\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, null);\n    }\n  },\n  setSizeScale: function setSizeScale(sizeScale) {\n    if (sizeScale !== this._sizeScale) {\n      if (this._mesh) {\n        var originalSize = this._mesh.material.get('u_Size');\n\n        this._mesh.material.set('u_Size', originalSize / this._sizeScale * sizeScale);\n\n        var attributes = this._mesh.geometry.attributes;\n\n        if (attributes.size.value) {\n          for (var i = 0; i < attributes.size.value.length; i++) {\n            attributes.size.value[i] = attributes.size.value[i] / this._sizeScale * sizeScale;\n          }\n        }\n      }\n\n      this._sizeScale = sizeScale;\n    }\n  },\n  _setPositionTextureToMesh: function _setPositionTextureToMesh(mesh, texture) {\n    if (texture) {\n      mesh.material.set('positionTexture', texture);\n    }\n\n    mesh.material[texture ? 'enableTexture' : 'disableTexture']('positionTexture');\n  },\n  _getSymbolInfo: function _getSymbolInfo(seriesModel, start, end) {\n    if (seriesModel.get('large')) {\n      var symbolSize = retrieve.firstNotNull(seriesModel.get('symbolSize'), 1);\n      var maxSymbolSize;\n      var symbolAspect;\n\n      if (symbolSize instanceof Array) {\n        maxSymbolSize = Math.max(symbolSize[0], symbolSize[1]);\n        symbolAspect = symbolSize[0] / symbolSize[1];\n      } else {\n        maxSymbolSize = symbolSize;\n        symbolAspect = 1;\n      }\n\n      return {\n        maxSize: symbolSize,\n        type: seriesModel.get('symbol'),\n        aspect: symbolAspect\n      };\n    }\n\n    var data = seriesModel.getData();\n    var symbolAspect;\n    var differentSymbolAspect = false;\n    var symbolType = data.getItemVisual(0, 'symbol') || 'circle';\n    var differentSymbolType = false;\n    var maxSymbolSize = 0;\n\n    for (var idx = start; idx < end; idx++) {\n      var symbolSize = data.getItemVisual(idx, 'symbolSize');\n      var currentSymbolType = data.getItemVisual(idx, 'symbol');\n      var currentSymbolAspect;\n\n      if (!(symbolSize instanceof Array)) {\n        // Ignore NaN value.\n        if (isNaN(symbolSize)) {\n          continue;\n        }\n\n        currentSymbolAspect = 1;\n        maxSymbolSize = Math.max(symbolSize, maxSymbolSize);\n      } else {\n        currentSymbolAspect = symbolSize[0] / symbolSize[1];\n        maxSymbolSize = Math.max(Math.max(symbolSize[0], symbolSize[1]), maxSymbolSize);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (symbolAspect != null && Math.abs(currentSymbolAspect - symbolAspect) > 0.05) {\n          differentSymbolAspect = true;\n        }\n\n        if (currentSymbolType !== symbolType) {\n          differentSymbolType = true;\n        }\n      }\n\n      symbolType = currentSymbolType;\n      symbolAspect = currentSymbolAspect;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (differentSymbolAspect) {\n        console.warn('Different symbol width / height ratio will be ignored.');\n      }\n\n      if (differentSymbolType) {\n        console.warn('Different symbol type will be ignored.');\n      }\n    }\n\n    return {\n      maxSize: maxSymbolSize,\n      type: symbolType,\n      aspect: symbolAspect\n    };\n  }\n};\nexport default PointsBuilder;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/common/PointsBuilder.js"],"names":["echarts","graphicGL","spriteUtil","PointsMesh","LabelsBuilder","Matrix4","retrieve","getItemVisualColor","getItemVisualOpacity","getVisualColor","getVisualOpacity","SDF_RANGE","Z_2D","isSymbolSizeSame","a","b","PointsBuilder","is2D","api","rootNode","Node","_labelsBuilder","getMesh","renderOrder","add","_api","_spriteImageCanvas","document","createElement","_startDataIndex","_endDataIndex","_sizeScale","prototype","constructor","highlightOnMouseover","update","seriesModel","ecModel","start","end","tmp","_prevMesh","_mesh","data","getData","count","material","frustumCulling","geometry","attributes","remove","_setPositionTextureToMesh","_positionTexture","symbolInfo","_getSymbolInfo","dpr","getDevicePixelRatio","itemStyle","getModel","getItemStyle","largeMode","get","pointSizeScale","maxSize","_updateSymbolSprite","enableTexture","disableTexture","position","init","rgbaArr","undefine","color","opacity","parseColor","set","define","size","_originalOpacity","Float32Array","points","getLayout","positionArr","value","hasTransparentPoint","i","i3","i2","symbolSize","getItemVisual","Array","Math","max","isNaN","sizeScale","updateBoundingBox","dirty","_updateMaterial","coordSys","coordinateSystem","viewGL","methodName","isLinearSpace","_updateLabelBuilder","_updateHandler","_updateAnimation","getPointsMesh","updateLabels","highlightDataIndices","hideLabels","showLabels","dispose","min","aspect","_symbolType","type","_symbolSize","_lineWidth","lineWidth","createSymbolSprite","fill","stroke","shadowColor","minMargin","createSDFFromCanvas","width","image","blendFunc","additiveBlend","blend","strokeColor","transparent","depthMask","depthTest","sortVertices","updateData","getLabelPosition","dataIndex","positionDesc","distance","idx3","getLabelDistance","updateVertexAnimation","pointsMesh","self","lastDataIndex","isCartesian3D","grid3DModel","model","seriesIndex","off","on","e","vertexIndex","downplay","highlight","dispatchAction","coordDimToDataDim","grid3DIndex","componentIndex","updateLayout","length","getZr","refresh","updateView","camera","worldViewProjection","mul","viewMatrix","worldTransform","projectionMatrix","updateNDCPosition","itemModel","getItemModel","emphasisItemStyleModel","emphasisColor","emphasisOpacity","lift","colorArr","dirtyAttribute","fadeOutAll","fadeOutPercent","geo","vertexCount","fadeOutOpacity","fadeInAll","setPositionTexture","texture","removePositionTexture","setSizeScale","originalSize","mesh","firstNotNull","maxSymbolSize","symbolAspect","differentSymbolAspect","symbolType","differentSymbolType","idx","currentSymbolType","currentSymbolAspect","process","env","NODE_ENV","abs","console","warn"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport spriteUtil from '../../util/sprite';\nimport PointsMesh from './PointsMesh';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport retrieve from '../../util/retrieve';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport { getVisualColor, getVisualOpacity } from '../../util/visual';\nvar SDF_RANGE = 20;\nvar Z_2D = -10;\n\nfunction isSymbolSizeSame(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // TODO gl_PointSize has max value.\n\n\nfunction PointsBuilder(is2D, api) {\n  this.rootNode = new graphicGL.Node();\n  /**\n   * @type {boolean}\n   */\n\n  this.is2D = is2D;\n  this._labelsBuilder = new LabelsBuilder(256, 256, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n  this._api = api;\n  this._spriteImageCanvas = document.createElement('canvas');\n  this._startDataIndex = 0;\n  this._endDataIndex = 0;\n  this._sizeScale = 1;\n}\n\nPointsBuilder.prototype = {\n  constructor: PointsBuilder,\n\n  /**\n   * If highlight on over\n   */\n  highlightOnMouseover: true,\n  update: function (seriesModel, ecModel, api, start, end) {\n    // Swap barMesh\n    var tmp = this._prevMesh;\n    this._prevMesh = this._mesh;\n    this._mesh = tmp;\n    var data = seriesModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startDataIndex = start;\n    this._endDataIndex = end - 1;\n\n    if (!this._mesh) {\n      var material = this._prevMesh && this._prevMesh.material;\n      this._mesh = new PointsMesh({\n        // Render after axes\n        renderOrder: 10,\n        // FIXME\n        frustumCulling: false\n      });\n\n      if (material) {\n        this._mesh.material = material;\n      }\n    }\n\n    var material = this._mesh.material;\n    var geometry = this._mesh.geometry;\n    var attributes = geometry.attributes;\n    this.rootNode.remove(this._prevMesh);\n    this.rootNode.add(this._mesh);\n\n    this._setPositionTextureToMesh(this._mesh, this._positionTexture);\n\n    var symbolInfo = this._getSymbolInfo(seriesModel, start, end);\n\n    var dpr = api.getDevicePixelRatio(); // TODO image symbol\n\n    var itemStyle = seriesModel.getModel('itemStyle').getItemStyle();\n    var largeMode = seriesModel.get('large');\n    var pointSizeScale = 1;\n\n    if (symbolInfo.maxSize > 2) {\n      pointSizeScale = this._updateSymbolSprite(seriesModel, itemStyle, symbolInfo, dpr);\n      material.enableTexture('sprite');\n    } else {\n      material.disableTexture('sprite');\n    }\n\n    attributes.position.init(end - start);\n    var rgbaArr = [];\n\n    if (largeMode) {\n      material.undefine('VERTEX_SIZE');\n      material.undefine('VERTEX_COLOR');\n      var color = getVisualColor(data);\n      var opacity = getVisualOpacity(data);\n      graphicGL.parseColor(color, rgbaArr);\n      rgbaArr[3] *= opacity;\n      material.set({\n        color: rgbaArr,\n        'u_Size': symbolInfo.maxSize * this._sizeScale\n      });\n    } else {\n      material.set({\n        color: [1, 1, 1, 1]\n      });\n      material.define('VERTEX_SIZE');\n      material.define('VERTEX_COLOR');\n      attributes.size.init(end - start);\n      attributes.color.init(end - start);\n      this._originalOpacity = new Float32Array(end - start);\n    }\n\n    var points = data.getLayout('points');\n    var positionArr = attributes.position.value;\n    var hasTransparentPoint = false;\n\n    for (var i = 0; i < end - start; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n\n      if (this.is2D) {\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      } else {\n        positionArr[i3] = points[i3];\n        positionArr[i3 + 1] = points[i3 + 1];\n        positionArr[i3 + 2] = points[i3 + 2];\n      }\n\n      if (!largeMode) {\n        var color = getItemVisualColor(data, i);\n        var opacity = getItemVisualOpacity(data, i);\n        graphicGL.parseColor(color, rgbaArr);\n        rgbaArr[3] *= opacity;\n        attributes.color.set(i, rgbaArr);\n\n        if (rgbaArr[3] < 0.99) {\n          hasTransparentPoint = true;\n        }\n\n        var symbolSize = data.getItemVisual(i, 'symbolSize');\n        symbolSize = symbolSize instanceof Array ? Math.max(symbolSize[0], symbolSize[1]) : symbolSize; // NaN pointSize may have strange result.\n\n        if (isNaN(symbolSize)) {\n          symbolSize = 0;\n        } // Scale point size because canvas has margin.\n\n\n        attributes.size.value[i] = symbolSize * pointSizeScale * this._sizeScale; // Save the original opacity for recover from fadeIn.\n\n        this._originalOpacity[i] = rgbaArr[3];\n      }\n    }\n\n    this._mesh.sizeScale = pointSizeScale;\n    geometry.updateBoundingBox();\n    geometry.dirty(); // Update material.\n\n    this._updateMaterial(seriesModel, itemStyle);\n\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n      material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    if (!largeMode) {\n      this._updateLabelBuilder(seriesModel, start, end);\n    }\n\n    this._updateHandler(seriesModel, ecModel, api);\n\n    this._updateAnimation(seriesModel);\n\n    this._api = api;\n  },\n  getPointsMesh: function () {\n    return this._mesh;\n  },\n  updateLabels: function (highlightDataIndices) {\n    this._labelsBuilder.updateLabels(highlightDataIndices);\n  },\n  hideLabels: function () {\n    this.rootNode.remove(this._labelsBuilder.getMesh());\n  },\n  showLabels: function () {\n    this.rootNode.add(this._labelsBuilder.getMesh());\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n  },\n  _updateSymbolSprite: function (seriesModel, itemStyle, symbolInfo, dpr) {\n    symbolInfo.maxSize = Math.min(symbolInfo.maxSize * 2, 200);\n    var symbolSize = [];\n\n    if (symbolInfo.aspect > 1) {\n      symbolSize[0] = symbolInfo.maxSize;\n      symbolSize[1] = symbolInfo.maxSize / symbolInfo.aspect;\n    } else {\n      symbolSize[1] = symbolInfo.maxSize;\n      symbolSize[0] = symbolInfo.maxSize * symbolInfo.aspect;\n    } // In case invalid data.\n\n\n    symbolSize[0] = symbolSize[0] || 1;\n    symbolSize[1] = symbolSize[1] || 1;\n\n    if (this._symbolType !== symbolInfo.type || !isSymbolSizeSame(this._symbolSize, symbolSize) || this._lineWidth !== itemStyle.lineWidth) {\n      spriteUtil.createSymbolSprite(symbolInfo.type, symbolSize, {\n        fill: '#fff',\n        lineWidth: itemStyle.lineWidth,\n        stroke: 'transparent',\n        shadowColor: 'transparent',\n        minMargin: Math.min(symbolSize[0] / 2, 10)\n      }, this._spriteImageCanvas);\n      spriteUtil.createSDFFromCanvas(this._spriteImageCanvas, Math.min(this._spriteImageCanvas.width, 32), SDF_RANGE, this._mesh.material.get('sprite').image);\n      this._symbolType = symbolInfo.type;\n      this._symbolSize = symbolSize;\n      this._lineWidth = itemStyle.lineWidth;\n    }\n\n    return this._spriteImageCanvas.width / symbolInfo.maxSize * dpr;\n  },\n  _updateMaterial: function (seriesModel, itemStyle) {\n    var blendFunc = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var material = this._mesh.material;\n    material.blend = blendFunc;\n    material.set('lineWidth', itemStyle.lineWidth / SDF_RANGE);\n    var strokeColor = graphicGL.parseColor(itemStyle.stroke);\n    material.set('strokeColor', strokeColor); // Because of symbol texture, we always needs it be transparent.\n\n    material.transparent = true;\n    material.depthMask = false;\n    material.depthTest = !this.is2D;\n    material.sortVertices = !this.is2D;\n  },\n  _updateLabelBuilder: function (seriesModel, start, end) {\n    var data = seriesModel.getData();\n    var geometry = this._mesh.geometry;\n    var positionArr = geometry.attributes.position.value;\n    var start = this._startDataIndex;\n    var pointSizeScale = this._mesh.sizeScale;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var idx3 = (dataIndex - start) * 3;\n      return [positionArr[idx3], positionArr[idx3 + 1], positionArr[idx3 + 2]];\n    };\n\n    this._labelsBuilder.getLabelDistance = function (dataIndex, positionDesc, distance) {\n      var size = geometry.attributes.size.get(dataIndex - start) / pointSizeScale;\n      return size / 2 + distance;\n    };\n\n    this._labelsBuilder.updateLabels();\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevSize', 'size']], this._prevMesh, this._mesh, seriesModel);\n  },\n  _updateHandler: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pointsMesh = this._mesh;\n    var self = this;\n    var lastDataIndex = -1;\n    var isCartesian3D = seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian3D';\n    var grid3DModel;\n\n    if (isCartesian3D) {\n      grid3DModel = seriesModel.coordinateSystem.model;\n    }\n\n    pointsMesh.seriesIndex = seriesModel.seriesIndex;\n    pointsMesh.off('mousemove');\n    pointsMesh.off('mouseout');\n    pointsMesh.on('mousemove', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (dataIndex !== lastDataIndex) {\n        if (this.highlightOnMouseover) {\n          this.downplay(data, lastDataIndex);\n          this.highlight(data, dataIndex);\n\n          this._labelsBuilder.updateLabels([dataIndex]);\n        }\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get(seriesModel.coordDimToDataDim('x')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('y')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('z')[0], dataIndex)],\n            grid3DIndex: grid3DModel.componentIndex\n          });\n        }\n      }\n\n      pointsMesh.dataIndex = dataIndex;\n      lastDataIndex = dataIndex;\n    }, this);\n    pointsMesh.on('mouseout', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (this.highlightOnMouseover) {\n        this.downplay(data, dataIndex);\n\n        this._labelsBuilder.updateLabels();\n      }\n\n      lastDataIndex = -1;\n      pointsMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer',\n          grid3DIndex: grid3DModel.componentIndex\n        });\n      }\n    }, this);\n  },\n  updateLayout: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    if (!this._mesh) {\n      return;\n    }\n\n    var positionArr = this._mesh.geometry.attributes.position.value;\n    var points = data.getLayout('points');\n\n    if (this.is2D) {\n      for (var i = 0; i < points.length / 2; i++) {\n        var i3 = i * 3;\n        var i2 = i * 2;\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      }\n    } else {\n      for (var i = 0; i < points.length; i++) {\n        positionArr[i] = points[i];\n      }\n    }\n\n    this._mesh.geometry.dirty();\n\n    api.getZr().refresh();\n  },\n  updateView: function (camera) {\n    if (!this._mesh) {\n      return;\n    }\n\n    var worldViewProjection = new Matrix4();\n    Matrix4.mul(worldViewProjection, camera.viewMatrix, this._mesh.worldTransform);\n    Matrix4.mul(worldViewProjection, camera.projectionMatrix, worldViewProjection);\n\n    this._mesh.updateNDCPosition(worldViewProjection, this.is2D, this._api);\n  },\n  highlight: function (data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  downplay: function (data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  fadeOutAll: function (fadeOutPercent) {\n    if (this._originalOpacity) {\n      var geo = this._mesh.geometry;\n\n      for (var i = 0; i < geo.vertexCount; i++) {\n        var fadeOutOpacity = this._originalOpacity[i] * fadeOutPercent;\n        geo.attributes.color.value[i * 4 + 3] = fadeOutOpacity;\n      }\n\n      geo.dirtyAttribute('color');\n\n      this._api.getZr().refresh();\n    }\n  },\n  fadeInAll: function () {\n    this.fadeOutAll(1);\n  },\n  setPositionTexture: function (texture) {\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, texture);\n    }\n\n    this._positionTexture = texture;\n  },\n  removePositionTexture: function () {\n    this._positionTexture = null;\n\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, null);\n    }\n  },\n  setSizeScale: function (sizeScale) {\n    if (sizeScale !== this._sizeScale) {\n      if (this._mesh) {\n        var originalSize = this._mesh.material.get('u_Size');\n\n        this._mesh.material.set('u_Size', originalSize / this._sizeScale * sizeScale);\n\n        var attributes = this._mesh.geometry.attributes;\n\n        if (attributes.size.value) {\n          for (var i = 0; i < attributes.size.value.length; i++) {\n            attributes.size.value[i] = attributes.size.value[i] / this._sizeScale * sizeScale;\n          }\n        }\n      }\n\n      this._sizeScale = sizeScale;\n    }\n  },\n  _setPositionTextureToMesh: function (mesh, texture) {\n    if (texture) {\n      mesh.material.set('positionTexture', texture);\n    }\n\n    mesh.material[texture ? 'enableTexture' : 'disableTexture']('positionTexture');\n  },\n  _getSymbolInfo: function (seriesModel, start, end) {\n    if (seriesModel.get('large')) {\n      var symbolSize = retrieve.firstNotNull(seriesModel.get('symbolSize'), 1);\n      var maxSymbolSize;\n      var symbolAspect;\n\n      if (symbolSize instanceof Array) {\n        maxSymbolSize = Math.max(symbolSize[0], symbolSize[1]);\n        symbolAspect = symbolSize[0] / symbolSize[1];\n      } else {\n        maxSymbolSize = symbolSize;\n        symbolAspect = 1;\n      }\n\n      return {\n        maxSize: symbolSize,\n        type: seriesModel.get('symbol'),\n        aspect: symbolAspect\n      };\n    }\n\n    var data = seriesModel.getData();\n    var symbolAspect;\n    var differentSymbolAspect = false;\n    var symbolType = data.getItemVisual(0, 'symbol') || 'circle';\n    var differentSymbolType = false;\n    var maxSymbolSize = 0;\n\n    for (var idx = start; idx < end; idx++) {\n      var symbolSize = data.getItemVisual(idx, 'symbolSize');\n      var currentSymbolType = data.getItemVisual(idx, 'symbol');\n      var currentSymbolAspect;\n\n      if (!(symbolSize instanceof Array)) {\n        // Ignore NaN value.\n        if (isNaN(symbolSize)) {\n          continue;\n        }\n\n        currentSymbolAspect = 1;\n        maxSymbolSize = Math.max(symbolSize, maxSymbolSize);\n      } else {\n        currentSymbolAspect = symbolSize[0] / symbolSize[1];\n        maxSymbolSize = Math.max(Math.max(symbolSize[0], symbolSize[1]), maxSymbolSize);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (symbolAspect != null && Math.abs(currentSymbolAspect - symbolAspect) > 0.05) {\n          differentSymbolAspect = true;\n        }\n\n        if (currentSymbolType !== symbolType) {\n          differentSymbolType = true;\n        }\n      }\n\n      symbolType = currentSymbolType;\n      symbolAspect = currentSymbolAspect;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (differentSymbolAspect) {\n        console.warn('Different symbol width / height ratio will be ignored.');\n      }\n\n      if (differentSymbolType) {\n        console.warn('Different symbol type will be ignored.');\n      }\n    }\n\n    return {\n      maxSize: maxSymbolSize,\n      type: symbolType,\n      aspect: symbolAspect\n    };\n  }\n};\nexport default PointsBuilder;"]},"metadata":{},"sourceType":"module"}