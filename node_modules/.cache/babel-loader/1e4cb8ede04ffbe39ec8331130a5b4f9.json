{"ast":null,"code":"/**\n * echarts-gl\n * Extension pack of ECharts providing 3d plots and globe visualization\n *\n * Copyright (c) 2014, echarts-gl\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport LayerGL from './core/LayerGL';\nimport backwardCompat from './preprocessor/backwardCompat';\n\nfunction EChartsGL(zr) {\n  this._layers = {};\n  this._zr = zr;\n}\n\nEChartsGL.prototype.update = function (ecModel, api) {\n  var self = this;\n  var zr = api.getZr();\n\n  if (!zr.getWidth() || !zr.getHeight()) {\n    console.warn('Dom has no width or height');\n    return;\n  }\n\n  function getLayerGL(model) {\n    // Disable auto sleep in gl layer.\n    zr.setSleepAfterStill(0);\n    var zlevel; // Host on coordinate system.\n\n    if (model.coordinateSystem && model.coordinateSystem.model) {\n      zlevel = model.get('zlevel');\n    } else {\n      zlevel = model.get('zlevel');\n    }\n\n    var layers = self._layers;\n    var layerGL = layers[zlevel];\n\n    if (!layerGL) {\n      layerGL = layers[zlevel] = new LayerGL('gl-' + zlevel, zr);\n\n      if (zr.painter.isSingleCanvas()) {\n        layerGL.virtual = true; // If container is canvas, use image to represent LayerGL\n        // FIXME Performance\n\n        var img = new echarts.graphic.Image({\n          z: 1e4,\n          style: {\n            image: layerGL.renderer.canvas\n          },\n          silent: true\n        });\n        layerGL.__hostImage = img;\n        zr.add(img);\n      }\n\n      zr.painter.insertLayer(zlevel, layerGL);\n    }\n\n    if (layerGL.__hostImage) {\n      layerGL.__hostImage.setStyle({\n        width: layerGL.renderer.getWidth(),\n        height: layerGL.renderer.getHeight()\n      });\n    }\n\n    return layerGL;\n  }\n\n  function setSilent(groupGL, silent) {\n    if (groupGL) {\n      groupGL.traverse(function (mesh) {\n        if (mesh.isRenderable && mesh.isRenderable()) {\n          mesh.ignorePicking = mesh.$ignorePicking != null ? mesh.$ignorePicking : silent;\n        }\n      });\n    }\n  }\n\n  for (var zlevel in this._layers) {\n    this._layers[zlevel].removeViewsAll();\n  }\n\n  ecModel.eachComponent(function (componentType, componentModel) {\n    if (componentType !== 'series') {\n      var view = api.getViewOfComponentModel(componentModel);\n      var coordSys = componentModel.coordinateSystem; // View with __ecgl__ flag is a echarts-gl component.\n\n      if (view.__ecgl__) {\n        var viewGL;\n\n        if (coordSys) {\n          if (!coordSys.viewGL) {\n            console.error('Can\\'t find viewGL in coordinateSystem of component ' + componentModel.id);\n            return;\n          }\n\n          viewGL = coordSys.viewGL;\n        } else {\n          if (!componentModel.viewGL) {\n            console.error('Can\\'t find viewGL of component ' + componentModel.id);\n            return;\n          }\n\n          viewGL = coordSys.viewGL;\n        }\n\n        var viewGL = coordSys.viewGL;\n        var layerGL = getLayerGL(componentModel);\n        layerGL.addView(viewGL);\n        view.afterRender && view.afterRender(componentModel, ecModel, api, layerGL);\n        setSilent(view.groupGL, componentModel.get('silent'));\n      }\n    }\n  });\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = api.getViewOfSeriesModel(seriesModel);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (chartView.__ecgl__) {\n      if (coordSys && !coordSys.viewGL && !chartView.viewGL) {\n        console.error('Can\\'t find viewGL of series ' + chartView.id);\n        return;\n      }\n\n      var viewGL = coordSys && coordSys.viewGL || chartView.viewGL; // TODO Check zlevel not same with component of coordinate system ?\n\n      var layerGL = getLayerGL(seriesModel);\n      layerGL.addView(viewGL);\n      chartView.afterRender && chartView.afterRender(seriesModel, ecModel, api, layerGL);\n      setSilent(chartView.groupGL, seriesModel.get('silent'));\n    }\n  });\n}; // Hack original getRenderedCanvas. Will removed after new echarts released\n// TODO\n\n\necharts.registerPostInit(function (chart) {\n  var zr = chart.getZr();\n  var oldDispose = zr.painter.dispose;\n\n  zr.painter.dispose = function () {\n    if (typeof this.eachOtherLayer === 'function') {\n      this.eachOtherLayer(function (layer) {\n        if (layer instanceof LayerGL) {\n          layer.dispose();\n        }\n      });\n    }\n\n    oldDispose.call(this);\n  };\n\n  zr.painter.getRenderedCanvas = function (opts) {\n    opts = opts || {};\n\n    if (this._singleCanvas) {\n      return this._layers[0].dom;\n    }\n\n    var canvas = document.createElement('canvas');\n    var dpr = opts.pixelRatio || this.dpr;\n    canvas.width = this.getWidth() * dpr;\n    canvas.height = this.getHeight() * dpr;\n    var ctx = canvas.getContext('2d');\n    ctx.dpr = dpr;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (opts.backgroundColor) {\n      ctx.fillStyle = opts.backgroundColor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    var displayList = this.storage.getDisplayList(true);\n    var scope = {};\n    var zlevel;\n    var self = this;\n\n    function findAndDrawOtherLayer(smaller, larger) {\n      var zlevelList = self._zlevelList;\n\n      if (smaller == null) {\n        smaller = -Infinity;\n      }\n\n      var intermediateLayer;\n\n      for (var i = 0; i < zlevelList.length; i++) {\n        var z = zlevelList[i];\n        var layer = self._layers[z];\n\n        if (!layer.__builtin__ && z > smaller && z < larger) {\n          intermediateLayer = layer;\n          break;\n        }\n      }\n\n      if (intermediateLayer && intermediateLayer.renderToCanvas) {\n        ctx.save();\n        intermediateLayer.renderToCanvas(ctx);\n        ctx.restore();\n      }\n    }\n\n    var layer = {\n      ctx: ctx\n    };\n\n    for (var i = 0; i < displayList.length; i++) {\n      var el = displayList[i];\n\n      if (el.zlevel !== zlevel) {\n        findAndDrawOtherLayer(zlevel, el.zlevel);\n        zlevel = el.zlevel;\n      }\n\n      this._doPaintEl(el, layer, true, null, scope);\n    }\n\n    findAndDrawOtherLayer(zlevel, Infinity);\n    return canvas;\n  };\n});\necharts.registerPostUpdate(function (ecModel, api) {\n  var zr = api.getZr();\n  var egl = zr.__egl = zr.__egl || new EChartsGL(zr);\n  egl.update(ecModel, api);\n});\necharts.registerPreprocessor(backwardCompat);\nexport default EChartsGL;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/echarts-gl.js"],"names":["echarts","LayerGL","backwardCompat","EChartsGL","zr","_layers","_zr","prototype","update","ecModel","api","self","getZr","getWidth","getHeight","console","warn","getLayerGL","model","setSleepAfterStill","zlevel","coordinateSystem","get","layers","layerGL","painter","isSingleCanvas","virtual","img","graphic","Image","z","style","image","renderer","canvas","silent","__hostImage","add","insertLayer","setStyle","width","height","setSilent","groupGL","traverse","mesh","isRenderable","ignorePicking","$ignorePicking","removeViewsAll","eachComponent","componentType","componentModel","view","getViewOfComponentModel","coordSys","__ecgl__","viewGL","error","id","addView","afterRender","eachSeries","seriesModel","chartView","getViewOfSeriesModel","registerPostInit","chart","oldDispose","dispose","eachOtherLayer","layer","call","getRenderedCanvas","opts","_singleCanvas","dom","document","createElement","dpr","pixelRatio","ctx","getContext","clearRect","backgroundColor","fillStyle","fillRect","displayList","storage","getDisplayList","scope","findAndDrawOtherLayer","smaller","larger","zlevelList","_zlevelList","Infinity","intermediateLayer","i","length","__builtin__","renderToCanvas","save","restore","el","_doPaintEl","registerPostUpdate","egl","__egl","registerPreprocessor"],"mappings":"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","sourcesContent":["/**\n * echarts-gl\n * Extension pack of ECharts providing 3d plots and globe visualization\n *\n * Copyright (c) 2014, echarts-gl\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport LayerGL from './core/LayerGL';\nimport backwardCompat from './preprocessor/backwardCompat';\n\nfunction EChartsGL(zr) {\n  this._layers = {};\n  this._zr = zr;\n}\n\nEChartsGL.prototype.update = function (ecModel, api) {\n  var self = this;\n  var zr = api.getZr();\n\n  if (!zr.getWidth() || !zr.getHeight()) {\n    console.warn('Dom has no width or height');\n    return;\n  }\n\n  function getLayerGL(model) {\n    // Disable auto sleep in gl layer.\n    zr.setSleepAfterStill(0);\n    var zlevel; // Host on coordinate system.\n\n    if (model.coordinateSystem && model.coordinateSystem.model) {\n      zlevel = model.get('zlevel');\n    } else {\n      zlevel = model.get('zlevel');\n    }\n\n    var layers = self._layers;\n    var layerGL = layers[zlevel];\n\n    if (!layerGL) {\n      layerGL = layers[zlevel] = new LayerGL('gl-' + zlevel, zr);\n\n      if (zr.painter.isSingleCanvas()) {\n        layerGL.virtual = true; // If container is canvas, use image to represent LayerGL\n        // FIXME Performance\n\n        var img = new echarts.graphic.Image({\n          z: 1e4,\n          style: {\n            image: layerGL.renderer.canvas\n          },\n          silent: true\n        });\n        layerGL.__hostImage = img;\n        zr.add(img);\n      }\n\n      zr.painter.insertLayer(zlevel, layerGL);\n    }\n\n    if (layerGL.__hostImage) {\n      layerGL.__hostImage.setStyle({\n        width: layerGL.renderer.getWidth(),\n        height: layerGL.renderer.getHeight()\n      });\n    }\n\n    return layerGL;\n  }\n\n  function setSilent(groupGL, silent) {\n    if (groupGL) {\n      groupGL.traverse(function (mesh) {\n        if (mesh.isRenderable && mesh.isRenderable()) {\n          mesh.ignorePicking = mesh.$ignorePicking != null ? mesh.$ignorePicking : silent;\n        }\n      });\n    }\n  }\n\n  for (var zlevel in this._layers) {\n    this._layers[zlevel].removeViewsAll();\n  }\n\n  ecModel.eachComponent(function (componentType, componentModel) {\n    if (componentType !== 'series') {\n      var view = api.getViewOfComponentModel(componentModel);\n      var coordSys = componentModel.coordinateSystem; // View with __ecgl__ flag is a echarts-gl component.\n\n      if (view.__ecgl__) {\n        var viewGL;\n\n        if (coordSys) {\n          if (!coordSys.viewGL) {\n            console.error('Can\\'t find viewGL in coordinateSystem of component ' + componentModel.id);\n            return;\n          }\n\n          viewGL = coordSys.viewGL;\n        } else {\n          if (!componentModel.viewGL) {\n            console.error('Can\\'t find viewGL of component ' + componentModel.id);\n            return;\n          }\n\n          viewGL = coordSys.viewGL;\n        }\n\n        var viewGL = coordSys.viewGL;\n        var layerGL = getLayerGL(componentModel);\n        layerGL.addView(viewGL);\n        view.afterRender && view.afterRender(componentModel, ecModel, api, layerGL);\n        setSilent(view.groupGL, componentModel.get('silent'));\n      }\n    }\n  });\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = api.getViewOfSeriesModel(seriesModel);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (chartView.__ecgl__) {\n      if (coordSys && !coordSys.viewGL && !chartView.viewGL) {\n        console.error('Can\\'t find viewGL of series ' + chartView.id);\n        return;\n      }\n\n      var viewGL = coordSys && coordSys.viewGL || chartView.viewGL; // TODO Check zlevel not same with component of coordinate system ?\n\n      var layerGL = getLayerGL(seriesModel);\n      layerGL.addView(viewGL);\n      chartView.afterRender && chartView.afterRender(seriesModel, ecModel, api, layerGL);\n      setSilent(chartView.groupGL, seriesModel.get('silent'));\n    }\n  });\n}; // Hack original getRenderedCanvas. Will removed after new echarts released\n// TODO\n\n\necharts.registerPostInit(function (chart) {\n  var zr = chart.getZr();\n  var oldDispose = zr.painter.dispose;\n\n  zr.painter.dispose = function () {\n    if (typeof this.eachOtherLayer === 'function') {\n      this.eachOtherLayer(function (layer) {\n        if (layer instanceof LayerGL) {\n          layer.dispose();\n        }\n      });\n    }\n\n    oldDispose.call(this);\n  };\n\n  zr.painter.getRenderedCanvas = function (opts) {\n    opts = opts || {};\n\n    if (this._singleCanvas) {\n      return this._layers[0].dom;\n    }\n\n    var canvas = document.createElement('canvas');\n    var dpr = opts.pixelRatio || this.dpr;\n    canvas.width = this.getWidth() * dpr;\n    canvas.height = this.getHeight() * dpr;\n    var ctx = canvas.getContext('2d');\n    ctx.dpr = dpr;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (opts.backgroundColor) {\n      ctx.fillStyle = opts.backgroundColor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    var displayList = this.storage.getDisplayList(true);\n    var scope = {};\n    var zlevel;\n    var self = this;\n\n    function findAndDrawOtherLayer(smaller, larger) {\n      var zlevelList = self._zlevelList;\n\n      if (smaller == null) {\n        smaller = -Infinity;\n      }\n\n      var intermediateLayer;\n\n      for (var i = 0; i < zlevelList.length; i++) {\n        var z = zlevelList[i];\n        var layer = self._layers[z];\n\n        if (!layer.__builtin__ && z > smaller && z < larger) {\n          intermediateLayer = layer;\n          break;\n        }\n      }\n\n      if (intermediateLayer && intermediateLayer.renderToCanvas) {\n        ctx.save();\n        intermediateLayer.renderToCanvas(ctx);\n        ctx.restore();\n      }\n    }\n\n    var layer = {\n      ctx: ctx\n    };\n\n    for (var i = 0; i < displayList.length; i++) {\n      var el = displayList[i];\n\n      if (el.zlevel !== zlevel) {\n        findAndDrawOtherLayer(zlevel, el.zlevel);\n        zlevel = el.zlevel;\n      }\n\n      this._doPaintEl(el, layer, true, null, scope);\n    }\n\n    findAndDrawOtherLayer(zlevel, Infinity);\n    return canvas;\n  };\n});\necharts.registerPostUpdate(function (ecModel, api) {\n  var zr = api.getZr();\n  var egl = zr.__egl = zr.__egl || new EChartsGL(zr);\n  egl.update(ecModel, api);\n});\necharts.registerPreprocessor(backwardCompat);\nexport default EChartsGL;"]},"metadata":{},"sourceType":"module"}