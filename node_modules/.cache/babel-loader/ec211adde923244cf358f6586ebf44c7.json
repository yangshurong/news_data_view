{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nexport default function (data, dimX, dimY) {\n  var xExtent = data.getDataExtent(dimX);\n  var yExtent = data.getDataExtent(dimY); // TODO Handle one data situation\n\n  var xSpan = xExtent[1] - xExtent[0] || xExtent[0];\n  var ySpan = yExtent[1] - yExtent[0] || yExtent[0];\n  var dimSize = 50;\n  var tmp = new Uint8Array(dimSize * dimSize);\n\n  for (var i = 0; i < data.count(); i++) {\n    var x = data.get(dimX, i);\n    var y = data.get(dimY, i);\n    var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));\n    var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));\n    var idx = yIdx * dimSize + xIdx;\n    tmp[idx] = tmp[idx] || 1;\n  }\n\n  var filledCount = 0;\n\n  for (var i = 0; i < tmp.length; i++) {\n    if (tmp[i]) {\n      filledCount++;\n    }\n  }\n\n  return filledCount / tmp.length;\n}\n;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/bar3D/evaluateBarSparseness.js"],"names":["data","dimX","dimY","xExtent","getDataExtent","yExtent","xSpan","ySpan","dimSize","tmp","Uint8Array","i","count","x","get","y","xIdx","Math","floor","yIdx","idx","filledCount","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,eAAe,UAAUA,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACzC,MAAIC,OAAO,GAAGH,IAAI,CAACI,aAAL,CAAmBH,IAAnB,CAAd;AACA,MAAII,OAAO,GAAGL,IAAI,CAACI,aAAL,CAAmBF,IAAnB,CAAd,CAFyC,CAED;;AAExC,MAAII,KAAK,GAAGH,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,IAA2BA,OAAO,CAAC,CAAD,CAA9C;AACA,MAAII,KAAK,GAAGF,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,IAA2BA,OAAO,CAAC,CAAD,CAA9C;AACA,MAAIG,OAAO,GAAG,EAAd;AACA,MAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeF,OAAO,GAAGA,OAAzB,CAAV;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,KAAL,EAApB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,CAAC,GAAGb,IAAI,CAACc,GAAL,CAASb,IAAT,EAAeU,CAAf,CAAR;AACA,QAAII,CAAC,GAAGf,IAAI,CAACc,GAAL,CAASZ,IAAT,EAAeS,CAAf,CAAR;AACA,QAAIK,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,CAAC,GAAGV,OAAO,CAAC,CAAD,CAAZ,IAAmBG,KAAnB,IAA4BE,OAAO,GAAG,CAAtC,CAAX,CAAX;AACA,QAAIW,IAAI,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACH,CAAC,GAAGV,OAAO,CAAC,CAAD,CAAZ,IAAmBE,KAAnB,IAA4BC,OAAO,GAAG,CAAtC,CAAX,CAAX;AACA,QAAIY,GAAG,GAAGD,IAAI,GAAGX,OAAP,GAAiBQ,IAA3B;AACAP,IAAAA,GAAG,CAACW,GAAD,CAAH,GAAWX,GAAG,CAACW,GAAD,CAAH,IAAY,CAAvB;AACD;;AAED,MAAIC,WAAW,GAAG,CAAlB;;AAEA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACa,MAAxB,EAAgCX,CAAC,EAAjC,EAAqC;AACnC,QAAIF,GAAG,CAACE,CAAD,CAAP,EAAY;AACVU,MAAAA,WAAW;AACZ;AACF;;AAED,SAAOA,WAAW,GAAGZ,GAAG,CAACa,MAAzB;AACD;AACD","sourcesContent":["export default function (data, dimX, dimY) {\n  var xExtent = data.getDataExtent(dimX);\n  var yExtent = data.getDataExtent(dimY); // TODO Handle one data situation\n\n  var xSpan = xExtent[1] - xExtent[0] || xExtent[0];\n  var ySpan = yExtent[1] - yExtent[0] || yExtent[0];\n  var dimSize = 50;\n  var tmp = new Uint8Array(dimSize * dimSize);\n\n  for (var i = 0; i < data.count(); i++) {\n    var x = data.get(dimX, i);\n    var y = data.get(dimY, i);\n    var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));\n    var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));\n    var idx = yIdx * dimSize + xIdx;\n    tmp[idx] = tmp[idx] || 1;\n  }\n\n  var filledCount = 0;\n\n  for (var i = 0; i < tmp.length; i++) {\n    if (tmp[i]) {\n      filledCount++;\n    }\n  }\n\n  return filledCount / tmp.length;\n}\n;"]},"metadata":{},"sourceType":"module"}