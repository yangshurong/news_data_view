{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Line3DSeries from './Line3DSeries';\nimport Line3DView from './Line3DView';\nexport function install(registers) {\n  registers.registerChartView(Line3DView);\n  registers.registerSeriesModel(Line3DSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('line3D', function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        if (coordSys.type !== 'cartesian3D') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('line3D needs cartesian3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var points = new Float32Array(data.count() * 3);\n        var item = [];\n        var out = [];\n        var coordDims = coordSys.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n\n        if (coordSys) {\n          data.each(dims, function (x, y, z, idx) {\n            item[0] = x;\n            item[1] = y;\n            item[2] = z;\n            coordSys.dataToPoint(item, out);\n            points[idx * 3] = out[0];\n            points[idx * 3 + 1] = out[1];\n            points[idx * 3 + 2] = out[2];\n          });\n        }\n\n        data.setLayout('points', points);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/line3D/install.js"],"names":["Line3DSeries","Line3DView","install","registers","registerChartView","registerSeriesModel","registerLayout","ecModel","api","eachSeriesByType","seriesModel","data","getData","coordSys","coordinateSystem","type","process","env","NODE_ENV","console","error","points","Float32Array","count","item","out","coordDims","dimensions","dims","map","coordDim","coordDimToDataDim","each","x","y","z","idx","dataToPoint","setLayout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjCA,EAAAA,SAAS,CAACC,iBAAV,CAA4BH,UAA5B;AACAE,EAAAA,SAAS,CAACE,mBAAV,CAA8BL,YAA9B;AACAG,EAAAA,SAAS,CAACG,cAAV,CAAyB,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC/CD,IAAAA,OAAO,CAACE,gBAAR,CAAyB,QAAzB,EAAmC,UAAUC,WAAV,EAAuB;AACxD,UAAIC,IAAI,GAAGD,WAAW,CAACE,OAAZ,EAAX;AACA,UAAIC,QAAQ,GAAGH,WAAW,CAACI,gBAA3B;;AAEA,UAAID,QAAJ,EAAc;AACZ,YAAIA,QAAQ,CAACE,IAAT,KAAkB,aAAtB,EAAqC;AACnC,cAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,YAAAA,OAAO,CAACC,KAAR,CAAc,2CAAd;AACD;;AAED;AACD;;AAED,YAAIC,MAAM,GAAG,IAAIC,YAAJ,CAAiBX,IAAI,CAACY,KAAL,KAAe,CAAhC,CAAb;AACA,YAAIC,IAAI,GAAG,EAAX;AACA,YAAIC,GAAG,GAAG,EAAV;AACA,YAAIC,SAAS,GAAGb,QAAQ,CAACc,UAAzB;AACA,YAAIC,IAAI,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAUC,QAAV,EAAoB;AAC3C,iBAAOpB,WAAW,CAACqB,iBAAZ,CAA8BD,QAA9B,EAAwC,CAAxC,CAAP;AACD,SAFU,CAAX;;AAIA,YAAIjB,QAAJ,EAAc;AACZF,UAAAA,IAAI,CAACqB,IAAL,CAAUJ,IAAV,EAAgB,UAAUK,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,GAAnB,EAAwB;AACtCZ,YAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUS,CAAV;AACAT,YAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUU,CAAV;AACAV,YAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUW,CAAV;AACAtB,YAAAA,QAAQ,CAACwB,WAAT,CAAqBb,IAArB,EAA2BC,GAA3B;AACAJ,YAAAA,MAAM,CAACe,GAAG,GAAG,CAAP,CAAN,GAAkBX,GAAG,CAAC,CAAD,CAArB;AACAJ,YAAAA,MAAM,CAACe,GAAG,GAAG,CAAN,GAAU,CAAX,CAAN,GAAsBX,GAAG,CAAC,CAAD,CAAzB;AACAJ,YAAAA,MAAM,CAACe,GAAG,GAAG,CAAN,GAAU,CAAX,CAAN,GAAsBX,GAAG,CAAC,CAAD,CAAzB;AACD,WARD;AASD;;AAEDd,QAAAA,IAAI,CAAC2B,SAAL,CAAe,QAAf,EAAyBjB,MAAzB;AACD;AACF,KAnCD;AAoCD,GArCD;AAsCD","sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Line3DSeries from './Line3DSeries';\nimport Line3DView from './Line3DView';\nexport function install(registers) {\n  registers.registerChartView(Line3DView);\n  registers.registerSeriesModel(Line3DSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('line3D', function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        if (coordSys.type !== 'cartesian3D') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('line3D needs cartesian3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var points = new Float32Array(data.count() * 3);\n        var item = [];\n        var out = [];\n        var coordDims = coordSys.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n\n        if (coordSys) {\n          data.each(dims, function (x, y, z, idx) {\n            item[0] = x;\n            item[1] = y;\n            item[2] = z;\n            coordSys.dataToPoint(item, out);\n            points[idx * 3] = out[0];\n            points[idx * 3 + 1] = out[1];\n            points[idx * 3 + 2] = out[2];\n          });\n        }\n\n        data.setLayout('points', points);\n      }\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}