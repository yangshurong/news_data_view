{"ast":null,"code":"import Node from './Node';\nimport Matrix4 from './math/Matrix4';\nimport Frustum from './math/Frustum';\nimport Ray from './math/Ray';\nimport vec4 from './glmatrix/vec4';\nimport vec3 from './glmatrix/vec3';\n/**\n * @constructor clay.Camera\n * @extends clay.Node\n */\n\nvar Camera = Node.extend(function () {\n  return (\n    /** @lends clay.Camera# */\n    {\n      /**\n       * Camera projection matrix\n       * @type {clay.Matrix4}\n       */\n      projectionMatrix: new Matrix4(),\n\n      /**\n       * Inverse of camera projection matrix\n       * @type {clay.Matrix4}\n       */\n      invProjectionMatrix: new Matrix4(),\n\n      /**\n       * View matrix, equal to inverse of camera's world matrix\n       * @type {clay.Matrix4}\n       */\n      viewMatrix: new Matrix4(),\n\n      /**\n       * Camera frustum in view space\n       * @type {clay.Frustum}\n       */\n      frustum: new Frustum()\n    }\n  );\n}, function () {\n  this.update(true);\n},\n/** @lends clay.Camera.prototype */\n{\n  update: function (force) {\n    Node.prototype.update.call(this, force);\n    Matrix4.invert(this.viewMatrix, this.worldTransform);\n    this.updateProjectionMatrix();\n    Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);\n    this.frustum.setFromProjection(this.projectionMatrix);\n  },\n\n  /**\n   * Set camera view matrix\n   */\n  setViewMatrix: function (viewMatrix) {\n    Matrix4.copy(this.viewMatrix, viewMatrix);\n    Matrix4.invert(this.worldTransform, viewMatrix);\n    this.decomposeWorldTransform();\n  },\n\n  /**\n   * Decompose camera projection matrix\n   */\n  decomposeProjectionMatrix: function () {},\n\n  /**\n   * Set camera projection matrix\n   * @param {clay.Matrix4} projectionMatrix\n   */\n  setProjectionMatrix: function (projectionMatrix) {\n    Matrix4.copy(this.projectionMatrix, projectionMatrix);\n    Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n    this.decomposeProjectionMatrix();\n  },\n\n  /**\n   * Update projection matrix, called after update\n   */\n  updateProjectionMatrix: function () {},\n\n  /**\n   * Cast a picking ray from camera near plane to far plane\n   * @function\n   * @param {clay.Vector2} ndc\n   * @param {clay.Ray} [out]\n   * @return {clay.Ray}\n   */\n  castRay: function () {\n    var v4 = vec4.create();\n    return function (ndc, out) {\n      var ray = out !== undefined ? out : new Ray();\n      var x = ndc.array[0];\n      var y = ndc.array[1];\n      vec4.set(v4, x, y, -1, 1);\n      vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n      vec4.transformMat4(v4, v4, this.worldTransform.array);\n      vec3.scale(ray.origin.array, v4, 1 / v4[3]);\n      vec4.set(v4, x, y, 1, 1);\n      vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n      vec4.transformMat4(v4, v4, this.worldTransform.array);\n      vec3.scale(v4, v4, 1 / v4[3]);\n      vec3.sub(ray.direction.array, v4, ray.origin.array);\n      vec3.normalize(ray.direction.array, ray.direction.array);\n      ray.direction._dirty = true;\n      ray.origin._dirty = true;\n      return ray;\n    };\n  }()\n  /**\n   * @function\n   * @name clone\n   * @return {clay.Camera}\n   * @memberOf clay.Camera.prototype\n   */\n\n});\nexport default Camera;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/Camera.js"],"names":["Node","Matrix4","Frustum","Ray","vec4","vec3","Camera","extend","projectionMatrix","invProjectionMatrix","viewMatrix","frustum","update","force","prototype","call","invert","worldTransform","updateProjectionMatrix","setFromProjection","setViewMatrix","copy","decomposeWorldTransform","decomposeProjectionMatrix","setProjectionMatrix","castRay","v4","create","ndc","out","ray","undefined","x","array","y","set","transformMat4","scale","origin","sub","direction","normalize","_dirty"],"mappings":"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","sourcesContent":["import Node from './Node';\nimport Matrix4 from './math/Matrix4';\nimport Frustum from './math/Frustum';\nimport Ray from './math/Ray';\n\nimport vec4 from './glmatrix/vec4';\nimport vec3 from './glmatrix/vec3';\n\n\n/**\n * @constructor clay.Camera\n * @extends clay.Node\n */\nvar Camera = Node.extend(function () {\n    return /** @lends clay.Camera# */ {\n        /**\n         * Camera projection matrix\n         * @type {clay.Matrix4}\n         */\n        projectionMatrix: new Matrix4(),\n\n        /**\n         * Inverse of camera projection matrix\n         * @type {clay.Matrix4}\n         */\n        invProjectionMatrix: new Matrix4(),\n\n        /**\n         * View matrix, equal to inverse of camera's world matrix\n         * @type {clay.Matrix4}\n         */\n        viewMatrix: new Matrix4(),\n\n        /**\n         * Camera frustum in view space\n         * @type {clay.Frustum}\n         */\n        frustum: new Frustum()\n    };\n}, function () {\n    this.update(true);\n},\n/** @lends clay.Camera.prototype */\n{\n\n    update: function (force) {\n        Node.prototype.update.call(this, force);\n        Matrix4.invert(this.viewMatrix, this.worldTransform);\n\n        this.updateProjectionMatrix();\n        Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);\n\n        this.frustum.setFromProjection(this.projectionMatrix);\n    },\n\n    /**\n     * Set camera view matrix\n     */\n    setViewMatrix: function (viewMatrix) {\n        Matrix4.copy(this.viewMatrix, viewMatrix);\n        Matrix4.invert(this.worldTransform, viewMatrix);\n        this.decomposeWorldTransform();\n    },\n\n    /**\n     * Decompose camera projection matrix\n     */\n    decomposeProjectionMatrix: function () {},\n\n    /**\n     * Set camera projection matrix\n     * @param {clay.Matrix4} projectionMatrix\n     */\n    setProjectionMatrix: function (projectionMatrix) {\n        Matrix4.copy(this.projectionMatrix, projectionMatrix);\n        Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n        this.decomposeProjectionMatrix();\n    },\n    /**\n     * Update projection matrix, called after update\n     */\n    updateProjectionMatrix: function () {},\n\n    /**\n     * Cast a picking ray from camera near plane to far plane\n     * @function\n     * @param {clay.Vector2} ndc\n     * @param {clay.Ray} [out]\n     * @return {clay.Ray}\n     */\n    castRay: (function () {\n        var v4 = vec4.create();\n        return function (ndc, out) {\n            var ray = out !== undefined ? out : new Ray();\n            var x = ndc.array[0];\n            var y = ndc.array[1];\n            vec4.set(v4, x, y, -1, 1);\n            vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n            vec4.transformMat4(v4, v4, this.worldTransform.array);\n            vec3.scale(ray.origin.array, v4, 1 / v4[3]);\n\n            vec4.set(v4, x, y, 1, 1);\n            vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n            vec4.transformMat4(v4, v4, this.worldTransform.array);\n            vec3.scale(v4, v4, 1 / v4[3]);\n            vec3.sub(ray.direction.array, v4, ray.origin.array);\n\n            vec3.normalize(ray.direction.array, ray.direction.array);\n            ray.direction._dirty = true;\n            ray.origin._dirty = true;\n\n            return ray;\n        };\n    })(),\n\n    /**\n     * @function\n     * @name clone\n     * @return {clay.Camera}\n     * @memberOf clay.Camera.prototype\n     */\n});\n\nexport default Camera;\n"]},"metadata":{},"sourceType":"module"}