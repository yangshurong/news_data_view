{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport createGraphFromNodeEdge from './createGraphFromNodeEdge';\nimport formatUtil from '../../util/format';\nvar GraphSeries = echarts.SeriesModel.extend({\n  type: 'series.graphGL',\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  init: function init(option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function mergeOption(option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n\n    this._updateCategoriesData();\n  },\n  getFormattedLabel: function getFormattedLabel(dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n\n    return text;\n  },\n  getInitialData: function getInitialData(option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        var categoriesModels = self._categoriesModels;\n        var categoryIdx = model.getShallow('category');\n        var categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      }); // TODO Inherit resolveParentPath by default in Model#getModel?\n\n      var oldGetModel = ecModel.getModel([]).getModel;\n\n      function newGetModel(path, parentModel) {\n        var model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          var newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function getGraph() {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function getEdgeData() {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function getCategoriesData() {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = echarts.format.encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + echarts.format.encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function _updateCategoriesData() {\n    var categories = (this.option.categories || []).map(function (category) {\n      // Data must has value\n      return category.value != null ? category : Object.assign({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new echarts.List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setView: function setView(payload) {\n    if (payload.zoom != null) {\n      this.option.zoom = payload.zoom;\n    }\n\n    if (payload.offset != null) {\n      this.option.offset = payload.offset;\n    }\n  },\n  setNodePosition: function setNodePosition(points) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      var opt = this.getData().getRawDataItem(i);\n      opt.x = x;\n      opt.y = y;\n    }\n  },\n  isAnimationEnabled: function isAnimationEnabled() {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 10,\n    z: 2,\n    legendHoverLink: true,\n    // Only support forceAtlas2\n    layout: 'forceAtlas2',\n    // Configuration of force directed layout\n    forceAtlas2: {\n      initLayout: null,\n      GPU: true,\n      steps: 1,\n      // barnesHutOptimize\n      // Maxp layout steps.\n      maxSteps: 1000,\n      repulsionByDegree: true,\n      linLogMode: false,\n      strongGravityMode: false,\n      gravity: 1.0,\n      // scaling: 1.0,\n      edgeWeightInfluence: 1.0,\n      // Edge weight range.\n      edgeWeight: [1, 4],\n      // Node weight range.\n      nodeWeight: [1, 4],\n      // jitterTolerence: 0.1,\n      preventOverlap: false,\n      gravityCenter: null\n    },\n    focusNodeAdjacency: true,\n    focusNodeAdjacencyOn: 'mouseover',\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 5,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      show: false,\n      formatter: '{b}',\n      position: 'right',\n      distance: 5,\n      textStyle: {\n        fontSize: 14\n      }\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animation: false\n  }\n});\nexport default GraphSeries;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/graphGL/GraphGLSeries.js"],"names":["echarts","createGraphFromNodeEdge","formatUtil","GraphSeries","SeriesModel","extend","type","visualStyleAccessPath","hasSymbolVisual","init","option","superApply","arguments","legendDataProvider","_categoriesData","_updateCategoriesData","mergeOption","getFormattedLabel","dataIndex","status","dataType","dimIndex","text","data","getData","lastDim","dimensions","length","get","getInitialData","ecModel","edges","links","nodes","self","beforeLink","nodeData","edgeData","wrapMethod","model","categoriesModels","_categoriesModels","categoryIdx","getShallow","categoryModel","parentModel","oldGetModel","getModel","newGetModel","path","call","resolveParentPath","pathArr","newPathArr","slice","getGraph","graph","getEdgeData","getCategoriesData","formatTooltip","multipleSeries","params","getDataParams","edge","getEdgeByIndex","sourceName","getName","node1","targetName","node2","html","push","format","encodeHTML","join","value","categories","map","category","Object","assign","categoriesData","List","initData","mapArray","idx","getItemModel","setView","payload","zoom","offset","setNodePosition","points","i","x","y","opt","getRawDataItem","isAnimationEnabled","superCall","defaultOption","zlevel","z","legendHoverLink","layout","forceAtlas2","initLayout","GPU","steps","maxSteps","repulsionByDegree","linLogMode","strongGravityMode","gravity","edgeWeightInfluence","edgeWeight","nodeWeight","preventOverlap","gravityCenter","focusNodeAdjacency","focusNodeAdjacencyOn","left","top","symbol","symbolSize","roam","center","label","show","formatter","position","distance","textStyle","fontSize","itemStyle","lineStyle","color","width","opacity","emphasis","animation"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport createGraphFromNodeEdge from './createGraphFromNodeEdge';\nimport formatUtil from '../../util/format';\nvar GraphSeries = echarts.SeriesModel.extend({\n  type: 'series.graphGL',\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n\n    this._updateCategoriesData();\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n\n    return text;\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        const categoriesModels = self._categoriesModels;\n        const categoryIdx = model.getShallow('category');\n        const categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      }); // TODO Inherit resolveParentPath by default in Model#getModel?\n\n      const oldGetModel = ecModel.getModel([]).getModel;\n\n      function newGetModel(path, parentModel) {\n        const model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          const newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = echarts.format.encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + echarts.format.encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = (this.option.categories || []).map(function (category) {\n      // Data must has value\n      return category.value != null ? category : Object.assign({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new echarts.List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setView: function (payload) {\n    if (payload.zoom != null) {\n      this.option.zoom = payload.zoom;\n    }\n\n    if (payload.offset != null) {\n      this.option.offset = payload.offset;\n    }\n  },\n  setNodePosition: function (points) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      var opt = this.getData().getRawDataItem(i);\n      opt.x = x;\n      opt.y = y;\n    }\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 10,\n    z: 2,\n    legendHoverLink: true,\n    // Only support forceAtlas2\n    layout: 'forceAtlas2',\n    // Configuration of force directed layout\n    forceAtlas2: {\n      initLayout: null,\n      GPU: true,\n      steps: 1,\n      // barnesHutOptimize\n      // Maxp layout steps.\n      maxSteps: 1000,\n      repulsionByDegree: true,\n      linLogMode: false,\n      strongGravityMode: false,\n      gravity: 1.0,\n      // scaling: 1.0,\n      edgeWeightInfluence: 1.0,\n      // Edge weight range.\n      edgeWeight: [1, 4],\n      // Node weight range.\n      nodeWeight: [1, 4],\n      // jitterTolerence: 0.1,\n      preventOverlap: false,\n      gravityCenter: null\n    },\n    focusNodeAdjacency: true,\n    focusNodeAdjacencyOn: 'mouseover',\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 5,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      show: false,\n      formatter: '{b}',\n      position: 'right',\n      distance: 5,\n      textStyle: {\n        fontSize: 14\n      }\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animation: false\n  }\n});\nexport default GraphSeries;"]},"metadata":{},"sourceType":"module"}