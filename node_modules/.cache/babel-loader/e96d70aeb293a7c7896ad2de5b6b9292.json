{"ast":null,"code":"/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\nimport { GLMAT_ARRAY_TYPE } from './common';\nimport vec3 from './vec3';\nimport vec4 from './vec4';\nimport mat3 from './mat3';\n/**\n * @class Quaternion\n * @name quat\n */\n\nvar quat = {};\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nquat.create = function () {\n  var out = new GLMAT_ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n};\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\n\n\nquat.rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.length(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      quat.setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return quat.normalize(out, out);\n    }\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\n\nquat.setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return quat.normalize(out, quat.fromMat3(out, matr));\n  };\n}();\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\n\nquat.clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nquat.fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nquat.copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nquat.set = vec4.set;\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nquat.identity = function (out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n};\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\n\nquat.setAxisAngle = function (out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n};\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\n\n\nquat.add = vec4.add;\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\n\nquat.multiply = function (out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n};\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\n\nquat.mul = quat.multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nquat.scale = vec4.scale;\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nquat.rotateX = function (out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3],\n      bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n};\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\n\nquat.rotateY = function (out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3],\n      by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n};\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\n\nquat.rotateZ = function (out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3],\n      bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n};\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\n\n\nquat.calculateW = function (out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n};\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\n\nquat.dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\n\nquat.lerp = vec4.lerp;\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\n\nquat.slerp = function (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n};\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\n\nquat.invert = function (out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,\n      invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n};\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\n\nquat.conjugate = function (out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n};\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\n\nquat.length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nquat.len = quat.length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nquat.squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nquat.sqrLen = quat.squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nquat.normalize = vec4.normalize;\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nquat.fromMat3 = function (out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n};\n\nexport default quat;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/glmatrix/quat.js"],"names":["GLMAT_ARRAY_TYPE","vec3","vec4","mat3","quat","create","out","rotationTo","tmpvec3","xUnitVec3","fromValues","yUnitVec3","a","b","dot","cross","length","normalize","setAxisAngle","Math","PI","setAxes","matr","view","right","up","fromMat3","clone","copy","set","identity","axis","rad","s","sin","cos","add","multiply","ax","ay","az","aw","bx","by","bz","bw","mul","scale","rotateX","rotateY","rotateZ","calculateW","x","y","z","sqrt","abs","lerp","slerp","t","omega","cosom","sinom","scale0","scale1","acos","invert","a0","a1","a2","a3","invDot","conjugate","len","squaredLength","sqrLen","m","fTrace","fRoot","i","j","k"],"mappings":"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","sourcesContent":["\n\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\nimport { GLMAT_ARRAY_TYPE } from './common';\nimport vec3 from './vec3';\nimport vec4 from './vec4';\nimport mat3 from './mat3';\n\n\n/**\n * @class Quaternion\n * @name quat\n */\n\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5;\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5;\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5;\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n};\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n\n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n\n    return out;\n};\n\nexport default quat;"]},"metadata":{},"sourceType":"module"}