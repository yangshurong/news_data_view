{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { dateFormat, calendarToList } from './utils';\nexport default {\n  name: 'SliderButton',\n  components: {},\n  props: {\n    changeDate: {\n      type: String,\n      default: ''\n    },\n    initDate: {\n      type: String,\n      default: ''\n    },\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: null,\n      oldValue: this.value\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return this.$parent.sliderDisabled;\n    },\n    max: function max() {\n      return this.$parent.maxValueOfYear;\n    },\n    min: function min() {\n      return this.$parent.min;\n    },\n    step: function step() {\n      return this.$parent.step;\n    },\n    precision: function precision() {\n      return this.$parent.precision;\n    },\n    currentPosition: function currentPosition() {\n      return \"\".concat((this.value - this.min) / (this.max - this.min) * 100, \"%\");\n    },\n    wrapperStyle: function wrapperStyle() {\n      return {\n        left: this.currentPosition\n      };\n    }\n  },\n  watch: {\n    // 接收通过时间轴传递过来的日期（拖动后）\n    changeDate: function changeDate(val) {\n      this.dateValue = val;\n      this.computedDateByIndex();\n    },\n    // 接收通过时间轴传递过来的日期（拖动前）\n    initDate: function initDate(val) {\n      this.dateValue = val;\n      this.computedDateByIndex();\n    },\n    dragging: function dragging(val) {\n      this.$parent.dragging = val;\n    }\n  },\n  methods: {\n    // 根据索引计算出日期，yyyy-MM-dd\n    computedDateByIndex: function computedDateByIndex() {\n      // 兼容 ios 设备（ios 不支持短横线格式的日期）\n      if (this.dateValue) {\n        var _date = this.dateValue.replace(/-/g, '/');\n\n        if (_date && _date !== '') {\n          var year = dateFormat(new Date(Date.parse(_date)), 'yyyy');\n          var allDateOfYear = calendarToList(year); // 某年的所有日期\n\n          if (this.value === allDateOfYear.length) {\n            this.$emit('emitDateValue', allDateOfYear[allDateOfYear.length - 1]);\n          } else {\n            this.$emit('emitDateValue', allDateOfYear[this.value]);\n          }\n        }\n      }\n    },\n    handleMouseEnter: function handleMouseEnter() {\n      this.hovering = true;\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.hovering = false;\n    },\n    onButtonDown: function onButtonDown(event) {\n      if (this.disabled) return;\n      event.preventDefault();\n      this.onDragStart(event);\n      window.addEventListener('mousemove', this.onDragging);\n      window.addEventListener('touchmove', this.onDragging);\n      window.addEventListener('mouseup', this.onDragEnd);\n      window.addEventListener('touchend', this.onDragEnd);\n      window.addEventListener('contextmenu', this.onDragEnd);\n    },\n    onLeftKeyDown: function onLeftKeyDown() {\n      if (this.disabled) return;\n      this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitChange();\n    },\n    onRightKeyDown: function onRightKeyDown() {\n      if (this.disabled) return;\n      this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitChange();\n    },\n    onDragStart: function onDragStart(event) {\n      this.dragging = true;\n      this.isClick = true;\n\n      if (event.type === 'touchstart') {\n        event.clientY = event.touches[0].clientY;\n        event.clientX = event.touches[0].clientX;\n      }\n\n      this.startX = event.clientX;\n      this.startPosition = parseFloat(this.currentPosition);\n      this.newPosition = this.startPosition;\n    },\n    onDragging: function onDragging(event) {\n      if (this.dragging) {\n        this.$parent.dragStatus = true;\n        this.isClick = false;\n        this.$parent.resetSize();\n        var diff = 0;\n\n        if (event.type === 'touchmove') {\n          event.clientY = event.touches[0].clientY;\n          event.clientX = event.touches[0].clientX;\n        }\n\n        this.currentX = event.clientX;\n        diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;\n        this.newPosition = this.startPosition + diff;\n        this.setPosition(this.newPosition);\n      }\n    },\n    onDragEnd: function onDragEnd() {\n      var _this = this;\n\n      if (this.dragging) {\n        /*\n         * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n         * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n         */\n        setTimeout(function () {\n          _this.$parent.dragStatus = false;\n          _this.dragging = false;\n\n          if (!_this.isClick) {\n            _this.setPosition(_this.newPosition);\n\n            _this.$parent.emitChange();\n          }\n        }, 0);\n        window.removeEventListener('mousemove', this.onDragging);\n        window.removeEventListener('touchmove', this.onDragging);\n        window.removeEventListener('mouseup', this.onDragEnd);\n        window.removeEventListener('touchend', this.onDragEnd);\n        window.removeEventListener('contextmenu', this.onDragEnd);\n      }\n    },\n    setPosition: function setPosition(newPosition) {\n      if (newPosition === null || isNaN(newPosition)) return;\n\n      if (newPosition < 0) {\n        newPosition = 0;\n      } else if (newPosition > 100) {\n        newPosition = 100;\n      }\n\n      var lengthPerStep = 100 / ((this.max - this.min) / this.step);\n      var steps = Math.round(newPosition / lengthPerStep);\n      var value = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;\n      value = parseFloat(value.toFixed(this.precision));\n      this.$emit('input', value);\n      this.computedDateByIndex();\n      this.$nextTick(function () {});\n\n      if (!this.dragging && this.value !== this.oldValue) {// this.oldValue = this.value;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SACAA,UADA,EAEAC,cAFA,QAGA,SAHA;AAIA;AACAC,sBADA;AAGAC,gBAHA;AAMAC;AACAC;AACAC,kBADA;AAEAC;AAFA,KADA;AAKAC;AACAF,kBADA;AAEAC;AAFA,KALA;AASAE;AACAH,kBADA;AAEAC;AAFA;AATA,GANA;AAqBAG,MArBA,kBAqBA;AACA;AACAC,qBADA;AAEAC,qBAFA;AAGAC,oBAHA;AAIAC,eAJA;AAKAC,iBALA;AAMAC,eANA;AAOAC,iBAPA;AAQAC,sBARA;AASAC,uBATA;AAUAC;AAVA;AAYA,GAlCA;AAoCAC;AACAC,YADA,sBACA;AACA;AACA,KAHA;AAKAC,OALA,iBAKA;AACA;AACA,KAPA;AASAC,OATA,iBASA;AACA;AACA,KAXA;AAaAC,QAbA,kBAaA;AACA;AACA,KAfA;AAiBAC,aAjBA,uBAiBA;AACA;AACA,KAnBA;AAqBAC,mBArBA,6BAqBA;AACA;AACA,KAvBA;AAyBAC,gBAzBA,0BAyBA;AACA;AAAAC;AAAA;AACA;AA3BA,GApCA;AAkEAC;AACA;AACAzB,cAFA,sBAEA0B,GAFA,EAEA;AACA;AACA;AACA,KALA;AAMA;AACAvB,YAPA,oBAOAuB,GAPA,EAOA;AACA;AACA;AACA,KAVA;AAWAnB,YAXA,oBAWAmB,GAXA,EAWA;AACA;AACA;AAbA,GAlEA;AAkFAC;AACA;AACAC,uBAFA,iCAEA;AACA;AACA;AACA;;AACA;AACA;AACA,mDAFA,CAEA;;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA;AACA;AACA;AACA,KAhBA;AAkBAC,oBAlBA,8BAkBA;AACA;AACA,KApBA;AAsBAC,oBAtBA,8BAsBA;AACA;AACA,KAxBA;AA0BAC,gBA1BA,wBA0BAC,KA1BA,EA0BA;AACA;AACAA;AACA;AACAC;AACAA;AACAA;AACAA;AACAA;AACA,KAnCA;AAoCAC,iBApCA,2BAoCA;AACA;AACA;AACA;AACA;AACA,KAzCA;AA0CAC,kBA1CA,4BA0CA;AACA;AACA;AACA;AACA;AACA,KA/CA;AAgDAC,eAhDA,uBAgDAJ,KAhDA,EAgDA;AACA;AACA;;AACA;AACAA;AACAA;AACA;;AACA;AACA;AACA;AACA,KA1DA;AA4DAK,cA5DA,sBA4DAL,KA5DA,EA4DA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAA;AACAA;AACA;;AACA;AACAM;AACA;AACA;AACA;AACA,KA3EA;AA6EAC,aA7EA,uBA6EA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,SAPA,EAOA,CAPA;AAQAP;AACAA;AACAA;AACAA;AACAA;AACA;AACA,KAjGA;AAmGAQ,eAnGA,uBAmGA3B,WAnGA,EAmGA;AACA;;AACA;AACAA;AACA,OAFA,MAEA;AACAA;AACA;;AACA;AACA;AACA;AACAV;AACA;AACA;AACA,kCACA,CADA;;AAEA,2DACA;AACA;AACA;AArHA;AAlFA","names":["dateFormat","calendarToList","name","components","props","changeDate","type","default","initDate","value","data","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","computed","disabled","max","min","step","precision","currentPosition","wrapperStyle","left","watch","val","methods","computedDateByIndex","handleMouseEnter","handleMouseLeave","onButtonDown","event","window","onLeftKeyDown","onRightKeyDown","onDragStart","onDragging","diff","onDragEnd","setTimeout","setPosition"],"sourceRoot":"node_modules/_drag-timeline-vue@1.0.6@drag-timeline-vue/packages/DragTimelineVue/src","sources":["SliderButton.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    class=\"slider-button-wrapper\"\n    :class=\"{ 'hover': hovering, 'dragging': dragging }\"\n    :style=\"wrapperStyle\"\n    tabindex=\"0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @touchstart=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown.left=\"onLeftKeyDown\"\n    @keydown.right=\"onRightKeyDown\"\n    @keydown.down.prevent=\"onLeftKeyDown\"\n    @keydown.up.prevent=\"onRightKeyDown\">\n    <slot\n      name=\"sliderContent\" />\n  </div>\n</template>\n\n<script>\nimport {\n  dateFormat,\n  calendarToList\n} from './utils'\nexport default {\n  name: 'SliderButton',\n\n  components: {\n  },\n\n  props: {\n    changeDate: {\n      type: String,\n      default: ''\n    },\n    initDate: {\n      type: String,\n      default: ''\n    },\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data () {\n    return {\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: null,\n      oldValue: this.value\n    }\n  },\n\n  computed: {\n    disabled () {\n      return this.$parent.sliderDisabled\n    },\n\n    max () {\n      return this.$parent.maxValueOfYear\n    },\n\n    min () {\n      return this.$parent.min\n    },\n\n    step () {\n      return this.$parent.step\n    },\n\n    precision () {\n      return this.$parent.precision\n    },\n\n    currentPosition () {\n      return `${(this.value - this.min) / (this.max - this.min) * 100}%`\n    },\n\n    wrapperStyle () {\n      return { left: this.currentPosition }\n    }\n  },\n\n  watch: {\n    // 接收通过时间轴传递过来的日期（拖动后）\n    changeDate (val) {\n      this.dateValue = val\n      this.computedDateByIndex()\n    },\n    // 接收通过时间轴传递过来的日期（拖动前）\n    initDate (val) {\n      this.dateValue = val\n      this.computedDateByIndex()\n    },\n    dragging (val) {\n      this.$parent.dragging = val\n    }\n  },\n\n  methods: {\n    // 根据索引计算出日期，yyyy-MM-dd\n    computedDateByIndex () {\n      // 兼容 ios 设备（ios 不支持短横线格式的日期）\n      if (this.dateValue) {\n        const _date = this.dateValue.replace(/-/g, '/')\n        if (_date && _date !== '') {\n          const year = dateFormat(new Date(Date.parse(_date)), 'yyyy')\n          const allDateOfYear = calendarToList(year) // 某年的所有日期\n          if (this.value === allDateOfYear.length) {\n            this.$emit('emitDateValue', allDateOfYear[allDateOfYear.length - 1])\n          } else {\n            this.$emit('emitDateValue', allDateOfYear[this.value])\n          }\n        }\n      }\n    },\n\n    handleMouseEnter () {\n      this.hovering = true\n    },\n\n    handleMouseLeave () {\n      this.hovering = false\n    },\n\n    onButtonDown (event) {\n      if (this.disabled) return\n      event.preventDefault()\n      this.onDragStart(event)\n      window.addEventListener('mousemove', this.onDragging)\n      window.addEventListener('touchmove', this.onDragging)\n      window.addEventListener('mouseup', this.onDragEnd)\n      window.addEventListener('touchend', this.onDragEnd)\n      window.addEventListener('contextmenu', this.onDragEnd)\n    },\n    onLeftKeyDown () {\n      if (this.disabled) return\n      this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100\n      this.setPosition(this.newPosition)\n      this.$parent.emitChange()\n    },\n    onRightKeyDown () {\n      if (this.disabled) return\n      this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100\n      this.setPosition(this.newPosition)\n      this.$parent.emitChange()\n    },\n    onDragStart (event) {\n      this.dragging = true\n      this.isClick = true\n      if (event.type === 'touchstart') {\n        event.clientY = event.touches[0].clientY\n        event.clientX = event.touches[0].clientX\n      }\n      this.startX = event.clientX\n      this.startPosition = parseFloat(this.currentPosition)\n      this.newPosition = this.startPosition\n    },\n\n    onDragging (event) {\n      if (this.dragging) {\n        this.$parent.dragStatus = true\n        this.isClick = false\n        this.$parent.resetSize()\n        let diff = 0\n        if (event.type === 'touchmove') {\n          event.clientY = event.touches[0].clientY\n          event.clientX = event.touches[0].clientX\n        }\n        this.currentX = event.clientX\n        diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100\n        this.newPosition = this.startPosition + diff\n        this.setPosition(this.newPosition)\n      }\n    },\n\n    onDragEnd () {\n      if (this.dragging) {\n        /*\n         * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n         * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n         */\n        setTimeout(() => {\n          this.$parent.dragStatus = false\n          this.dragging = false\n          if (!this.isClick) {\n            this.setPosition(this.newPosition)\n            this.$parent.emitChange()\n          }\n        }, 0)\n        window.removeEventListener('mousemove', this.onDragging)\n        window.removeEventListener('touchmove', this.onDragging)\n        window.removeEventListener('mouseup', this.onDragEnd)\n        window.removeEventListener('touchend', this.onDragEnd)\n        window.removeEventListener('contextmenu', this.onDragEnd)\n      }\n    },\n\n    setPosition (newPosition) {\n      if (newPosition === null || isNaN(newPosition)) return\n      if (newPosition < 0) {\n        newPosition = 0\n      } else if (newPosition > 100) {\n        newPosition = 100\n      }\n      const lengthPerStep = 100 / ((this.max - this.min) / this.step)\n      const steps = Math.round(newPosition / lengthPerStep)\n      let value = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min\n      value = parseFloat(value.toFixed(this.precision))\n      this.$emit('input', value)\n      this.computedDateByIndex()\n      this.$nextTick(() => {\n      })\n      if (!this.dragging && this.value !== this.oldValue) {\n        // this.oldValue = this.value;\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.slider-button-wrapper {\n  line-height: normal;\n  position: absolute;\n  z-index: 1001;\n  bottom: 15px;\n  user-select: none;\n  transform: translateX(-50%);\n  text-align: center;\n  background-color: #409eff;\n  border-radius: 4px;\n  &::before {\n    position: absolute;\n    bottom: -6px;\n    left: 50%;\n    margin-left: -6px;\n    content: '';\n    width: 0;\n    height: 0;\n    border-top: 6px solid #409eff;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n  }\n  &:hover,\n  &.hover {\n    cursor: grab;\n  }\n  &.dragging {\n    cursor: grabbing;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}