{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.sub.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport cartesian3DLayout from './cartesian3DLayout';\nimport evaluateBarSparseness from './evaluateBarSparseness';\nvar vec3 = glmatrix.vec3;\nvar isDimensionStacked = echarts.helper.dataStack.isDimensionStacked;\n\nfunction globeLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var barSize = seriesModel.get('barSize');\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var perimeter = coordSys.radius * Math.PI;\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [perimeter / Math.sqrt(data.count() / fillRatio), perimeter / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0]; // TODO Stacked with minHeight.\n\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var dir = vec3.sub([], end, start);\n    vec3.normalize(dir, dir);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', Vector3.UP.array);\n}\n\nfunction geo3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var size = Math.min(coordSys.size[0], coordSys.size[2]);\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var dir = [0, 1, 0];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0];\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction mapService3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var dimLng = seriesModel.coordDimToDataDim('lng')[0];\n  var dimLat = seriesModel.coordDimToDataDim('lat')[0];\n  var dimAlt = seriesModel.coordDimToDataDim('alt')[0];\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n\n  if (barSize == null) {\n    var xExtent = data.getDataExtent(dimLng);\n    var yExtent = data.getDataExtent(dimLat);\n    var corner0 = coordSys.dataToPoint([xExtent[0], yExtent[0]]);\n    var corner1 = coordSys.dataToPoint([xExtent[1], yExtent[1]]);\n    var size = Math.min(Math.abs(corner0[0] - corner1[0]), Math.abs(corner0[1] - corner1[1])) || 1;\n    var fillRatio = evaluateBarSparseness(data, dimLng, dimLat); // PENDING, data density\n\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else {\n    if (!echarts.util.isArray(barSize)) {\n      barSize = [barSize, barSize];\n    }\n\n    barSize[0] /= coordSys.getScale() / 16;\n    barSize[1] /= coordSys.getScale() / 16;\n  }\n\n  var dir = [0, 0, 1];\n  var dims = [dimLng, dimLat, dimAlt];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : 0;\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var height = Math.max(end[2] - start[2], barMinHeight);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction getValueDimension(data, dataDims) {\n  var isStacked = isDimensionStacked(data, dataDims[2]);\n  return {\n    dimension: isStacked ? data.getCalculationInfo('stackResultDimension') : dataDims[2],\n    isStacked: isStacked\n  };\n}\n\nexport default function registerBarLayout(registers) {\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('bar3D', function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var coordSysType = coordSys && coordSys.type;\n\n      if (coordSysType === 'globe') {\n        globeLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'cartesian3D') {\n        cartesian3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'geo3D') {\n        geo3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'mapbox3D' || coordSysType === 'maptalks3D') {\n        mapService3DLayout(seriesModel, coordSys);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!coordSys) {\n            throw new Error('bar3D doesn\\'t have coordinate system.');\n          } else {\n            throw new Error('bar3D doesn\\'t support coordinate system ' + coordSys.type);\n          }\n        }\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/bar3D/bar3DLayout.js"],"names":["echarts","Vector3","glmatrix","cartesian3DLayout","evaluateBarSparseness","vec3","isDimensionStacked","helper","dataStack","globeLayout","seriesModel","coordSys","data","getData","barMinHeight","get","barSize","dims","map","coordDimName","coordDimToDataDim","perimeter","radius","Math","PI","fillRatio","sqrt","count","util","isArray","valueDim","getValueDimension","each","lng","lat","val","idx","stackedValue","dimension","baseValue","isStacked","altitudeAxis","scale","getExtent","height","max","dataToCoord","start","dataToPoint","end","dir","sub","normalize","size","setItemLayout","setLayout","UP","array","geo3DLayout","min","mapService3DLayout","dimLng","dimLat","dimAlt","xExtent","getDataExtent","yExtent","corner0","corner1","abs","getScale","dataDims","getCalculationInfo","registerBarLayout","registers","registerLayout","ecModel","api","eachSeriesByType","coordinateSystem","coordSysType","type","process","env","NODE_ENV","Error"],"mappings":";;;AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,IAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB;AACA,IAAIC,kBAAkB,GAAGN,OAAO,CAACO,MAAR,CAAeC,SAAf,CAAyBF,kBAAlD;;AAEA,SAASG,WAAT,CAAqBC,WAArB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAIC,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACA,MAAIC,YAAY,GAAGJ,WAAW,CAACK,GAAZ,CAAgB,WAAhB,KAAgC,CAAnD;AACA,MAAIC,OAAO,GAAGN,WAAW,CAACK,GAAZ,CAAgB,SAAhB,CAAd;AACA,MAAIE,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsBC,GAAtB,CAA0B,UAAUC,YAAV,EAAwB;AAC3D,WAAOT,WAAW,CAACU,iBAAZ,CAA8BD,YAA9B,EAA4C,CAA5C,CAAP;AACD,GAFU,CAAX;;AAIA,MAAIH,OAAO,IAAI,IAAf,EAAqB;AACnB,QAAIK,SAAS,GAAGV,QAAQ,CAACW,MAAT,GAAkBC,IAAI,CAACC,EAAvC;AACA,QAAIC,SAAS,GAAGrB,qBAAqB,CAACQ,IAAD,EAAOK,IAAI,CAAC,CAAD,CAAX,EAAgBA,IAAI,CAAC,CAAD,CAApB,CAArC;AACAD,IAAAA,OAAO,GAAG,CAACK,SAAS,GAAGE,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAAb,EAAkDJ,SAAS,GAAGE,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAA9D,CAAV;AACD,GAJD,MAIO,IAAI,CAACzB,OAAO,CAAC4B,IAAR,CAAaC,OAAb,CAAqBb,OAArB,CAAL,EAAoC;AACzCA,IAAAA,OAAO,GAAG,CAACA,OAAD,EAAUA,OAAV,CAAV;AACD;;AAED,MAAIc,QAAQ,GAAGC,iBAAiB,CAACnB,IAAD,EAAOK,IAAP,CAAhC;AACAL,EAAAA,IAAI,CAACoB,IAAL,CAAUf,IAAV,EAAgB,UAAUgB,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5C,QAAIC,YAAY,GAAGzB,IAAI,CAACG,GAAL,CAASe,QAAQ,CAACQ,SAAlB,EAA6BF,GAA7B,CAAnB;AACA,QAAIG,SAAS,GAAGT,QAAQ,CAACU,SAAT,GAAqBH,YAAY,GAAGF,GAApC,GAA0CxB,QAAQ,CAAC8B,YAAT,CAAsBC,KAAtB,CAA4BC,SAA5B,GAAwC,CAAxC,CAA1D,CAF4C,CAE0D;;AAEtG,QAAIC,MAAM,GAAGrB,IAAI,CAACsB,GAAL,CAASlC,QAAQ,CAAC8B,YAAT,CAAsBK,WAAtB,CAAkCX,GAAlC,CAAT,EAAiDrB,YAAjD,CAAb;AACA,QAAIiC,KAAK,GAAGpC,QAAQ,CAACqC,WAAT,CAAqB,CAACf,GAAD,EAAMC,GAAN,EAAWK,SAAX,CAArB,CAAZ;AACA,QAAIU,GAAG,GAAGtC,QAAQ,CAACqC,WAAT,CAAqB,CAACf,GAAD,EAAMC,GAAN,EAAWG,YAAX,CAArB,CAAV;AACA,QAAIa,GAAG,GAAG7C,IAAI,CAAC8C,GAAL,CAAS,EAAT,EAAaF,GAAb,EAAkBF,KAAlB,CAAV;AACA1C,IAAAA,IAAI,CAAC+C,SAAL,CAAeF,GAAf,EAAoBA,GAApB;AACA,QAAIG,IAAI,GAAG,CAACrC,OAAO,CAAC,CAAD,CAAR,EAAa4B,MAAb,EAAqB5B,OAAO,CAAC,CAAD,CAA5B,CAAX;AACAJ,IAAAA,IAAI,CAAC0C,aAAL,CAAmBlB,GAAnB,EAAwB,CAACW,KAAD,EAAQG,GAAR,EAAaG,IAAb,CAAxB;AACD,GAXD;AAYAzC,EAAAA,IAAI,CAAC2C,SAAL,CAAe,QAAf,EAAyBtD,OAAO,CAACuD,EAAR,CAAWC,KAApC;AACD;;AAED,SAASC,WAAT,CAAqBhD,WAArB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAIC,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACA,MAAIG,OAAO,GAAGN,WAAW,CAACK,GAAZ,CAAgB,SAAhB,CAAd;AACA,MAAID,YAAY,GAAGJ,WAAW,CAACK,GAAZ,CAAgB,WAAhB,KAAgC,CAAnD;AACA,MAAIE,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsBC,GAAtB,CAA0B,UAAUC,YAAV,EAAwB;AAC3D,WAAOT,WAAW,CAACU,iBAAZ,CAA8BD,YAA9B,EAA4C,CAA5C,CAAP;AACD,GAFU,CAAX;;AAIA,MAAIH,OAAO,IAAI,IAAf,EAAqB;AACnB,QAAIqC,IAAI,GAAG9B,IAAI,CAACoC,GAAL,CAAShD,QAAQ,CAAC0C,IAAT,CAAc,CAAd,CAAT,EAA2B1C,QAAQ,CAAC0C,IAAT,CAAc,CAAd,CAA3B,CAAX;AACA,QAAI5B,SAAS,GAAGrB,qBAAqB,CAACQ,IAAD,EAAOK,IAAI,CAAC,CAAD,CAAX,EAAgBA,IAAI,CAAC,CAAD,CAApB,CAArC;AACAD,IAAAA,OAAO,GAAG,CAACqC,IAAI,GAAG9B,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAAR,EAA6C4B,IAAI,GAAG9B,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAApD,CAAV;AACD,GAJD,MAIO,IAAI,CAACzB,OAAO,CAAC4B,IAAR,CAAaC,OAAb,CAAqBb,OAArB,CAAL,EAAoC;AACzCA,IAAAA,OAAO,GAAG,CAACA,OAAD,EAAUA,OAAV,CAAV;AACD;;AAED,MAAIkC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACA,MAAIpB,QAAQ,GAAGC,iBAAiB,CAACnB,IAAD,EAAOK,IAAP,CAAhC;AACAL,EAAAA,IAAI,CAACoB,IAAL,CAAUf,IAAV,EAAgB,UAAUgB,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5C,QAAIC,YAAY,GAAGzB,IAAI,CAACG,GAAL,CAASe,QAAQ,CAACQ,SAAlB,EAA6BF,GAA7B,CAAnB;AACA,QAAIG,SAAS,GAAGT,QAAQ,CAACU,SAAT,GAAqBH,YAAY,GAAGF,GAApC,GAA0CxB,QAAQ,CAAC8B,YAAT,CAAsBC,KAAtB,CAA4BC,SAA5B,GAAwC,CAAxC,CAA1D;AACA,QAAIC,MAAM,GAAGrB,IAAI,CAACsB,GAAL,CAASlC,QAAQ,CAAC8B,YAAT,CAAsBK,WAAtB,CAAkCX,GAAlC,CAAT,EAAiDrB,YAAjD,CAAb;AACA,QAAIiC,KAAK,GAAGpC,QAAQ,CAACqC,WAAT,CAAqB,CAACf,GAAD,EAAMC,GAAN,EAAWK,SAAX,CAArB,CAAZ;AACA,QAAIc,IAAI,GAAG,CAACrC,OAAO,CAAC,CAAD,CAAR,EAAa4B,MAAb,EAAqB5B,OAAO,CAAC,CAAD,CAA5B,CAAX;AACAJ,IAAAA,IAAI,CAAC0C,aAAL,CAAmBlB,GAAnB,EAAwB,CAACW,KAAD,EAAQG,GAAR,EAAaG,IAAb,CAAxB;AACD,GAPD;AAQAzC,EAAAA,IAAI,CAAC2C,SAAL,CAAe,QAAf,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACD;;AAED,SAASK,kBAAT,CAA4BlD,WAA5B,EAAyCC,QAAzC,EAAmD;AACjD,MAAIC,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACA,MAAIgD,MAAM,GAAGnD,WAAW,CAACU,iBAAZ,CAA8B,KAA9B,EAAqC,CAArC,CAAb;AACA,MAAI0C,MAAM,GAAGpD,WAAW,CAACU,iBAAZ,CAA8B,KAA9B,EAAqC,CAArC,CAAb;AACA,MAAI2C,MAAM,GAAGrD,WAAW,CAACU,iBAAZ,CAA8B,KAA9B,EAAqC,CAArC,CAAb;AACA,MAAIJ,OAAO,GAAGN,WAAW,CAACK,GAAZ,CAAgB,SAAhB,CAAd;AACA,MAAID,YAAY,GAAGJ,WAAW,CAACK,GAAZ,CAAgB,WAAhB,KAAgC,CAAnD;;AAEA,MAAIC,OAAO,IAAI,IAAf,EAAqB;AACnB,QAAIgD,OAAO,GAAGpD,IAAI,CAACqD,aAAL,CAAmBJ,MAAnB,CAAd;AACA,QAAIK,OAAO,GAAGtD,IAAI,CAACqD,aAAL,CAAmBH,MAAnB,CAAd;AACA,QAAIK,OAAO,GAAGxD,QAAQ,CAACqC,WAAT,CAAqB,CAACgB,OAAO,CAAC,CAAD,CAAR,EAAaE,OAAO,CAAC,CAAD,CAApB,CAArB,CAAd;AACA,QAAIE,OAAO,GAAGzD,QAAQ,CAACqC,WAAT,CAAqB,CAACgB,OAAO,CAAC,CAAD,CAAR,EAAaE,OAAO,CAAC,CAAD,CAApB,CAArB,CAAd;AACA,QAAIb,IAAI,GAAG9B,IAAI,CAACoC,GAAL,CAASpC,IAAI,CAAC8C,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,GAAaC,OAAO,CAAC,CAAD,CAA7B,CAAT,EAA4C7C,IAAI,CAAC8C,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,GAAaC,OAAO,CAAC,CAAD,CAA7B,CAA5C,KAAkF,CAA7F;AACA,QAAI3C,SAAS,GAAGrB,qBAAqB,CAACQ,IAAD,EAAOiD,MAAP,EAAeC,MAAf,CAArC,CANmB,CAM0C;;AAE7D9C,IAAAA,OAAO,GAAG,CAACqC,IAAI,GAAG9B,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAAR,EAA6C4B,IAAI,GAAG9B,IAAI,CAACG,IAAL,CAAUd,IAAI,CAACe,KAAL,KAAeF,SAAzB,CAApD,CAAV;AACD,GATD,MASO;AACL,QAAI,CAACzB,OAAO,CAAC4B,IAAR,CAAaC,OAAb,CAAqBb,OAArB,CAAL,EAAoC;AAClCA,MAAAA,OAAO,GAAG,CAACA,OAAD,EAAUA,OAAV,CAAV;AACD;;AAEDA,IAAAA,OAAO,CAAC,CAAD,CAAP,IAAcL,QAAQ,CAAC2D,QAAT,KAAsB,EAApC;AACAtD,IAAAA,OAAO,CAAC,CAAD,CAAP,IAAcL,QAAQ,CAAC2D,QAAT,KAAsB,EAApC;AACD;;AAED,MAAIpB,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACA,MAAIjC,IAAI,GAAG,CAAC4C,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAAX;AACA,MAAIjC,QAAQ,GAAGC,iBAAiB,CAACnB,IAAD,EAAOK,IAAP,CAAhC;AACAL,EAAAA,IAAI,CAACoB,IAAL,CAAUf,IAAV,EAAgB,UAAUgB,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5C,QAAIC,YAAY,GAAGzB,IAAI,CAACG,GAAL,CAASe,QAAQ,CAACQ,SAAlB,EAA6BF,GAA7B,CAAnB;AACA,QAAIG,SAAS,GAAGT,QAAQ,CAACU,SAAT,GAAqBH,YAAY,GAAGF,GAApC,GAA0C,CAA1D;AACA,QAAIY,KAAK,GAAGpC,QAAQ,CAACqC,WAAT,CAAqB,CAACf,GAAD,EAAMC,GAAN,EAAWK,SAAX,CAArB,CAAZ;AACA,QAAIU,GAAG,GAAGtC,QAAQ,CAACqC,WAAT,CAAqB,CAACf,GAAD,EAAMC,GAAN,EAAWG,YAAX,CAArB,CAAV;AACA,QAAIO,MAAM,GAAGrB,IAAI,CAACsB,GAAL,CAASI,GAAG,CAAC,CAAD,CAAH,GAASF,KAAK,CAAC,CAAD,CAAvB,EAA4BjC,YAA5B,CAAb;AACA,QAAIuC,IAAI,GAAG,CAACrC,OAAO,CAAC,CAAD,CAAR,EAAa4B,MAAb,EAAqB5B,OAAO,CAAC,CAAD,CAA5B,CAAX;AACAJ,IAAAA,IAAI,CAAC0C,aAAL,CAAmBlB,GAAnB,EAAwB,CAACW,KAAD,EAAQG,GAAR,EAAaG,IAAb,CAAxB;AACD,GARD;AASAzC,EAAAA,IAAI,CAAC2C,SAAL,CAAe,QAAf,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACD;;AAED,SAASxB,iBAAT,CAA2BnB,IAA3B,EAAiC2D,QAAjC,EAA2C;AACzC,MAAI/B,SAAS,GAAGlC,kBAAkB,CAACM,IAAD,EAAO2D,QAAQ,CAAC,CAAD,CAAf,CAAlC;AACA,SAAO;AACLjC,IAAAA,SAAS,EAAEE,SAAS,GAAG5B,IAAI,CAAC4D,kBAAL,CAAwB,sBAAxB,CAAH,GAAqDD,QAAQ,CAAC,CAAD,CAD5E;AAEL/B,IAAAA,SAAS,EAAEA;AAFN,GAAP;AAID;;AAED,eAAe,SAASiC,iBAAT,CAA2BC,SAA3B,EAAsC;AACnDA,EAAAA,SAAS,CAACC,cAAV,CAAyB,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC/CD,IAAAA,OAAO,CAACE,gBAAR,CAAyB,OAAzB,EAAkC,UAAUpE,WAAV,EAAuB;AACvD,UAAIC,QAAQ,GAAGD,WAAW,CAACqE,gBAA3B;AACA,UAAIC,YAAY,GAAGrE,QAAQ,IAAIA,QAAQ,CAACsE,IAAxC;;AAEA,UAAID,YAAY,KAAK,OAArB,EAA8B;AAC5BvE,QAAAA,WAAW,CAACC,WAAD,EAAcC,QAAd,CAAX;AACD,OAFD,MAEO,IAAIqE,YAAY,KAAK,aAArB,EAAoC;AACzC7E,QAAAA,iBAAiB,CAACO,WAAD,EAAcC,QAAd,CAAjB;AACD,OAFM,MAEA,IAAIqE,YAAY,KAAK,OAArB,EAA8B;AACnCtB,QAAAA,WAAW,CAAChD,WAAD,EAAcC,QAAd,CAAX;AACD,OAFM,MAEA,IAAIqE,YAAY,KAAK,UAAjB,IAA+BA,YAAY,KAAK,YAApD,EAAkE;AACvEpB,QAAAA,kBAAkB,CAAClD,WAAD,EAAcC,QAAd,CAAlB;AACD,OAFM,MAEA;AACL,YAAIuE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,cAAI,CAACzE,QAAL,EAAe;AACb,kBAAM,IAAI0E,KAAJ,CAAU,wCAAV,CAAN;AACD,WAFD,MAEO;AACL,kBAAM,IAAIA,KAAJ,CAAU,8CAA8C1E,QAAQ,CAACsE,IAAjE,CAAN;AACD;AACF;AACF;AACF,KArBD;AAsBD,GAvBD;AAwBD","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport cartesian3DLayout from './cartesian3DLayout';\nimport evaluateBarSparseness from './evaluateBarSparseness';\nvar vec3 = glmatrix.vec3;\nvar isDimensionStacked = echarts.helper.dataStack.isDimensionStacked;\n\nfunction globeLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var barSize = seriesModel.get('barSize');\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var perimeter = coordSys.radius * Math.PI;\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [perimeter / Math.sqrt(data.count() / fillRatio), perimeter / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0]; // TODO Stacked with minHeight.\n\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var dir = vec3.sub([], end, start);\n    vec3.normalize(dir, dir);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', Vector3.UP.array);\n}\n\nfunction geo3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var size = Math.min(coordSys.size[0], coordSys.size[2]);\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var dir = [0, 1, 0];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0];\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction mapService3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var dimLng = seriesModel.coordDimToDataDim('lng')[0];\n  var dimLat = seriesModel.coordDimToDataDim('lat')[0];\n  var dimAlt = seriesModel.coordDimToDataDim('alt')[0];\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n\n  if (barSize == null) {\n    var xExtent = data.getDataExtent(dimLng);\n    var yExtent = data.getDataExtent(dimLat);\n    var corner0 = coordSys.dataToPoint([xExtent[0], yExtent[0]]);\n    var corner1 = coordSys.dataToPoint([xExtent[1], yExtent[1]]);\n    var size = Math.min(Math.abs(corner0[0] - corner1[0]), Math.abs(corner0[1] - corner1[1])) || 1;\n    var fillRatio = evaluateBarSparseness(data, dimLng, dimLat); // PENDING, data density\n\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else {\n    if (!echarts.util.isArray(barSize)) {\n      barSize = [barSize, barSize];\n    }\n\n    barSize[0] /= coordSys.getScale() / 16;\n    barSize[1] /= coordSys.getScale() / 16;\n  }\n\n  var dir = [0, 0, 1];\n  var dims = [dimLng, dimLat, dimAlt];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : 0;\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var height = Math.max(end[2] - start[2], barMinHeight);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction getValueDimension(data, dataDims) {\n  var isStacked = isDimensionStacked(data, dataDims[2]);\n  return {\n    dimension: isStacked ? data.getCalculationInfo('stackResultDimension') : dataDims[2],\n    isStacked: isStacked\n  };\n}\n\nexport default function registerBarLayout(registers) {\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('bar3D', function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var coordSysType = coordSys && coordSys.type;\n\n      if (coordSysType === 'globe') {\n        globeLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'cartesian3D') {\n        cartesian3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'geo3D') {\n        geo3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'mapbox3D' || coordSysType === 'maptalks3D') {\n        mapService3DLayout(seriesModel, coordSys);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!coordSys) {\n            throw new Error('bar3D doesn\\'t have coordinate system.');\n          } else {\n            throw new Error('bar3D doesn\\'t support coordinate system ' + coordSys.type);\n          }\n        }\n      }\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}