{"ast":null,"code":"import Texture from './Texture';\nimport glenum from './core/glenum';\nimport util from './core/util';\nimport mathUtil from './math/util';\nimport vendor from './core/vendor';\nvar _isPowerOfTwo = mathUtil.isPowerOfTwo;\nvar targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n/**\n * @constructor clay.TextureCube\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'environmentMap')\n *     });\n *     var envMap = new clay.TextureCube();\n *     envMap.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     mat.set('environmentMap', envMap);\n *     ...\n *     envMap.success(function () {\n *         // Wait for the sky texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\n\nvar TextureCube = Texture.extend(function () {\n  return (\n    /** @lends clay.TextureCube# */\n    {\n      /**\n       * @type {boolean}\n       * @default false\n       */\n      // PENDING cubemap should not flipY in default.\n      // flipY: false,\n\n      /**\n       * @type {Object}\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} px\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} nx\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} py\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} ny\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} pz\n       * @property {?HTMLImageElement|HTMLCanvasElemnet} nz\n       */\n      image: {\n        px: null,\n        nx: null,\n        py: null,\n        ny: null,\n        pz: null,\n        nz: null\n      },\n\n      /**\n       * Pixels data of each side. Will be ignored if images are set.\n       * @type {Object}\n       * @property {?Uint8Array} px\n       * @property {?Uint8Array} nx\n       * @property {?Uint8Array} py\n       * @property {?Uint8Array} ny\n       * @property {?Uint8Array} pz\n       * @property {?Uint8Array} nz\n       */\n      pixels: {\n        px: null,\n        nx: null,\n        py: null,\n        ny: null,\n        pz: null,\n        nz: null\n      },\n\n      /**\n       * @type {Array.<Object>}\n       */\n      mipmaps: []\n    }\n  );\n}, {\n  textureType: 'textureCube',\n  update: function update(renderer) {\n    var _gl = renderer.gl;\n\n    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n\n    this.updateCommon(renderer);\n    var glFormat = this.format;\n    var glType = this.type;\n\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());\n\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());\n\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());\n\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());\n\n    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n\n    if (anisotropicExt && this.anisotropic > 1) {\n      _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n    } // Fallback to float type if browser don't have half float extension\n\n\n    if (glType === 36193) {\n      var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n\n      if (!halfFloatExt) {\n        glType = glenum.FLOAT;\n      }\n    }\n\n    if (this.mipmaps.length) {\n      var width = this.width;\n      var height = this.height;\n\n      for (var i = 0; i < this.mipmaps.length; i++) {\n        var mipmap = this.mipmaps[i];\n\n        this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);\n\n        width /= 2;\n        height /= 2;\n      }\n    } else {\n      this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);\n\n      if (!this.NPOT && this.useMipmap) {\n        _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n    }\n\n    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n  },\n  _updateTextureData: function _updateTextureData(_gl, data, level, width, height, glFormat, glType) {\n    for (var i = 0; i < 6; i++) {\n      var target = targetList[i];\n      var img = data.image && data.image[target];\n\n      if (img) {\n        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);\n      } else {\n        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);\n      }\n    }\n  },\n\n  /**\n   * @param  {clay.Renderer} renderer\n   * @memberOf clay.TextureCube.prototype\n   */\n  generateMipmap: function generateMipmap(renderer) {\n    var _gl = renderer.gl;\n\n    if (this.useMipmap && !this.NPOT) {\n      _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n\n      _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n    }\n  },\n  bind: function bind(renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));\n  },\n  unbind: function unbind(renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);\n  },\n  // Overwrite the isPowerOfTwo method\n  isPowerOfTwo: function isPowerOfTwo() {\n    if (this.image.px) {\n      return _isPowerOfTwo(this.image.px.width) && _isPowerOfTwo(this.image.px.height);\n    } else {\n      return _isPowerOfTwo(this.width) && _isPowerOfTwo(this.height);\n    }\n  },\n  isRenderable: function isRenderable() {\n    if (this.image.px) {\n      return isImageRenderable(this.image.px) && isImageRenderable(this.image.nx) && isImageRenderable(this.image.py) && isImageRenderable(this.image.ny) && isImageRenderable(this.image.pz) && isImageRenderable(this.image.nz);\n    } else {\n      return !!(this.width && this.height);\n    }\n  },\n  load: function load(imageList, crossOrigin) {\n    var loading = 0;\n    var self = this;\n    util.each(imageList, function (src, target) {\n      var image = vendor.createImage();\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.onload = function () {\n        loading--;\n\n        if (loading === 0) {\n          self.dirty();\n          self.trigger('success', self);\n        }\n      };\n\n      image.onerror = function () {\n        loading--;\n      };\n\n      loading++;\n      image.src = src;\n      self.image[target] = image;\n    });\n    return this;\n  }\n});\nObject.defineProperty(TextureCube.prototype, 'width', {\n  get: function get() {\n    if (this.image && this.image.px) {\n      return this.image.px.width;\n    }\n\n    return this._width;\n  },\n  set: function set(value) {\n    if (this.image && this.image.px) {\n      console.warn('Texture from image can\\'t set width');\n    } else {\n      if (this._width !== value) {\n        this.dirty();\n      }\n\n      this._width = value;\n    }\n  }\n});\nObject.defineProperty(TextureCube.prototype, 'height', {\n  get: function get() {\n    if (this.image && this.image.px) {\n      return this.image.px.height;\n    }\n\n    return this._height;\n  },\n  set: function set(value) {\n    if (this.image && this.image.px) {\n      console.warn('Texture from image can\\'t set height');\n    } else {\n      if (this._height !== value) {\n        this.dirty();\n      }\n\n      this._height = value;\n    }\n  }\n});\n\nfunction isImageRenderable(image) {\n  return image.width > 0 && image.height > 0;\n}\n\nexport default TextureCube;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/TextureCube.js"],"names":["Texture","glenum","util","mathUtil","vendor","isPowerOfTwo","targetList","TextureCube","extend","image","px","nx","py","ny","pz","nz","pixels","mipmaps","textureType","update","renderer","_gl","gl","bindTexture","TEXTURE_CUBE_MAP","_cache","get","updateCommon","glFormat","format","glType","type","texParameteri","TEXTURE_WRAP_S","getAvailableWrapS","TEXTURE_WRAP_T","getAvailableWrapT","TEXTURE_MAG_FILTER","getAvailableMagFilter","TEXTURE_MIN_FILTER","getAvailableMinFilter","anisotropicExt","getGLExtension","anisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","halfFloatExt","FLOAT","length","width","height","i","mipmap","_updateTextureData","NPOT","useMipmap","generateMipmap","data","level","target","img","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","bind","getWebGLTexture","unbind","isRenderable","isImageRenderable","load","imageList","crossOrigin","loading","self","each","src","createImage","onload","dirty","trigger","onerror","Object","defineProperty","prototype","_width","set","value","console","warn","_height"],"mappings":"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","sourcesContent":["import Texture from './Texture';\nimport glenum from './core/glenum';\nimport util from './core/util';\nimport mathUtil from './math/util';\nimport vendor from './core/vendor';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\n\nvar targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n\n/**\n * @constructor clay.TextureCube\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'environmentMap')\n *     });\n *     var envMap = new clay.TextureCube();\n *     envMap.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     mat.set('environmentMap', envMap);\n *     ...\n *     envMap.success(function () {\n *         // Wait for the sky texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar TextureCube = Texture.extend(function () {\n    return /** @lends clay.TextureCube# */{\n\n        /**\n         * @type {boolean}\n         * @default false\n         */\n        // PENDING cubemap should not flipY in default.\n        // flipY: false,\n\n        /**\n         * @type {Object}\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} px\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} nx\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} py\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} ny\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} pz\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} nz\n         */\n        image: {\n            px: null,\n            nx: null,\n            py: null,\n            ny: null,\n            pz: null,\n            nz: null\n        },\n        /**\n         * Pixels data of each side. Will be ignored if images are set.\n         * @type {Object}\n         * @property {?Uint8Array} px\n         * @property {?Uint8Array} nx\n         * @property {?Uint8Array} py\n         * @property {?Uint8Array} ny\n         * @property {?Uint8Array} pz\n         * @property {?Uint8Array} nz\n         */\n        pixels: {\n            px: null,\n            nx: null,\n            py: null,\n            ny: null,\n            pz: null,\n            nz: null\n        },\n\n        /**\n         * @type {Array.<Object>}\n         */\n        mipmaps: []\n    };\n}, {\n\n    textureType: 'textureCube',\n\n    update: function (renderer) {\n        var _gl = renderer.gl;\n        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n\n        this.updateCommon(renderer);\n\n        var glFormat = this.format;\n        var glType = this.type;\n\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());\n\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());\n\n        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n        if (anisotropicExt && this.anisotropic > 1) {\n            _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n        }\n\n        // Fallback to float type if browser don't have half float extension\n        if (glType === 36193) {\n            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n            if (!halfFloatExt) {\n                glType = glenum.FLOAT;\n            }\n        }\n\n        if (this.mipmaps.length) {\n            var width = this.width;\n            var height = this.height;\n            for (var i = 0; i < this.mipmaps.length; i++) {\n                var mipmap = this.mipmaps[i];\n                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);\n                width /= 2;\n                height /= 2;\n            }\n        }\n        else {\n            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);\n\n            if (!this.NPOT && this.useMipmap) {\n                _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n            }\n        }\n\n        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n    },\n\n    _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {\n        for (var i = 0; i < 6; i++) {\n            var target = targetList[i];\n            var img = data.image && data.image[target];\n            if (img) {\n                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);\n            }\n            else {\n                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);\n            }\n        }\n    },\n\n    /**\n     * @param  {clay.Renderer} renderer\n     * @memberOf clay.TextureCube.prototype\n     */\n    generateMipmap: function (renderer) {\n        var _gl = renderer.gl;\n        if (this.useMipmap && !this.NPOT) {\n            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n        }\n    },\n\n    bind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));\n    },\n\n    unbind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);\n    },\n\n    // Overwrite the isPowerOfTwo method\n    isPowerOfTwo: function () {\n        if (this.image.px) {\n            return isPowerOfTwo(this.image.px.width)\n                && isPowerOfTwo(this.image.px.height);\n        }\n        else {\n            return isPowerOfTwo(this.width)\n                && isPowerOfTwo(this.height);\n        }\n    },\n\n    isRenderable: function () {\n        if (this.image.px) {\n            return isImageRenderable(this.image.px)\n                && isImageRenderable(this.image.nx)\n                && isImageRenderable(this.image.py)\n                && isImageRenderable(this.image.ny)\n                && isImageRenderable(this.image.pz)\n                && isImageRenderable(this.image.nz);\n        }\n        else {\n            return !!(this.width && this.height);\n        }\n    },\n\n    load: function (imageList, crossOrigin) {\n        var loading = 0;\n        var self = this;\n        util.each(imageList, function (src, target){\n            var image = vendor.createImage();\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.onload = function () {\n                loading --;\n                if (loading === 0){\n                    self.dirty();\n                    self.trigger('success', self);\n                }\n            };\n            image.onerror = function () {\n                loading --;\n            };\n\n            loading++;\n            image.src = src;\n            self.image[target] = image;\n        });\n\n        return this;\n    }\n});\n\nObject.defineProperty(TextureCube.prototype, 'width', {\n    get: function () {\n        if (this.image && this.image.px) {\n            return this.image.px.width;\n        }\n        return this._width;\n    },\n    set: function (value) {\n        if (this.image && this.image.px) {\n            console.warn('Texture from image can\\'t set width');\n        }\n        else {\n            if (this._width !== value) {\n                this.dirty();\n            }\n            this._width = value;\n        }\n    }\n});\nObject.defineProperty(TextureCube.prototype, 'height', {\n    get: function () {\n        if (this.image && this.image.px) {\n            return this.image.px.height;\n        }\n        return this._height;\n    },\n    set: function (value) {\n        if (this.image && this.image.px) {\n            console.warn('Texture from image can\\'t set height');\n        }\n        else {\n            if (this._height !== value) {\n                this.dirty();\n            }\n            this._height = value;\n        }\n    }\n});\nfunction isImageRenderable(image) {\n    return image.width > 0 && image.height > 0;\n}\n\nexport default TextureCube;\n"]},"metadata":{},"sourceType":"module"}