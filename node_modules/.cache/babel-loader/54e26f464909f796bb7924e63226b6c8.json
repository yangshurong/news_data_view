{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport Cartesian from 'echarts/lib/coord/cartesian/Cartesian';\n\nfunction Cartesian3D(name) {\n  Cartesian.call(this, name);\n  this.type = 'cartesian3D';\n  this.dimensions = ['x', 'y', 'z'];\n  this.size = [0, 0, 0];\n}\n\nCartesian3D.prototype = {\n  constructor: Cartesian3D,\n  model: null,\n  containPoint: function containPoint(point) {\n    return this.getAxis('x').contain(point[0]) && this.getAxis('y').contain(point[2]) && this.getAxis('z').contain(point[1]);\n  },\n  containData: function containData(data) {\n    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]) && this.getAxis('z').containData(data[2]);\n  },\n  dataToPoint: function dataToPoint(data, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').dataToCoord(data[0], clamp);\n    out[2] = this.getAxis('y').dataToCoord(data[1], clamp);\n    out[1] = this.getAxis('z').dataToCoord(data[2], clamp);\n    return out;\n  },\n  pointToData: function pointToData(point, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').coordToData(point[0], clamp);\n    out[1] = this.getAxis('y').coordToData(point[2], clamp);\n    out[2] = this.getAxis('z').coordToData(point[1], clamp);\n    return out;\n  }\n};\necharts.util.inherits(Cartesian3D, Cartesian);\nexport default Cartesian3D;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/coord/grid3D/Cartesian3D.js"],"names":["echarts","Cartesian","Cartesian3D","name","call","type","dimensions","size","prototype","constructor","model","containPoint","point","getAxis","contain","containData","data","dataToPoint","out","clamp","dataToCoord","pointToData","coordToData","util","inherits"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzBF,EAAAA,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqBD,IAArB;AACA,OAAKE,IAAL,GAAY,aAAZ;AACA,OAAKC,UAAL,GAAkB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAlB;AACA,OAAKC,IAAL,GAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ;AACD;;AAEDL,WAAW,CAACM,SAAZ,GAAwB;AACtBC,EAAAA,WAAW,EAAEP,WADS;AAEtBQ,EAAAA,KAAK,EAAE,IAFe;AAGtBC,EAAAA,YAAY,EAAE,sBAAUC,KAAV,EAAiB;AAC7B,WAAO,KAAKC,OAAL,CAAa,GAAb,EAAkBC,OAAlB,CAA0BF,KAAK,CAAC,CAAD,CAA/B,KAAuC,KAAKC,OAAL,CAAa,GAAb,EAAkBC,OAAlB,CAA0BF,KAAK,CAAC,CAAD,CAA/B,CAAvC,IAA8E,KAAKC,OAAL,CAAa,GAAb,EAAkBC,OAAlB,CAA0BF,KAAK,CAAC,CAAD,CAA/B,CAArF;AACD,GALqB;AAMtBG,EAAAA,WAAW,EAAE,qBAAUC,IAAV,EAAgB;AAC3B,WAAO,KAAKH,OAAL,CAAa,GAAb,EAAkBE,WAAlB,CAA8BC,IAAI,CAAC,CAAD,CAAlC,KAA0C,KAAKH,OAAL,CAAa,GAAb,EAAkBE,WAAlB,CAA8BC,IAAI,CAAC,CAAD,CAAlC,CAA1C,IAAoF,KAAKH,OAAL,CAAa,GAAb,EAAkBE,WAAlB,CAA8BC,IAAI,CAAC,CAAD,CAAlC,CAA3F;AACD,GARqB;AAStBC,EAAAA,WAAW,EAAE,qBAAUD,IAAV,EAAgBE,GAAhB,EAAqBC,KAArB,EAA4B;AACvCD,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBO,WAAlB,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,EAAuCG,KAAvC,CAAT;AACAD,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBO,WAAlB,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,EAAuCG,KAAvC,CAAT;AACAD,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBO,WAAlB,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,EAAuCG,KAAvC,CAAT;AACA,WAAOD,GAAP;AACD,GAfqB;AAgBtBG,EAAAA,WAAW,EAAE,qBAAUT,KAAV,EAAiBM,GAAjB,EAAsBC,KAAtB,EAA6B;AACxCD,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBS,WAAlB,CAA8BV,KAAK,CAAC,CAAD,CAAnC,EAAwCO,KAAxC,CAAT;AACAD,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBS,WAAlB,CAA8BV,KAAK,CAAC,CAAD,CAAnC,EAAwCO,KAAxC,CAAT;AACAD,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKL,OAAL,CAAa,GAAb,EAAkBS,WAAlB,CAA8BV,KAAK,CAAC,CAAD,CAAnC,EAAwCO,KAAxC,CAAT;AACA,WAAOD,GAAP;AACD;AAtBqB,CAAxB;AAwBAlB,OAAO,CAACuB,IAAR,CAAaC,QAAb,CAAsBtB,WAAtB,EAAmCD,SAAnC;AACA,eAAeC,WAAf","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Cartesian from 'echarts/lib/coord/cartesian/Cartesian';\n\nfunction Cartesian3D(name) {\n  Cartesian.call(this, name);\n  this.type = 'cartesian3D';\n  this.dimensions = ['x', 'y', 'z'];\n  this.size = [0, 0, 0];\n}\n\nCartesian3D.prototype = {\n  constructor: Cartesian3D,\n  model: null,\n  containPoint: function (point) {\n    return this.getAxis('x').contain(point[0]) && this.getAxis('y').contain(point[2]) && this.getAxis('z').contain(point[1]);\n  },\n  containData: function (data) {\n    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]) && this.getAxis('z').containData(data[2]);\n  },\n  dataToPoint: function (data, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').dataToCoord(data[0], clamp);\n    out[2] = this.getAxis('y').dataToCoord(data[1], clamp);\n    out[1] = this.getAxis('z').dataToCoord(data[2], clamp);\n    return out;\n  },\n  pointToData: function (point, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').coordToData(point[0], clamp);\n    out[1] = this.getAxis('y').coordToData(point[2], clamp);\n    out[2] = this.getAxis('z').coordToData(point[1], clamp);\n    return out;\n  }\n};\necharts.util.inherits(Cartesian3D, Cartesian);\nexport default Cartesian3D;"]},"metadata":{},"sourceType":"module"}