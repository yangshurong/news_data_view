{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LeftPage from \"../components/MainPageLeft.vue\";\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud.json\";\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nexport default {\n  data: function data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        region: \"\",\n        region_data: \"\"\n      },\n      locate_data_url: {\n        '河北': 'https://geo.datav.aliyun.com/areas_v3/bound/130000_full.json',\n        '山东': 'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json'\n      },\n      news_value: 0,\n      news_list: [{\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\"\n      }, {\n        url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\"\n      }],\n      time_select_value: 0\n    };\n  },\n  mounted: function mounted() {\n    this.cur_info.region = \"山东\";\n    this.set_wordcloud();\n    this.set_speed_average();\n    this.set_speed_tag();\n    this.set_speed_region();\n    this.set_num_tag();\n    this.set_speed_region();\n  },\n  methods: {\n    title_change: function title_change(new_title) {\n      //title变化后\n      this.cur_info.title = new_title;\n      this.set_num_tag();\n    },\n    get_time_change: function get_time_change(new_time) {\n      //时间变化后\n      this.cur_info.year = new_time.toString();\n      this.set_num_tag();\n    },\n    set_num_tag: function set_num_tag() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var Chart;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Chart = _this.$echarts.init(_this.$refs.num_tag);\n                Chart.setOption({\n                  dataset: {\n                    source: num_tag_data[_this.cur_info.region][_this.cur_info.year][_this.cur_info.title]\n                  },\n                  grid: {\n                    containLabel: true\n                  },\n                  xAxis: {\n                    name: \"数量\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    type: \"category\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  visualMap: {\n                    orient: \"horizontal\",\n                    left: \"center\",\n                    min: 0,\n                    max: 10,\n                    text: [\"慢速响应\", \"快速响应\"],\n                    // Map the score column to color\n                    dimension: \"avg\",\n                    inRange: {\n                      color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"]\n                    },\n                    textStyle: {\n                      color: \"#FFFFFF\"\n                    }\n                  },\n                  series: [{\n                    type: \"bar\",\n                    encode: {\n                      x: \"num\",\n                      y: \"sub_title\"\n                    }\n                  }]\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    set_wordcloud: function set_wordcloud() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var word_cloud_Chart, maskImage;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //-------------------------set wordcloud\n                word_cloud_Chart = _this2.$echarts.init(_this2.$refs.word_cloud);\n                maskImage = new Image();\n                maskImage.src = word_cloud_data.image;\n                word_cloud_Chart.setOption({\n                  series: [{\n                    type: \"wordCloud\",\n                    shape: \"circle\",\n                    keepAspect: false,\n                    left: \"center\",\n                    top: \"center\",\n                    width: \"70%\",\n                    height: \"70%\",\n                    right: null,\n                    bottom: null,\n                    //maskImage:maskImage,\n                    sizeRange: [12, 30],\n                    rotationRange: [-45, 45],\n                    rotationStep: 90,\n                    // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\n                    gridSize: 2,\n                    // 允许词太大的时候，超出画布的范围\n                    drawOutOfBound: false,\n                    // 布局的时候是否有动画\n                    layoutAnimation: false,\n                    textStyle: {\n                      fontWeight: \"bold\",\n                      color: function color() {\n                        return \"rgb(\" + [Math.round(Math.random() * 254), Math.round(Math.random() * 254), Math.round(Math.random() * 254)].join(\",\") + \")\";\n                      }\n                    },\n                    emphasis: {\n                      focus: \"self\",\n                      textStyle: {\n                        textShadowBlur: 10,\n                        textShadowColor: \"#333\"\n                      }\n                    },\n                    // Data is an array. Each array item must have name and value property.\n                    data: word_cloud_data.value\n                  }]\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    set_speed_average: function set_speed_average() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var scar_data, scar_series, num_cnt, title_name, speed_region_average_scatterOption, bar_data, bar_series, bar_x_data, _title_name, bar_key, speed_region_average_barOption, speed_average_Chart, currentOption;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //--------------------set speed_average\n                //-------------------------------------------------------------set scar\n                scar_data = speed_average_data[\"scar\"][_this3.cur_info.region];\n                scar_series = [];\n                num_cnt = 0;\n\n                for (title_name in scar_data) {\n                  scar_series.push({\n                    type: \"line\",\n                    id: title_name,\n                    dataGroupId: title_name,\n                    universalTransition: {\n                      enabled: true,\n                      delay: function delay(idx, count) {\n                        return Math.random() * 400;\n                      }\n                    },\n                    data: scar_data[title_name]\n                  });\n                }\n\n                speed_region_average_scatterOption = {\n                  xAxis: {\n                    scale: true,\n                    name: \"年份\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    scale: true,\n                    name: \"响应时间\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  series: scar_series\n                }; //-------------------------------------------------------设置bar\n\n                bar_data = speed_average_data[\"bar\"][_this3.cur_info.region];\n                bar_series = [], bar_x_data = [];\n\n                for (_title_name in bar_data) {\n                  bar_x_data.push(_title_name);\n                  bar_series.push({\n                    value: bar_data[_title_name],\n                    groupId: _title_name\n                  });\n                }\n\n                bar_key = bar_x_data;\n                speed_region_average_barOption = {\n                  xAxis: {\n                    type: \"category\",\n                    data: bar_x_data,\n                    name: \"类别\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  yAxis: {\n                    name: \"响应时间\",\n                    nameTextStyle: {\n                      color: \"rgba(255,255,255)\"\n                    },\n                    axisLabel: {\n                      textStyle: {\n                        color: \"rgba(255,255,255)\"\n                      }\n                    }\n                  },\n                  series: [{\n                    type: \"bar\",\n                    id: \"total\",\n                    data: bar_series,\n                    universalTransition: {\n                      enabled: true,\n                      seriesKey: bar_key,\n                      delay: function delay(idx, count) {\n                        return Math.random() * 400;\n                      }\n                    }\n                  }]\n                };\n                speed_average_Chart = _this3.$echarts.init(_this3.$refs.speed_average);\n                currentOption = speed_region_average_scatterOption;\n                setInterval(function () {\n                  currentOption = currentOption === speed_region_average_scatterOption ? speed_region_average_barOption : speed_region_average_scatterOption;\n                  speed_average_Chart.setOption(currentOption, true);\n                }, 2000);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    set_speed_region: function set_speed_region() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var speed_region_option;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this4.$axios({\n                  url: _this4.locate_data_url[_this4.cur_info.region],\n                  method: \"get\"\n                }).then(function (res) {\n                  _this4.cur_info.region_data = res.data;\n                });\n\n              case 2:\n                _this4.$echarts.registerMap(_this4.cur_info.region, _this4.cur_info.region_data);\n\n                _this4.speed_region_Chart = _this4.$echarts.init(_this4.$refs.speed_region);\n                speed_region_option = {\n                  geo: {\n                    map: _this4.cur_info.region,\n                    z: 2,\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    zoom: 1,\n                    //当前视角的缩放比例\n                    scaleLimit: {\n                      //滚轮缩放的极限控制\n                      min: 1,\n                      max: 2\n                    },\n                    label: {\n                      normal: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        }\n                      },\n                      emphasis: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        }\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"rgba(21,55,112,255)\",\n                        shadowOffsetX: 10,\n                        shadowOffsetY: 10,\n                        areaColor: \"rgba(24,48,82,255)\",\n                        borderColor: \"rgba(84,113,166)\",\n                        borderWidth: 1.5\n                      },\n                      emphasis: {\n                        areaColor: \"rgba(7,69,162)\"\n                      }\n                    }\n                  },\n                  series: [{\n                    type: \"map\",\n                    mapType: _this4.cur_info.region,\n                    aspectScale: 1,\n                    z: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    label: {\n                      normal: {\n                        show: false\n                      },\n                      emphasis: {\n                        show: false\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"rgba(22,57,89,255)\",\n                        shadowOffsetX: 20,\n                        shadowOffsetY: 20,\n                        //areaColor: \"rgba(22,57,89,255)\",\n                        borderColor: \"#4a75ff\",\n                        borderWidth: 7\n                      },\n                      emphasis: {\n                        areaColor: \"rgba(22,57,89,0)\"\n                      }\n                    }\n                  }, {\n                    show: true,\n                    type: \"effectScatter\",\n                    rippleEffect: {\n                      // 涟漪特效相关配置。\n                      scale: 4 // 控制涟漪大小\n\n                    },\n                    coordinateSystem: \"geo\" // series坐标系类型\n\n                  }]\n                };\n\n                _this4.speed_region_Chart.setOption(speed_region_option);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    set_speed_tag: function set_speed_tag() {\n      //--------------------------set speedTag\n      var speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\n      speed_tag_Chart.setOption({\n        polar: {\n          radius: [30, \"70%\"]\n        },\n        angleAxis: {\n          max: 4,\n          startAngle: 75\n        },\n        radiusAxis: {\n          type: \"category\",\n          data: [\"a\", \"b\", \"c\", \"d\"]\n        },\n        tooltip: {},\n        series: {\n          type: \"bar\",\n          data: [2, 1.2, 2.4, 3.6],\n          coordinateSystem: \"polar\",\n          label: {\n            show: true,\n            position: \"middle\",\n            formatter: \"{b}: {c}\"\n          }\n        }\n      });\n    }\n  },\n  components: {\n    LeftPage: LeftPage\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;AACA;AACA;AACAA,MADA,kBACA;AACA;AACAC;AACAC,oBADA;AAEAC,mBAFA;AAGAC,kBAHA;AAIAC;AAJA,OADA;AAOAC;AACA,4EADA;AAEA;AAFA,OAPA;AAWAC,mBAXA;AAYAC,kBACA;AACAC;AADA,OADA,EAIA;AACAA;AADA,OAJA,EAOA;AACAA;AADA,OAPA,CAZA;AAwBAC;AAxBA;AA0BA,GA5BA;AA6BAC,SA7BA,qBA6BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAtCA;AAuCAC;AACAC,gBADA,wBACAC,SADA,EACA;AACA;AACA;AACA;AACA,KALA;AAMAC,mBANA,2BAMAC,QANA,EAMA;AACA;AACA;AACA;AACA,KAVA;AAWAC,eAXA,yBAWA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,qBADA,GACA,wCADA;AAEAA;AACAC;AACAC,4BACAC,yDACA,oBADA;AAFA,mBADA;AAOAC;AAAAC;AAAA,mBAPA;AAQAC;AACAC,8BADA;AAEAC;AACAC;AADA,qBAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,mBARA;AAoBAG;AACAC,oCADA;AAEAL;AACAC;AADA,qBAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,mBApBA;AAgCAK;AACAC,wCADA;AAEAC,kCAFA;AAGAC,0BAHA;AAIAC,2BAJA;AAKAC,0CALA;AAMA;AACAC,oCAPA;AAQAC;AACAZ;AADA,qBARA;AAWAE;AACAF;AADA;AAXA,mBAhCA;AA+CAa,2BACA;AACAT,+BADA;AAEAU;AACAC,8BADA;AAEAC;AAFA;AAFA,mBADA;AA/CA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DA,KAtEA;AAuEAC,iBAvEA,2BAuEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACAC,gCAFA,GAEA,6CAFA;AAGAC,yBAHA,GAGA,WAHA;AAIAA;AACAD;AACAL,2BACA;AACAT,qCADA;AAEAgB,mCAFA;AAGAC,qCAHA;AAIAd,kCAJA;AAKAe,iCALA;AAMAC,gCANA;AAOAC,iCAPA;AAQAC,+BARA;AASAC,gCATA;AAUA;AACAC,uCAXA;AAYAC,4CAZA;AAaAC,oCAbA;AAcA;AACAC,+BAfA;AAgBA;AACAC,yCAjBA;AAkBA;AACAC,0CAnBA;AAoBA9B;AACA+B,wCADA;AAEAjC;AACA,+BACA,SACA,CACAkC,+BADA,EAEAA,+BAFA,EAGAA,+BAHA,EAIAC,IAJA,CAIA,GAJA,CADA,GAMA,GAPA;AASA;AAZA,qBApBA;AAkCAC;AACAC,mCADA;AAEAnC;AACAoC,0CADA;AAEAC;AAFA;AAFA,qBAlCA;AA0CA;AACAlE;AA3CA,mBADA;AADA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDA,KA7HA;AA8HAmE,qBA9HA,+BA8HA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACAC,yBAHA,GAGAC,kDAHA;AAIAC,2BAJA,GAIA,EAJA;AAKAC,uBALA,GAKA,CALA;;AAMA;AACAD;AACAvC,gCADA;AAEAyC,kCAFA;AAGAC,2CAHA;AAIAC;AACAC,mCADA;AAEAC;AACA;AACA;AAJA,qBAJA;AAUA5E;AAVA;AAYA;;AACA6E,kDApBA,GAoBA;AACArD;AACAsD,+BADA;AAEArD,8BAFA;AAGAC;AACAC;AADA,qBAHA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,mBADA;AAcAG;AACAgD,+BADA;AAEArD,gCAFA;AAGAC;AACAC;AADA,qBAHA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,mBAdA;AA2BAa;AA3BA,iBApBA,EAiDA;;AACAuC,wBAlDA,GAkDAV,iDAlDA;AAmDAW,0BAnDA,GAmDA,EAnDA,EAoDAC,UApDA,GAoDA,EApDA;;AAqDA;AACAA;AACAD;AACAE,gDADA;AAEAC;AAFA;AAIA;;AACAC,uBA5DA,GA4DAH,UA5DA;AA6DAI,8CA7DA,GA6DA;AACA7D;AACAO,oCADA;AAEA/B,oCAFA;AAGAyB,8BAHA;AAIAC;AACAC;AADA,qBAJA;AAOAC;AACAC;AACAF;AADA;AADA;AAPA,mBADA;AAcAG;AACAL,gCADA;AAEAC;AACAC;AADA,qBAFA;AAMAC;AACAC;AACAF;AADA;AADA;AANA,mBAdA;AA0BAa,2BACA;AACAT,+BADA;AAEAyC,+BAFA;AAGAxE,oCAHA;AAIA0E;AACAC,mCADA;AAEAW,wCAFA;AAGAV;AACA;AACA;AALA;AAJA,mBADA;AA1BA,iBA7DA;AAsGAW,mCAtGA,GAsGA,gDAtGA;AAuGAC,6BAvGA,GAuGAX,kCAvGA;AAwGAY;AACAD,kCACAA,uDACAH,8BADA,GAEAR,kCAHA;AAIAU;AACA,iBANA,EAMA,IANA;;AAxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+GA,KA7OA;AA8OAG,oBA9OA,8BA8OA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA;AACAjF,qEADA;AAEAkF;AAFA,mBAGAC,IAHA,CAGA;AACA;AACA,iBALA,CAFA;;AAAA;AAQA,4CACA,sBADA,EAEA,2BAFA;;AAIA;AACAC,mCAbA,GAaA;AACAC;AACAC,+CADA;AAEAC,wBAFA;AAGAC,kCAHA;AAIAC,gDAJA;AAIA;AACAC,2BALA;AAKA;AACAC;AACA;AACAjE,4BAFA;AAGAC;AAHA,qBANA;AAWAiE;AACAC;AACAC,kCADA;AAEA1E;AACAF,0CADA;AAEA6E;AAFA;AAFA,uBADA;AAQAzC;AACAwC,kCADA;AAEA1E;AACAF,0CADA;AAEA6E;AAFA;AAFA;AARA,qBAXA;AA2BAC;AACAH;AACAI,0DADA;AAEAC,yCAFA;AAGAC,yCAHA;AAIAC,uDAJA;AAKAC,uDALA;AAMAC;AANA,uBADA;AASAhD;AACA8C;AADA;AATA;AA3BA,mBADA;AA2CArE,2BACA;AACAT,+BADA;AAEAiF,mDAFA;AAGAf,kCAHA;AAIAD,wBAJA;AAKAE,gDALA;AAKA;AACAG;AACAC;AACAC;AADA,uBADA;AAIAxC;AACAwC;AADA;AAJA,qBANA;AAcAE;AACAH;AACAI,yDADA;AAEAC,yCAFA;AAGAC,yCAHA;AAIA;AACAE,8CALA;AAMAC;AANA,uBADA;AASAhD;AACA8C;AADA;AATA;AAdA,mBADA,EA6BA;AACAN,8BADA;AAEAxE,yCAFA;AAGAkF;AACA;AACAnC,8BAFA,CAEA;;AAFA,qBAHA;AAOAoC,2CAPA,CAOA;;AAPA,mBA7BA;AA3CA,iBAbA;;AAgGA;;AAhGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiGA,KA/UA;AAgVAC,iBAhVA,2BAgVA;AACA;AACA;AACAC;AACAC;AACAC;AADA,SADA;AAIAC;AACAnF,gBADA;AAEAoF;AAFA,SAJA;AAQAC;AACA1F,0BADA;AAEA/B;AAFA,SARA;AAYA0H,mBAZA;AAaAlF;AACAT,qBADA;AAEA/B,kCAFA;AAGAkH,mCAHA;AAIAb;AACAE,sBADA;AAEAoB,8BAFA;AAGAC;AAHA;AAJA;AAbA;AAwBA;AA3WA,GAvCA;AAoZAC;AACAC;AADA;AApZA","names":["data","cur_info","year","title","region","region_data","locate_data_url","news_value","news_list","url","time_select_value","mounted","methods","title_change","new_title","get_time_change","new_time","set_num_tag","Chart","dataset","source","num_tag_data","grid","containLabel","xAxis","name","nameTextStyle","color","axisLabel","textStyle","yAxis","type","visualMap","orient","left","min","max","text","dimension","inRange","series","encode","x","y","set_wordcloud","word_cloud_Chart","maskImage","shape","keepAspect","top","width","height","right","bottom","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","layoutAnimation","fontWeight","Math","join","emphasis","focus","textShadowBlur","textShadowColor","set_speed_average","scar_data","speed_average_data","scar_series","num_cnt","id","dataGroupId","universalTransition","enabled","delay","speed_region_average_scatterOption","scale","bar_data","bar_series","bar_x_data","value","groupId","bar_key","speed_region_average_barOption","seriesKey","speed_average_Chart","currentOption","setInterval","set_speed_region","method","then","speed_region_option","geo","map","z","aspectScale","layoutCenter","zoom","scaleLimit","label","normal","show","fontSize","itemStyle","shadowColor","shadowOffsetX","shadowOffsetY","areaColor","borderColor","borderWidth","mapType","rippleEffect","coordinateSystem","set_speed_tag","speed_tag_Chart","polar","radius","angleAxis","startAngle","radiusAxis","tooltip","position","formatter","components","LeftPage"],"sourceRoot":"src/views","sources":["ShengView.vue"],"sourcesContent":["<template>\r\n  <div class=\"ShengBackground\">\r\n    <section class=\"item_left\">\r\n      <LeftPage @title_change=\"title_change\" />\r\n    </section>\r\n    <div class=\"item_right\">\r\n      <div class=\"title\"></div>\r\n      <div class=\"content\">\r\n        <div class=\"left\">\r\n          <div class=\"speed_region\" style=\"display: flex\">\r\n            <div class=\"time_select\">\r\n              <div style=\"font-size: 18px; color: #ffffff; margin-bottom: 5px\">\r\n                2021\r\n              </div>\r\n              <el-slider\r\n                v-model=\"time_select_value\"\r\n                :max=\"2021\"\r\n                :min=\"2017\"\r\n                vertical\r\n                @change=\"get_time_change\"\r\n                height=\"252px\"\r\n                :step=\"1\"\r\n              >\r\n              </el-slider>\r\n              <div style=\"font-size: 18px; color: #ffffff; margin-top: 10px\">\r\n                2017\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"speed_region_chart\"\r\n              ref=\"speed_region\"\r\n              style=\"width: 776px; height: 530px; margin-top: 60px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"down\">\r\n            <div class=\"news\">\r\n              <Carousel\r\n                autoplay\r\n                v-model=\"news_value\"\r\n                loop\r\n                style=\"width: 100%; height: 100%\"\r\n              >\r\n                <CarouselItem v-for=\"(item, i) in news_list\" :key=\"i\">\r\n                  <img\r\n                    :src=\"item.url\"\r\n                    alt=\"加载失败\"\r\n                    width=\"407\"\r\n                    height=\"209\"\r\n                    style=\"margin: 86px 0 0 70px\"\r\n                  />\r\n                </CarouselItem>\r\n              </Carousel>\r\n            </div>\r\n            <div class=\"speed_average\">\r\n              <div\r\n                ref=\"speed_average\"\r\n                style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"right\">\r\n          <div class=\"num_tag\">\r\n            <div\r\n              ref=\"num_tag\"\r\n              style=\"width: 95%; height: 95%; margin-top: 10px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"word_cloud\">\r\n            <div\r\n              ref=\"word_cloud\"\r\n              style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"speed_tag\">\r\n            <div\r\n              ref=\"speed_tag\"\r\n              style=\"width: 100%; height: 100%; margin-top: 30px\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport LeftPage from \"../components/MainPageLeft.vue\";\r\nimport word_cloud_data from \"../assets/Sheng/item_data/word_cloud.json\";\r\nimport num_tag_data from \"../assets/Sheng/item_data/locate_tag_num.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        region: \"\",\r\n        region_data: \"\",\r\n      },\r\n      locate_data_url:{\r\n        '河北':'https://geo.datav.aliyun.com/areas_v3/bound/130000_full.json',\r\n        '山东':'https://geo.datav.aliyun.com/areas_v3/bound/370000_full.json'\r\n      },\r\n      news_value: 0,\r\n      news_list: [\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/874baddfbc4c43809aae929bf2a190a2.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/441dbcc82f714ce58365ab925ac4c783.JPG\",\r\n        },\r\n        {\r\n          url: \"http://www.gov.cn/xinwen/2022-05/01/5688367/images/89106ba8a3a6455e8d323ba63e307cf0.JPG\",\r\n        },\r\n      ],\r\n\r\n      time_select_value: 0,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.cur_info.region = \"山东\";\r\n    \r\n    this.set_wordcloud();\r\n    this.set_speed_average();\r\n    this.set_speed_tag();\r\n    this.set_speed_region();\r\n    this.set_num_tag();\r\n    this.set_speed_region();\r\n  },\r\n  methods: {\r\n    title_change(new_title) {\r\n      //title变化后\r\n      this.cur_info.title = new_title;\r\n      this.set_num_tag();\r\n    },\r\n    get_time_change(new_time) {\r\n      //时间变化后\r\n      this.cur_info.year = new_time.toString();\r\n      this.set_num_tag();\r\n    },\r\n    async set_num_tag() {\r\n      let Chart = this.$echarts.init(this.$refs.num_tag);\r\n      Chart.setOption({\r\n        dataset: {\r\n          source:\r\n            num_tag_data[this.cur_info.region][this.cur_info.year][\r\n              this.cur_info.title\r\n            ],\r\n        },\r\n        grid: { containLabel: true },\r\n        xAxis: {\r\n          name: \"数量\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        visualMap: {\r\n          orient: \"horizontal\",\r\n          left: \"center\",\r\n          min: 0,\r\n          max: 10,\r\n          text: [\"慢速响应\", \"快速响应\"],\r\n          // Map the score column to color\r\n          dimension: \"avg\",\r\n          inRange: {\r\n            color: [\"#65B581\", \"#FFCE34\", \"#FD665F\"],\r\n          },\r\n          textStyle: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            encode: {\r\n              x: \"num\",\r\n              y: \"sub_title\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_wordcloud() {\r\n      //-------------------------set wordcloud\r\n      let word_cloud_Chart = this.$echarts.init(this.$refs.word_cloud);\r\n      var maskImage = new Image();\r\n      maskImage.src = word_cloud_data.image;\r\n      word_cloud_Chart.setOption({\r\n        series: [\r\n          {\r\n            type: \"wordCloud\",\r\n            shape: \"circle\",\r\n            keepAspect: false,\r\n            left: \"center\",\r\n            top: \"center\",\r\n            width: \"70%\",\r\n            height: \"70%\",\r\n            right: null,\r\n            bottom: null,\r\n            //maskImage:maskImage,\r\n            sizeRange: [12, 30],\r\n            rotationRange: [-45, 45],\r\n            rotationStep: 90,\r\n            // 词间距，数值越小，间距越小，这里间距太小的话，会出现大词把小词套住的情况，比如一个大的口字，中间会有比较大的空隙，这时候他会把一些很小的字放在口字里面，这样的话，鼠标就无法选中里面的那个小字\r\n            gridSize: 2,\r\n            // 允许词太大的时候，超出画布的范围\r\n            drawOutOfBound: false,\r\n            // 布局的时候是否有动画\r\n            layoutAnimation: false,\r\n            textStyle: {\r\n              fontWeight: \"bold\",\r\n              color: function () {\r\n                return (\r\n                  \"rgb(\" +\r\n                  [\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                    Math.round(Math.random() * 254),\r\n                  ].join(\",\") +\r\n                  \")\"\r\n                );\r\n              },\r\n            },\r\n            emphasis: {\r\n              focus: \"self\",\r\n              textStyle: {\r\n                textShadowBlur: 10,\r\n                textShadowColor: \"#333\",\r\n              },\r\n            },\r\n\r\n            // Data is an array. Each array item must have name and value property.\r\n            data: word_cloud_data.value,\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    async set_speed_average() {\r\n      //--------------------set speed_average\r\n      //-------------------------------------------------------------set scar\r\n      let scar_data = speed_average_data[\"scar\"][this.cur_info.region];\r\n      let scar_series = [];\r\n      let num_cnt = 0;\r\n      for (let title_name in scar_data) {\r\n        scar_series.push({\r\n          type: \"line\",\r\n          id: title_name,\r\n          dataGroupId: title_name,\r\n          universalTransition: {\r\n            enabled: true,\r\n            delay: function (idx, count) {\r\n              return Math.random() * 400;\r\n            },\r\n          },\r\n          data: scar_data[title_name],\r\n        });\r\n      }\r\n      let speed_region_average_scatterOption = {\r\n        xAxis: {\r\n          scale: true,\r\n          name: \"年份\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          scale: true,\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: scar_series,\r\n      };\r\n      //-------------------------------------------------------设置bar\r\n      let bar_data = speed_average_data[\"bar\"][this.cur_info.region];\r\n      let bar_series = [],\r\n        bar_x_data = [];\r\n      for (let title_name in bar_data) {\r\n        bar_x_data.push(title_name);\r\n        bar_series.push({\r\n          value: bar_data[title_name],\r\n          groupId: title_name,\r\n        });\r\n      }\r\n      let bar_key = bar_x_data;\r\n      let speed_region_average_barOption = {\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: bar_x_data,\r\n          name: \"类别\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        yAxis: {\r\n          name: \"响应时间\",\r\n          nameTextStyle: {\r\n            color: \"rgba(255,255,255)\",\r\n          },\r\n\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"rgba(255,255,255)\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            id: \"total\",\r\n            data: bar_series,\r\n            universalTransition: {\r\n              enabled: true,\r\n              seriesKey: bar_key,\r\n              delay: function (idx, count) {\r\n                return Math.random() * 400;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      let speed_average_Chart = this.$echarts.init(this.$refs.speed_average);\r\n      let currentOption = speed_region_average_scatterOption;\r\n      setInterval(function () {\r\n        currentOption =\r\n          currentOption === speed_region_average_scatterOption\r\n            ? speed_region_average_barOption\r\n            : speed_region_average_scatterOption;\r\n        speed_average_Chart.setOption(currentOption, true);\r\n      }, 2000);\r\n    },\r\n    async set_speed_region() {\r\n      //--------------------set speed_region\r\n      await this.$axios({\r\n        url: this.locate_data_url[this.cur_info.region],\r\n        method: \"get\",\r\n      }).then((res) => {\r\n        this.cur_info.region_data=res.data;\r\n      });\r\n      this.$echarts.registerMap(\r\n        this.cur_info.region,\r\n        this.cur_info.region_data\r\n      );\r\n      this.speed_region_Chart = this.$echarts.init(this.$refs.speed_region);\r\n      let speed_region_option = {\r\n        geo: {\r\n          map: this.cur_info.region,\r\n          z: 2,\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          zoom: 1, //当前视角的缩放比例\r\n          scaleLimit: {\r\n            //滚轮缩放的极限控制\r\n            min: 1,\r\n            max: 2,\r\n          },\r\n          label: {\r\n            normal: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n            emphasis: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#FFFFFF\",\r\n                fontSize: 18,\r\n              },\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"rgba(21,55,112,255)\",\r\n              shadowOffsetX: 10,\r\n              shadowOffsetY: 10,\r\n              areaColor: \"rgba(24,48,82,255)\",\r\n              borderColor: \"rgba(84,113,166)\",\r\n              borderWidth: 1.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"rgba(7,69,162)\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            mapType: this.cur_info.region,\r\n            aspectScale: 1,\r\n            z: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            label: {\r\n              normal: {\r\n                show: false,\r\n              },\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                shadowColor: \"rgba(22,57,89,255)\",\r\n                shadowOffsetX: 20,\r\n                shadowOffsetY: 20,\r\n                //areaColor: \"rgba(22,57,89,255)\",\r\n                borderColor: \"#4a75ff\",\r\n                borderWidth: 7,\r\n              },\r\n              emphasis: {\r\n                areaColor: \"rgba(22,57,89,0)\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n          },\r\n        ],\r\n      };\r\n      this.speed_region_Chart.setOption(speed_region_option);\r\n    },\r\n    set_speed_tag() {\r\n      //--------------------------set speedTag\r\n      let speed_tag_Chart = this.$echarts.init(this.$refs.speed_tag);\r\n      speed_tag_Chart.setOption({\r\n        polar: {\r\n          radius: [30, \"70%\"],\r\n        },\r\n        angleAxis: {\r\n          max: 4,\r\n          startAngle: 75,\r\n        },\r\n        radiusAxis: {\r\n          type: \"category\",\r\n          data: [\"a\", \"b\", \"c\", \"d\"],\r\n        },\r\n        tooltip: {},\r\n        series: {\r\n          type: \"bar\",\r\n          data: [2, 1.2, 2.4, 3.6],\r\n          coordinateSystem: \"polar\",\r\n          label: {\r\n            show: true,\r\n            position: \"middle\",\r\n            formatter: \"{b}: {c}\",\r\n          },\r\n        },\r\n      });\r\n    },\r\n  },\r\n  components: {\r\n    LeftPage,\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.time_select {\r\n  width: 28px;\r\n  height: 252px;\r\n  margin-left: 108px;\r\n  margin-top: 327px-50px;\r\n}\r\n.speed_region {\r\n  width: 1051px;\r\n  height: 598px;\r\n  //width: 1920px;\r\n  //height: 1080px;\r\n  margin-top: 126px;\r\n  background: url(../assets/Sheng/speed_region.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  justify-content: center;\r\n}\r\n.news {\r\n  width: 546px;\r\n  height: 325px;\r\n  margin-top: 13px;\r\n  background: url(../assets/Sheng/news.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_average {\r\n  width: 479px;\r\n  height: 325px;\r\n  margin-top: 16px;\r\n  margin-left: 22px;\r\n  background: url(../assets/Sheng/speed_average.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.num_tag {\r\n  width: 576px;\r\n  height: 340px;\r\n  background: url(../assets/Sheng/num_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.word_cloud {\r\n  width: 576px;\r\n  height: 340px;\r\n  margin-top: 10px;\r\n\r\n  background: url(../assets/Sheng/word_cloud.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.speed_tag {\r\n  width: 576px;\r\n  height: 267px+35px;\r\n  margin-top: 10px;\r\n\r\n  background: url(../assets/Sheng/speed_tag.png) no-repeat;\r\n  background-size: 100% 100%;\r\n}\r\n.ShengBackground {\r\n  width: 1936px;\r\n  height: 1083px;\r\n  background: url(../assets/Sheng/ShengBackground.PNG) no-repeat;\r\n  background-size: 100% 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  //background-position: center top;\r\n  .item_left {\r\n    margin-left: 0px;\r\n    margin-top: 0px;\r\n    width: 267px;\r\n    height: 100%;\r\n    line-height: 20px;\r\n    opacity: 0.89;\r\n    background-color: rgba(29, 76, 170, 100);\r\n    text-align: center;\r\n  }\r\n  .item_right {\r\n    //display: flex;\r\n    //flex-flow: column;\r\n    .title {\r\n      margin-left: 0px;\r\n      margin-top: 0px;\r\n      width: 1936px-267px;\r\n      height: 300px;\r\n      background: url(../assets/main_page_title.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      background-position: center top;\r\n    }\r\n    .content {\r\n      margin-top: -300px;\r\n      display: flex;\r\n      .left {\r\n        margin-left: 44px;\r\n        display: flex;\r\n        flex-flow: column;\r\n        .down {\r\n          display: flex;\r\n        }\r\n      }\r\n      .right {\r\n        display: flex;\r\n        flex-flow: column;\r\n        margin-left: 10px;\r\n        margin-top: 60px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}