{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.int32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport Texture from '../Texture';\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube'; // http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx\n// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\nvar DDS_MAGIC = 0x20534444;\nvar DDSD_CAPS = 0x1;\nvar DDSD_HEIGHT = 0x2;\nvar DDSD_WIDTH = 0x4;\nvar DDSD_PITCH = 0x8;\nvar DDSD_PIXELFORMAT = 0x1000;\nvar DDSD_MIPMAPCOUNT = 0x20000;\nvar DDSD_LINEARSIZE = 0x80000;\nvar DDSD_DEPTH = 0x800000;\nvar DDSCAPS_COMPLEX = 0x8;\nvar DDSCAPS_MIPMAP = 0x400000;\nvar DDSCAPS_TEXTURE = 0x1000;\nvar DDSCAPS2_CUBEMAP = 0x200;\nvar DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\nvar DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\nvar DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\nvar DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\nvar DDSCAPS2_VOLUME = 0x200000;\nvar DDPF_ALPHAPIXELS = 0x1;\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\n\nfunction fourCCToInt32(value) {\n  return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n}\n\nfunction int32ToFourCC(value) {\n  return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n}\n\nvar headerLengthInt = 31; // The header length in 32 bit ints\n\nvar FOURCC_DXT1 = fourCCToInt32('DXT1');\nvar FOURCC_DXT3 = fourCCToInt32('DXT3');\nvar FOURCC_DXT5 = fourCCToInt32('DXT5'); // Offsets into the header array\n\nvar off_magic = 0;\nvar off_size = 1;\nvar off_flags = 2;\nvar off_height = 3;\nvar off_width = 4;\nvar off_mipmapCount = 7;\nvar off_pfFlags = 20;\nvar off_pfFourCC = 21;\nvar off_caps = 27;\nvar off_caps2 = 28;\nvar off_caps3 = 29;\nvar off_caps4 = 30;\nvar ret = {\n  parse: function parse(arrayBuffer, out) {\n    var header = new Int32Array(arrayBuffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      return null;\n    }\n\n    if (!header(off_pfFlags) & DDPF_FOURCC) {\n      return null;\n    }\n\n    var fourCC = header(off_pfFourCC);\n    var width = header[off_width];\n    var height = header[off_height];\n    var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;\n    var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;\n    var blockBytes, internalFormat;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        internalFormat = Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        break;\n\n      default:\n        return null;\n    }\n\n    var dataOffset = header[off_size] + 4; // TODO: Suppose all face are existed\n\n    var faceNumber = isCubeMap ? 6 : 1;\n    var mipmapCount = 1;\n\n    if (hasMipmap) {\n      mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var textures = [];\n\n    for (var f = 0; f < faceNumber; f++) {\n      var _width = width;\n      var _height = height;\n      textures[f] = new Texture2D({\n        width: _width,\n        height: _height,\n        format: internalFormat\n      });\n      var mipmaps = [];\n\n      for (var i = 0; i < mipmapCount; i++) {\n        var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;\n        var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);\n        dataOffset += dataLength;\n        _width *= 0.5;\n        _height *= 0.5;\n        mipmaps[i] = byteArray;\n      }\n\n      textures[f].pixels = mipmaps[0];\n\n      if (hasMipmap) {\n        textures[f].mipmaps = mipmaps;\n      }\n    } // TODO\n    // return isCubeMap ? textures : textures[0];\n\n\n    if (out) {\n      out.width = textures[0].width;\n      out.height = textures[0].height;\n      out.format = textures[0].format;\n      out.pixels = textures[0].pixels;\n      out.mipmaps = textures[0].mipmaps;\n    } else {\n      return textures[0];\n    }\n  }\n};\nexport default ret;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/util/dds.js"],"names":["Texture","Texture2D","TextureCube","DDS_MAGIC","DDSD_CAPS","DDSD_HEIGHT","DDSD_WIDTH","DDSD_PITCH","DDSD_PIXELFORMAT","DDSD_MIPMAPCOUNT","DDSD_LINEARSIZE","DDSD_DEPTH","DDSCAPS_COMPLEX","DDSCAPS_MIPMAP","DDSCAPS_TEXTURE","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDSCAPS2_VOLUME","DDPF_ALPHAPIXELS","DDPF_ALPHA","DDPF_FOURCC","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","headerLengthInt","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_caps","off_caps2","off_caps3","off_caps4","ret","parse","arrayBuffer","out","header","Int32Array","fourCC","width","height","isCubeMap","hasMipmap","blockBytes","internalFormat","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","dataOffset","faceNumber","mipmapCount","Math","max","textures","f","_width","_height","format","mipmaps","i","dataLength","byteArray","Uint8Array","pixels"],"mappings":"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","sourcesContent":["import Texture from '../Texture';\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\n\n// http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx\n// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\nvar DDS_MAGIC = 0x20534444;\n\nvar DDSD_CAPS = 0x1;\nvar DDSD_HEIGHT = 0x2;\nvar DDSD_WIDTH = 0x4;\nvar DDSD_PITCH = 0x8;\nvar DDSD_PIXELFORMAT = 0x1000;\nvar DDSD_MIPMAPCOUNT = 0x20000;\nvar DDSD_LINEARSIZE = 0x80000;\nvar DDSD_DEPTH = 0x800000;\n\nvar DDSCAPS_COMPLEX = 0x8;\nvar DDSCAPS_MIPMAP = 0x400000;\nvar DDSCAPS_TEXTURE = 0x1000;\n\nvar DDSCAPS2_CUBEMAP = 0x200;\nvar DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\nvar DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\nvar DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\nvar DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\nvar DDSCAPS2_VOLUME = 0x200000;\n\nvar DDPF_ALPHAPIXELS = 0x1;\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\n\nfunction fourCCToInt32(value) {\n    return value.charCodeAt(0) +\n        (value.charCodeAt(1) << 8) +\n        (value.charCodeAt(2) << 16) +\n        (value.charCodeAt(3) << 24);\n}\n\nfunction int32ToFourCC(value) {\n    return String.fromCharCode(\n        value & 0xff,\n        (value >> 8) & 0xff,\n        (value >> 16) & 0xff,\n        (value >> 24) & 0xff\n    );\n}\n\nvar headerLengthInt = 31; // The header length in 32 bit ints\n\nvar FOURCC_DXT1 = fourCCToInt32('DXT1');\nvar FOURCC_DXT3 = fourCCToInt32('DXT3');\nvar FOURCC_DXT5 = fourCCToInt32('DXT5');\n// Offsets into the header array\nvar off_magic = 0;\n\nvar off_size = 1;\nvar off_flags = 2;\nvar off_height = 3;\nvar off_width = 4;\n\nvar off_mipmapCount = 7;\n\nvar off_pfFlags = 20;\nvar off_pfFourCC = 21;\n\nvar off_caps = 27;\nvar off_caps2 = 28;\nvar off_caps3 = 29;\nvar off_caps4 = 30;\n\nvar ret = {\n    parse: function(arrayBuffer, out) {\n        var header = new Int32Array(arrayBuffer, 0, headerLengthInt);\n        if (header[off_magic] !== DDS_MAGIC) {\n            return null;\n        }\n        if (!header(off_pfFlags) & DDPF_FOURCC) {\n            return null;\n        }\n\n        var fourCC = header(off_pfFourCC);\n        var width = header[off_width];\n        var height = header[off_height];\n        var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;\n        var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;\n        var blockBytes, internalFormat;\n        switch(fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                internalFormat = Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                break;\n            default:\n                return null;\n        }\n        var dataOffset = header[off_size] + 4;\n        // TODO: Suppose all face are existed\n        var faceNumber = isCubeMap ? 6 : 1;\n        var mipmapCount = 1;\n        if (hasMipmap) {\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\n        }\n\n        var textures = [];\n        for (var f = 0; f < faceNumber; f++) {\n            var _width = width;\n            var _height = height;\n            textures[f] = new Texture2D({\n                width: _width,\n                height: _height,\n                format: internalFormat\n            });\n            var mipmaps = [];\n            for (var i = 0; i < mipmapCount; i++) {\n                var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;\n                var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);\n\n                dataOffset += dataLength;\n                _width *= 0.5;\n                _height *= 0.5;\n                mipmaps[i] = byteArray;\n            }\n            textures[f].pixels = mipmaps[0];\n            if (hasMipmap) {\n                textures[f].mipmaps = mipmaps;\n            }\n        }\n        // TODO\n        // return isCubeMap ? textures : textures[0];\n        if (out) {\n            out.width = textures[0].width;\n            out.height = textures[0].height;\n            out.format = textures[0].format;\n            out.pixels = textures[0].pixels;\n            out.mipmaps = textures[0].mipmaps;\n        }\n        else {\n            return textures[0];\n        }\n    }\n};\n\nexport default ret;\n"]},"metadata":{},"sourceType":"module"}