{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport mat3 from '../glmatrix/mat3';\n/**\n * @constructor\n * @alias clay.Matrix3\n */\n\nvar Matrix3 = function Matrix3() {\n  /**\n   * Storage of Matrix3\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix3#\n   */\n  this.array = mat3.create();\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix3#\n   */\n\n  this._dirty = true;\n};\n\nMatrix3.prototype = {\n  constructor: Matrix3,\n\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function setArray(arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate the adjugate of self, in-place\n   * @return {clay.Matrix3}\n   */\n  adjoint: function adjoint() {\n    mat3.adjoint(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Matrix3\n   * @return {clay.Matrix3}\n   */\n  clone: function clone() {\n    return new Matrix3().copy(this);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  copy: function copy(b) {\n    mat3.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function determinant() {\n    return mat3.determinant(this.array);\n  },\n\n  /**\n   * Copy the values from Matrix2d a\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix3}\n   */\n  fromMat2d: function fromMat2d(a) {\n    mat3.fromMat2d(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Copies the upper-left 3x3 values of Matrix4\n   * @param  {clay.Matrix4} a\n   * @return {clay.Matrix3}\n   */\n  fromMat4: function fromMat4(a) {\n    mat3.fromMat4(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculates a rotation matrix from the given quaternion\n   * @param  {clay.Quaternion} q\n   * @return {clay.Matrix3}\n   */\n  fromQuat: function fromQuat(q) {\n    mat3.fromQuat(this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix3}\n   */\n  identity: function identity() {\n    mat3.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Invert self\n   * @return {clay.Matrix3}\n   */\n  invert: function invert() {\n    mat3.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  mul: function mul(b) {\n    mat3.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix3} a\n   * @return {clay.Matrix3}\n   */\n  mulLeft: function mulLeft(a) {\n    mat3.mul(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  multiply: function multiply(b) {\n    mat3.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix3} a\n   * @return {clay.Matrix3}\n   */\n  multiplyLeft: function multiplyLeft(a) {\n    mat3.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian\n   * @param  {number}   rad\n   * @return {clay.Matrix3}\n   */\n  rotate: function rotate(rad) {\n    mat3.rotate(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self by s\n   * @param  {clay.Vector2}  s\n   * @return {clay.Matrix3}\n   */\n  scale: function scale(v) {\n    mat3.scale(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Translate self by v\n   * @param  {clay.Vector2}  v\n   * @return {clay.Matrix3}\n   */\n  translate: function translate(v) {\n    mat3.translate(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n   * @param {clay.Matrix4} a\n   */\n  normalFromMat4: function normalFromMat4(a) {\n    mat3.normalFromMat4(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transpose self, in-place.\n   * @return {clay.Matrix2}\n   */\n  transpose: function transpose() {\n    mat3.transpose(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\n\nMatrix3.adjoint = function (out, a) {\n  mat3.adjoint(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.copy = function (out, a) {\n  mat3.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} a\n * @return {number}\n */\n\n\nMatrix3.determinant = function (a) {\n  return mat3.determinant(a.array);\n};\n/**\n * @param  {clay.Matrix3} out\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.identity = function (out) {\n  mat3.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.invert = function (out, a) {\n  mat3.invert(out.array, a.array);\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.mul = function (out, a, b) {\n  mat3.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.multiply = Matrix3.mul;\n/**\n * @param  {clay.Matrix3}  out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix3}\n */\n\nMatrix3.fromMat2d = function (out, a) {\n  mat3.fromMat2d(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.fromMat4 = function (out, a) {\n  mat3.fromMat4(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3}    out\n * @param  {clay.Quaternion} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.fromQuat = function (out, q) {\n  mat3.fromQuat(out.array, q.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.normalFromMat4 = function (out, a) {\n  mat3.normalFromMat4(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {number}  rad\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.rotate = function (out, a, rad) {\n  mat3.rotate(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.scale = function (out, a, v) {\n  mat3.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.transpose = function (out, a) {\n  mat3.transpose(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\n\n\nMatrix3.translate = function (out, a, v) {\n  mat3.translate(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Matrix3;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/math/Matrix3.js"],"names":["mat3","Matrix3","array","create","_dirty","prototype","constructor","setArray","arr","i","length","adjoint","clone","copy","b","determinant","fromMat2d","a","fromMat4","fromQuat","q","identity","invert","mul","mulLeft","multiply","multiplyLeft","rotate","rad","scale","v","translate","normalFromMat4","transpose","toString","Array","join","call","toArray","slice","out"],"mappings":"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","sourcesContent":["import mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Matrix3\n */\nvar Matrix3 = function () {\n\n    /**\n     * Storage of Matrix3\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix3#\n     */\n    this.array = mat3.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix3#\n     */\n    this._dirty = true;\n};\n\nMatrix3.prototype = {\n\n    constructor: Matrix3,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Calculate the adjugate of self, in-place\n     * @return {clay.Matrix3}\n     */\n    adjoint: function () {\n        mat3.adjoint(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Matrix3\n     * @return {clay.Matrix3}\n     */\n    clone: function () {\n        return (new Matrix3()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    copy: function (b) {\n        mat3.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function () {\n        return mat3.determinant(this.array);\n    },\n\n    /**\n     * Copy the values from Matrix2d a\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix3}\n     */\n    fromMat2d: function (a) {\n        mat3.fromMat2d(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Copies the upper-left 3x3 values of Matrix4\n     * @param  {clay.Matrix4} a\n     * @return {clay.Matrix3}\n     */\n    fromMat4: function (a) {\n        mat3.fromMat4(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculates a rotation matrix from the given quaternion\n     * @param  {clay.Quaternion} q\n     * @return {clay.Matrix3}\n     */\n    fromQuat: function (q) {\n        mat3.fromQuat(this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix3}\n     */\n    identity: function () {\n        mat3.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix3}\n     */\n    invert: function () {\n        mat3.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    mul: function (b) {\n        mat3.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix3} a\n     * @return {clay.Matrix3}\n     */\n    mulLeft: function (a) {\n        mat3.mul(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    multiply: function (b) {\n        mat3.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix3} a\n     * @return {clay.Matrix3}\n     */\n    multiplyLeft: function (a) {\n        mat3.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian\n     * @param  {number}   rad\n     * @return {clay.Matrix3}\n     */\n    rotate: function (rad) {\n        mat3.rotate(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * @param  {clay.Vector2}  s\n     * @return {clay.Matrix3}\n     */\n    scale: function (v) {\n        mat3.scale(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Translate self by v\n     * @param  {clay.Vector2}  v\n     * @return {clay.Matrix3}\n     */\n    translate: function (v) {\n        mat3.translate(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n     * @param {clay.Matrix4} a\n     */\n    normalFromMat4: function (a) {\n        mat3.normalFromMat4(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transpose self, in-place.\n     * @return {clay.Matrix2}\n     */\n    transpose: function () {\n        mat3.transpose(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function () {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.adjoint = function (out, a) {\n    mat3.adjoint(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.copy = function (out, a) {\n    mat3.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} a\n * @return {number}\n */\nMatrix3.determinant = function (a) {\n    return mat3.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @return {clay.Matrix3}\n */\nMatrix3.identity = function (out) {\n    mat3.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.invert = function (out, a) {\n    mat3.invert(out.array, a.array);\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.mul = function (out, a, b) {\n    mat3.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.multiply = Matrix3.mul;\n\n/**\n * @param  {clay.Matrix3}  out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat2d = function (out, a) {\n    mat3.fromMat2d(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat4 = function (out, a) {\n    mat3.fromMat4(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3}    out\n * @param  {clay.Quaternion} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromQuat = function (out, q) {\n    mat3.fromQuat(out.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.normalFromMat4 = function (out, a) {\n    mat3.normalFromMat4(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {number}  rad\n * @return {clay.Matrix3}\n */\nMatrix3.rotate = function (out, a, rad) {\n    mat3.rotate(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.scale = function (out, a, v) {\n    mat3.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.transpose = function (out, a) {\n    mat3.transpose(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.translate = function (out, a, v) {\n    mat3.translate(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix3;\n"]},"metadata":{},"sourceType":"module"}