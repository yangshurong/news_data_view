{"ast":null,"code":"/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\nimport { GLMAT_EPSILON, GLMAT_ARRAY_TYPE } from './common';\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nmat4.create = function () {\n  var out = new GLMAT_ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\n\nmat4.clone = function (a) {\n  var out = new GLMAT_ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\n\nmat4.copy = function (out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\n\nmat4.identity = function (out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\n\nmat4.transpose = function (out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a12 = a[6],\n        a13 = a[7],\n        a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n};\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\n\nmat4.invert = function (out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15],\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n      // Calculate the determinant\n  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n};\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\n\nmat4.adjoint = function (out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n};\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\n\nmat4.determinant = function (a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15],\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\n\n\nmat4.multiply = function (out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n};\n/**\n * Multiplies two affine mat4's\n * Add by https://github.com/pissang\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\n\n\nmat4.multiplyAffine = function (out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22; // out[3] = 0;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22; // out[7] = 0;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22; // out[11] = 0;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + a32; // out[15] = 1;\n\n  return out;\n};\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\n\nmat4.mul = mat4.multiply;\n/**\n * Alias for {@link mat4.multiplyAffine}\n * @function\n */\n\nmat4.mulAffine = mat4.multiplyAffine;\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\n\nmat4.translate = function (out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2],\n      a00,\n      a01,\n      a02,\n      a03,\n      a10,\n      a11,\n      a12,\n      a13,\n      a20,\n      a21,\n      a22,\n      a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n};\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\n\nmat4.scale = function (out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\n\nmat4.rotate = function (out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2],\n      len = Math.sqrt(x * x + y * y + z * z),\n      s,\n      c,\n      t,\n      a00,\n      a01,\n      a02,\n      a03,\n      a10,\n      a11,\n      a12,\n      a13,\n      a20,\n      a21,\n      a22,\n      a23,\n      b00,\n      b01,\n      b02,\n      b10,\n      b11,\n      b12,\n      b20,\n      b21,\n      b22;\n\n  if (Math.abs(len) < GLMAT_EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n};\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\n\nmat4.rotateX = function (out, a, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad),\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n};\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\n\nmat4.rotateY = function (out, a, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad),\n      a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n};\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\n\nmat4.rotateZ = function (out, a, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad),\n      a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n};\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\n\n\nmat4.fromRotationTranslation = function (out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n};\n\nmat4.fromQuat = function (out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n      xx = x * x2,\n      yx = y * x2,\n      yy = y * y2,\n      zx = z * x2,\n      zy = z * y2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\n\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left),\n      tb = 1 / (top - bottom),\n      nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n};\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\n\nmat4.perspective = function (out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 2 * far * near * nf;\n  out[15] = 0;\n  return out;\n};\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\n\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right),\n      bt = 1 / (bottom - top),\n      nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n};\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\n\nmat4.lookAt = function (out, eye, center, up) {\n  var x0,\n      x1,\n      x2,\n      y0,\n      y1,\n      y2,\n      z0,\n      z1,\n      z2,\n      len,\n      eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2],\n      centerx = center[0],\n      centery = center[1],\n      centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < GLMAT_EPSILON && Math.abs(eyey - centery) < GLMAT_EPSILON && Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n    return mat4.identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n};\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\n\nmat4.frob = function (a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n};\n\nexport default mat4;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/glmatrix/mat4.js"],"names":["GLMAT_EPSILON","GLMAT_ARRAY_TYPE","mat4","create","out","clone","a","copy","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","multiplyAffine","mul","mulAffine","translate","v","x","y","z","scale","rotate","rad","axis","len","Math","sqrt","s","c","t","b12","b20","b21","b22","abs","sin","cos","rotateX","rotateY","rotateZ","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","frob","pow"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,EAAuBC,gBAAvB,QAA+C,UAA/C;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,EAAX;AAEA;AACA;AACA;AACA;AACA;;AACAA,IAAI,CAACC,MAAL,GAAc,YAAW;AACrB,MAAIC,GAAG,GAAG,IAAIH,gBAAJ,CAAqB,EAArnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACG,KAAL,GAAa,UAASC,CAAT,EAAY;AACrB,MAAIF,GAAG,GAAG,IAAIH,gBAAJ,CAAqB,EAArB,CAAV;AACAG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACA,SAAOF,GAAP;AACH,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACK,IAAL,GAAY,UAASH,GAAT,EAAcE,CAAd,EAAiB;AACzBF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACA,SAAOF,GAAP;AACH,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACM,QAAL,GAAgB,UAASJ,GAAT,EAAclBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACO,SAAL,GAAiB,UAASL,GAAT,EAAcE,CAAd,EAAiB;AAC9B;AACA,MAAIF,GAAG,KAAKE,CAAZ,EAAe;AACX,QAAII,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAX;AAAA,QAAgBK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAvB;AAAA,QAA4BM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAAnC;AAAA,QACIO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADX;AAAA,QACgBQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CADvB;AAAA,QAEIS,GAAG,GAAGT,CAAC,CAAC,EAAD,CAFX;AAIAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,EAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAT;AACAN,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,EAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAT;AACAP,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASS,GAAT;AACAT,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUQ,GAAV;AACAR,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUU,GAAV;AACAV,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUW,GAAV;AACH,GAjBD,MAiBO;AACHX,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,EAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,EAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAV;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACH;;AAED,SAAOF,GAAP;AACH,CAvCD;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACc,MAAL,GAAc,UAASZ,GAAT,EAAcE,CAAd,EAAiB;AAC3B,MAAIW,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBI,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAvB;AAAA,MAA4BK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAnC;AAAA,MAAwCM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAA/C;AAAA,MACIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CADX;AAAA,MACgBa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADvB;AAAA,MAC4BO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADnC;AAAA,MACwCQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CAD/C;AAAA,MAEIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFX;AAAA,MAEgBe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAFvB;AAAA,MAE4BgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAFnC;AAAA,MAEyCS,GAAG,GAAGT,CAAC,CAAC,EAAD,CAFhD;AAAA,MAGIiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAHX;AAAA,MAGiBkB,GAAG,GAAGlB,CAAC,CAAC,EAAD,CAHxB;AAAA,MAG8BmB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAHrC;AAAA,MAG2CoB,GAAG,GAAGpB,CAAC,CAAC,EAAD,CAHlD;AAAA,MAKIqB,GAAG,GAAGV,GAAG,GAAGE,GAAN,GAAYT,GAAG,GAAGQ,GAL5B;AAAA,MAMIU,GAAG,GAAGX,GAAG,GAAGJ,GAAN,GAAYF,GAAG,GAAGO,GAN5B;AAAA,MAOIW,GAAG,GAAGZ,GAAG,GAAGH,GAAN,GAAYF,GAAG,GAAGM,GAP5B;AAAA,MAQIY,GAAG,GAAGpB,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGQ,GAR5B;AAAA,MASIY,GAAG,GAAGrB,GAAG,GAAGI,GAAN,GAAYF,GAAG,GAAGO,GAT5B;AAAA,MAUIa,GAAG,GAAGrB,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAV5B;AAAA,MAWIoB,GAAG,GAAGb,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAX5B;AAAA,MAYIW,GAAG,GAAGd,GAAG,GAAGK,GAAN,GAAYH,GAAG,GAAGC,GAZ5B;AAAA,MAaIY,GAAG,GAAGf,GAAG,GAAGM,GAAN,GAAYX,GAAG,GAAGQ,GAb5B;AAAA,MAcIa,GAAG,GAAGf,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAd5B;AAAA,MAeIa,GAAG,GAAGhB,GAAG,GAAGK,GAAN,GAAYX,GAAG,GAAGS,GAf5B;AAAA,MAgBIc,GAAG,GAAGhB,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAhB5B;AAAA,MAkBI;AACAc,EAAAA,GAAG,GAAGZ,GAAG,GAAGW,GAAN,GAAYV,GAAG,GAAGS,GAAlB,GAAwBR,GAAG,GAAGO,GAA9B,GAAoCN,GAAG,GAAGK,GAA1C,GAAgDJ,GAAG,GAAGG,GAAtD,GAA4DF,GAAG,GAAGC,GAnB5E;;AAqBA,MAAI,CAACM,GAAL,EAAU;AACN,WAAO,IAAP;AACH;;AACDA,EAAAA,GAAG,GAAG,MAAMA,GAAZ;AAEAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACe,GAAG,GAAGmB,GAAN,GAAYzB,GAAG,GAAGwB,GAAlB,GAAwBvB,GAAG,GAAGsB,GAA/B,IAAsCG,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACO,GAAG,GAAG0B,GAAN,GAAY3B,GAAG,GAAG4B,GAAlB,GAAwB1B,GAAG,GAAGwB,GAA/B,IAAsCG,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACoB,GAAG,GAAGQ,GAAN,GAAYP,GAAG,GAAGM,GAAlB,GAAwBL,GAAG,GAAGI,GAA/B,IAAsCS,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACkB,GAAG,GAAGS,GAAN,GAAYV,GAAG,GAAGW,GAAlB,GAAwBjB,GAAG,GAAGe,GAA/B,IAAsCS,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACS,GAAG,GAAGsB,GAAN,GAAYjB,GAAG,GAAGoB,GAAlB,GAAwBxB,GAAG,GAAGoB,GAA/B,IAAsCK,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACa,GAAG,GAAGqB,GAAN,GAAY3B,GAAG,GAAGwB,GAAlB,GAAwBvB,GAAG,GAAGsB,GAA/B,IAAsCK,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACqB,GAAG,GAAGI,GAAN,GAAYN,GAAG,GAAGS,GAAlB,GAAwBN,GAAG,GAAGE,GAA/B,IAAsCW,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACgB,GAAG,GAAGY,GAAN,GAAYV,GAAG,GAAGO,GAAlB,GAAwBd,GAAG,GAAGa,GAA/B,IAAsCW,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACc,GAAG,GAAGmB,GAAN,GAAYlB,GAAG,GAAGgB,GAAlB,GAAwBrB,GAAG,GAAGmB,GAA/B,IAAsCM,GAA/C;AACAnC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACM,GAAG,GAAGyB,GAAN,GAAYlB,GAAG,GAAGoB,GAAlB,GAAwBzB,GAAG,GAAGqB,GAA/B,IAAsCM,GAA/C;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACmB,GAAG,GAAGQ,GAAN,GAAYP,GAAG,GAAGK,GAAlB,GAAwBH,GAAG,GAAGC,GAA/B,IAAsCY,GAAhD;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACiB,GAAG,GAAGQ,GAAN,GAAYT,GAAG,GAAGW,GAAlB,GAAwBhB,GAAG,GAAGY,GAA/B,IAAsCY,GAAhD;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACe,GAAG,GAAGe,GAAN,GAAYhB,GAAG,GAAGkB,GAAlB,GAAwBvB,GAAG,GAAGoB,GAA/B,IAAsCM,GAAhD;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACa,GAAG,GAAGmB,GAAN,GAAY1B,GAAG,GAAGwB,GAAlB,GAAwBvB,GAAG,GAAGsB,GAA/B,IAAsCM,GAAhD;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACoB,GAAG,GAAGI,GAAN,GAAYL,GAAG,GAAGO,GAAlB,GAAwBL,GAAG,GAAGE,GAA/B,IAAsCY,GAAhD;AACAnC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACgB,GAAG,GAAGU,GAAN,GAAYT,GAAG,GAAGO,GAAlB,GAAwBN,GAAG,GAAGK,GAA/B,IAAsCY,GAAhD;AAEA,SAAOnC,GAAP;AACH,CA7CD;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACsC,OAAL,GAAe,UAASpC,GAAT,EAAcE,CAAd,EAAiB;AAC5B,MAAIW,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBI,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAvB;AAAA,MAA4BK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAnC;AAAA,MAAwCM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAA/C;AAAA,MACIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CADX;AAAA,MACgBa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADvB;AAAA,MAC4BO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADnC;AAAA,MACwCQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CAD/C;AAAA,MAEIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFX;AAAA,MAEgBe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAFvB;AAAA,MAE4BgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAFnC;AAAA,MAEyCS,GAAG,GAAGT,CAAC,CAAC,EAAD,CAFhD;AAAA,MAGIiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAHX;AAAA,MAGiBkB,GAAG,GAAGlB,CAAC,CAAC,EAAD,CAHxB;AAAA,MAG8BmB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAHrC;AAAA,MAG2CoB,GAAG,GAAGpB,CAAC,CAAC,EAAD,CAHlD;AAKAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAYe,GAAG,IAAIG,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAAH,GAAgCJ,GAAG,IAAIR,GAAG,GAAGa,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAnC,GAAgED,GAAG,IAAIX,GAAG,GAAGE,GAAN,GAAYD,GAAG,GAAGQ,GAAtB,CAA/E;AACAlB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,EAAEM,GAAG,IAAIY,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAAH,GAAgCJ,GAAG,IAAIV,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGU,GAAtB,CAArE,CAAV;AACAlB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAYM,GAAG,IAAIG,GAAG,GAAGa,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAH,GAAgCN,GAAG,IAAIR,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAAtB,CAA/E;AACAT,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,EAAEM,GAAG,IAAIG,GAAG,GAAGE,GAAN,GAAYD,GAAG,GAAGQ,GAAtB,CAAH,GAAgCH,GAAG,IAAIR,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGU,GAAtB,CAAnC,GAAgED,GAAG,IAAIV,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAAtB,CAArE,CAAV;AACAT,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,EAAEc,GAAG,IAAII,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAAH,GAAgCL,GAAG,IAAIP,GAAG,GAAGa,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAnC,GAAgEF,GAAG,IAAIV,GAAG,GAAGE,GAAN,GAAYD,GAAG,GAAGQ,GAAtB,CAArE,CAAV;AACAlB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAYa,GAAG,IAAIK,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAAH,GAAgCL,GAAG,IAAIT,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgEF,GAAG,IAAIZ,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGU,GAAtB,CAA/E;AACAlB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,EAAEa,GAAG,IAAIJ,GAAG,GAAGa,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAH,GAAgCP,GAAG,IAAIP,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgEF,GAAG,IAAIZ,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAAtB,CAArE,CAAV;AACAT,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAYa,GAAG,IAAIJ,GAAG,GAAGE,GAAN,GAAYD,GAAG,GAAGQ,GAAtB,CAAH,GAAgCJ,GAAG,IAAIP,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGU,GAAtB,CAAnC,GAAgEF,GAAG,IAAIT,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAAtB,CAA/E;AACAT,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAYc,GAAG,IAAIG,GAAG,GAAGK,GAAN,GAAYX,GAAG,GAAGS,GAAtB,CAAH,GAAgCJ,GAAG,IAAID,GAAG,GAAGO,GAAN,GAAYZ,GAAG,GAAGU,GAAtB,CAAnC,GAAgED,GAAG,IAAIJ,GAAG,GAAGJ,GAAN,GAAYD,GAAG,GAAGO,GAAtB,CAA/E;AACAjB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,EAAEa,GAAG,IAAII,GAAG,GAAGK,GAAN,GAAYX,GAAG,GAAGS,GAAtB,CAAH,GAAgCJ,GAAG,IAAIV,GAAG,GAAGgB,GAAN,GAAYd,GAAG,GAAGY,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGK,GAAN,GAAYH,GAAG,GAAGS,GAAtB,CAArE,CAAV;AACAjB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAYa,GAAG,IAAIE,GAAG,GAAGO,GAAN,GAAYZ,GAAG,GAAGU,GAAtB,CAAH,GAAgCN,GAAG,IAAIR,GAAG,GAAGgB,GAAN,GAAYd,GAAG,GAAGY,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGI,GAAN,GAAYF,GAAG,GAAGO,GAAtB,CAA/E;AACAf,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEa,GAAG,IAAIE,GAAG,GAAGJ,GAAN,GAAYD,GAAG,GAAGO,GAAtB,CAAH,GAAgCH,GAAG,IAAIR,GAAG,GAAGK,GAAN,GAAYH,GAAG,GAAGS,GAAtB,CAAnC,GAAgED,GAAG,IAAIV,GAAG,GAAGI,GAAN,GAAYF,GAAG,GAAGO,GAAtB,CAArE,CAAV;AACAf,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEc,GAAG,IAAIG,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAAtB,CAAH,GAAgCJ,GAAG,IAAID,GAAG,GAAGM,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAnC,GAAgED,GAAG,IAAIJ,GAAG,GAAGG,GAAN,GAAYT,GAAG,GAAGQ,GAAtB,CAArE,CAAV;AACAjB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAYa,GAAG,IAAII,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAAtB,CAAH,GAAgCJ,GAAG,IAAIV,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGY,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAA/E;AACAjB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEa,GAAG,IAAIE,GAAG,GAAGM,GAAN,GAAYZ,GAAG,GAAGW,GAAtB,CAAH,GAAgCN,GAAG,IAAIR,GAAG,GAAGe,GAAN,GAAYd,GAAG,GAAGa,GAAtB,CAAnC,GAAgED,GAAG,IAAIb,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGQ,GAAtB,CAArE,CAAV;AACAf,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAYa,GAAG,IAAIE,GAAG,GAAGG,GAAN,GAAYT,GAAG,GAAGQ,GAAtB,CAAH,GAAgCH,GAAG,IAAIR,GAAG,GAAGY,GAAN,GAAYX,GAAG,GAAGU,GAAtB,CAAnC,GAAgED,GAAG,IAAIV,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGQ,GAAtB,CAA/E;AACA,SAAOf,GAAP;AACH,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACuC,WAAL,GAAmB,UAAUnC,CAAV,EAAa;AAC5B,MAAIW,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBI,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAvB;AAAA,MAA4BK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAnC;AAAA,MAAwCM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAA/C;AAAA,MACIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CADX;AAAA,MACgBa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADvB;AAAA,MAC4BO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADnC;AAAA,MACwCQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CAD/C;AAAA,MAEIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFX;AAAA,MAEgBe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAFvB;AAAA,MAE4BgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAFnC;AAAA,MAEyCS,GAAG,GAAGT,CAAC,CAAC,EAAD,CAFhD;AAAA,MAGIiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAHX;AAAA,MAGiBkB,GAAG,GAAGlB,CAAC,CAAC,EAAD,CAHxB;AAAA,MAG8BmB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAHrC;AAAA,MAG2CoB,GAAG,GAAGpB,CAAC,CAAC,EAAD,CAHlD;AAAA,MAKIqB,GAAG,GAAGV,GAAG,GAAGE,GAAN,GAAYT,GAAG,GAAGQ,GAL5B;AAAA,MAMIU,GAAG,GAAGX,GAAG,GAAGJ,GAAN,GAAYF,GAAG,GAAGO,GAN5B;AAAA,MAOIW,GAAG,GAAGZ,GAAG,GAAGH,GAAN,GAAYF,GAAG,GAAGM,GAP5B;AAAA,MAQIY,GAAG,GAAGpB,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGQ,GAR5B;AAAA,MASIY,GAAG,GAAGrB,GAAG,GAAGI,GAAN,GAAYF,GAAG,GAAGO,GAT5B;AAAA,MAUIa,GAAG,GAAGrB,GAAG,GAAGG,GAAN,GAAYF,GAAG,GAAGC,GAV5B;AAAA,MAWIoB,GAAG,GAAGb,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAX5B;AAAA,MAYIW,GAAG,GAAGd,GAAG,GAAGK,GAAN,GAAYH,GAAG,GAAGC,GAZ5B;AAAA,MAaIY,GAAG,GAAGf,GAAG,GAAGM,GAAN,GAAYX,GAAG,GAAGQ,GAb5B;AAAA,MAcIa,GAAG,GAAGf,GAAG,GAAGI,GAAN,GAAYH,GAAG,GAAGE,GAd5B;AAAA,MAeIa,GAAG,GAAGhB,GAAG,GAAGK,GAAN,GAAYX,GAAG,GAAGS,GAf5B;AAAA,MAgBIc,GAAG,GAAGhB,GAAG,GAAGI,GAAN,GAAYX,GAAG,GAAGU,GAhB5B,CAD4B,CAmB5B;;AACA,SAAOE,GAAG,GAAGW,GAAN,GAAYV,GAAG,GAAGS,GAAlB,GAAwBR,GAAG,GAAGO,GAA9B,GAAoCN,GAAG,GAAGK,GAA1C,GAAgDJ,GAAG,GAAGG,GAAtD,GAA4DF,GAAG,GAAGC,GAAzE;AACH,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA/B,IAAI,CAACwC,QAAL,GAAgB,UAAUtC,GAAV,EAAeE,CAAf,EAAkBqC,CAAlB,EAAqB;AACjC,MAAI1B,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBI,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAvB;AAAA,MAA4BK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAnC;AAAA,MAAwCM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAA/C;AAAA,MACIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CADX;AAAA,MACgBa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADvB;AAAA,MAC4BO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADnC;AAAA,MACwCQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CAD/C;AAAA,MAEIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFX;AAAA,MAEgBe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAFvB;AAAA,MAE4BgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAFnC;AAAA,MAEyCS,GAAG,GAAGT,CAAC,CAAC,EAAD,CAFhD;AAAA,MAGIiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAHX;AAAA,MAGiBkB,GAAG,GAAGlB,CAAC,CAAC,EAAD,CAHxB;AAAA,MAG8BmB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAHrC;AAAA,MAG2CoB,GAAG,GAAGpB,CAAC,CAAC,EAAD,CAHlD,CADiC,CAMjC;;AACA,MAAIsC,EAAE,GAAID,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBE,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAtB;AAAA,MAA2BG,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAjC;AAAA,MAAsCI,EAAE,GAAGJ,CAAC,CAAC,CAAD,CAA5C;AACAvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAArB,GAA2B2B,EAAE,GAACxB,GAAvC;AACAnB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAArB,GAA2B0B,EAAE,GAACvB,GAAvC;AACApB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAArB,GAA2ByB,EAAE,GAACtB,GAAvC;AACArB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAChC,GAAH,GAASiC,EAAE,GAAC/B,GAAZ,GAAkBgC,EAAE,GAAC/B,GAArB,GAA2BgC,EAAE,GAACrB,GAAvC;AAEAkB,EAAAA,EAAE,GAAGD,CAAC,CAAC,CAAD,CAAN;AAAWE,EAAAA,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAN;AAAWG,EAAAA,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAN;AAAWI,EAAAA,EAAE,GAAGJ,CAAC,CAAC,CAAD,CAAN;AACjCvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAArB,GAA2B2B,EAAE,GAACxB,GAAvC;AACAnB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAArB,GAA2B0B,EAAE,GAACvB,GAAvC;AACApB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAArB,GAA2ByB,EAAE,GAACtB,GAAvC;AACArB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAChC,GAAH,GAASiC,EAAE,GAAC/B,GAAZ,GAAkBgC,EAAE,GAAC/B,GAArB,GAA2BgC,EAAE,GAACrB,GAAvC;AAEAkB,EAAAA,EAAE,GAAGD,CAAC,CAAC,CAAD,CAAN;AAAWE,EAAAA,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAN;AAAWG,EAAAA,EAAE,GAAGH,CAAC,CAAC,EAAD,CAAN;AAAYI,EAAAA,EAAE,GAAGJ,CAAC,CAAC,EAAD,CAAN;AAClCvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAArB,GAA2B2B,EAAE,GAACxB,GAAvC;AACAnB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAArB,GAA2B0B,EAAE,GAACvB,GAAvC;AACApB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAArB,GAA2ByB,EAAE,GAACtB,GAAxC;AACArB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAChC,GAAH,GAASiC,EAAE,GAAC/B,GAAZ,GAAkBgC,EAAE,GAAC/B,GAArB,GAA2BgC,EAAE,GAACrB,GAAxC;AAEAkB,EAAAA,EAAE,GAAGD,CAAC,CAAC,EAAD,CAAN;AAAYE,EAAAA,EAAE,GAAGF,CAAC,CAAC,EAAD,CAAN;AAAYG,EAAAA,EAAE,GAAGH,CAAC,CAAC,EAAD,CAAN;AAAYI,EAAAA,EAAE,GAAGJ,CAAC,CAAC,EAAD,CAAN;AACpCvC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAArB,GAA2B2B,EAAE,GAACxB,GAAxC;AACAnB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAArB,GAA2B0B,EAAE,GAACvB,GAAxC;AACApB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAArB,GAA2ByB,EAAE,GAACtB,GAAxC;AACArB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAChC,GAAH,GAASiC,EAAE,GAAC/B,GAAZ,GAAkBgC,EAAE,GAAC/B,GAArB,GAA2BgC,EAAE,GAACrB,GAAxC;AACA,SAAOtB,GAAP;AACH,CA/BD;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC8C,cAAL,GAAsB,UAAU5C,GAAV,EAAeE,CAAf,EAAkBqC,CAAlB,EAAqB;AACvC,MAAI1B,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBI,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAvB;AAAA,MAA4BK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAnC;AAAA,MACIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CADX;AAAA,MACgBa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADvB;AAAA,MAC4BO,GAAG,GAAGP,CAAC,CAAC,CAAD,CADnC;AAAA,MAEIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFX;AAAA,MAEgBe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAFvB;AAAA,MAE4BgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAFnC;AAAA,MAGIiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAHX;AAAA,MAGiBkB,GAAG,GAAGlB,CAAC,CAAC,EAAD,CAHxB;AAAA,MAG8BmB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAHrC,CADuC,CAMvC;;AACA,MAAIsC,EAAE,GAAID,CAAC,CAAC,CAAD,CAAX;AAAA,MAAgBE,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAtB;AAAA,MAA2BG,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAjC;AACAvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAA9B;AACAhB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAA9B;AACAjB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAA9B,CAVuC,CAWvC;;AAEAsB,EAAAA,EAAE,GAAGD,CAAC,CAAC,CAAD,CAAN;AAAWE,EAAAA,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAN;AAAWG,EAAAA,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAN;AACtBvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAA9B;AACAhB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAA9B;AACAjB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAA9B,CAhBuC,CAiBvC;;AAEAsB,EAAAA,EAAE,GAAGD,CAAC,CAAC,CAAD,CAAN;AAAWE,EAAAA,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAN;AAAWG,EAAAA,EAAE,GAAGH,CAAC,CAAC,EAAD,CAAN;AACtBvC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAA9B;AACAhB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAA9B;AACAjB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAA/B,CAtBuC,CAuBvC;;AAEAsB,EAAAA,EAAE,GAAGD,CAAC,CAAC,EAAD,CAAN;AAAYE,EAAAA,EAAE,GAAGF,CAAC,CAAC,EAAD,CAAN;AAAYG,EAAAA,EAAE,GAAGH,CAAC,CAAC,EAAD,CAAN;AACxBvC,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAC3B,GAAH,GAAS4B,EAAE,GAAC3B,GAAZ,GAAkB4B,EAAE,GAAC1B,GAArB,GAA2BG,GAArC;AACAnB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAAClC,GAAH,GAASmC,EAAE,GAAC1B,GAAZ,GAAkB2B,EAAE,GAACzB,GAArB,GAA2BG,GAArC;AACApB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUwC,EAAE,GAACjC,GAAH,GAASkC,EAAE,GAAChC,GAAZ,GAAkBiC,EAAE,GAACxB,GAArB,GAA2BG,GAArC,CA5BuC,CA6BvC;;AACA,SAAOrB,GAAP;AACH,CA/BD;AAiCA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC+C,GAAL,GAAW/C,IAAI,CAACwC,QAAhB;AAEA;AACA;AACA;AACA;;AACAxC,IAAI,CAACgD,SAAL,GAAiBhD,IAAI,CAAC8C,cAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9C,IAAI,CAACiD,SAAL,GAAiB,UAAU/C,GAAV,EAAeE,CAAf,EAAkB8C,CAAlB,EAAqB;AAClC,MAAIC,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAT;AAAA,MAAcE,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAnB;AAAA,MAAwBG,CAAC,GAAGH,CAAC,CAAC,CAAD,CAA7B;AAAA,MACInC,GADJ;AAAA,MACSP,GADT;AAAA,MACcC,GADd;AAAA,MACmBC,GADnB;AAAA,MAEIM,GAFJ;AAAA,MAESC,GAFT;AAAA,MAEcN,GAFd;AAAA,MAEmBC,GAFnB;AAAA,MAGIM,GAHJ;AAAA,MAGSC,GAHT;AAAA,MAGcC,GAHd;AAAA,MAGmBP,GAHnB;;AAKA,MAAIT,CAAC,KAAKF,GAAV,EAAe;AACXA,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAP,GAAW/C,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAlB,GAAsBhD,CAAC,CAAC,CAAD,CAAD,GAAOiD,CAA7B,GAAiCjD,CAAC,CAAC,EAAD,CAA5C;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAP,GAAW/C,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAlB,GAAsBhD,CAAC,CAAC,CAAD,CAAD,GAAOiD,CAA7B,GAAiCjD,CAAC,CAAC,EAAD,CAA5C;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAP,GAAW/C,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAlB,GAAsBhD,CAAC,CAAC,EAAD,CAAD,GAAQiD,CAA9B,GAAkCjD,CAAC,CAAC,EAAD,CAA7C;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAP,GAAW/C,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAlB,GAAsBhD,CAAC,CAAC,EAAD,CAAD,GAAQiD,CAA9B,GAAkCjD,CAAC,CAAC,EAAD,CAA7C;AACH,GALD,MAKO;AACHW,IAAAA,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAP;AAAYI,IAAAA,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAP;AAAYK,IAAAA,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAP;AAAYM,IAAAA,GAAG,GAAGN,CAAC,CAAC,CAAD,CAAP;AACpCY,IAAAA,GAAG,GAAGZ,CAAC,CAAC,CAAD,CAAP;AAAYa,IAAAA,GAAG,GAAGb,CAAC,CAAC,CAAD,CAAP;AAAYO,IAAAA,GAAG,GAAGP,CAAC,CAAC,CAAD,CAAP;AAAYQ,IAAAA,GAAG,GAAGR,CAAC,CAAC,CAAD,CAAP;AACpCc,IAAAA,GAAG,GAAGd,CAAC,CAAC,CAAD,CAAP;AAAYe,IAAAA,GAAG,GAAGf,CAAC,CAAC,CAAD,CAAP;AAAYgB,IAAAA,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAAP;AAAaS,IAAAA,GAAG,GAAGT,CAAC,CAAC,EAAD,CAAP;AAErCF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAT;AAAcb,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAT;AAAcN,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAT;AAAcP,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASQ,GAAT;AAC1CR,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASc,GAAT;AAAcd,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASe,GAAT;AAAcf,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASS,GAAT;AAAcT,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASU,GAAT;AAC1CV,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASgB,GAAT;AAAchB,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASiB,GAAT;AAAcjB,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUkB,GAAV;AAAelB,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUW,GAAV;AAE3CX,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUa,GAAG,GAAGoC,CAAN,GAAUnC,GAAG,GAAGoC,CAAhB,GAAoBlC,GAAG,GAAGmC,CAA1B,GAA8BjD,CAAC,CAAC,EAAD,CAAzC;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUM,GAAG,GAAG2C,CAAN,GAAUlC,GAAG,GAAGmC,CAAhB,GAAoBjC,GAAG,GAAGkC,CAA1B,GAA8BjD,CAAC,CAAC,EAAD,CAAzC;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUO,GAAG,GAAG0C,CAAN,GAAUxC,GAAG,GAAGyC,CAAhB,GAAoBhC,GAAG,GAAGiC,CAA1B,GAA8BjD,CAAC,CAAC,EAAD,CAAzC;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUQ,GAAG,GAAGyC,CAAN,GAAUvC,GAAG,GAAGwC,CAAhB,GAAoBvC,GAAG,GAAGwC,CAA1B,GAA8BjD,CAAC,CAAC,EAAD,CAAzC;AACH;;AAED,SAAOF,GAAP;AACH,CA3BD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACsD,KAAL,GAAa,UAASpD,GAAT,EAAcE,CAAd,EAAiB8C,CAAjB,EAAoB;AAC7B,MAAIC,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAT;AAAA,MAAcE,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAnB;AAAA,MAAwBG,CAAC,GAAGH,CAAC,CAAC,CAAD,CAA7B;AAEAhD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAhB;AACAjD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAhB;AACAjD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAhB;AACAjD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAO+C,CAAhB;AACAjD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAhB;AACAlD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAhB;AACAlD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAhB;AACAlD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOgD,CAAhB;AACAlD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOiD,CAAhB;AACAnD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOiD,CAAhB;AACAnD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAD,GAAQiD,CAAlB;AACAnD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAD,GAAQiD,CAAlB;AACAnD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACA,SAAOF,GAAP;AACH,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACuD,MAAL,GAAc,UAAUrD,GAAV,EAAeE,CAAf,EAAkBoD,GAAlB,EAAuBC,IAAvB,EAA6B;AACvC,MAAIN,CAAC,GAAGM,IAAI,CAAC,CAAD,CAAZ;AAAA,MAAiBL,CAAC,GAAGK,IAAI,CAAC,CAAD,CAAzB;AAAA,MAA8BJ,CAAC,GAAGI,IAAI,CAAC,CAAD,CAAtC;AAAA,MACIC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUT,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAZ,GAAgBC,CAAC,GAAGA,CAA9B,CADV;AAAA,MAEIQ,CAFJ;AAAA,MAEOC,CAFP;AAAA,MAEUC,CAFV;AAAA,MAGIhD,GAHJ;AAAA,MAGSP,GAHT;AAAA,MAGcC,GAHd;AAAA,MAGmBC,GAHnB;AAAA,MAIIM,GAJJ;AAAA,MAISC,GAJT;AAAA,MAIcN,GAJd;AAAA,MAImBC,GAJnB;AAAA,MAKIM,GALJ;AAAA,MAKSC,GALT;AAAA,MAKcC,GALd;AAAA,MAKmBP,GALnB;AAAA,MAMIY,GANJ;AAAA,MAMSC,GANT;AAAA,MAMcC,GANd;AAAA,MAOIQ,GAPJ;AAAA,MAOSC,GAPT;AAAA,MAOc4B,GAPd;AAAA,MAQIC,GARJ;AAAA,MAQSC,GART;AAAA,MAQcC,GARd;;AAUA,MAAIR,IAAI,CAACS,GAAL,CAASV,GAAT,IAAgB5D,aAApB,EAAmC;AAAE,WAAO,IAAP;AAAc;;AAEnD4D,EAAAA,GAAG,GAAG,IAAIA,GAAV;AACAP,EAAAA,CAAC,IAAIO,GAAL;AACAN,EAAAA,CAAC,IAAIM,GAAL;AACAL,EAAAA,CAAC,IAAIK,GAAL;AAEAG,EAAAA,CAAC,GAAGF,IAAI,CAACU,GAAL,CAASb,GAAT,CAAJ;AACAM,EAAAA,CAAC,GAAGH,IAAI,CAACW,GAAL,CAASd,GAAT,CAAJ;AACAO,EAAAA,CAAC,GAAG,IAAID,CAAR;AAEA/C,EAAAA,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAP;AAAYI,EAAAA,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAP;AAAYK,EAAAA,GAAG,GAAGL,CAAC,CAAC,CAAD,CAAP;AAAYM,EAAAA,GAAG,GAAGN,CAAC,CAAC,CAAD,CAAP;AACpCY,EAAAA,GAAG,GAAGZ,CAAC,CAAC,CAAD,CAAP;AAAYa,EAAAA,GAAG,GAAGb,CAAC,CAAC,CAAD,CAAP;AAAYO,EAAAA,GAAG,GAAGP,CAAC,CAAC,CAAD,CAAP;AAAYQ,EAAAA,GAAG,GAAGR,CAAC,CAAC,CAAD,CAAP;AACpCc,EAAAA,GAAG,GAAGd,CAAC,CAAC,CAAD,CAAP;AAAYe,EAAAA,GAAG,GAAGf,CAAC,CAAC,CAAD,CAAP;AAAYgB,EAAAA,GAAG,GAAGhB,CAAC,CAAC,EAAD,CAAP;AAAaS,EAAAA,GAAG,GAAGT,CAAC,CAAC,EAAD,CAAP,CAxBE,CA0BvC;;AACAqB,EAAAA,GAAG,GAAG0B,CAAC,GAAGA,CAAJ,GAAQY,CAAR,GAAYD,CAAlB;AAAqBpC,EAAAA,GAAG,GAAG0B,CAAC,GAAGD,CAAJ,GAAQY,CAAR,GAAYV,CAAC,GAAGQ,CAAtB;AAAyBlC,EAAAA,GAAG,GAAG0B,CAAC,GAAGF,CAAJ,GAAQY,CAAR,GAAYX,CAAC,GAAGS,CAAtB;AAC9C1B,EAAAA,GAAG,GAAGgB,CAAC,GAAGC,CAAJ,GAAQW,CAAR,GAAYV,CAAC,GAAGQ,CAAtB;AAAyBzB,EAAAA,GAAG,GAAGgB,CAAC,GAAGA,CAAJ,GAAQW,CAAR,GAAYD,CAAlB;AAAqBE,EAAAA,GAAG,GAAGX,CAAC,GAAGD,CAAJ,GAAQW,CAAR,GAAYZ,CAAC,GAAGU,CAAtB;AAC9CI,EAAAA,GAAG,GAAGd,CAAC,GAAGE,CAAJ,GAAQU,CAAR,GAAYX,CAAC,GAAGS,CAAtB;AAAyBK,EAAAA,GAAG,GAAGd,CAAC,GAAGC,CAAJ,GAAQU,CAAR,GAAYZ,CAAC,GAAGU,CAAtB;AAAyBM,EAAAA,GAAG,GAAGd,CAAC,GAAGA,CAAJ,GAAQU,CAAR,GAAYD,CAAlB,CA7BX,CA+BvC;;AACA5D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAGU,GAAN,GAAYT,GAAG,GAAGU,GAAlB,GAAwBR,GAAG,GAAGS,GAAvC;AACAzB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAGiB,GAAN,GAAYR,GAAG,GAAGS,GAAlB,GAAwBP,GAAG,GAAGQ,GAAvC;AACAzB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAG,GAAGgB,GAAN,GAAYd,GAAG,GAAGe,GAAlB,GAAwBN,GAAG,GAAGO,GAAvC;AACAzB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASQ,GAAG,GAAGe,GAAN,GAAYb,GAAG,GAAGc,GAAlB,GAAwBb,GAAG,GAAGc,GAAvC;AACAzB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAGoB,GAAN,GAAYnB,GAAG,GAAGoB,GAAlB,GAAwBlB,GAAG,GAAG8C,GAAvC;AACA9D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAG2B,GAAN,GAAYlB,GAAG,GAAGmB,GAAlB,GAAwBjB,GAAG,GAAG6C,GAAvC;AACA9D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAG,GAAG0B,GAAN,GAAYxB,GAAG,GAAGyB,GAAlB,GAAwBhB,GAAG,GAAG4C,GAAvC;AACA9D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASQ,GAAG,GAAGyB,GAAN,GAAYvB,GAAG,GAAGwB,GAAlB,GAAwBvB,GAAG,GAAGmD,GAAvC;AACA9D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAGkD,GAAN,GAAYjD,GAAG,GAAGkD,GAAlB,GAAwBhD,GAAG,GAAGiD,GAAvC;AACAjE,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAGyD,GAAN,GAAYhD,GAAG,GAAGiD,GAAlB,GAAwB/C,GAAG,GAAGgD,GAAvC;AACAjE,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUO,GAAG,GAAGwD,GAAN,GAAYtD,GAAG,GAAGuD,GAAlB,GAAwB9C,GAAG,GAAG+C,GAAxC;AACAjE,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUQ,GAAG,GAAGuD,GAAN,GAAYrD,GAAG,GAAGsD,GAAlB,GAAwBrD,GAAG,GAAGsD,GAAxC;;AAEA,MAAI/D,CAAC,KAAKF,GAAV,EAAe;AAAE;AACbA,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACH;;AACD,SAAOF,GAAP;AACH,CApDD;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACuE,OAAL,GAAe,UAAUrE,GAAV,EAAeE,CAAf,EAAkBoD,GAAlB,EAAuB;AAClC,MAAIK,CAAC,GAAGF,IAAI,CAACU,GAAL,CAASb,GAAT,CAAR;AAAA,MACIM,CAAC,GAAGH,IAAI,CAACW,GAAL,CAASd,GAAT,CADR;AAAA,MAEIxC,GAAG,GAAGZ,CAAC,CAAC,CAAD,CAFX;AAAA,MAGIa,GAAG,GAAGb,CAAC,CAAC,CAAD,CAHX;AAAA,MAIIO,GAAG,GAAGP,CAAC,CAAC,CAAD,CAJX;AAAA,MAKIQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CALX;AAAA,MAMIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CANX;AAAA,MAOIe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAPX;AAAA,MAQIgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CARX;AAAA,MASIS,GAAG,GAAGT,CAAC,CAAC,EAAD,CATX;;AAWA,MAAIA,CAAC,KAAKF,GAAV,EAAe;AAAE;AACbA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACH,GArBiC,CAuBlC;;;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASc,GAAG,GAAG8C,CAAN,GAAU5C,GAAG,GAAG2C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASe,GAAG,GAAG6C,CAAN,GAAU3C,GAAG,GAAG0C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASS,GAAG,GAAGmD,CAAN,GAAU1C,GAAG,GAAGyC,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASU,GAAG,GAAGkD,CAAN,GAAUjD,GAAG,GAAGgD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASgB,GAAG,GAAG4C,CAAN,GAAU9C,GAAG,GAAG6C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASiB,GAAG,GAAG2C,CAAN,GAAU7C,GAAG,GAAG4C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUkB,GAAG,GAAG0C,CAAN,GAAUnD,GAAG,GAAGkD,CAA1B;AACA3D,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUW,GAAG,GAAGiD,CAAN,GAAUlD,GAAG,GAAGiD,CAA1B;AACA,SAAO3D,GAAP;AACH,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACwE,OAAL,GAAe,UAAUtE,GAAV,EAAeE,CAAf,EAAkBoD,GAAlB,EAAuB;AAClC,MAAIK,CAAC,GAAGF,IAAI,CAACU,GAAL,CAASb,GAAT,CAAR;AAAA,MACIM,CAAC,GAAGH,IAAI,CAACW,GAAL,CAASd,GAAT,CADR;AAAA,MAEIzC,GAAG,GAAGX,CAAC,CAAC,CAAD,CAFX;AAAA,MAGII,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAHX;AAAA,MAIIK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAJX;AAAA,MAKIM,GAAG,GAAGN,CAAC,CAAC,CAAD,CALX;AAAA,MAMIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CANX;AAAA,MAOIe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAPX;AAAA,MAQIgB,GAAG,GAAGhB,CAAC,CAAC,EAAD,CARX;AAAA,MASIS,GAAG,GAAGT,CAAC,CAAC,EAAD,CATX;;AAWA,MAAIA,CAAC,KAAKF,GAAV,EAAe;AAAE;AACbA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACH,GArBiC,CAuBlC;;;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAG+C,CAAN,GAAU5C,GAAG,GAAG2C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAGsD,CAAN,GAAU3C,GAAG,GAAG0C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAG,GAAGqD,CAAN,GAAU1C,GAAG,GAAGyC,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASQ,GAAG,GAAGoD,CAAN,GAAUjD,GAAG,GAAGgD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAG8C,CAAN,GAAU3C,GAAG,GAAG4C,CAAzB;AACA5D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAGqD,CAAN,GAAU1C,GAAG,GAAG2C,CAAzB;AACA5D,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUO,GAAG,GAAGoD,CAAN,GAAUzC,GAAG,GAAG0C,CAA1B;AACA5D,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUQ,GAAG,GAAGmD,CAAN,GAAUhD,GAAG,GAAGiD,CAA1B;AACA,SAAO5D,GAAP;AACH,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACyE,OAAL,GAAe,UAAUvE,GAAV,EAAeE,CAAf,EAAkBoD,GAAlB,EAAuB;AAClC,MAAIK,CAAC,GAAGF,IAAI,CAACU,GAAL,CAASb,GAAT,CAAR;AAAA,MACIM,CAAC,GAAGH,IAAI,CAACW,GAAL,CAASd,GAAT,CADR;AAAA,MAEIzC,GAAG,GAAGX,CAAC,CAAC,CAAD,CAFX;AAAA,MAGII,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAHX;AAAA,MAIIK,GAAG,GAAGL,CAAC,CAAC,CAAD,CAJX;AAAA,MAKIM,GAAG,GAAGN,CAAC,CAAC,CAAD,CALX;AAAA,MAMIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CANX;AAAA,MAOIa,GAAG,GAAGb,CAAC,CAAC,CAAD,CAPX;AAAA,MAQIO,GAAG,GAAGP,CAAC,CAAC,CAAD,CARX;AAAA,MASIQ,GAAG,GAAGR,CAAC,CAAC,CAAD,CATX;;AAWA,MAAIA,CAAC,KAAKF,GAAV,EAAe;AAAE;AACbA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAUE,CAAC,CAAC,CAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACAF,IAAAA,GAAG,CAAC,EAAD,CAAH,GAAUE,CAAC,CAAC,EAAD,CAAX;AACH,GArBiC,CAuBlC;;;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASa,GAAG,GAAG+C,CAAN,GAAU9C,GAAG,GAAG6C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,GAAG,GAAGsD,CAAN,GAAU7C,GAAG,GAAG4C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,GAAG,GAAGqD,CAAN,GAAUnD,GAAG,GAAGkD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASQ,GAAG,GAAGoD,CAAN,GAAUlD,GAAG,GAAGiD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASc,GAAG,GAAG8C,CAAN,GAAU/C,GAAG,GAAG8C,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASe,GAAG,GAAG6C,CAAN,GAAUtD,GAAG,GAAGqD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASS,GAAG,GAAGmD,CAAN,GAAUrD,GAAG,GAAGoD,CAAzB;AACA3D,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASU,GAAG,GAAGkD,CAAN,GAAUpD,GAAG,GAAGmD,CAAzB;AACA,SAAO3D,GAAP;AACH,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC0E,uBAAL,GAA+B,UAAUxE,GAAV,EAAeyE,CAAf,EAAkBzB,CAAlB,EAAqB;AAChD;AACA,MAAIC,CAAC,GAAGwB,CAAC,CAAC,CAAD,CAAT;AAAA,MAAcvB,CAAC,GAAGuB,CAAC,CAAC,CAAD,CAAnB;AAAA,MAAwBtB,CAAC,GAAGsB,CAAC,CAAC,CAAD,CAA7B;AAAA,MAAkCC,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAvC;AAAA,MACIE,EAAE,GAAG1B,CAAC,GAAGA,CADb;AAAA,MAEI2B,EAAE,GAAG1B,CAAC,GAAGA,CAFb;AAAA,MAGI2B,EAAE,GAAG1B,CAAC,GAAGA,CAHb;AAAA,MAKI2B,EAAE,GAAG7B,CAAC,GAAG0B,EALb;AAAA,MAMII,EAAE,GAAG9B,CAAC,GAAG2B,EANb;AAAA,MAOII,EAAE,GAAG/B,CAAC,GAAG4B,EAPb;AAAA,MAQII,EAAE,GAAG/B,CAAC,GAAG0B,EARb;AAAA,MASIM,EAAE,GAAGhC,CAAC,GAAG2B,EATb;AAAA,MAUIM,EAAE,GAAGhC,CAAC,GAAG0B,EAVb;AAAA,MAWIO,EAAE,GAAGV,CAAC,GAAGC,EAXb;AAAA,MAYIU,EAAE,GAAGX,CAAC,GAAGE,EAZb;AAAA,MAaIU,EAAE,GAAGZ,CAAC,GAAGG,EAbb;AAeA7E,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKiF,EAAE,GAAGE,EAAV,CAAT;AACAnF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS+E,EAAE,GAAGO,EAAd;AACAtF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASgF,EAAE,GAAGK,EAAd;AACArF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS+E,EAAE,GAAGO,EAAd;AACAtF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK8E,EAAE,GAAGK,EAAV,CAAT;AACAnF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASkF,EAAE,GAAGE,EAAd;AACApF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASgF,EAAE,GAAGK,EAAd;AACArF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASkF,EAAE,GAAGE,EAAd;AACApF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,KAAK8E,EAAE,GAAGG,EAAV,CAAV;AACAjF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUgD,CAAC,CAAC,CAAD,CAAX;AACAhD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUgD,CAAC,CAAC,CAAD,CAAX;AACAhD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUgD,CAAC,CAAC,CAAD,CAAX;AACAhD,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AAEA,SAAOA,GAAP;AACH,CAnCD;;AAqCAF,IAAI,CAACyF,QAAL,GAAgB,UAAUvF,GAAV,EAAeyE,CAAf,EAAkB;AAC9B,MAAIxB,CAAC,GAAGwB,CAAC,CAAC,CAAD,CAAT;AAAA,MAAcvB,CAAC,GAAGuB,CAAC,CAAC,CAAD,CAAnB;AAAA,MAAwBtB,CAAC,GAAGsB,CAAC,CAAC,CAAD,CAA7B;AAAA,MAAkCC,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAvC;AAAA,MACIE,EAAE,GAAG1B,CAAC,GAAGA,CADb;AAAA,MAEI2B,EAAE,GAAG1B,CAAC,GAAGA,CAFb;AAAA,MAGI2B,EAAE,GAAG1B,CAAC,GAAGA,CAHb;AAAA,MAKI2B,EAAE,GAAG7B,CAAC,GAAG0B,EALb;AAAA,MAMIa,EAAE,GAAGtC,CAAC,GAAGyB,EANb;AAAA,MAOIM,EAAE,GAAG/B,CAAC,GAAG0B,EAPb;AAAA,MAQIa,EAAE,GAAGtC,CAAC,GAAGwB,EARb;AAAA,MASIe,EAAE,GAAGvC,CAAC,GAAGyB,EATb;AAAA,MAUIO,EAAE,GAAGhC,CAAC,GAAG0B,EAVb;AAAA,MAWIO,EAAE,GAAGV,CAAC,GAAGC,EAXb;AAAA,MAYIU,EAAE,GAAGX,CAAC,GAAGE,EAZb;AAAA,MAaIU,EAAE,GAAGZ,CAAC,GAAGG,EAbb;AAeA7E,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAIiF,EAAJ,GAASE,EAAlB;AACAnF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwF,EAAE,GAAGF,EAAd;AACAtF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASyF,EAAE,GAAGJ,EAAd;AACArF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AAEAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwF,EAAE,GAAGF,EAAd;AACAtF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAI8E,EAAJ,GAASK,EAAlB;AACAnF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS0F,EAAE,GAAGN,EAAd;AACApF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AAEAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASyF,EAAE,GAAGJ,EAAd;AACArF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS0F,EAAE,GAAGN,EAAd;AACApF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,IAAI8E,EAAJ,GAASG,EAAnB;AACAjF,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AAEAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AAEA,SAAOA,GAAP;AACH,CArCD;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC6F,OAAL,GAAe,UAAU3F,GAAV,EAAe4F,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,GAApC,EAAyCC,IAAzC,EAA+CC,GAA/C,EAAoD;AAC/D,MAAIC,EAAE,GAAG,KAAKL,KAAK,GAAGD,IAAb,CAAT;AAAA,MACIO,EAAE,GAAG,KAAKJ,GAAG,GAAGD,MAAX,CADT;AAAA,MAEIM,EAAE,GAAG,KAAKJ,IAAI,GAAGC,GAAZ,CAFT;AAGAjG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAUgG,IAAI,GAAG,CAAR,GAAaE,EAAtB;AACAlG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAUgG,IAAI,GAAG,CAAR,GAAaG,EAAtB;AACAnG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC6F,KAAK,GAAGD,IAAT,IAAiBM,EAA1B;AACAlG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC+F,GAAG,GAAGD,MAAP,IAAiBK,EAA1B;AACAnG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACiG,GAAG,GAAGD,IAAP,IAAeI,EAAzB;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC,CAAX;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAWiG,GAAG,GAAGD,IAAN,GAAa,CAAd,GAAmBI,EAA7B;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACA,SAAOA,GAAP;AACH,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACuG,WAAL,GAAmB,UAAUrG,GAAV,EAAesG,IAAf,EAAqBC,MAArB,EAA6BP,IAA7B,EAAmCC,GAAnC,EAAwC;AACvD,MAAIO,CAAC,GAAG,MAAM/C,IAAI,CAACgD,GAAL,CAASH,IAAI,GAAG,CAAhB,CAAd;AAAA,MACIF,EAAE,GAAG,KAAKJ,IAAI,GAAGC,GAAZ,CADT;AAEAjG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwG,CAAC,GAAGD,MAAb;AACAvG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASwG,CAAT;AACAxG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACiG,GAAG,GAAGD,IAAP,IAAeI,EAAzB;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC,CAAX;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAW,IAAIiG,GAAJ,GAAUD,IAAX,GAAmBI,EAA7B;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACA,SAAOA,GAAP;AACH,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC4G,KAAL,GAAa,UAAU1G,GAAV,EAAe4F,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,GAApC,EAAyCC,IAAzC,EAA+CC,GAA/C,EAAoD;AAC7D,MAAIU,EAAE,GAAG,KAAKf,IAAI,GAAGC,KAAZ,CAAT;AAAA,MACIe,EAAE,GAAG,KAAKd,MAAM,GAAGC,GAAd,CADT;AAAA,MAEIK,EAAE,GAAG,KAAKJ,IAAI,GAAGC,GAAZ,CAFT;AAGAjG,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAD,GAAK2G,EAAd;AACA3G,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAD,GAAK4G,EAAd;AACA5G,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,IAAIoG,EAAd;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC4F,IAAI,GAAGC,KAAR,IAAiBc,EAA3B;AACA3G,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC+F,GAAG,GAAGD,MAAP,IAAiBc,EAA3B;AACA5G,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACiG,GAAG,GAAGD,IAAP,IAAeI,EAAzB;AACApG,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACA,SAAOA,GAAP;AACH,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAAC+G,MAAL,GAAc,UAAU7G,GAAV,EAAe8G,GAAf,EAAoBC,MAApB,EAA4BC,EAA5B,EAAgC;AAC1C,MAAIC,EAAJ;AAAA,MAAQC,EAAR;AAAA,MAAYvC,EAAZ;AAAA,MAAgBwC,EAAhB;AAAA,MAAoBC,EAApB;AAAA,MAAwBxC,EAAxB;AAAA,MAA4ByC,EAA5B;AAAA,MAAgCC,EAAhC;AAAA,MAAoCzC,EAApC;AAAA,MAAwCrB,GAAxC;AAAA,MACI+D,IAAI,GAAGT,GAAG,CAAC,CAAD,CADd;AAAA,MAEIU,IAAI,GAAGV,GAAG,CAAC,CAAD,CAFd;AAAA,MAGIW,IAAI,GAAGX,GAAG,CAAC,CAAD,CAHd;AAAA,MAIIY,GAAG,GAAGV,EAAE,CAAC,CAAD,CAJZ;AAAA,MAKIW,GAAG,GAAGX,EAAE,CAAC,CAAD,CALZ;AAAA,MAMIY,GAAG,GAAGZ,EAAE,CAAC,CAAD,CANZ;AAAA,MAOIa,OAAO,GAAGd,MAAM,CAAC,CAAD,CAPpB;AAAA,MAQIe,OAAO,GAAGf,MAAM,CAAC,CAAD,CARpB;AAAA,MASIgB,OAAO,GAAGhB,MAAM,CAAC,CAAD,CATpB;;AAWA,MAAItD,IAAI,CAACS,GAAL,CAASqD,IAAI,GAAGM,OAAhB,IAA2BjI,aAA3B,IACA6D,IAAI,CAACS,GAAL,CAASsD,IAAI,GAAGM,OAAhB,IAA2BlI,aAD3B,IAEA6D,IAAI,CAACS,GAAL,CAASuD,IAAI,GAAGM,OAAhB,IAA2BnI,aAF/B,EAE8C;AAC1C,WAAOE,IAAI,CAACM,QAAL,CAAcJ,GAAd,CAAP;AACH;;AAEDqH,EAAAA,EAAE,GAAGE,IAAI,GAAGM,OAAZ;AACAP,EAAAA,EAAE,GAAGE,IAAI,GAAGM,OAAZ;AACAjD,EAAAA,EAAE,GAAG4C,IAAI,GAAGM,OAAZ;AAEAvE,EAAAA,GAAG,GAAG,IAAIC,IAAI,CAACC,IAAL,CAAU2D,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAf,GAAoBzC,EAAE,GAAGA,EAAnC,CAAV;AACAwC,EAAAA,EAAE,IAAI7D,GAAN;AACA8D,EAAAA,EAAE,IAAI9D,GAAN;AACAqB,EAAAA,EAAE,IAAIrB,GAAN;AAEAyD,EAAAA,EAAE,GAAGU,GAAG,GAAG9C,EAAN,GAAW+C,GAAG,GAAGN,EAAtB;AACAJ,EAAAA,EAAE,GAAGU,GAAG,GAAGP,EAAN,GAAWK,GAAG,GAAG7C,EAAtB;AACAF,EAAAA,EAAE,GAAG+C,GAAG,GAAGJ,EAAN,GAAWK,GAAG,GAAGN,EAAtB;AACA7D,EAAAA,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUuD,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAf,GAAoBvC,EAAE,GAAGA,EAAnC,CAAN;;AACA,MAAI,CAACnB,GAAL,EAAU;AACNyD,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAvC,IAAAA,EAAE,GAAG,CAAL;AACH,GAJD,MAIO;AACHnB,IAAAA,GAAG,GAAG,IAAIA,GAAV;AACAyD,IAAAA,EAAE,IAAIzD,GAAN;AACA0D,IAAAA,EAAE,IAAI1D,GAAN;AACAmB,IAAAA,EAAE,IAAInB,GAAN;AACH;;AAED2D,EAAAA,EAAE,GAAGG,EAAE,GAAG3C,EAAL,GAAUE,EAAE,GAAGqC,EAApB;AACAE,EAAAA,EAAE,GAAGvC,EAAE,GAAGoC,EAAL,GAAUI,EAAE,GAAG1C,EAApB;AACAC,EAAAA,EAAE,GAAGyC,EAAE,GAAGH,EAAL,GAAUI,EAAE,GAAGL,EAApB;AAEAzD,EAAAA,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUyD,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAf,GAAoBxC,EAAE,GAAGA,EAAnC,CAAN;;AACA,MAAI,CAACpB,GAAL,EAAU;AACN2D,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAxC,IAAAA,EAAE,GAAG,CAAL;AACH,GAJD,MAIO;AACHpB,IAAAA,GAAG,GAAG,IAAIA,GAAV;AACA2D,IAAAA,EAAE,IAAI3D,GAAN;AACA4D,IAAAA,EAAE,IAAI5D,GAAN;AACAoB,IAAAA,EAAE,IAAIpB,GAAN;AACH;;AAEDxD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASiH,EAAT;AACAjH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASmH,EAAT;AACAnH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASqH,EAAT;AACArH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASkH,EAAT;AACAlH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASoH,EAAT;AACApH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASsH,EAAT;AACAtH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS2E,EAAT;AACA3E,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS4E,EAAT;AACA5E,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU6E,EAAV;AACA7E,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEiH,EAAE,GAAGM,IAAL,GAAYL,EAAE,GAAGM,IAAjB,GAAwB7C,EAAE,GAAG8C,IAA/B,CAAV;AACAzH,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEmH,EAAE,GAAGI,IAAL,GAAYH,EAAE,GAAGI,IAAjB,GAAwB5C,EAAE,GAAG6C,IAA/B,CAAV;AACAzH,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,EAAEqH,EAAE,GAAGE,IAAL,GAAYD,EAAE,GAAGE,IAAjB,GAAwB3C,EAAE,GAAG4C,IAA/B,CAAV;AACAzH,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AAEA,SAAOA,GAAP;AACH,CA5ED;AA8EA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACkI,IAAL,GAAY,UAAU9H,CAAV,EAAa;AACrB,SAAOuD,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,IAAoBuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAApB,GAAwCuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAAxC,GAA4DuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAA5D,GAAgFuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAAhF,GAAoGuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAApG,GAAwHuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAAxH,GAA4IuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAA5I,GAAgKuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAAhK,GAAoLuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,CAAD,CAAV,EAAe,CAAf,CAApL,GAAwMuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAAxM,GAA6NuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAA7N,GAAkPuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAAlP,GAAuQuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAAvQ,GAA4RuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAA5R,GAAiTuD,IAAI,CAACwE,GAAL,CAAS/H,CAAC,CAAC,EAAD,CAAV,EAAgB,CAAhB,CAA3T,CAAP;AACH,CAFD;;AAIA,eAAeJ,IAAf","sourcesContent":["\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\nimport {GLMAT_EPSILON, GLMAT_ARRAY_TYPE } from './common';\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two affine mat4's\n * Add by https://github.com/pissang\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiplyAffine = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[4], a11 = a[5], a12 = a[6],\n        a20 = a[8], a21 = a[9], a22 = a[10],\n        a30 = a[12], a31 = a[13], a32 = a[14];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2];\n    out[0] = b0*a00 + b1*a10 + b2*a20;\n    out[1] = b0*a01 + b1*a11 + b2*a21;\n    out[2] = b0*a02 + b1*a12 + b2*a22;\n    // out[3] = 0;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6];\n    out[4] = b0*a00 + b1*a10 + b2*a20;\n    out[5] = b0*a01 + b1*a11 + b2*a21;\n    out[6] = b0*a02 + b1*a12 + b2*a22;\n    // out[7] = 0;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10];\n    out[8] = b0*a00 + b1*a10 + b2*a20;\n    out[9] = b0*a01 + b1*a11 + b2*a21;\n    out[10] = b0*a02 + b1*a12 + b2*a22;\n    // out[11] = 0;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + a32;\n    // out[15] = 1;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Alias for {@link mat4.multiplyAffine}\n * @function\n */\nmat4.mulAffine = mat4.multiplyAffine;\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < GLMAT_EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&\n        Math.abs(eyey - centery) < GLMAT_EPSILON &&\n        Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\nexport default mat4;"]},"metadata":{},"sourceType":"module"}