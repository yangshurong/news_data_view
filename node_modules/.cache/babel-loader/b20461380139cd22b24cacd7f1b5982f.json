{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport Renderable from './Renderable';\nimport glenum from './core/glenum';\n/**\n * @constructor clay.Mesh\n * @extends clay.Renderable\n */\n\nvar Mesh = Renderable.extend(\n/** @lends clay.Mesh# */\n{\n  /**\n   * Used when it is a skinned mesh\n   * @type {clay.Skeleton}\n   */\n  skeleton: null,\n\n  /**\n   * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance\n   * @type {number[]}\n   */\n  joints: null\n}, function () {\n  if (!this.joints) {\n    this.joints = [];\n  }\n}, {\n  /**\n   * Offset matrix used for multiple skinned mesh clone sharing one skeleton\n   * @type {clay.Matrix4}\n   */\n  offsetMatrix: null,\n  isInstancedMesh: function isInstancedMesh() {\n    return false;\n  },\n  isSkinnedMesh: function isSkinnedMesh() {\n    return !!(this.skeleton && this.joints && this.joints.length > 0);\n  },\n  clone: function clone() {\n    var mesh = Renderable.prototype.clone.call(this);\n    mesh.skeleton = this.skeleton;\n\n    if (this.joints) {\n      mesh.joints = this.joints.slice();\n    }\n\n    return mesh;\n  }\n}); // Enums\n\nMesh.POINTS = glenum.POINTS;\nMesh.LINES = glenum.LINES;\nMesh.LINE_LOOP = glenum.LINE_LOOP;\nMesh.LINE_STRIP = glenum.LINE_STRIP;\nMesh.TRIANGLES = glenum.TRIANGLES;\nMesh.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;\nMesh.TRIANGLE_FAN = glenum.TRIANGLE_FAN;\nMesh.BACK = glenum.BACK;\nMesh.FRONT = glenum.FRONT;\nMesh.FRONT_AND_BACK = glenum.FRONT_AND_BACK;\nMesh.CW = glenum.CW;\nMesh.CCW = glenum.CCW;\nexport default Mesh;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/Mesh.js"],"names":["Renderable","glenum","Mesh","extend","skeleton","joints","offsetMatrix","isInstancedMesh","isSkinnedMesh","length","clone","mesh","prototype","call","slice","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","BACK","FRONT","FRONT_AND_BACK","CW","CCW"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAGF,UAAU,CAACG,MAAX;AAAkB;AAAyB;AAClD;AACJ;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE,IALwC;;AAMlD;AACJ;AACA;AACA;AACIC,EAAAA,MAAM,EAAE;AAV0C,CAA3C,EAYR,YAAY;AACX,MAAI,CAAC,KAAKA,MAAV,EAAkB;AACd,SAAKA,MAAL,GAAc,EAAd;AACH;AACJ,CAhBU,EAgBR;AAEC;AACJ;AACA;AACA;AACIC,EAAAA,YAAY,EAAE,IANf;AAQCC,EAAAA,eAAe,EAAE,2BAAY;AAAE,WAAO,KAAP;AAAe,GAR/C;AAUCC,EAAAA,aAAa,EAAE,yBAAY;AACvB,WAAO,CAAC,EAAE,KAAKJ,QAAL,IAAiB,KAAKC,MAAtB,IAAgC,KAAKA,MAAL,CAAYI,MAAZ,GAAqB,CAAvD,CAAR;AACH,GAZF;AAcCC,EAAAA,KAAK,EAAE,iBAAY;AACf,QAAIC,IAAI,GAAGX,UAAU,CAACY,SAAX,CAAqBF,KAArB,CAA2BG,IAA3B,CAAgC,IAAhC,CAAX;AACAF,IAAAA,IAAI,CAACP,QAAL,GAAgB,KAAKA,QAArB;;AACA,QAAI,KAAKC,MAAT,EAAiB;AACbM,MAAAA,IAAI,CAACN,MAAL,GAAc,KAAKA,MAAL,CAAYS,KAAZ,EAAd;AACH;;AACD,WAAOH,IAAP;AACH;AArBF,CAhBQ,CAAX,C,CAwCA;;AACAT,IAAI,CAACa,MAAL,GAAcd,MAAM,CAACc,MAArB;AACAb,IAAI,CAACc,KAAL,GAAaf,MAAM,CAACe,KAApB;AACAd,IAAI,CAACe,SAAL,GAAiBhB,MAAM,CAACgB,SAAxB;AACAf,IAAI,CAACgB,UAAL,GAAkBjB,MAAM,CAACiB,UAAzB;AACAhB,IAAI,CAACiB,SAAL,GAAiBlB,MAAM,CAACkB,SAAxB;AACAjB,IAAI,CAACkB,cAAL,GAAsBnB,MAAM,CAACmB,cAA7B;AACAlB,IAAI,CAACmB,YAAL,GAAoBpB,MAAM,CAACoB,YAA3B;AAEAnB,IAAI,CAACoB,IAAL,GAAYrB,MAAM,CAACqB,IAAnB;AACApB,IAAI,CAACqB,KAAL,GAAatB,MAAM,CAACsB,KAApB;AACArB,IAAI,CAACsB,cAAL,GAAsBvB,MAAM,CAACuB,cAA7B;AACAtB,IAAI,CAACuB,EAAL,GAAUxB,MAAM,CAACwB,EAAjB;AACAvB,IAAI,CAACwB,GAAL,GAAWzB,MAAM,CAACyB,GAAlB;AAEA,eAAexB,IAAf","sourcesContent":["import Renderable from './Renderable';\nimport glenum from './core/glenum';\n\n/**\n * @constructor clay.Mesh\n * @extends clay.Renderable\n */\nvar Mesh = Renderable.extend(/** @lends clay.Mesh# */ {\n    /**\n     * Used when it is a skinned mesh\n     * @type {clay.Skeleton}\n     */\n    skeleton: null,\n    /**\n     * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance\n     * @type {number[]}\n     */\n    joints: null\n\n}, function () {\n    if (!this.joints) {\n        this.joints = [];\n    }\n}, {\n\n    /**\n     * Offset matrix used for multiple skinned mesh clone sharing one skeleton\n     * @type {clay.Matrix4}\n     */\n    offsetMatrix: null,\n\n    isInstancedMesh: function () { return false; },\n\n    isSkinnedMesh: function () {\n        return !!(this.skeleton && this.joints && this.joints.length > 0);\n    },\n\n    clone: function () {\n        var mesh = Renderable.prototype.clone.call(this);\n        mesh.skeleton = this.skeleton;\n        if (this.joints) {\n            mesh.joints = this.joints.slice();\n        }\n        return mesh;\n    }\n});\n\n// Enums\nMesh.POINTS = glenum.POINTS;\nMesh.LINES = glenum.LINES;\nMesh.LINE_LOOP = glenum.LINE_LOOP;\nMesh.LINE_STRIP = glenum.LINE_STRIP;\nMesh.TRIANGLES = glenum.TRIANGLES;\nMesh.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;\nMesh.TRIANGLE_FAN = glenum.TRIANGLE_FAN;\n\nMesh.BACK = glenum.BACK;\nMesh.FRONT = glenum.FRONT;\nMesh.FRONT_AND_BACK = glenum.FRONT_AND_BACK;\nMesh.CW = glenum.CW;\nMesh.CCW = glenum.CCW;\n\nexport default Mesh;\n"]},"metadata":{},"sourceType":"module"}