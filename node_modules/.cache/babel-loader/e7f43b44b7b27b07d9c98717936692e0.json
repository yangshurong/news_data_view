{"ast":null,"code":"import Graph from './Graph';\nimport TexturePool from './TexturePool';\nimport FrameBuffer from '../FrameBuffer';\n/**\n * Compositor provide graph based post processing\n *\n * @constructor clay.compositor.Compositor\n * @extends clay.compositor.Graph\n *\n */\n\nvar Compositor = Graph.extend(function () {\n  return {\n    // Output node\n    _outputs: [],\n    _texturePool: new TexturePool(),\n    _frameBuffer: new FrameBuffer({\n      depthBuffer: false\n    })\n  };\n},\n/** @lends clay.compositor.Compositor.prototype */\n{\n  addNode: function (node) {\n    Graph.prototype.addNode.call(this, node);\n    node._compositor = this;\n  },\n\n  /**\n   * @param  {clay.Renderer} renderer\n   */\n  render: function (renderer, frameBuffer) {\n    if (this._dirty) {\n      this.update();\n      this._dirty = false;\n      this._outputs.length = 0;\n\n      for (var i = 0; i < this.nodes.length; i++) {\n        if (!this.nodes[i].outputs) {\n          this._outputs.push(this.nodes[i]);\n        }\n      }\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      // Update the reference number of each output texture\n      this.nodes[i].beforeFrame();\n    }\n\n    for (var i = 0; i < this._outputs.length; i++) {\n      this._outputs[i].updateReference();\n    }\n\n    for (var i = 0; i < this._outputs.length; i++) {\n      this._outputs[i].render(renderer, frameBuffer);\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      // Clear up\n      this.nodes[i].afterFrame();\n    }\n  },\n  allocateTexture: function (parameters) {\n    return this._texturePool.get(parameters);\n  },\n  releaseTexture: function (parameters) {\n    this._texturePool.put(parameters);\n  },\n  getFrameBuffer: function () {\n    return this._frameBuffer;\n  },\n\n  /**\n   * Dispose compositor\n   * @param {clay.Renderer} renderer\n   */\n  dispose: function (renderer) {\n    this._texturePool.clear(renderer);\n  }\n});\nexport default Compositor;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/compositor/Compositor.js"],"names":["Graph","TexturePool","FrameBuffer","Compositor","extend","_outputs","_texturePool","_frameBuffer","depthBuffer","addNode","node","prototype","call","_compositor","render","renderer","frameBuffer","_dirty","update","length","i","nodes","outputs","push","beforeFrame","updateReference","afterFrame","allocateTexture","parameters","get","releaseTexture","put","getFrameBuffer","dispose","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAa,YAAW;AACrC,SAAO;AACH;AACAC,IAAAA,QAAQ,EAAE,EAFP;AAIHC,IAAAA,YAAY,EAAE,IAAIL,WAAJ,EAJX;AAMHM,IAAAA,YAAY,EAAE,IAAIL,WAAJ,CAAgB;AAC1BM,MAAAA,WAAW,EAAE;AADa,KAAhB;AANX,GAAP;AAUH,CAXgB;AAYjB;AACA;AACIC,EAAAA,OAAO,EAAE,UAASC,IAAT,EAAe;AACpBV,IAAAA,KAAK,CAACW,SAAN,CAAgBF,OAAhB,CAAwBG,IAAxB,CAA6B,IAA7B,EAAmCF,IAAnC;AACAA,IAAAA,IAAI,CAACG,WAAL,GAAmB,IAAnB;AACH,GAJL;;AAKI;AACJ;AACA;AACIC,EAAAA,MAAM,EAAE,UAASC,QAAT,EAAmBC,WAAnB,EAAgC;AACpC,QAAI,KAAKC,MAAT,EAAiB;AACb,WAAKC,MAAL;AACA,WAAKD,MAAL,GAAc,KAAd;AAEA,WAAKZ,QAAL,CAAcc,MAAd,GAAuB,CAAvB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWF,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,YAAI,CAAC,KAAKC,KAAL,CAAWD,CAAX,EAAcE,OAAnB,EAA4B;AACxB,eAAKjB,QAAL,CAAckB,IAAd,CAAmB,KAAKF,KAAL,CAAWD,CAAX,CAAnB;AACH;AACJ;AACJ;;AAED,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWF,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC;AACA,WAAKC,KAAL,CAAWD,CAAX,EAAcI,WAAd;AACH;;AAED,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,QAAL,CAAcc,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC3C,WAAKf,QAAL,CAAce,CAAd,EAAiBK,eAAjB;AACH;;AAED,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,QAAL,CAAcc,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC3C,WAAKf,QAAL,CAAce,CAAd,EAAiBN,MAAjB,CAAwBC,QAAxB,EAAkCC,WAAlC;AACH;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWF,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC;AACA,WAAKC,KAAL,CAAWD,CAAX,EAAcM,UAAd;AACH;AACJ,GAtCL;AAwCIC,EAAAA,eAAe,EAAE,UAAUC,UAAV,EAAsB;AACnC,WAAO,KAAKtB,YAAL,CAAkBuB,GAAlB,CAAsBD,UAAtB,CAAP;AACH,GA1CL;AA4CIE,EAAAA,cAAc,EAAE,UAAUF,UAAV,EAAsB;AAClC,SAAKtB,YAAL,CAAkByB,GAAlB,CAAsBH,UAAtB;AACH,GA9CL;AAgDII,EAAAA,cAAc,EAAE,YAAY;AACxB,WAAO,KAAKzB,YAAZ;AACH,GAlDL;;AAoDI;AACJ;AACA;AACA;AACI0B,EAAAA,OAAO,EAAE,UAAUlB,QAAV,EAAoB;AACzB,SAAKT,YAAL,CAAkB4B,KAAlB,CAAwBnB,QAAxB;AACH;AA1DL,CAbiB,CAAjB;AA0EA,eAAeZ,UAAf","sourcesContent":["import Graph from './Graph';\nimport TexturePool from './TexturePool';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * Compositor provide graph based post processing\n *\n * @constructor clay.compositor.Compositor\n * @extends clay.compositor.Graph\n *\n */\nvar Compositor = Graph.extend(function() {\n    return {\n        // Output node\n        _outputs: [],\n\n        _texturePool: new TexturePool(),\n\n        _frameBuffer: new FrameBuffer({\n            depthBuffer: false\n        })\n    };\n},\n/** @lends clay.compositor.Compositor.prototype */\n{\n    addNode: function(node) {\n        Graph.prototype.addNode.call(this, node);\n        node._compositor = this;\n    },\n    /**\n     * @param  {clay.Renderer} renderer\n     */\n    render: function(renderer, frameBuffer) {\n        if (this._dirty) {\n            this.update();\n            this._dirty = false;\n\n            this._outputs.length = 0;\n            for (var i = 0; i < this.nodes.length; i++) {\n                if (!this.nodes[i].outputs) {\n                    this._outputs.push(this.nodes[i]);\n                }\n            }\n        }\n\n        for (var i = 0; i < this.nodes.length; i++) {\n            // Update the reference number of each output texture\n            this.nodes[i].beforeFrame();\n        }\n\n        for (var i = 0; i < this._outputs.length; i++) {\n            this._outputs[i].updateReference();\n        }\n\n        for (var i = 0; i < this._outputs.length; i++) {\n            this._outputs[i].render(renderer, frameBuffer);\n        }\n\n        for (var i = 0; i < this.nodes.length; i++) {\n            // Clear up\n            this.nodes[i].afterFrame();\n        }\n    },\n\n    allocateTexture: function (parameters) {\n        return this._texturePool.get(parameters);\n    },\n\n    releaseTexture: function (parameters) {\n        this._texturePool.put(parameters);\n    },\n\n    getFrameBuffer: function () {\n        return this._frameBuffer;\n    },\n\n    /**\n     * Dispose compositor\n     * @param {clay.Renderer} renderer\n     */\n    dispose: function (renderer) {\n        this._texturePool.clear(renderer);\n    }\n});\n\nexport default Compositor;\n"]},"metadata":{},"sourceType":"module"}