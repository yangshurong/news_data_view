{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nimport graphicGL from '../../util/graphicGL';\nexport default echarts.ChartView.extend({\n  type: 'polygons3D',\n  __ecgl__: true,\n  init: function init(ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._geo3DBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function render(seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    var geo3DBuilder = this._geo3DBuilderList[0];\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[0] = geo3DBuilder;\n    }\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    geo3DBuilder.update(seriesModel, ecModel, api);\n    this._geo3DBuilderList.length = 1;\n    this.groupGL.add(geo3DBuilder.rootNode);\n  },\n  incrementalPrepareRender: function incrementalPrepareRender(seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    this._currentStep = 0;\n  },\n  incrementalRender: function incrementalRender(params, seriesModel, ecModel, api) {\n    var geo3DBuilder = this._geo3DBuilderList[this._currentStep];\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[this._currentStep] = geo3DBuilder;\n    }\n\n    geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    this.groupGL.add(geo3DBuilder.rootNode);\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    this._currentStep++;\n  },\n  _updateShaderDefines: function _updateShaderDefines(coordSys, geo3DBuilder) {\n    var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[methodName]('fragment', 'SRGB_DECODE'); // FIXME\n\n        if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n          mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n          mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n        }\n      }\n    });\n  },\n  remove: function remove() {\n    this.groupGL.removeAll();\n  },\n  dispose: function dispose() {\n    this.groupGL.removeAll();\n\n    this._geo3DBuilderList.forEach(function (geo3DBuilder) {\n      geo3DBuilder.dispose();\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/polygons3D/Polygons3DView.js"],"names":["echarts","Geo3DBuilder","graphicGL","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_geo3DBuilderList","_currentStep","render","seriesModel","removeAll","coordSys","coordinateSystem","viewGL","add","geo3DBuilder","extrudeY","_updateShaderDefines","update","length","rootNode","incrementalPrepareRender","incrementalRender","params","start","end","methodName","isLinearSpace","traverse","mesh","material","define","remove","dispose","forEach"],"mappings":";;AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,eAAeF,OAAO,CAACG,SAAR,CAAkBC,MAAlB,CAAyB;AACtCC,EAAAA,IAAI,EAAE,YADgC;AAEtCC,EAAAA,QAAQ,EAAE,IAF4B;AAGtCC,EAAAA,IAAI,EAAE,cAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC5B,SAAKC,OAAL,GAAe,IAAIR,SAAS,CAACS,IAAd,EAAf;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACD,GAPqC;AAQtCC,EAAAA,MAAM,EAAE,gBAAUC,WAAV,EAAuBP,OAAvB,EAAgCC,GAAhC,EAAqC;AAC3C,SAAKC,OAAL,CAAaM,SAAb;AACA,QAAIC,QAAQ,GAAGF,WAAW,CAACG,gBAA3B;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAzB,EAAiC;AAC/BF,MAAAA,QAAQ,CAACE,MAAT,CAAgBC,GAAhB,CAAoB,KAAKV,OAAzB;AACD;;AAED,QAAIW,YAAY,GAAG,KAAKT,iBAAL,CAAuB,CAAvB,CAAnB;;AAEA,QAAI,CAACS,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAG,IAAIpB,YAAJ,CAAiBQ,GAAjB,CAAf;AACAY,MAAAA,YAAY,CAACC,QAAb,GAAwBL,QAAQ,CAACZ,IAAT,KAAkB,UAAlB,IAAgCY,QAAQ,CAACZ,IAAT,KAAkB,YAA1E;AACA,WAAKO,iBAAL,CAAuB,CAAvB,IAA4BS,YAA5B;AACD;;AAED,SAAKE,oBAAL,CAA0BN,QAA1B,EAAoCI,YAApC;;AAEAA,IAAAA,YAAY,CAACG,MAAb,CAAoBT,WAApB,EAAiCP,OAAjC,EAA0CC,GAA1C;AACA,SAAKG,iBAAL,CAAuBa,MAAvB,GAAgC,CAAhC;AACA,SAAKf,OAAL,CAAaU,GAAb,CAAiBC,YAAY,CAACK,QAA9B;AACD,GA7BqC;AA8BtCC,EAAAA,wBAAwB,EAAE,kCAAUZ,WAAV,EAAuBP,OAAvB,EAAgCC,GAAhC,EAAqC;AAC7D,SAAKC,OAAL,CAAaM,SAAb;AACA,QAAIC,QAAQ,GAAGF,WAAW,CAACG,gBAA3B;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAzB,EAAiC;AAC/BF,MAAAA,QAAQ,CAACE,MAAT,CAAgBC,GAAhB,CAAoB,KAAKV,OAAzB;AACD;;AAED,SAAKG,YAAL,GAAoB,CAApB;AACD,GAvCqC;AAwCtCe,EAAAA,iBAAiB,EAAE,2BAAUC,MAAV,EAAkBd,WAAlB,EAA+BP,OAA/B,EAAwCC,GAAxC,EAA6C;AAC9D,QAAIY,YAAY,GAAG,KAAKT,iBAAL,CAAuB,KAAKC,YAA5B,CAAnB;AACA,QAAII,QAAQ,GAAGF,WAAW,CAACG,gBAA3B;;AAEA,QAAI,CAACG,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAG,IAAIpB,YAAJ,CAAiBQ,GAAjB,CAAf;AACAY,MAAAA,YAAY,CAACC,QAAb,GAAwBL,QAAQ,CAACZ,IAAT,KAAkB,UAAlB,IAAgCY,QAAQ,CAACZ,IAAT,KAAkB,YAA1E;AACA,WAAKO,iBAAL,CAAuB,KAAKC,YAA5B,IAA4CQ,YAA5C;AACD;;AAEDA,IAAAA,YAAY,CAACG,MAAb,CAAoBT,WAApB,EAAiCP,OAAjC,EAA0CC,GAA1C,EAA+CoB,MAAM,CAACC,KAAtD,EAA6DD,MAAM,CAACE,GAApE;AACA,SAAKrB,OAAL,CAAaU,GAAb,CAAiBC,YAAY,CAACK,QAA9B;;AAEA,SAAKH,oBAAL,CAA0BN,QAA1B,EAAoCI,YAApC;;AAEA,SAAKR,YAAL;AACD,GAxDqC;AAyDtCU,EAAAA,oBAAoB,EAAE,8BAAUN,QAAV,EAAoBI,YAApB,EAAkC;AACtD,QAAIW,UAAU,GAAGf,QAAQ,CAACE,MAAT,CAAgBc,aAAhB,KAAkC,QAAlC,GAA6C,UAA9D;AACAZ,IAAAA,YAAY,CAACK,QAAb,CAAsBQ,QAAtB,CAA+B,UAAUC,IAAV,EAAgB;AAC7C,UAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBD,QAAAA,IAAI,CAACC,QAAL,CAAcJ,UAAd,EAA0B,UAA1B,EAAsC,aAAtC,EADiB,CACqC;;AAEtD,YAAIf,QAAQ,CAACZ,IAAT,KAAkB,UAAlB,IAAgCY,QAAQ,CAACZ,IAAT,KAAkB,YAAtD,EAAoE;AAClE8B,UAAAA,IAAI,CAACC,QAAL,CAAcC,MAAd,CAAqB,UAArB,EAAiC,gBAAjC,EAAmD,CAAnD;AACAF,UAAAA,IAAI,CAACC,QAAL,CAAcC,MAAd,CAAqB,UAArB,EAAiC,mBAAjC,EAAsD,CAAtD;AACD;AACF;AACF,KATD;AAUD,GArEqC;AAsEtCC,EAAAA,MAAM,EAAE,kBAAY;AAClB,SAAK5B,OAAL,CAAaM,SAAb;AACD,GAxEqC;AAyEtCuB,EAAAA,OAAO,EAAE,mBAAY;AACnB,SAAK7B,OAAL,CAAaM,SAAb;;AAEA,SAAKJ,iBAAL,CAAuB4B,OAAvB,CAA+B,UAAUnB,YAAV,EAAwB;AACrDA,MAAAA,YAAY,CAACkB,OAAb;AACD,KAFD;AAGD;AA/EqC,CAAzB,CAAf","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nimport graphicGL from '../../util/graphicGL';\nexport default echarts.ChartView.extend({\n  type: 'polygons3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._geo3DBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    var geo3DBuilder = this._geo3DBuilderList[0];\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[0] = geo3DBuilder;\n    }\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    geo3DBuilder.update(seriesModel, ecModel, api);\n    this._geo3DBuilderList.length = 1;\n    this.groupGL.add(geo3DBuilder.rootNode);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    this._currentStep = 0;\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var geo3DBuilder = this._geo3DBuilderList[this._currentStep];\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[this._currentStep] = geo3DBuilder;\n    }\n\n    geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    this.groupGL.add(geo3DBuilder.rootNode);\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    this._currentStep++;\n  },\n  _updateShaderDefines: function (coordSys, geo3DBuilder) {\n    var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[methodName]('fragment', 'SRGB_DECODE'); // FIXME\n\n        if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n          mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n          mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n        }\n      }\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._geo3DBuilderList.forEach(function (geo3DBuilder) {\n      geo3DBuilder.dispose();\n    });\n  }\n});"]},"metadata":{},"sourceType":"module"}