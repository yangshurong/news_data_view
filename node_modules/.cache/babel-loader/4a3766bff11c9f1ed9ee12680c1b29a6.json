{"ast":null,"code":"import Texture2D from '../Texture2D';\nimport glenum from '../core/glenum';\nimport util from '../core/util';\n\nvar TexturePool = function () {\n  this._pool = {};\n  this._allocatedTextures = [];\n};\n\nTexturePool.prototype = {\n  constructor: TexturePool,\n  get: function (parameters) {\n    var key = generateKey(parameters);\n\n    if (!this._pool.hasOwnProperty(key)) {\n      this._pool[key] = [];\n    }\n\n    var list = this._pool[key];\n\n    if (!list.length) {\n      var texture = new Texture2D(parameters);\n\n      this._allocatedTextures.push(texture);\n\n      return texture;\n    }\n\n    return list.pop();\n  },\n  put: function (texture) {\n    var key = generateKey(texture);\n\n    if (!this._pool.hasOwnProperty(key)) {\n      this._pool[key] = [];\n    }\n\n    var list = this._pool[key];\n    list.push(texture);\n  },\n  clear: function (renderer) {\n    for (var i = 0; i < this._allocatedTextures.length; i++) {\n      this._allocatedTextures[i].dispose(renderer);\n    }\n\n    this._pool = {};\n    this._allocatedTextures = [];\n  }\n};\nvar defaultParams = {\n  width: 512,\n  height: 512,\n  type: glenum.UNSIGNED_BYTE,\n  format: glenum.RGBA,\n  wrapS: glenum.CLAMP_TO_EDGE,\n  wrapT: glenum.CLAMP_TO_EDGE,\n  minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n  magFilter: glenum.LINEAR,\n  useMipmap: true,\n  anisotropic: 1,\n  flipY: true,\n  unpackAlignment: 4,\n  premultiplyAlpha: false\n};\nvar defaultParamPropList = Object.keys(defaultParams);\n\nfunction generateKey(parameters) {\n  util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);\n  fallBack(parameters);\n  var key = '';\n\n  for (var i = 0; i < defaultParamPropList.length; i++) {\n    var name = defaultParamPropList[i];\n    var chunk = parameters[name].toString();\n    key += chunk;\n  }\n\n  return key;\n}\n\nfunction fallBack(target) {\n  var IPOT = isPowerOfTwo(target.width, target.height);\n\n  if (target.format === glenum.DEPTH_COMPONENT) {\n    target.useMipmap = false;\n  }\n\n  if (!IPOT || !target.useMipmap) {\n    if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST || target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {\n      target.minFilter = glenum.NEAREST;\n    } else if (target.minFilter == glenum.LINEAR_MIPMAP_LINEAR || target.minFilter == glenum.LINEAR_MIPMAP_NEAREST) {\n      target.minFilter = glenum.LINEAR;\n    }\n  }\n\n  if (!IPOT) {\n    target.wrapS = glenum.CLAMP_TO_EDGE;\n    target.wrapT = glenum.CLAMP_TO_EDGE;\n  }\n}\n\nfunction isPowerOfTwo(width, height) {\n  return (width & width - 1) === 0 && (height & height - 1) === 0;\n}\n\nexport default TexturePool;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/compositor/TexturePool.js"],"names":["Texture2D","glenum","util","TexturePool","_pool","_allocatedTextures","prototype","constructor","get","parameters","key","generateKey","hasOwnProperty","list","length","texture","push","pop","put","clear","renderer","i","dispose","defaultParams","width","height","type","UNSIGNED_BYTE","format","RGBA","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","useMipmap","anisotropic","flipY","unpackAlignment","premultiplyAlpha","defaultParamPropList","Object","keys","defaultsWithPropList","fallBack","name","chunk","toString","target","IPOT","isPowerOfTwo","DEPTH_COMPONENT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST","LINEAR_MIPMAP_NEAREST"],"mappings":"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","sourcesContent":["import Texture2D from '../Texture2D';\nimport glenum from '../core/glenum';\nimport util from '../core/util';\n\nvar TexturePool = function () {\n\n    this._pool = {};\n\n    this._allocatedTextures = [];\n};\n\nTexturePool.prototype = {\n\n    constructor: TexturePool,\n\n    get: function (parameters) {\n        var key = generateKey(parameters);\n        if (!this._pool.hasOwnProperty(key)) {\n            this._pool[key] = [];\n        }\n        var list = this._pool[key];\n        if (!list.length) {\n            var texture = new Texture2D(parameters);\n            this._allocatedTextures.push(texture);\n            return texture;\n        }\n        return list.pop();\n    },\n\n    put: function (texture) {\n        var key = generateKey(texture);\n        if (!this._pool.hasOwnProperty(key)) {\n            this._pool[key] = [];\n        }\n        var list = this._pool[key];\n        list.push(texture);\n    },\n\n    clear: function (renderer) {\n        for (var i = 0; i < this._allocatedTextures.length; i++) {\n            this._allocatedTextures[i].dispose(renderer);\n        }\n        this._pool = {};\n        this._allocatedTextures = [];\n    }\n};\n\nvar defaultParams = {\n    width: 512,\n    height: 512,\n    type: glenum.UNSIGNED_BYTE,\n    format: glenum.RGBA,\n    wrapS: glenum.CLAMP_TO_EDGE,\n    wrapT: glenum.CLAMP_TO_EDGE,\n    minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n    magFilter: glenum.LINEAR,\n    useMipmap: true,\n    anisotropic: 1,\n    flipY: true,\n    unpackAlignment: 4,\n    premultiplyAlpha: false\n};\n\nvar defaultParamPropList = Object.keys(defaultParams);\n\nfunction generateKey(parameters) {\n    util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);\n    fallBack(parameters);\n\n    var key = '';\n    for (var i = 0; i < defaultParamPropList.length; i++) {\n        var name = defaultParamPropList[i];\n        var chunk = parameters[name].toString();\n        key += chunk;\n    }\n    return key;\n}\n\nfunction fallBack(target) {\n\n    var IPOT = isPowerOfTwo(target.width, target.height);\n\n    if (target.format === glenum.DEPTH_COMPONENT) {\n        target.useMipmap = false;\n    }\n\n    if (!IPOT || !target.useMipmap) {\n        if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST ||\n            target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {\n            target.minFilter = glenum.NEAREST;\n        } else if (\n            target.minFilter == glenum.LINEAR_MIPMAP_LINEAR ||\n            target.minFilter == glenum.LINEAR_MIPMAP_NEAREST\n        ) {\n            target.minFilter = glenum.LINEAR;\n        }\n    }\n    if (!IPOT) {\n        target.wrapS = glenum.CLAMP_TO_EDGE;\n        target.wrapT = glenum.CLAMP_TO_EDGE;\n    }\n}\n\nfunction isPowerOfTwo(width, height) {\n    return (width & (width-1)) === 0 &&\n            (height & (height-1)) === 0;\n}\n\nexport default TexturePool;\n"]},"metadata":{},"sourceType":"module"}