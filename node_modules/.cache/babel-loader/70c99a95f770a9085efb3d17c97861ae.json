{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nvar guid = 0;\nvar ArrayProto = Array.prototype;\nvar nativeForEach = ArrayProto.forEach;\n/**\n * Util functions\n * @namespace clay.core.util\n */\n\nvar util = {\n  /**\n   * Generate GUID\n   * @return {number}\n   * @memberOf clay.core.util\n   */\n  genGUID: function genGUID() {\n    return ++guid;\n  },\n\n  /**\n   * Relative path to absolute path\n   * @param  {string} path\n   * @param  {string} basePath\n   * @return {string}\n   * @memberOf clay.core.util\n   */\n  relative2absolute: function relative2absolute(path, basePath) {\n    if (!basePath || path.match(/^\\//)) {\n      return path;\n    }\n\n    var pathParts = path.split('/');\n    var basePathParts = basePath.split('/');\n    var item = pathParts[0];\n\n    while (item === '.' || item === '..') {\n      if (item === '..') {\n        basePathParts.pop();\n      }\n\n      pathParts.shift();\n      item = pathParts[0];\n    }\n\n    return basePathParts.join('/') + '/' + pathParts.join('/');\n  },\n\n  /**\n   * Extend target with source\n   * @param  {Object} target\n   * @param  {Object} source\n   * @return {Object}\n   * @memberOf clay.core.util\n   */\n  extend: function extend(target, source) {\n    if (source) {\n      for (var name in source) {\n        if (source.hasOwnProperty(name)) {\n          target[name] = source[name];\n        }\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Extend properties to target if not exist.\n   * @param  {Object} target\n   * @param  {Object} source\n   * @return {Object}\n   * @memberOf clay.core.util\n   */\n  defaults: function defaults(target, source) {\n    if (source) {\n      for (var propName in source) {\n        if (target[propName] === undefined) {\n          target[propName] = source[propName];\n        }\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Extend properties with a given property list to avoid for..in.. iteration.\n   * @param  {Object} target\n   * @param  {Object} source\n   * @param  {Array.<string>} propList\n   * @return {Object}\n   * @memberOf clay.core.util\n   */\n  extendWithPropList: function extendWithPropList(target, source, propList) {\n    if (source) {\n      for (var i = 0; i < propList.length; i++) {\n        var propName = propList[i];\n        target[propName] = source[propName];\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.\n   * @param  {Object} target\n   * @param  {Object} source\n   * @param  {Array.<string>} propList\n   * @return {Object}\n   * @memberOf clay.core.util\n   */\n  defaultsWithPropList: function defaultsWithPropList(target, source, propList) {\n    if (source) {\n      for (var i = 0; i < propList.length; i++) {\n        var propName = propList[i];\n\n        if (target[propName] == null) {\n          target[propName] = source[propName];\n        }\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * @param  {Object|Array} obj\n   * @param  {Function} iterator\n   * @param  {Object} [context]\n   * @memberOf clay.core.util\n   */\n  each: function each(obj, iterator, context) {\n    if (!(obj && iterator)) {\n      return;\n    }\n\n    if (obj.forEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, len = obj.length; i < len; i++) {\n        iterator.call(context, obj[i], i, obj);\n      }\n    } else {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    }\n  },\n\n  /**\n   * Is object\n   * @param  {}  obj\n   * @return {boolean}\n   * @memberOf clay.core.util\n   */\n  isObject: function isObject(obj) {\n    return obj === Object(obj);\n  },\n\n  /**\n   * Is array ?\n   * @param  {}  obj\n   * @return {boolean}\n   * @memberOf clay.core.util\n   */\n  isArray: function isArray(obj) {\n    return Array.isArray(obj);\n  },\n\n  /**\n   * Is array like, which have a length property\n   * @param  {}  obj\n   * @return {boolean}\n   * @memberOf clay.core.util\n   */\n  isArrayLike: function isArrayLike(obj) {\n    if (!obj) {\n      return false;\n    } else {\n      return obj.length === +obj.length;\n    }\n  },\n\n  /**\n   * @param  {} obj\n   * @return {}\n   * @memberOf clay.core.util\n   */\n  clone: function clone(obj) {\n    if (!util.isObject(obj)) {\n      return obj;\n    } else if (util.isArray(obj)) {\n      return obj.slice();\n    } else if (util.isArrayLike(obj)) {\n      // is typed array\n      var ret = new obj.constructor(obj.length);\n\n      for (var i = 0; i < obj.length; i++) {\n        ret[i] = obj[i];\n      }\n\n      return ret;\n    } else {\n      return util.extend({}, obj);\n    }\n  }\n};\nexport default util;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/core/util.js"],"names":["guid","ArrayProto","Array","prototype","nativeForEach","forEach","util","genGUID","relative2absolute","path","basePath","match","pathParts","split","basePathParts","item","pop","shift","join","extend","target","source","name","hasOwnProperty","defaults","propName","undefined","extendWithPropList","propList","i","length","defaultsWithPropList","each","obj","iterator","context","len","call","key","isObject","Object","isArray","isArrayLike","clone","slice","ret","constructor"],"mappings":"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","sourcesContent":["var guid = 0;\n\nvar ArrayProto = Array.prototype;\nvar nativeForEach = ArrayProto.forEach;\n\n/**\n * Util functions\n * @namespace clay.core.util\n */\nvar util = {\n\n    /**\n     * Generate GUID\n     * @return {number}\n     * @memberOf clay.core.util\n     */\n    genGUID: function () {\n        return ++guid;\n    },\n    /**\n     * Relative path to absolute path\n     * @param  {string} path\n     * @param  {string} basePath\n     * @return {string}\n     * @memberOf clay.core.util\n     */\n    relative2absolute: function (path, basePath) {\n        if (!basePath || path.match(/^\\//)) {\n            return path;\n        }\n        var pathParts = path.split('/');\n        var basePathParts = basePath.split('/');\n\n        var item = pathParts[0];\n        while(item === '.' || item === '..') {\n            if (item === '..') {\n                basePathParts.pop();\n            }\n            pathParts.shift();\n            item = pathParts[0];\n        }\n        return basePathParts.join('/') + '/' + pathParts.join('/');\n    },\n\n    /**\n     * Extend target with source\n     * @param  {Object} target\n     * @param  {Object} source\n     * @return {Object}\n     * @memberOf clay.core.util\n     */\n    extend: function (target, source) {\n        if (source) {\n            for (var name in source) {\n                if (source.hasOwnProperty(name)) {\n                    target[name] = source[name];\n                }\n            }\n        }\n        return target;\n    },\n\n    /**\n     * Extend properties to target if not exist.\n     * @param  {Object} target\n     * @param  {Object} source\n     * @return {Object}\n     * @memberOf clay.core.util\n     */\n    defaults: function (target, source) {\n        if (source) {\n            for (var propName in source) {\n                if (target[propName] === undefined) {\n                    target[propName] = source[propName];\n                }\n            }\n        }\n        return target;\n    },\n    /**\n     * Extend properties with a given property list to avoid for..in.. iteration.\n     * @param  {Object} target\n     * @param  {Object} source\n     * @param  {Array.<string>} propList\n     * @return {Object}\n     * @memberOf clay.core.util\n     */\n    extendWithPropList: function (target, source, propList) {\n        if (source) {\n            for (var i = 0; i < propList.length; i++) {\n                var propName = propList[i];\n                target[propName] = source[propName];\n            }\n        }\n        return target;\n    },\n    /**\n     * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.\n     * @param  {Object} target\n     * @param  {Object} source\n     * @param  {Array.<string>} propList\n     * @return {Object}\n     * @memberOf clay.core.util\n     */\n    defaultsWithPropList: function (target, source, propList) {\n        if (source) {\n            for (var i = 0; i < propList.length; i++) {\n                var propName = propList[i];\n                if (target[propName] == null) {\n                    target[propName] = source[propName];\n                }\n            }\n        }\n        return target;\n    },\n    /**\n     * @param  {Object|Array} obj\n     * @param  {Function} iterator\n     * @param  {Object} [context]\n     * @memberOf clay.core.util\n     */\n    each: function (obj, iterator, context) {\n        if (!(obj && iterator)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, context);\n        }\n        else if (obj.length === + obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                iterator.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    iterator.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    },\n\n    /**\n     * Is object\n     * @param  {}  obj\n     * @return {boolean}\n     * @memberOf clay.core.util\n     */\n    isObject: function (obj) {\n        return obj === Object(obj);\n    },\n\n    /**\n     * Is array ?\n     * @param  {}  obj\n     * @return {boolean}\n     * @memberOf clay.core.util\n     */\n    isArray: function (obj) {\n        return Array.isArray(obj);\n    },\n\n    /**\n     * Is array like, which have a length property\n     * @param  {}  obj\n     * @return {boolean}\n     * @memberOf clay.core.util\n     */\n    isArrayLike: function (obj) {\n        if (!obj) {\n            return false;\n        }\n        else {\n            return obj.length === + obj.length;\n        }\n    },\n\n    /**\n     * @param  {} obj\n     * @return {}\n     * @memberOf clay.core.util\n     */\n    clone: function (obj) {\n        if (!util.isObject(obj)) {\n            return obj;\n        }\n        else if (util.isArray(obj)) {\n            return obj.slice();\n        }\n        else if (util.isArrayLike(obj)) { // is typed array\n            var ret = new obj.constructor(obj.length);\n            for (var i = 0; i < obj.length; i++) {\n                ret[i] = obj[i];\n            }\n            return ret;\n        }\n        else {\n            return util.extend({}, obj);\n        }\n    }\n};\n\nexport default util;\n"]},"metadata":{},"sourceType":"module"}