{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport * as echarts from 'echarts/lib/echarts';\nexport default {\n  getFilledRegions: function getFilledRegions(regions, mapData) {\n    var regionsArr = (regions || []).slice();\n    var geoJson;\n\n    if (typeof mapData === 'string') {\n      mapData = echarts.getMap(mapData);\n      geoJson = mapData && mapData.geoJson;\n    } else {\n      if (mapData && mapData.features) {\n        geoJson = mapData;\n      }\n    }\n\n    if (!geoJson) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Map ' + mapData + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n\n        if (!geoJson.features) {\n          console.error('Invalid GeoJSON for map3D');\n        }\n      }\n\n      return [];\n    }\n\n    var dataNameMap = {};\n    var features = geoJson.features;\n\n    for (var i = 0; i < regionsArr.length; i++) {\n      dataNameMap[regionsArr[i].name] = regionsArr[i];\n    }\n\n    for (var i = 0; i < features.length; i++) {\n      var name = features[i].properties.name;\n\n      if (!dataNameMap[name]) {\n        regionsArr.push({\n          name: name\n        });\n      }\n    }\n\n    return regionsArr;\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // geoJson used by geo3D\n    map: '',\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    boxWidth: 100,\n    boxHeight: 10,\n    boxDepth: 'auto',\n    regionHeight: 3,\n    environment: 'auto',\n    groundPlane: {\n      show: false,\n      color: '#aaa'\n    },\n    shading: 'lambert',\n    light: {\n      main: {\n        alpha: 40,\n        beta: 30\n      }\n    },\n    viewControl: {\n      alpha: 40,\n      beta: 0,\n      distance: 100,\n      orthographicSize: 60,\n      minAlpha: 5,\n      minBeta: -80,\n      maxBeta: 80\n    },\n    label: {\n      show: false,\n      // Distance in 3d space.\n      distance: 2,\n      textStyle: {\n        fontSize: 20,\n        color: '#000',\n        backgroundColor: 'rgba(255,255,255,0.7)',\n        padding: 3,\n        borderRadius: 4\n      }\n    },\n    // TODO\n    // altitude: {\n    //     min: 'auto',\n    //     max: 'auto',\n    //     height: []\n    // },\n    // labelLine\n    // light\n    // postEffect\n    // temporalSuperSampling\n    itemStyle: {\n      color: '#fff',\n      borderWidth: 0,\n      borderColor: '#333'\n    },\n    emphasis: {\n      itemStyle: {\n        // color: '#f94b59'\n        color: '#639fc0'\n      },\n      label: {\n        show: true\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/coord/geo3D/geo3DModelMixin.js"],"names":["echarts","getFilledRegions","regions","mapData","regionsArr","slice","geoJson","getMap","features","process","env","NODE_ENV","console","error","dataNameMap","i","length","name","properties","push","defaultOption","show","zlevel","map","left","top","width","height","boxWidth","boxHeight","boxDepth","regionHeight","environment","groundPlane","color","shading","light","main","alpha","beta","viewControl","distance","orthographicSize","minAlpha","minBeta","maxBeta","label","textStyle","fontSize","backgroundColor","padding","borderRadius","itemStyle","borderWidth","borderColor","emphasis"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nexport default {\n  getFilledRegions: function (regions, mapData) {\n    var regionsArr = (regions || []).slice();\n    var geoJson;\n\n    if (typeof mapData === 'string') {\n      mapData = echarts.getMap(mapData);\n      geoJson = mapData && mapData.geoJson;\n    } else {\n      if (mapData && mapData.features) {\n        geoJson = mapData;\n      }\n    }\n\n    if (!geoJson) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Map ' + mapData + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n\n        if (!geoJson.features) {\n          console.error('Invalid GeoJSON for map3D');\n        }\n      }\n\n      return [];\n    }\n\n    var dataNameMap = {};\n    var features = geoJson.features;\n\n    for (var i = 0; i < regionsArr.length; i++) {\n      dataNameMap[regionsArr[i].name] = regionsArr[i];\n    }\n\n    for (var i = 0; i < features.length; i++) {\n      var name = features[i].properties.name;\n\n      if (!dataNameMap[name]) {\n        regionsArr.push({\n          name: name\n        });\n      }\n    }\n\n    return regionsArr;\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // geoJson used by geo3D\n    map: '',\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    boxWidth: 100,\n    boxHeight: 10,\n    boxDepth: 'auto',\n    regionHeight: 3,\n    environment: 'auto',\n    groundPlane: {\n      show: false,\n      color: '#aaa'\n    },\n    shading: 'lambert',\n    light: {\n      main: {\n        alpha: 40,\n        beta: 30\n      }\n    },\n    viewControl: {\n      alpha: 40,\n      beta: 0,\n      distance: 100,\n      orthographicSize: 60,\n      minAlpha: 5,\n      minBeta: -80,\n      maxBeta: 80\n    },\n    label: {\n      show: false,\n      // Distance in 3d space.\n      distance: 2,\n      textStyle: {\n        fontSize: 20,\n        color: '#000',\n        backgroundColor: 'rgba(255,255,255,0.7)',\n        padding: 3,\n        borderRadius: 4\n      }\n    },\n    // TODO\n    // altitude: {\n    //     min: 'auto',\n    //     max: 'auto',\n    //     height: []\n    // },\n    // labelLine\n    // light\n    // postEffect\n    // temporalSuperSampling\n    itemStyle: {\n      color: '#fff',\n      borderWidth: 0,\n      borderColor: '#333'\n    },\n    emphasis: {\n      itemStyle: {\n        // color: '#f94b59'\n        color: '#639fc0'\n      },\n      label: {\n        show: true\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}