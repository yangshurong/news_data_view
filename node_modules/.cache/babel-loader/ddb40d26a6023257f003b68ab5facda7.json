{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nexports.__esModule = true;\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\n\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string - space-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string - comma-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    var comma = ',';\n    return list.split(string, [comma], true);\n  }\n};\nexports.default = list;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;AASA,IAAIA,OAAO;AAEPC,OAFO,iBAEDC,MAFC,EAEOC,UAFP,EAEmBC,IAFnB,EAEyB;AAC5B,QAAIC,QAAU,EAAd;AACA,QAAIC,UAAU,EAAd;AACA,QAAIL,QAAU,KAAd;AAEA,QAAIM,OAAU,CAAd;AACA,QAAIC,QAAU,KAAd;AACA,QAAIC,SAAU,KAAd;;AAEA,SAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIR,OAAOS,MAA5B,EAAoCD,GAApC,EAA0C;AACtC,UAAIE,SAASV,OAAOQ,CAAPR,CAAb;;AAEA,UAAKM,KAAL,EAAa;AACT,YAAKC,MAAL,EAAc;AACVA,mBAAS,KAATA;AADJ,eAEO,IAAKG,WAAW,IAAhB,EAAuB;AAC1BH,mBAAS,IAATA;AADG,eAEA,IAAKG,WAAWJ,KAAhB,EAAwB;AAC3BA,kBAAQ,KAARA;AACH;AAPL,aAQO,IAAKI,WAAW,GAAXA,IAAkBA,WAAW,IAAlC,EAAyC;AAC5CJ,gBAAQI,MAARJ;AADG,aAEA,IAAKI,WAAW,GAAhB,EAAsB;AACzBL,gBAAQ,CAARA;AADG,aAEA,IAAKK,WAAW,GAAhB,EAAsB;AACzB,YAAKL,OAAO,CAAZ,EAAgBA,QAAQ,CAARA;AADb,aAEA,IAAKA,SAAS,CAAd,EAAkB;AACrB,YAAKJ,WAAWU,OAAXV,CAAmBS,MAAnBT,MAA+B,CAAC,CAArC,EAAyCF,QAAQ,IAARA;AAC5C;;AAED,UAAKA,KAAL,EAAa;AACT,YAAKK,YAAY,EAAjB,EAAsBD,MAAMS,IAANT,CAAWC,QAAQS,IAART,EAAXD;AACtBC,kBAAU,EAAVA;AACAL,gBAAU,KAAVA;AAHJ,aAIO;AACHK,mBAAWM,MAAXN;AACH;AACJ;;AAED,QAAKF,QAAQE,YAAY,EAAzB,EAA8BD,MAAMS,IAANT,CAAWC,QAAQS,IAART,EAAXD;AAC9B,WAAOA,KAAP;AA1CG;;AA6CP;;;;;;;;;;;AAWAW,OAxDO,iBAwDDd,MAxDC,EAwDO;AACV,QAAIe,SAAS,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAb;AACA,WAAOjB,KAAKC,KAALD,CAAWE,MAAXF,EAAmBiB,MAAnBjB,CAAP;AA1DG;;AA6DP;;;;;;;;;;;;AAYAkB,OAzEO,iBAyEDhB,MAzEC,EAyEO;AACV,QAAIgB,QAAQ,GAAZ;AACA,WAAOlB,KAAKC,KAALD,CAAWE,MAAXF,EAAmB,CAACkB,KAAD,CAAnBlB,EAA4B,IAA5BA,CAAP;AACH;AA5EM,CAAX;kBAgFeA","names":["list","split","string","separators","last","array","current","func","quote","escape","i","length","letter","indexOf","push","trim","space","spaces","comma"],"sources":["list.es6"],"sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\nlet list = {\n\n    split(string, separators, last) {\n        let array   = [];\n        let current = '';\n        let split   = false;\n\n        let func    = 0;\n        let quote   = false;\n        let escape  = false;\n\n        for ( let i = 0; i < string.length; i++ ) {\n            let letter = string[i];\n\n            if ( quote ) {\n                if ( escape ) {\n                    escape = false;\n                } else if ( letter === '\\\\' ) {\n                    escape = true;\n                } else if ( letter === quote ) {\n                    quote = false;\n                }\n            } else if ( letter === '\"' || letter === '\\'' ) {\n                quote = letter;\n            } else if ( letter === '(' ) {\n                func += 1;\n            } else if ( letter === ')' ) {\n                if ( func > 0 ) func -= 1;\n            } else if ( func === 0 ) {\n                if ( separators.indexOf(letter) !== -1 ) split = true;\n            }\n\n            if ( split ) {\n                if ( current !== '' ) array.push(current.trim());\n                current = '';\n                split   = false;\n            } else {\n                current += letter;\n            }\n        }\n\n        if ( last || current !== '' ) array.push(current.trim());\n        return array;\n    },\n\n    /**\n     * Safely splits space-separated values (such as those for `background`,\n     * `border-radius`, and other shorthand properties).\n     *\n     * @param {string} string - space-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n     */\n    space(string) {\n        let spaces = [' ', '\\n', '\\t'];\n        return list.split(string, spaces);\n    },\n\n    /**\n     * Safely splits comma-separated values (such as those for `transition-*`\n     * and `background` properties).\n     *\n     * @param {string} string - comma-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.comma('black, linear-gradient(white, black)')\n     * //=> ['black', 'linear-gradient(white, black)']\n     */\n    comma(string) {\n        let comma = ',';\n        return list.split(string, [comma], true);\n    }\n\n};\n\nexport default list;\n"]},"metadata":{},"sourceType":"script"}