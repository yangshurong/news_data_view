{"ast":null,"code":"/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\nimport { GLMAT_ARRAY_TYPE } from './common';\n/**\n * @class 2x3 Matrix\n * @name mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\nvar mat2d = {};\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nmat2d.create = function () {\n  var out = new GLMAT_ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n};\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\n\nmat2d.clone = function (a) {\n  var out = new GLMAT_ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n};\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\n\n\nmat2d.copy = function (out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n};\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\n\nmat2d.identity = function (out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n};\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\n\n\nmat2d.invert = function (out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3],\n      atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n};\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\n\nmat2d.determinant = function (a) {\n  return a[0] * a[3] - a[1] * a[2];\n};\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\n\n\nmat2d.multiply = function (out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n};\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\n\nmat2d.mul = mat2d.multiply;\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nmat2d.rotate = function (out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n};\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\n\nmat2d.scale = function (out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n};\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\n\nmat2d.translate = function (out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n};\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\n\nmat2d.frob = function (a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n};\n\nexport default mat2d;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/glmatrix/mat2d.js"],"names":["GLMAT_ARRAY_TYPE","mat2d","create","out","clone","a","copy","identity","invert","aa","ab","ac","ad","atx","aty","det","determinant","multiply","b","a0","a1","a2","a3","a4","a5","b0","b1","b2","b3","b4","b5","mul","rotate","rad","s","Math","sin","c","cos","scale","v","v0","v1","translate","frob","sqrt","pow"],"mappings":"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","sourcesContent":["\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\nimport { GLMAT_ARRAY_TYPE } from './common';\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n};\n\n\nexport default mat2d;"]},"metadata":{},"sourceType":"module"}