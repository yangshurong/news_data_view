{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz',\n  // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_'\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  var encodeTable = baseEncodeTables[base];\n\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  var readLength = buffer.length;\n\n  var Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  var b = new Big(0);\n\n  for (var i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  var output = '';\n\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md5';\n  maxLength = maxLength || 9999;\n\n  var hash = require('crypto').createHash(hashType);\n\n  hash.update(buffer);\n\n  if (digestType === 'base26' || digestType === 'base32' || digestType === 'base36' || digestType === 'base49' || digestType === 'base52' || digestType === 'base58' || digestType === 'base62' || digestType === 'base64') {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/loader-utils/lib/getHashDigest.js"],"names":["baseEncodeTables","encodeBufferToBase","buffer","base","encodeTable","Error","readLength","length","Big","require","RM","DP","b","i","times","plus","output","gt","mod","div","getHashDigest","hashType","digestType","maxLength","hash","createHash","update","digest","substr","module","exports"],"mappings":"AAAA;;;;AAEA,IAAMA,gBAAgB,GAAG;AACvB,MAAI,4BADmB;AAEvB,MAAI,kCAFmB;AAEiB;AACxC,MAAI,sCAHmB;AAIvB,MAAI,mDAJmB;AAIkC;AACzD,MAAI,sDALmB;AAMvB,MAAI,4DANmB;AAM2C;AAClE,MAAI,gEAPmB;AAQvB,MAAI;AARmB,CAAzB;;AAWA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,IAApC,EAA0C;AACxC,MAAMC,WAAW,GAAGJ,gBAAgB,CAACG,IAAD,CAApC;;AACA,MAAI,CAACC,WAAL,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAU,0BAA0BF,IAApC,CAAN;AACD;;AAED,MAAMG,UAAU,GAAGJ,MAAM,CAACK,MAA1B;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEAD,EAAAA,GAAG,CAACE,EAAJ,GAASF,GAAG,CAACG,EAAJ,GAAS,CAAlB;AACA,MAAIC,CAAC,GAAG,IAAIJ,GAAJ,CAAQ,CAAR,CAAR;;AAEA,OAAK,IAAIK,CAAC,GAAGP,UAAU,GAAG,CAA1B,EAA6BO,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxCD,IAAAA,CAAC,GAAGA,CAAC,CAACE,KAAF,CAAQ,GAAR,EAAaC,IAAb,CAAkBb,MAAM,CAACW,CAAD,CAAxB,CAAJ;AACD;;AAED,MAAIG,MAAM,GAAG,EAAb;;AACA,SAAOJ,CAAC,CAACK,EAAF,CAAK,CAAL,CAAP,EAAgB;AACdD,IAAAA,MAAM,GAAGZ,WAAW,CAACQ,CAAC,CAACM,GAAF,CAAMf,IAAN,CAAD,CAAX,GAA2Ba,MAApC;AACAJ,IAAAA,CAAC,GAAGA,CAAC,CAACO,GAAF,CAAMhB,IAAN,CAAJ;AACD;;AAEDK,EAAAA,GAAG,CAACG,EAAJ,GAAS,EAAT;AACAH,EAAAA,GAAG,CAACE,EAAJ,GAAS,CAAT;AAEA,SAAOM,MAAP;AACD;;AAED,SAASI,aAAT,CAAuBlB,MAAvB,EAA+BmB,QAA/B,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AAC9DF,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAvB;AACAE,EAAAA,SAAS,GAAGA,SAAS,IAAI,IAAzB;;AAEA,MAAMC,IAAI,GAAGf,OAAO,CAAC,QAAD,CAAP,CAAkBgB,UAAlB,CAA6BJ,QAA7B,CAAb;;AAEAG,EAAAA,IAAI,CAACE,MAAL,CAAYxB,MAAZ;;AAEA,MACEoB,UAAU,KAAK,QAAf,IACAA,UAAU,KAAK,QADf,IAEAA,UAAU,KAAK,QAFf,IAGAA,UAAU,KAAK,QAHf,IAIAA,UAAU,KAAK,QAJf,IAKAA,UAAU,KAAK,QALf,IAMAA,UAAU,KAAK,QANf,IAOAA,UAAU,KAAK,QARjB,EASE;AACA,WAAOrB,kBAAkB,CAACuB,IAAI,CAACG,MAAL,EAAD,EAAgBL,UAAU,CAACM,MAAX,CAAkB,CAAlB,CAAhB,CAAlB,CAAwDA,MAAxD,CACL,CADK,EAELL,SAFK,CAAP;AAID,GAdD,MAcO;AACL,WAAOC,IAAI,CAACG,MAAL,CAAYL,UAAU,IAAI,KAA1B,EAAiCM,MAAjC,CAAwC,CAAxC,EAA2CL,SAA3C,CAAP;AACD;AACF;;AAEDM,MAAM,CAACC,OAAP,GAAiBV,aAAjB","sourcesContent":["'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md5';\n  maxLength = maxLength || 9999;\n\n  const hash = require('crypto').createHash(hashType);\n\n  hash.update(buffer);\n\n  if (\n    digestType === 'base26' ||\n    digestType === 'base32' ||\n    digestType === 'base36' ||\n    digestType === 'base49' ||\n    digestType === 'base52' ||\n    digestType === 'base58' ||\n    digestType === 'base62' ||\n    digestType === 'base64'\n  ) {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(\n      0,\n      maxLength\n    );\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;\n"]},"metadata":{},"sourceType":"script"}