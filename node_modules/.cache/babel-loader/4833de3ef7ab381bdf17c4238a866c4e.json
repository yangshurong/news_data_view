{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Mesh from 'claygl/src/Mesh';\nimport Renderer from 'claygl/src/Renderer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport Material from 'claygl/src/Material';\nimport Node3D from 'claygl/src/Node';\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport Scene from 'claygl/src/Scene';\nimport LRUCache from 'zrender/lib/core/LRU';\nimport textureUtil from 'claygl/src/util/texture';\nimport EChartsSurface from './EChartsSurface';\nimport AmbientCubemapLight from 'claygl/src/light/AmbientCubemap';\nimport AmbientSHLight from 'claygl/src/light/AmbientSH';\nimport shUtil from 'claygl/src/util/sh';\nimport retrieve from './retrieve';\nimport SphereGeometry from 'claygl/src/geometry/Sphere';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport CubeGeometry from 'claygl/src/geometry/Cube';\nimport AmbientLight from 'claygl/src/light/Ambient';\nimport DirectionalLight from 'claygl/src/light/Directional';\nimport PointLight from 'claygl/src/light/Point';\nimport SpotLight from 'claygl/src/light/Spot';\nimport PerspectiveCamera from 'claygl/src/camera/Perspective';\nimport OrthographicCamera from 'claygl/src/camera/Orthographic'; // Math\n\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector4 from 'claygl/src/math/Vector4';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport Matrix2 from 'claygl/src/math/Matrix2';\nimport Matrix2d from 'claygl/src/math/Matrix2d';\nimport Matrix3 from 'claygl/src/math/Matrix3';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Plane from 'claygl/src/math/Plane';\nimport Ray from 'claygl/src/math/Ray';\nimport BoundingBox from 'claygl/src/math/BoundingBox';\nimport Frustum from 'claygl/src/math/Frustum';\nimport animatableMixin from './animatableMixin'; // Some common shaders\n\nimport utilGLSL from 'claygl/src/shader/source/util.glsl.js';\nimport prezGLSL from 'claygl/src/shader/source/prez.glsl.js';\nimport commonGLSL from './shader/common.glsl.js';\nimport colorGLSL from './shader/color.glsl.js';\nimport lambertGLSL from './shader/lambert.glsl.js';\nimport realisticGLSL from './shader/realistic.glsl.js';\nimport hatchingGLSL from './shader/hatching.glsl.js';\nimport shadowGLSL from './shader/shadow.glsl.js';\nObject.assign(Node3D.prototype, animatableMixin);\nShader.import(utilGLSL);\nShader.import(prezGLSL);\nShader.import(commonGLSL);\nShader.import(colorGLSL);\nShader.import(lambertGLSL);\nShader.import(realisticGLSL);\nShader.import(hatchingGLSL);\nShader.import(shadowGLSL);\n\nfunction isValueNone(value) {\n  return !value || value === 'none';\n}\n\nfunction isValueImage(value) {\n  return value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof Image;\n}\n\nfunction isECharts(value) {\n  return value.getZr && value.setOption;\n} // Overwrite addToScene and removeFromScene\n\n\nvar oldAddToScene = Scene.prototype.addToScene;\nvar oldRemoveFromScene = Scene.prototype.removeFromScene;\n\nScene.prototype.addToScene = function (node) {\n  oldAddToScene.call(this, node);\n\n  if (this.__zr) {\n    var zr = this.__zr;\n    node.traverse(function (child) {\n      child.__zr = zr;\n\n      if (child.addAnimatorsToZr) {\n        child.addAnimatorsToZr(zr);\n      }\n    });\n  }\n};\n\nScene.prototype.removeFromScene = function (node) {\n  oldRemoveFromScene.call(this, node);\n  node.traverse(function (child) {\n    var zr = child.__zr;\n    child.__zr = null;\n\n    if (zr && child.removeAnimatorsFromZr) {\n      child.removeAnimatorsFromZr(zr);\n    }\n  });\n};\n/**\n * @param {string} textureName\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n */\n\n\nMaterial.prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {\n  if (!this.shader) {\n    return;\n  }\n\n  var zr = api.getZr();\n  var material = this;\n  var texture;\n  material.autoUpdateTextureStatus = false; // disableTexture first\n\n  material.disableTexture(textureName);\n\n  if (!isValueNone(imgValue)) {\n    texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {\n      material.enableTexture(textureName);\n      zr && zr.refresh();\n    }); // Set texture immediately for other code to verify if have this texture.\n\n    material.set(textureName, texture);\n  }\n\n  return texture;\n};\n\nvar graphicGL = {};\ngraphicGL.Renderer = Renderer;\ngraphicGL.Node = Node3D;\ngraphicGL.Mesh = Mesh;\ngraphicGL.Shader = Shader;\ngraphicGL.Material = Material;\ngraphicGL.Texture = Texture;\ngraphicGL.Texture2D = Texture2D; // Geometries\n\ngraphicGL.Geometry = Geometry;\ngraphicGL.SphereGeometry = SphereGeometry;\ngraphicGL.PlaneGeometry = PlaneGeometry;\ngraphicGL.CubeGeometry = CubeGeometry; // Lights\n\ngraphicGL.AmbientLight = AmbientLight;\ngraphicGL.DirectionalLight = DirectionalLight;\ngraphicGL.PointLight = PointLight;\ngraphicGL.SpotLight = SpotLight; // Cameras\n\ngraphicGL.PerspectiveCamera = PerspectiveCamera;\ngraphicGL.OrthographicCamera = OrthographicCamera; // Math\n\ngraphicGL.Vector2 = Vector2;\ngraphicGL.Vector3 = Vector3;\ngraphicGL.Vector4 = Vector4;\ngraphicGL.Quaternion = Quaternion;\ngraphicGL.Matrix2 = Matrix2;\ngraphicGL.Matrix2d = Matrix2d;\ngraphicGL.Matrix3 = Matrix3;\ngraphicGL.Matrix4 = Matrix4;\ngraphicGL.Plane = Plane;\ngraphicGL.Ray = Ray;\ngraphicGL.BoundingBox = BoundingBox;\ngraphicGL.Frustum = Frustum; // Texture utilities\n\nvar blankImage = null;\n\nfunction getBlankImage() {\n  if (blankImage !== null) {\n    return blankImage;\n  }\n\n  blankImage = textureUtil.createBlank('rgba(255,255,255,0)').image;\n  return blankImage;\n}\n\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\n\nfunction convertTextureToPowerOfTwo(texture) {\n  if ((texture.wrapS === Texture.REPEAT || texture.wrapT === Texture.REPEAT) && texture.image) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n\n    if (width !== texture.width || height !== texture.height) {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(texture.image, 0, 0, width, height);\n      texture.image = canvas;\n    }\n  }\n}\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n * @param {Function} cb\n */\n// TODO Promise, test\n\n\ngraphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {\n  if (typeof textureOpts === 'function') {\n    cb = textureOpts;\n    textureOpts = {};\n  }\n\n  textureOpts = textureOpts || {};\n  var keys = Object.keys(textureOpts).sort();\n  var prefix = '';\n\n  for (var i = 0; i < keys.length; i++) {\n    prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';\n  }\n\n  var textureCache = api.__textureCache = api.__textureCache || new LRUCache(20);\n\n  if (isECharts(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      var surface = new EChartsSurface(imgValue);\n\n      surface.onupdate = function () {\n        api.getZr().refresh();\n      };\n\n      textureObj = {\n        texture: surface.getTexture()\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      cb && cb(textureObj.texture);\n    } else {\n      textureObj.texture.surface.setECharts(imgValue);\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else if (isValueImage(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      textureObj = {\n        texture: new graphicGL.Texture2D({\n          image: imgValue\n        })\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      convertTextureToPowerOfTwo(textureObj.texture); // TODO Next tick?\n\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else {\n    var textureObj = textureCache.get(prefix + imgValue);\n\n    if (textureObj) {\n      if (textureObj.callbacks) {\n        // Add to pending callbacks\n        textureObj.callbacks.push(cb);\n      } else {\n        // TODO Next tick?\n        cb && cb(textureObj.texture);\n      }\n    } else {\n      // Maybe base64\n      if (imgValue.match(/.hdr$|^data:application\\/octet-stream/)) {\n        textureObj = {\n          callbacks: [cb]\n        };\n        var texture = textureUtil.loadTexture(imgValue, {\n          exposure: textureOpts.exposure,\n          fileType: 'hdr'\n        }, function () {\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        });\n        textureObj.texture = texture;\n        textureCache.put(prefix + imgValue, textureObj);\n      } else {\n        var texture = new graphicGL.Texture2D({\n          image: new Image()\n        });\n\n        for (var i = 0; i < keys.length; i++) {\n          texture[keys[i]] = textureOpts[keys[i]];\n        }\n\n        textureObj = {\n          texture: texture,\n          callbacks: [cb]\n        };\n        var originalImage = texture.image;\n\n        originalImage.onload = function () {\n          texture.image = originalImage;\n          convertTextureToPowerOfTwo(texture);\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        };\n\n        originalImage.crossOrigin = 'Anonymous';\n        originalImage.src = imgValue; // Use blank image as place holder.\n\n        texture.image = getBlankImage();\n        textureCache.put(prefix + imgValue, textureObj);\n      }\n    }\n\n    return textureObj.texture;\n  }\n};\n/**\n * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light\n * @return {Object} { specular, diffuse }\n */\n\n\ngraphicGL.createAmbientCubemap = function (opt, renderer, api, cb) {\n  opt = opt || {};\n  var textureUrl = opt.texture;\n  var exposure = retrieve.firstNotNull(opt.exposure, 1.0);\n  var ambientCubemap = new AmbientCubemapLight({\n    intensity: retrieve.firstNotNull(opt.specularIntensity, 1.0)\n  });\n  var ambientSH = new AmbientSHLight({\n    intensity: retrieve.firstNotNull(opt.diffuseIntensity, 1.0),\n    coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]\n  });\n  ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {\n    exposure: exposure\n  }, function () {\n    // TODO Performance when multiple view\n    ambientCubemap.cubemap.flipY = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var time = Date.now();\n    }\n\n    ambientCubemap.prefilter(renderer, 32);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var dTime = Date.now() - time;\n      console.log('Prefilter environment map: ' + dTime + 'ms');\n    }\n\n    ambientSH.coefficients = shUtil.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {\n      lod: 1\n    });\n    cb && cb(); // TODO Refresh ?\n  });\n  return {\n    specular: ambientCubemap,\n    diffuse: ambientSH\n  };\n};\n/**\n * Create a blank texture for placeholder\n */\n\n\ngraphicGL.createBlankTexture = textureUtil.createBlank;\n/**\n * If value is image\n * @param {*}\n * @return {boolean}\n */\n\ngraphicGL.isImage = isValueImage;\n\ngraphicGL.additiveBlend = function (gl) {\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n};\n/**\n * @param {string|Array.<number>} colorStr\n * @param {Array.<number>} [rgba]\n * @return {Array.<number>} rgba\n */\n\n\ngraphicGL.parseColor = function (colorStr, rgba) {\n  if (colorStr instanceof Array) {\n    if (!rgba) {\n      rgba = [];\n    } // Color has been parsed.\n\n\n    rgba[0] = colorStr[0];\n    rgba[1] = colorStr[1];\n    rgba[2] = colorStr[2];\n\n    if (colorStr.length > 3) {\n      rgba[3] = colorStr[3];\n    } else {\n      rgba[3] = 1;\n    }\n\n    return rgba;\n  }\n\n  rgba = echarts.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];\n  rgba[0] /= 255;\n  rgba[1] /= 255;\n  rgba[2] /= 255;\n  return rgba;\n};\n/**\n * Convert alpha beta rotation to direction.\n * @param {number} alpha\n * @param {number} beta\n * @return {Array.<number>}\n */\n\n\ngraphicGL.directionFromAlphaBeta = function (alpha, beta) {\n  var theta = alpha / 180 * Math.PI + Math.PI / 2;\n  var phi = -beta / 180 * Math.PI + Math.PI / 2;\n  var dir = [];\n  var r = Math.sin(theta);\n  dir[0] = r * Math.cos(phi);\n  dir[1] = -Math.cos(theta);\n  dir[2] = r * Math.sin(phi);\n  return dir;\n};\n/**\n * Get shadow resolution from shadowQuality configuration\n */\n\n\ngraphicGL.getShadowResolution = function (shadowQuality) {\n  var shadowResolution = 1024;\n\n  switch (shadowQuality) {\n    case 'low':\n      shadowResolution = 512;\n      break;\n\n    case 'medium':\n      break;\n\n    case 'high':\n      shadowResolution = 2048;\n      break;\n\n    case 'ultra':\n      shadowResolution = 4096;\n      break;\n  }\n\n  return shadowResolution;\n};\n/**\n * Shading utilities\n */\n\n\ngraphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching', 'shadow'];\n/**\n * Create shader including vertex and fragment\n * @param {string} prefix.\n */\n\ngraphicGL.createShader = function (prefix) {\n  if (prefix === 'ecgl.shadow') {\n    prefix = 'ecgl.displayShadow';\n  }\n\n  var vertexShaderStr = Shader.source(prefix + '.vertex');\n  var fragmentShaderStr = Shader.source(prefix + '.fragment');\n\n  if (!vertexShaderStr) {\n    console.error('Vertex shader of \\'%s\\' not exits', prefix);\n  }\n\n  if (!fragmentShaderStr) {\n    console.error('Fragment shader of \\'%s\\' not exits', prefix);\n  }\n\n  var shader = new Shader(vertexShaderStr, fragmentShaderStr);\n  shader.name = prefix;\n  return shader;\n};\n\ngraphicGL.createMaterial = function (prefix, defines) {\n  if (!(defines instanceof Array)) {\n    defines = [defines];\n  }\n\n  var shader = graphicGL.createShader(prefix);\n  var material = new Material({\n    shader: shader\n  });\n  defines.forEach(function (defineName) {\n    if (typeof defineName === 'string') {\n      material.define(defineName);\n    }\n  });\n  return material;\n};\n/**\n * Set material from model.\n * @param {clay.Material} material\n * @param {module:echarts/model/Model} model\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\ngraphicGL.setMaterialFromModel = function (shading, material, model, api) {\n  material.autoUpdateTextureStatus = false;\n  var materialModel = model.getModel(shading + 'Material');\n  var detailTexture = materialModel.get('detailTexture');\n  var uvRepeat = retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);\n  var uvOffset = retrieve.firstNotNull(materialModel.get('textureOffset'), 0.0);\n\n  if (typeof uvRepeat === 'number') {\n    uvRepeat = [uvRepeat, uvRepeat];\n  }\n\n  if (typeof uvOffset === 'number') {\n    uvOffset = [uvOffset, uvOffset];\n  }\n\n  var repeatParam = uvRepeat[0] > 1 || uvRepeat[1] > 1 ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;\n  var textureOpt = {\n    anisotropic: 8,\n    wrapS: repeatParam,\n    wrapT: repeatParam\n  };\n\n  if (shading === 'realistic') {\n    var roughness = materialModel.get('roughness');\n    var metalness = materialModel.get('metalness');\n\n    if (metalness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(metalness)) {\n        material.setTextureImage('metalnessMap', metalness, api, textureOpt);\n        metalness = retrieve.firstNotNull(materialModel.get('metalnessAdjust'), 0.5);\n      }\n    } else {\n      // Default metalness.\n      metalness = 0;\n    }\n\n    if (roughness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(roughness)) {\n        material.setTextureImage('roughnessMap', roughness, api, textureOpt);\n        roughness = retrieve.firstNotNull(materialModel.get('roughnessAdjust'), 0.5);\n      }\n    } else {\n      // Default roughness.\n      roughness = 0.5;\n    }\n\n    var normalTextureVal = materialModel.get('normalTexture');\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);\n    material.set({\n      roughness: roughness,\n      metalness: metalness,\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    }); // var normalTexture = material.get('normalMap');\n    // if (normalTexture) {\n    // PENDING\n    // normalTexture.format = Texture.SRGB;\n    // }\n  } else if (shading === 'lambert') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'color') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'hatching') {\n    var tams = materialModel.get('hatchingTextures') || [];\n\n    if (tams.length < 6) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Invalid hatchingTextures.');\n      }\n    }\n\n    for (var i = 0; i < 6; i++) {\n      material.setTextureImage('hatch' + (i + 1), tams[i], api, {\n        anisotropic: 8,\n        wrapS: graphicGL.Texture.REPEAT,\n        wrapT: graphicGL.Texture.REPEAT\n      });\n    }\n\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  }\n};\n\ngraphicGL.updateVertexAnimation = function (mappingAttributes, previousMesh, currentMesh, seriesModel) {\n  var enableAnimation = seriesModel.get('animation');\n  var duration = seriesModel.get('animationDurationUpdate');\n  var easing = seriesModel.get('animationEasingUpdate');\n  var shadowDepthMaterial = currentMesh.shadowDepthMaterial;\n\n  if (enableAnimation && previousMesh && duration > 0 // Only animate when bar count are not changed\n  && previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount) {\n    currentMesh.material.define('vertex', 'VERTEX_ANIMATION');\n    currentMesh.ignorePreZ = true;\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.define('vertex', 'VERTEX_ANIMATION');\n    }\n\n    for (var i = 0; i < mappingAttributes.length; i++) {\n      currentMesh.geometry.attributes[mappingAttributes[i][0]].value = previousMesh.geometry.attributes[mappingAttributes[i][1]].value;\n    }\n\n    currentMesh.geometry.dirty();\n    currentMesh.__percent = 0;\n    currentMesh.material.set('percent', 0);\n    currentMesh.stopAnimation();\n    currentMesh.animate().when(duration, {\n      __percent: 1\n    }).during(function () {\n      currentMesh.material.set('percent', currentMesh.__percent);\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.set('percent', currentMesh.__percent);\n      }\n    }).done(function () {\n      currentMesh.ignorePreZ = false;\n      currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n      }\n    }).start(easing);\n  } else {\n    currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n    }\n  }\n};\n\nexport default graphicGL;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/util/graphicGL.js"],"names":["Mesh","Renderer","Texture2D","Texture","Shader","Material","Node3D","Geometry","echarts","Scene","LRUCache","textureUtil","EChartsSurface","AmbientCubemapLight","AmbientSHLight","shUtil","retrieve","SphereGeometry","PlaneGeometry","CubeGeometry","AmbientLight","DirectionalLight","PointLight","SpotLight","PerspectiveCamera","OrthographicCamera","Vector2","Vector3","Vector4","Quaternion","Matrix2","Matrix2d","Matrix3","Matrix4","Plane","Ray","BoundingBox","Frustum","animatableMixin","utilGLSL","prezGLSL","commonGLSL","colorGLSL","lambertGLSL","realisticGLSL","hatchingGLSL","shadowGLSL","Object","assign","prototype","import","isValueNone","value","isValueImage","HTMLCanvasElement","HTMLImageElement","Image","isECharts","getZr","setOption","oldAddToScene","addToScene","oldRemoveFromScene","removeFromScene","node","call","__zr","zr","traverse","child","addAnimatorsToZr","removeAnimatorsFromZr","setTextureImage","textureName","imgValue","api","textureOpts","shader","material","texture","autoUpdateTextureStatus","disableTexture","graphicGL","loadTexture","enableTexture","refresh","set","Node","blankImage","getBlankImage","createBlank","image","nearestPowerOfTwo","val","Math","pow","round","log","LN2","convertTextureToPowerOfTwo","wrapS","REPEAT","wrapT","width","height","canvas","document","createElement","ctx","getContext","drawImage","cb","keys","sort","prefix","i","length","textureCache","__textureCache","id","__textureid__","textureObj","get","surface","onupdate","getTexture","__uid__","put","setECharts","callbacks","push","match","exposure","fileType","dirty","forEach","originalImage","onload","crossOrigin","src","createAmbientCubemap","opt","renderer","textureUrl","firstNotNull","ambientCubemap","intensity","specularIntensity","ambientSH","diffuseIntensity","coefficients","cubemap","flipY","process","env","NODE_ENV","time","Date","now","prefilter","dTime","console","projectEnvironmentMap","lod","specular","diffuse","createBlankTexture","isImage","additiveBlend","gl","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE","parseColor","colorStr","rgba","Array","color","parse","directionFromAlphaBeta","alpha","beta","theta","PI","phi","dir","r","sin","cos","getShadowResolution","shadowQuality","shadowResolution","COMMON_SHADERS","createShader","vertexShaderStr","source","fragmentShaderStr","error","name","createMaterial","defines","defineName","define","setMaterialFromModel","shading","model","materialModel","getModel","detailTexture","uvRepeat","uvOffset","repeatParam","CLAMP_TO_EDGE","textureOpt","anisotropic","roughness","metalness","isNaN","normalTextureVal","detailUvRepeat","detailUvOffset","tams","updateVertexAnimation","mappingAttributes","previousMesh","currentMesh","seriesModel","enableAnimation","duration","easing","shadowDepthMaterial","geometry","vertexCount","ignorePreZ","attributes","__percent","stopAnimation","animate","when","during","done","undefine","start"],"mappings":"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","sourcesContent":["import Mesh from 'claygl/src/Mesh';\nimport Renderer from 'claygl/src/Renderer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport Material from 'claygl/src/Material';\nimport Node3D from 'claygl/src/Node';\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport Scene from 'claygl/src/Scene';\nimport LRUCache from 'zrender/lib/core/LRU';\nimport textureUtil from 'claygl/src/util/texture';\nimport EChartsSurface from './EChartsSurface';\nimport AmbientCubemapLight from 'claygl/src/light/AmbientCubemap';\nimport AmbientSHLight from 'claygl/src/light/AmbientSH';\nimport shUtil from 'claygl/src/util/sh';\nimport retrieve from './retrieve';\nimport SphereGeometry from 'claygl/src/geometry/Sphere';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport CubeGeometry from 'claygl/src/geometry/Cube';\nimport AmbientLight from 'claygl/src/light/Ambient';\nimport DirectionalLight from 'claygl/src/light/Directional';\nimport PointLight from 'claygl/src/light/Point';\nimport SpotLight from 'claygl/src/light/Spot';\nimport PerspectiveCamera from 'claygl/src/camera/Perspective';\nimport OrthographicCamera from 'claygl/src/camera/Orthographic'; // Math\n\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector4 from 'claygl/src/math/Vector4';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport Matrix2 from 'claygl/src/math/Matrix2';\nimport Matrix2d from 'claygl/src/math/Matrix2d';\nimport Matrix3 from 'claygl/src/math/Matrix3';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Plane from 'claygl/src/math/Plane';\nimport Ray from 'claygl/src/math/Ray';\nimport BoundingBox from 'claygl/src/math/BoundingBox';\nimport Frustum from 'claygl/src/math/Frustum';\nimport animatableMixin from './animatableMixin'; // Some common shaders\n\nimport utilGLSL from 'claygl/src/shader/source/util.glsl.js';\nimport prezGLSL from 'claygl/src/shader/source/prez.glsl.js';\nimport commonGLSL from './shader/common.glsl.js';\nimport colorGLSL from './shader/color.glsl.js';\nimport lambertGLSL from './shader/lambert.glsl.js';\nimport realisticGLSL from './shader/realistic.glsl.js';\nimport hatchingGLSL from './shader/hatching.glsl.js';\nimport shadowGLSL from './shader/shadow.glsl.js';\nObject.assign(Node3D.prototype, animatableMixin);\nShader.import(utilGLSL);\nShader.import(prezGLSL);\nShader.import(commonGLSL);\nShader.import(colorGLSL);\nShader.import(lambertGLSL);\nShader.import(realisticGLSL);\nShader.import(hatchingGLSL);\nShader.import(shadowGLSL);\n\nfunction isValueNone(value) {\n  return !value || value === 'none';\n}\n\nfunction isValueImage(value) {\n  return value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof Image;\n}\n\nfunction isECharts(value) {\n  return value.getZr && value.setOption;\n} // Overwrite addToScene and removeFromScene\n\n\nvar oldAddToScene = Scene.prototype.addToScene;\nvar oldRemoveFromScene = Scene.prototype.removeFromScene;\n\nScene.prototype.addToScene = function (node) {\n  oldAddToScene.call(this, node);\n\n  if (this.__zr) {\n    var zr = this.__zr;\n    node.traverse(function (child) {\n      child.__zr = zr;\n\n      if (child.addAnimatorsToZr) {\n        child.addAnimatorsToZr(zr);\n      }\n    });\n  }\n};\n\nScene.prototype.removeFromScene = function (node) {\n  oldRemoveFromScene.call(this, node);\n  node.traverse(function (child) {\n    var zr = child.__zr;\n    child.__zr = null;\n\n    if (zr && child.removeAnimatorsFromZr) {\n      child.removeAnimatorsFromZr(zr);\n    }\n  });\n};\n/**\n * @param {string} textureName\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n */\n\n\nMaterial.prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {\n  if (!this.shader) {\n    return;\n  }\n\n  var zr = api.getZr();\n  var material = this;\n  var texture;\n  material.autoUpdateTextureStatus = false; // disableTexture first\n\n  material.disableTexture(textureName);\n\n  if (!isValueNone(imgValue)) {\n    texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {\n      material.enableTexture(textureName);\n      zr && zr.refresh();\n    }); // Set texture immediately for other code to verify if have this texture.\n\n    material.set(textureName, texture);\n  }\n\n  return texture;\n};\n\nvar graphicGL = {};\ngraphicGL.Renderer = Renderer;\ngraphicGL.Node = Node3D;\ngraphicGL.Mesh = Mesh;\ngraphicGL.Shader = Shader;\ngraphicGL.Material = Material;\ngraphicGL.Texture = Texture;\ngraphicGL.Texture2D = Texture2D; // Geometries\n\ngraphicGL.Geometry = Geometry;\ngraphicGL.SphereGeometry = SphereGeometry;\ngraphicGL.PlaneGeometry = PlaneGeometry;\ngraphicGL.CubeGeometry = CubeGeometry; // Lights\n\ngraphicGL.AmbientLight = AmbientLight;\ngraphicGL.DirectionalLight = DirectionalLight;\ngraphicGL.PointLight = PointLight;\ngraphicGL.SpotLight = SpotLight; // Cameras\n\ngraphicGL.PerspectiveCamera = PerspectiveCamera;\ngraphicGL.OrthographicCamera = OrthographicCamera; // Math\n\ngraphicGL.Vector2 = Vector2;\ngraphicGL.Vector3 = Vector3;\ngraphicGL.Vector4 = Vector4;\ngraphicGL.Quaternion = Quaternion;\ngraphicGL.Matrix2 = Matrix2;\ngraphicGL.Matrix2d = Matrix2d;\ngraphicGL.Matrix3 = Matrix3;\ngraphicGL.Matrix4 = Matrix4;\ngraphicGL.Plane = Plane;\ngraphicGL.Ray = Ray;\ngraphicGL.BoundingBox = BoundingBox;\ngraphicGL.Frustum = Frustum; // Texture utilities\n\nvar blankImage = null;\n\nfunction getBlankImage() {\n  if (blankImage !== null) {\n    return blankImage;\n  }\n\n  blankImage = textureUtil.createBlank('rgba(255,255,255,0)').image;\n  return blankImage;\n}\n\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\n\nfunction convertTextureToPowerOfTwo(texture) {\n  if ((texture.wrapS === Texture.REPEAT || texture.wrapT === Texture.REPEAT) && texture.image) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n\n    if (width !== texture.width || height !== texture.height) {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(texture.image, 0, 0, width, height);\n      texture.image = canvas;\n    }\n  }\n}\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n * @param {Function} cb\n */\n// TODO Promise, test\n\n\ngraphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {\n  if (typeof textureOpts === 'function') {\n    cb = textureOpts;\n    textureOpts = {};\n  }\n\n  textureOpts = textureOpts || {};\n  var keys = Object.keys(textureOpts).sort();\n  var prefix = '';\n\n  for (var i = 0; i < keys.length; i++) {\n    prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';\n  }\n\n  var textureCache = api.__textureCache = api.__textureCache || new LRUCache(20);\n\n  if (isECharts(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      var surface = new EChartsSurface(imgValue);\n\n      surface.onupdate = function () {\n        api.getZr().refresh();\n      };\n\n      textureObj = {\n        texture: surface.getTexture()\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      cb && cb(textureObj.texture);\n    } else {\n      textureObj.texture.surface.setECharts(imgValue);\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else if (isValueImage(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      textureObj = {\n        texture: new graphicGL.Texture2D({\n          image: imgValue\n        })\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      convertTextureToPowerOfTwo(textureObj.texture); // TODO Next tick?\n\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else {\n    var textureObj = textureCache.get(prefix + imgValue);\n\n    if (textureObj) {\n      if (textureObj.callbacks) {\n        // Add to pending callbacks\n        textureObj.callbacks.push(cb);\n      } else {\n        // TODO Next tick?\n        cb && cb(textureObj.texture);\n      }\n    } else {\n      // Maybe base64\n      if (imgValue.match(/.hdr$|^data:application\\/octet-stream/)) {\n        textureObj = {\n          callbacks: [cb]\n        };\n        var texture = textureUtil.loadTexture(imgValue, {\n          exposure: textureOpts.exposure,\n          fileType: 'hdr'\n        }, function () {\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        });\n        textureObj.texture = texture;\n        textureCache.put(prefix + imgValue, textureObj);\n      } else {\n        var texture = new graphicGL.Texture2D({\n          image: new Image()\n        });\n\n        for (var i = 0; i < keys.length; i++) {\n          texture[keys[i]] = textureOpts[keys[i]];\n        }\n\n        textureObj = {\n          texture: texture,\n          callbacks: [cb]\n        };\n        var originalImage = texture.image;\n\n        originalImage.onload = function () {\n          texture.image = originalImage;\n          convertTextureToPowerOfTwo(texture);\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        };\n\n        originalImage.crossOrigin = 'Anonymous';\n        originalImage.src = imgValue; // Use blank image as place holder.\n\n        texture.image = getBlankImage();\n        textureCache.put(prefix + imgValue, textureObj);\n      }\n    }\n\n    return textureObj.texture;\n  }\n};\n/**\n * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light\n * @return {Object} { specular, diffuse }\n */\n\n\ngraphicGL.createAmbientCubemap = function (opt, renderer, api, cb) {\n  opt = opt || {};\n  var textureUrl = opt.texture;\n  var exposure = retrieve.firstNotNull(opt.exposure, 1.0);\n  var ambientCubemap = new AmbientCubemapLight({\n    intensity: retrieve.firstNotNull(opt.specularIntensity, 1.0)\n  });\n  var ambientSH = new AmbientSHLight({\n    intensity: retrieve.firstNotNull(opt.diffuseIntensity, 1.0),\n    coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]\n  });\n  ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {\n    exposure: exposure\n  }, function () {\n    // TODO Performance when multiple view\n    ambientCubemap.cubemap.flipY = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var time = Date.now();\n    }\n\n    ambientCubemap.prefilter(renderer, 32);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var dTime = Date.now() - time;\n      console.log('Prefilter environment map: ' + dTime + 'ms');\n    }\n\n    ambientSH.coefficients = shUtil.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {\n      lod: 1\n    });\n    cb && cb(); // TODO Refresh ?\n  });\n  return {\n    specular: ambientCubemap,\n    diffuse: ambientSH\n  };\n};\n/**\n * Create a blank texture for placeholder\n */\n\n\ngraphicGL.createBlankTexture = textureUtil.createBlank;\n/**\n * If value is image\n * @param {*}\n * @return {boolean}\n */\n\ngraphicGL.isImage = isValueImage;\n\ngraphicGL.additiveBlend = function (gl) {\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n};\n/**\n * @param {string|Array.<number>} colorStr\n * @param {Array.<number>} [rgba]\n * @return {Array.<number>} rgba\n */\n\n\ngraphicGL.parseColor = function (colorStr, rgba) {\n  if (colorStr instanceof Array) {\n    if (!rgba) {\n      rgba = [];\n    } // Color has been parsed.\n\n\n    rgba[0] = colorStr[0];\n    rgba[1] = colorStr[1];\n    rgba[2] = colorStr[2];\n\n    if (colorStr.length > 3) {\n      rgba[3] = colorStr[3];\n    } else {\n      rgba[3] = 1;\n    }\n\n    return rgba;\n  }\n\n  rgba = echarts.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];\n  rgba[0] /= 255;\n  rgba[1] /= 255;\n  rgba[2] /= 255;\n  return rgba;\n};\n/**\n * Convert alpha beta rotation to direction.\n * @param {number} alpha\n * @param {number} beta\n * @return {Array.<number>}\n */\n\n\ngraphicGL.directionFromAlphaBeta = function (alpha, beta) {\n  var theta = alpha / 180 * Math.PI + Math.PI / 2;\n  var phi = -beta / 180 * Math.PI + Math.PI / 2;\n  var dir = [];\n  var r = Math.sin(theta);\n  dir[0] = r * Math.cos(phi);\n  dir[1] = -Math.cos(theta);\n  dir[2] = r * Math.sin(phi);\n  return dir;\n};\n/**\n * Get shadow resolution from shadowQuality configuration\n */\n\n\ngraphicGL.getShadowResolution = function (shadowQuality) {\n  var shadowResolution = 1024;\n\n  switch (shadowQuality) {\n    case 'low':\n      shadowResolution = 512;\n      break;\n\n    case 'medium':\n      break;\n\n    case 'high':\n      shadowResolution = 2048;\n      break;\n\n    case 'ultra':\n      shadowResolution = 4096;\n      break;\n  }\n\n  return shadowResolution;\n};\n/**\n * Shading utilities\n */\n\n\ngraphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching', 'shadow'];\n/**\n * Create shader including vertex and fragment\n * @param {string} prefix.\n */\n\ngraphicGL.createShader = function (prefix) {\n  if (prefix === 'ecgl.shadow') {\n    prefix = 'ecgl.displayShadow';\n  }\n\n  var vertexShaderStr = Shader.source(prefix + '.vertex');\n  var fragmentShaderStr = Shader.source(prefix + '.fragment');\n\n  if (!vertexShaderStr) {\n    console.error('Vertex shader of \\'%s\\' not exits', prefix);\n  }\n\n  if (!fragmentShaderStr) {\n    console.error('Fragment shader of \\'%s\\' not exits', prefix);\n  }\n\n  var shader = new Shader(vertexShaderStr, fragmentShaderStr);\n  shader.name = prefix;\n  return shader;\n};\n\ngraphicGL.createMaterial = function (prefix, defines) {\n  if (!(defines instanceof Array)) {\n    defines = [defines];\n  }\n\n  var shader = graphicGL.createShader(prefix);\n  var material = new Material({\n    shader: shader\n  });\n  defines.forEach(function (defineName) {\n    if (typeof defineName === 'string') {\n      material.define(defineName);\n    }\n  });\n  return material;\n};\n/**\n * Set material from model.\n * @param {clay.Material} material\n * @param {module:echarts/model/Model} model\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\ngraphicGL.setMaterialFromModel = function (shading, material, model, api) {\n  material.autoUpdateTextureStatus = false;\n  var materialModel = model.getModel(shading + 'Material');\n  var detailTexture = materialModel.get('detailTexture');\n  var uvRepeat = retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);\n  var uvOffset = retrieve.firstNotNull(materialModel.get('textureOffset'), 0.0);\n\n  if (typeof uvRepeat === 'number') {\n    uvRepeat = [uvRepeat, uvRepeat];\n  }\n\n  if (typeof uvOffset === 'number') {\n    uvOffset = [uvOffset, uvOffset];\n  }\n\n  var repeatParam = uvRepeat[0] > 1 || uvRepeat[1] > 1 ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;\n  var textureOpt = {\n    anisotropic: 8,\n    wrapS: repeatParam,\n    wrapT: repeatParam\n  };\n\n  if (shading === 'realistic') {\n    var roughness = materialModel.get('roughness');\n    var metalness = materialModel.get('metalness');\n\n    if (metalness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(metalness)) {\n        material.setTextureImage('metalnessMap', metalness, api, textureOpt);\n        metalness = retrieve.firstNotNull(materialModel.get('metalnessAdjust'), 0.5);\n      }\n    } else {\n      // Default metalness.\n      metalness = 0;\n    }\n\n    if (roughness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(roughness)) {\n        material.setTextureImage('roughnessMap', roughness, api, textureOpt);\n        roughness = retrieve.firstNotNull(materialModel.get('roughnessAdjust'), 0.5);\n      }\n    } else {\n      // Default roughness.\n      roughness = 0.5;\n    }\n\n    var normalTextureVal = materialModel.get('normalTexture');\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);\n    material.set({\n      roughness: roughness,\n      metalness: metalness,\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    }); // var normalTexture = material.get('normalMap');\n    // if (normalTexture) {\n    // PENDING\n    // normalTexture.format = Texture.SRGB;\n    // }\n  } else if (shading === 'lambert') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'color') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'hatching') {\n    var tams = materialModel.get('hatchingTextures') || [];\n\n    if (tams.length < 6) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Invalid hatchingTextures.');\n      }\n    }\n\n    for (var i = 0; i < 6; i++) {\n      material.setTextureImage('hatch' + (i + 1), tams[i], api, {\n        anisotropic: 8,\n        wrapS: graphicGL.Texture.REPEAT,\n        wrapT: graphicGL.Texture.REPEAT\n      });\n    }\n\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  }\n};\n\ngraphicGL.updateVertexAnimation = function (mappingAttributes, previousMesh, currentMesh, seriesModel) {\n  var enableAnimation = seriesModel.get('animation');\n  var duration = seriesModel.get('animationDurationUpdate');\n  var easing = seriesModel.get('animationEasingUpdate');\n  var shadowDepthMaterial = currentMesh.shadowDepthMaterial;\n\n  if (enableAnimation && previousMesh && duration > 0 // Only animate when bar count are not changed\n  && previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount) {\n    currentMesh.material.define('vertex', 'VERTEX_ANIMATION');\n    currentMesh.ignorePreZ = true;\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.define('vertex', 'VERTEX_ANIMATION');\n    }\n\n    for (var i = 0; i < mappingAttributes.length; i++) {\n      currentMesh.geometry.attributes[mappingAttributes[i][0]].value = previousMesh.geometry.attributes[mappingAttributes[i][1]].value;\n    }\n\n    currentMesh.geometry.dirty();\n    currentMesh.__percent = 0;\n    currentMesh.material.set('percent', 0);\n    currentMesh.stopAnimation();\n    currentMesh.animate().when(duration, {\n      __percent: 1\n    }).during(function () {\n      currentMesh.material.set('percent', currentMesh.__percent);\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.set('percent', currentMesh.__percent);\n      }\n    }).done(function () {\n      currentMesh.ignorePreZ = false;\n      currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n      }\n    }).start(easing);\n  } else {\n    currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n    }\n  }\n};\n\nexport default graphicGL;"]},"metadata":{},"sourceType":"module"}