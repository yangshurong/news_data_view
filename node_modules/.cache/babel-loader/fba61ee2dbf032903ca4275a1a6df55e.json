{"ast":null,"code":"import * as matrix from 'zrender/lib/core/matrix';\nimport * as vector from 'zrender/lib/core/vector';\n\nfunction GLViewHelper(viewGL) {\n  this.viewGL = viewGL;\n}\n\nGLViewHelper.prototype.reset = function (seriesModel, api) {\n  this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n\n  this._viewTransform = matrix.create();\n  this.updateTransform(seriesModel, api);\n};\n\nGLViewHelper.prototype.updateTransform = function (seriesModel, api) {\n  var coordinateSystem = seriesModel.coordinateSystem;\n\n  if (coordinateSystem.getRoamTransform) {\n    matrix.invert(this._viewTransform, coordinateSystem.getRoamTransform());\n\n    this._setCameraTransform(this._viewTransform);\n\n    api.getZr().refresh();\n  }\n}; // Reimplement the dataToPoint of coordinate system.\n// Remove the effect of pan/zoom transform\n\n\nGLViewHelper.prototype.dataToPoint = function (coordSys, data, pt) {\n  pt = coordSys.dataToPoint(data, null, pt);\n  var viewTransform = this._viewTransform;\n\n  if (viewTransform) {\n    vector.applyTransform(pt, pt, viewTransform);\n  }\n};\n/**\n * Remove transform info in point.\n */\n\n\nGLViewHelper.prototype.removeTransformInPoint = function (pt) {\n  if (this._viewTransform) {\n    vector.applyTransform(pt, pt, this._viewTransform);\n  }\n\n  return pt;\n};\n/**\n * Return number\n */\n\n\nGLViewHelper.prototype.getZoom = function () {\n  if (this._viewTransform) {\n    var m = this._viewTransform;\n    return 1 / Math.max(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]));\n  }\n\n  return 1;\n};\n\nGLViewHelper.prototype._setCameraTransform = function (m) {\n  var camera = this.viewGL.camera;\n  camera.position.set(m[4], m[5], 0);\n  camera.scale.set(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]), 1);\n};\n\nGLViewHelper.prototype._updateCamera = function (width, height, dpr) {\n  // TODO, left, top, right, bottom\n  this.viewGL.setViewport(0, 0, width, height, dpr);\n  var camera = this.viewGL.camera;\n  camera.left = camera.top = 0;\n  camera.bottom = height;\n  camera.right = width;\n  camera.near = 0;\n  camera.far = 100;\n};\n\nexport default GLViewHelper;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/common/GLViewHelper.js"],"names":["matrix","vector","GLViewHelper","viewGL","prototype","reset","seriesModel","api","_updateCamera","getWidth","getHeight","getDevicePixelRatio","_viewTransform","create","updateTransform","coordinateSystem","getRoamTransform","invert","_setCameraTransform","getZr","refresh","dataToPoint","coordSys","data","pt","viewTransform","applyTransform","removeTransformInPoint","getZoom","m","Math","max","sqrt","camera","position","set","scale","width","height","dpr","setViewport","left","top","bottom","right","near","far"],"mappings":"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","sourcesContent":["import * as matrix from 'zrender/lib/core/matrix';\nimport * as vector from 'zrender/lib/core/vector';\n\nfunction GLViewHelper(viewGL) {\n  this.viewGL = viewGL;\n}\n\nGLViewHelper.prototype.reset = function (seriesModel, api) {\n  this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n\n  this._viewTransform = matrix.create();\n  this.updateTransform(seriesModel, api);\n};\n\nGLViewHelper.prototype.updateTransform = function (seriesModel, api) {\n  var coordinateSystem = seriesModel.coordinateSystem;\n\n  if (coordinateSystem.getRoamTransform) {\n    matrix.invert(this._viewTransform, coordinateSystem.getRoamTransform());\n\n    this._setCameraTransform(this._viewTransform);\n\n    api.getZr().refresh();\n  }\n}; // Reimplement the dataToPoint of coordinate system.\n// Remove the effect of pan/zoom transform\n\n\nGLViewHelper.prototype.dataToPoint = function (coordSys, data, pt) {\n  pt = coordSys.dataToPoint(data, null, pt);\n  var viewTransform = this._viewTransform;\n\n  if (viewTransform) {\n    vector.applyTransform(pt, pt, viewTransform);\n  }\n};\n/**\n * Remove transform info in point.\n */\n\n\nGLViewHelper.prototype.removeTransformInPoint = function (pt) {\n  if (this._viewTransform) {\n    vector.applyTransform(pt, pt, this._viewTransform);\n  }\n\n  return pt;\n};\n/**\n * Return number\n */\n\n\nGLViewHelper.prototype.getZoom = function () {\n  if (this._viewTransform) {\n    var m = this._viewTransform;\n    return 1 / Math.max(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]));\n  }\n\n  return 1;\n};\n\nGLViewHelper.prototype._setCameraTransform = function (m) {\n  var camera = this.viewGL.camera;\n  camera.position.set(m[4], m[5], 0);\n  camera.scale.set(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]), 1);\n};\n\nGLViewHelper.prototype._updateCamera = function (width, height, dpr) {\n  // TODO, left, top, right, bottom\n  this.viewGL.setViewport(0, 0, width, height, dpr);\n  var camera = this.viewGL.camera;\n  camera.left = camera.top = 0;\n  camera.bottom = height;\n  camera.right = width;\n  camera.near = 0;\n  camera.far = 100;\n};\n\nexport default GLViewHelper;"]},"metadata":{},"sourceType":"module"}