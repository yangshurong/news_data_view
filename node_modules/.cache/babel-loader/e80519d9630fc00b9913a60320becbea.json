{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\n\nvar SourceManager = function () {\n  function SourceManager(sourceHost) {\n    this._sourceList = [];\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n\n  SourceManager.prototype.prepareSource = function () {\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0;\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } else {\n        data = seriesModel.get('data', true);\n        sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      }\n\n      var newMetaRawOption = this._getSourceMetaRawOption();\n\n      var upMetaRawOption = upSource ? upSource.metaRawOption : null;\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption ? upMetaRawOption.seriesLayoutBy : null);\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption ? upMetaRawOption.sourceHeader : null);\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption ? upMetaRawOption.dimensions : null);\n      resultSourceList = [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost;\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null, null)];\n        upstreamSignList = [];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n\n    if (!sourceList.length) {\n      return true;\n    }\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if (upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexport { SourceManager };\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\n\nfunction isSeries(sourceHost) {\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts@5.0.1@echarts/lib/data/helper/sourceManager.js"],"names":["setAsPrimitive","map","isTypedArray","assert","each","retrieve2","createSource","cloneSourceShallow","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ORIGINAL","querySeriesUpstreamDatasetModel","queryDatasetUpstreamDatasetModels","applyDataTransform","SourceManager","sourceHost","_sourceList","_upstreamSignList","_versionSignBase","_sourceHost","prototype","dirty","_setLocalSource","sourceList","upstreamSignList","_getVersionSign","uid","prepareSource","_isDirty","_createSource","upSourceMgrList","_getUpstreamSourceManagers","hasUpstream","length","resultSourceList","isSeries","seriesModel","data","sourceFormat","upSource","upSourceMgr","getSource","get","newMetaRawOption","_getSourceMetaRawOption","upMetaRawOption","metaRawOption","seriesLayoutBy","sourceHeader","dimensions","datasetModel","result","_applyTransform","sourceData","process","env","NODE_ENV","upMgrList","transformOption","fromTransformResult","errMsg","doThrow","upSourceList","upMgr","push","datasetIndex","componentIndex","i","upSrcMgr","sourceIndex","getSourceManager","model","disableTransformOptionMerge","option","transform","mainType","Error"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA,SAASA,cAAT,EAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CC,MAA5C,EAAoDC,IAApD,EAA0DC,SAA1D,QAA2E,uBAA3E;AACA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,WAAjD;AACA,SAASC,yBAAT,EAAoCC,sBAApC,QAAkE,kBAAlE;AACA,SAASC,+BAAT,EAA0CC,iCAA1C,QAAmF,gBAAnF;AACA,SAASC,kBAAT,QAAmC,aAAnC;;AAEA,IAAIC,aAAa,GAAG,YAAY;AAC9B,WAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,WAAL,GAAmBJ,UAAnB;AACD;;AAEDD,EAAAA,aAAa,CAACM,SAAd,CAAwBC,KAAxB,GAAgC,YAAY;AAC1C,SAAKC,eAAL,CAAqB,EAArB,EAAyB,EAAzB;AACD,GAFD;;AAIAR,EAAAA,aAAa,CAACM,SAAd,CAAwBE,eAAxB,GAA0C,UAAUC,UAAV,EAAsBC,gBAAtB,EAAwC;AAChF,SAAKR,WAAL,GAAmBO,UAAnB;AACA,SAAKN,iBAAL,GAAyBO,gBAAzB;AACA,SAAKN,gBAAL;;AAEA,QAAI,KAAKA,gBAAL,GAAwB,IAA5B,EAAkC;AAChC,WAAKA,gBAAL,GAAwB,CAAxB;AACD;AACF,GARD;;AAUAJ,EAAAA,aAAa,CAACM,SAAd,CAAwBK,eAAxB,GAA0C,YAAY;AACpD,WAAO,KAAKN,WAAL,CAAiBO,GAAjB,GAAuB,GAAvB,GAA6B,KAAKR,gBAAzC;AACD,GAFD;;AAIAJ,EAAAA,aAAa,CAACM,SAAd,CAAwBO,aAAxB,GAAwC,YAAY;AAClD,QAAI,KAAKC,QAAL,EAAJ,EAAqB;AACnB,WAAKC,aAAL;AACD;AACF,GAJD;;AAMAf,EAAAA,aAAa,CAACM,SAAd,CAAwBS,aAAxB,GAAwC,YAAY;AAClD,SAAKP,eAAL,CAAqB,EAArB,EAAyB,EAAzB;;AAEA,QAAIP,UAAU,GAAG,KAAKI,WAAtB;;AAEA,QAAIW,eAAe,GAAG,KAAKC,0BAAL,EAAtB;;AAEA,QAAIC,WAAW,GAAG,CAAC,CAACF,eAAe,CAACG,MAApC;AACA,QAAIC,gBAAJ;AACA,QAAIV,gBAAJ;;AAEA,QAAIW,QAAQ,CAACpB,UAAD,CAAZ,EAA0B;AACxB,UAAIqB,WAAW,GAAGrB,UAAlB;AACA,UAAIsB,IAAI,GAAG,KAAK,CAAhB;AACA,UAAIC,YAAY,GAAG,KAAK,CAAxB;AACA,UAAIC,QAAQ,GAAG,KAAK,CAApB;;AAEA,UAAIP,WAAJ,EAAiB;AACf,YAAIQ,WAAW,GAAGV,eAAe,CAAC,CAAD,CAAjC;AACAU,QAAAA,WAAW,CAACb,aAAZ;AACAY,QAAAA,QAAQ,GAAGC,WAAW,CAACC,SAAZ,EAAX;AACAJ,QAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAhB;AACAC,QAAAA,YAAY,GAAGC,QAAQ,CAACD,YAAxB;AACAd,QAAAA,gBAAgB,GAAG,CAACgB,WAAW,CAACf,eAAZ,EAAD,CAAnB;AACD,OAPD,MAOO;AACLY,QAAAA,IAAI,GAAGD,WAAW,CAACM,GAAZ,CAAgB,MAAhB,EAAwB,IAAxB,CAAP;AACAJ,QAAAA,YAAY,GAAGnC,YAAY,CAACkC,IAAD,CAAZ,GAAqB5B,yBAArB,GAAiDC,sBAAhE;AACAc,QAAAA,gBAAgB,GAAG,EAAnB;AACD;;AAED,UAAImB,gBAAgB,GAAG,KAAKC,uBAAL,EAAvB;;AAEA,UAAIC,eAAe,GAAGN,QAAQ,GAAGA,QAAQ,CAACO,aAAZ,GAA4B,IAA1D;AACA,UAAIC,cAAc,GAAGzC,SAAS,CAACqC,gBAAgB,CAACI,cAAlB,EAAkCF,eAAe,GAAGA,eAAe,CAACE,cAAnB,GAAoC,IAArF,CAA9B;AACA,UAAIC,YAAY,GAAG1C,SAAS,CAACqC,gBAAgB,CAACK,YAAlB,EAAgCH,eAAe,GAAGA,eAAe,CAACG,YAAnB,GAAkC,IAAjF,CAA5B;AACA,UAAIC,UAAU,GAAG3C,SAAS,CAACqC,gBAAgB,CAACM,UAAlB,EAA8BJ,eAAe,GAAGA,eAAe,CAACI,UAAnB,GAAgC,IAA7E,CAA1B;AACAf,MAAAA,gBAAgB,GAAG,CAAC3B,YAAY,CAAC8B,IAAD,EAAO;AACrCU,QAAAA,cAAc,EAAEA,cADqB;AAErCC,QAAAA,YAAY,EAAEA,YAFuB;AAGrCC,QAAAA,UAAU,EAAEA;AAHyB,OAAP,EAI7BX,YAJ6B,EAIfF,WAAW,CAACM,GAAZ,CAAgB,QAAhB,EAA0B,IAA1B,CAJe,CAAb,CAAnB;AAKD,KA9BD,MA8BO;AACL,UAAIQ,YAAY,GAAGnC,UAAnB;;AAEA,UAAIiB,WAAJ,EAAiB;AACf,YAAImB,MAAM,GAAG,KAAKC,eAAL,CAAqBtB,eAArB,CAAb;;AAEAI,QAAAA,gBAAgB,GAAGiB,MAAM,CAAC5B,UAA1B;AACAC,QAAAA,gBAAgB,GAAG2B,MAAM,CAAC3B,gBAA1B;AACD,OALD,MAKO;AACL,YAAI6B,UAAU,GAAGH,YAAY,CAACR,GAAb,CAAiB,QAAjB,EAA2B,IAA3B,CAAjB;AACAR,QAAAA,gBAAgB,GAAG,CAAC3B,YAAY,CAAC8C,UAAD,EAAa,KAAKT,uBAAL,EAAb,EAA6C,IAA7C,EAAmD,IAAnD,CAAb,CAAnB;AACApB,QAAAA,gBAAgB,GAAG,EAAnB;AACD;AACF;;AAED,QAAI8B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCpD,MAAAA,MAAM,CAAC8B,gBAAgB,IAAIV,gBAArB,CAAN;AACD;;AAED,SAAKF,eAAL,CAAqBY,gBAArB,EAAuCV,gBAAvC;AACD,GA7DD;;AA+DAV,EAAAA,aAAa,CAACM,SAAd,CAAwBgC,eAAxB,GAA0C,UAAUK,SAAV,EAAqB;AAC7D,QAAIP,YAAY,GAAG,KAAK/B,WAAxB;AACA,QAAIuC,eAAe,GAAGR,YAAY,CAACR,GAAb,CAAiB,WAAjB,EAA8B,IAA9B,CAAtB;AACA,QAAIiB,mBAAmB,GAAGT,YAAY,CAACR,GAAb,CAAiB,qBAAjB,EAAwC,IAAxC,CAA1B;;AAEA,QAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCpD,MAAAA,MAAM,CAACuD,mBAAmB,IAAI,IAAvB,IAA+BD,eAAe,IAAI,IAAnD,CAAN;AACD;;AAED,QAAIC,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,UAAIC,MAAM,GAAG,EAAb;;AAEA,UAAIH,SAAS,CAACxB,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,YAAIqB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCI,UAAAA,MAAM,GAAG,6EAAT;AACD;;AAEDC,QAAAA,OAAO,CAACD,MAAD,CAAP;AACD;AACF;;AAED,QAAIrC,UAAJ;AACA,QAAIuC,YAAY,GAAG,EAAnB;AACA,QAAItC,gBAAgB,GAAG,EAAvB;AACAnB,IAAAA,IAAI,CAACoD,SAAD,EAAY,UAAUM,KAAV,EAAiB;AAC/BA,MAAAA,KAAK,CAACpC,aAAN;AACA,UAAIY,QAAQ,GAAGwB,KAAK,CAACtB,SAAN,CAAgBkB,mBAAmB,IAAI,CAAvC,CAAf;AACA,UAAIC,MAAM,GAAG,EAAb;;AAEA,UAAID,mBAAmB,IAAI,IAAvB,IAA+B,CAACpB,QAApC,EAA8C;AAC5C,YAAIe,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCI,UAAAA,MAAM,GAAG,uDAAuDD,mBAAhE;AACD;;AAEDE,QAAAA,OAAO,CAACD,MAAD,CAAP;AACD;;AAEDE,MAAAA,YAAY,CAACE,IAAb,CAAkBzB,QAAlB;AACAf,MAAAA,gBAAgB,CAACwC,IAAjB,CAAsBD,KAAK,CAACtC,eAAN,EAAtB;AACD,KAfG,CAAJ;;AAiBA,QAAIiC,eAAJ,EAAqB;AACnBnC,MAAAA,UAAU,GAAGV,kBAAkB,CAAC6C,eAAD,EAAkBI,YAAlB,EAAgC;AAC7DG,QAAAA,YAAY,EAAEf,YAAY,CAACgB;AADkC,OAAhC,CAA/B;AAGD,KAJD,MAIO,IAAIP,mBAAmB,IAAI,IAA3B,EAAiC;AACtCpC,MAAAA,UAAU,GAAG,CAACf,kBAAkB,CAACsD,YAAY,CAAC,CAAD,CAAb,CAAnB,CAAb;AACD;;AAED,WAAO;AACLvC,MAAAA,UAAU,EAAEA,UADP;AAELC,MAAAA,gBAAgB,EAAEA;AAFb,KAAP;AAID,GArDD;;AAuDAV,EAAAA,aAAa,CAACM,SAAd,CAAwBQ,QAAxB,GAAmC,YAAY;AAC7C,QAAIL,UAAU,GAAG,KAAKP,WAAtB;;AAEA,QAAI,CAACO,UAAU,CAACU,MAAhB,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,QAAIH,eAAe,GAAG,KAAKC,0BAAL,EAAtB;;AAEA,SAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,eAAe,CAACG,MAApC,EAA4CkC,CAAC,EAA7C,EAAiD;AAC/C,UAAIC,QAAQ,GAAGtC,eAAe,CAACqC,CAAD,CAA9B;;AAEA,UAAIC,QAAQ,CAACxC,QAAT,MAAuB,KAAKX,iBAAL,CAAuBkD,CAAvB,MAA8BC,QAAQ,CAAC3C,eAAT,EAAzD,EAAqF;AACnF,eAAO,IAAP;AACD;AACF;AACF,GAhBD;;AAkBAX,EAAAA,aAAa,CAACM,SAAd,CAAwBqB,SAAxB,GAAoC,UAAU4B,WAAV,EAAuB;AACzD,WAAO,KAAKrD,WAAL,CAAiBqD,WAAW,IAAI,CAAhC,CAAP;AACD,GAFD;;AAIAvD,EAAAA,aAAa,CAACM,SAAd,CAAwBW,0BAAxB,GAAqD,YAAY;AAC/D,QAAIhB,UAAU,GAAG,KAAKI,WAAtB;;AAEA,QAAIgB,QAAQ,CAACpB,UAAD,CAAZ,EAA0B;AACxB,UAAImC,YAAY,GAAGvC,+BAA+B,CAACI,UAAD,CAAlD;AACA,aAAO,CAACmC,YAAD,GAAgB,EAAhB,GAAqB,CAACA,YAAY,CAACoB,gBAAb,EAAD,CAA5B;AACD,KAHD,MAGO;AACL,aAAOpE,GAAG,CAACU,iCAAiC,CAACG,UAAD,CAAlC,EAAgD,UAAUmC,YAAV,EAAwB;AAChF,eAAOA,YAAY,CAACoB,gBAAb,EAAP;AACD,OAFS,CAAV;AAGD;AACF,GAXD;;AAaAxD,EAAAA,aAAa,CAACM,SAAd,CAAwBwB,uBAAxB,GAAkD,YAAY;AAC5D,QAAI7B,UAAU,GAAG,KAAKI,WAAtB;AACA,QAAI4B,cAAJ;AACA,QAAIC,YAAJ;AACA,QAAIC,UAAJ;;AAEA,QAAId,QAAQ,CAACpB,UAAD,CAAZ,EAA0B;AACxBgC,MAAAA,cAAc,GAAGhC,UAAU,CAAC2B,GAAX,CAAe,gBAAf,EAAiC,IAAjC,CAAjB;AACAM,MAAAA,YAAY,GAAGjC,UAAU,CAAC2B,GAAX,CAAe,cAAf,EAA+B,IAA/B,CAAf;AACAO,MAAAA,UAAU,GAAGlC,UAAU,CAAC2B,GAAX,CAAe,YAAf,EAA6B,IAA7B,CAAb;AACD,KAJD,MAIO,IAAI,CAAC,KAAKX,0BAAL,GAAkCE,MAAvC,EAA+C;AACpD,UAAIsC,KAAK,GAAGxD,UAAZ;AACAgC,MAAAA,cAAc,GAAGwB,KAAK,CAAC7B,GAAN,CAAU,gBAAV,EAA4B,IAA5B,CAAjB;AACAM,MAAAA,YAAY,GAAGuB,KAAK,CAAC7B,GAAN,CAAU,cAAV,EAA0B,IAA1B,CAAf;AACAO,MAAAA,UAAU,GAAGsB,KAAK,CAAC7B,GAAN,CAAU,YAAV,EAAwB,IAAxB,CAAb;AACD;;AAED,WAAO;AACLK,MAAAA,cAAc,EAAEA,cADX;AAELC,MAAAA,YAAY,EAAEA,YAFT;AAGLC,MAAAA,UAAU,EAAEA;AAHP,KAAP;AAKD,GAtBD;;AAwBA,SAAOnC,aAAP;AACD,CAlNmB,EAApB;;AAoNA,SAASA,aAAT;AACA,OAAO,SAAS0D,2BAAT,CAAqCtB,YAArC,EAAmD;AACxD,MAAIQ,eAAe,GAAGR,YAAY,CAACuB,MAAb,CAAoBC,SAA1C;AACAhB,EAAAA,eAAe,IAAIzD,cAAc,CAACiD,YAAY,CAACuB,MAAb,CAAoBC,SAArB,CAAjC;AACD;;AAED,SAASvC,QAAT,CAAkBpB,UAAlB,EAA8B;AAC5B,SAAOA,UAAU,CAAC4D,QAAX,KAAwB,QAA/B;AACD;;AAED,SAASd,OAAT,CAAiBD,MAAjB,EAAyB;AACvB,QAAM,IAAIgB,KAAJ,CAAUhB,MAAV,CAAN;AACD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\n\nvar SourceManager = function () {\n  function SourceManager(sourceHost) {\n    this._sourceList = [];\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n\n  SourceManager.prototype.prepareSource = function () {\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0;\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } else {\n        data = seriesModel.get('data', true);\n        sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      }\n\n      var newMetaRawOption = this._getSourceMetaRawOption();\n\n      var upMetaRawOption = upSource ? upSource.metaRawOption : null;\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption ? upMetaRawOption.seriesLayoutBy : null);\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption ? upMetaRawOption.sourceHeader : null);\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption ? upMetaRawOption.dimensions : null);\n      resultSourceList = [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost;\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null, null)];\n        upstreamSignList = [];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n\n    if (!sourceList.length) {\n      return true;\n    }\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if (upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexport { SourceManager };\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\n\nfunction isSeries(sourceHost) {\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}"]},"metadata":{},"sourceType":"module"}