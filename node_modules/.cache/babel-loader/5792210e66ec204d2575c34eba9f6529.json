{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport * as lineContain from 'zrender/lib/contain/line';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nexport default echarts.ChartView.extend({\n  type: 'line3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var tmp = this._prevLine3DMesh;\n    this._prevLine3DMesh = this._line3DMesh;\n    this._line3DMesh = tmp;\n\n    if (!this._line3DMesh) {\n      this._line3DMesh = new graphicGL.Mesh({\n        geometry: new Lines3DGeometry({\n          useNativeLine: false,\n          sortTriangles: true\n        }),\n        material: new graphicGL.Material({\n          shader: graphicGL.createShader('ecgl.meshLines3D')\n        }),\n        // Render after axes\n        renderOrder: 10\n      });\n      this._line3DMesh.geometry.pick = this._pick.bind(this);\n    }\n\n    this.groupGL.remove(this._prevLine3DMesh);\n    this.groupGL.add(this._line3DMesh);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL); // TODO\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._doRender(seriesModel, api);\n\n    this._data = seriesModel.getData();\n    this._camera = coordSys.viewGL.camera;\n    this.updateCamera();\n\n    this._updateAnimation(seriesModel);\n  },\n  updateCamera: function () {\n    this._updateNDCPosition();\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var lineMesh = this._line3DMesh;\n    lineMesh.geometry.resetOffset();\n    var points = data.getLayout('points');\n    var colorArr = [];\n    var vertexColors = new Float32Array(points.length / 3 * 4);\n    var colorOffset = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] < 0.99) {\n        hasTransparent = true;\n      }\n    });\n    lineMesh.geometry.setVertexCount(lineMesh.geometry.getPolylineVertexCount(points));\n    lineMesh.geometry.setTriangleCount(lineMesh.geometry.getPolylineTriangleCount(points));\n    lineMesh.geometry.addPolyline(points, vertexColors, retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1));\n    lineMesh.geometry.dirty();\n    lineMesh.geometry.updateBoundingBox();\n    var material = lineMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    var debugWireframeModel = seriesModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      lineMesh.geometry.createAttribute('barycentric', 'float', 3);\n      lineMesh.geometry.generateBarycentric();\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n      lineMesh.material.set('wireframeLineColor', graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'));\n      lineMesh.material.set('wireframeLineWidth', retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1));\n    } else {\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n    }\n\n    this._points = points;\n\n    this._initHandler(seriesModel, api);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevPositionPrev', 'positionPrev'], ['prevPositionNext', 'positionNext']], this._prevLine3DMesh, this._line3DMesh, seriesModel);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var lineMesh = this._line3DMesh;\n    var lastDataIndex = -1;\n    lineMesh.seriesIndex = seriesModel.seriesIndex;\n    lineMesh.off('mousemove');\n    lineMesh.off('mouseout');\n    lineMesh.on('mousemove', function (e) {\n      var value = coordSys.pointToData(e.point.array);\n      var dataIndex = data.indicesOfNearest('x', value[0])[0];\n\n      if (dataIndex !== lastDataIndex) {\n        // this._downplay(lastDataIndex);\n        // this._highlight(dataIndex);\n        api.dispatchAction({\n          type: 'grid3DShowAxisPointer',\n          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]\n        });\n        lineMesh.dataIndex = dataIndex;\n      }\n\n      lastDataIndex = dataIndex;\n    }, this);\n    lineMesh.on('mouseout', function (e) {\n      // this._downplay(lastDataIndex);\n      lastDataIndex = -1;\n      lineMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  // _highlight: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  // _downplay: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  _updateNDCPosition: function () {\n    var worldViewProjection = new Matrix4();\n    var camera = this._camera;\n    Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);\n    var positionNDC = this._positionNDC;\n    var points = this._points;\n    var nPoints = points.length / 3;\n\n    if (!positionNDC || positionNDC.length / 2 !== nPoints) {\n      positionNDC = this._positionNDC = new Float32Array(nPoints * 2);\n    }\n\n    var pos = [];\n\n    for (var i = 0; i < nPoints; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      pos[0] = points[i3];\n      pos[1] = points[i3 + 1];\n      pos[2] = points[i3 + 2];\n      pos[3] = 1;\n      vec3.transformMat4(pos, pos, worldViewProjection.array);\n      positionNDC[i2] = pos[0] / pos[3];\n      positionNDC[i2 + 1] = pos[1] / pos[3];\n    }\n  },\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    var seriesModel = this._data.hostModel;\n    var lineWidth = seriesModel.get('lineStyle.width');\n    var dataIndex = -1;\n    var width = renderer.viewport.width;\n    var height = renderer.viewport.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    x = (x + 1) * halfWidth;\n    y = (y + 1) * halfHeight;\n\n    for (var i = 1; i < positionNDC.length / 2; i++) {\n      var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;\n      var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;\n      var x1 = (positionNDC[i * 2] + 1) * halfWidth;\n      var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;\n\n      if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {\n        var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);\n        var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y); // Nearest point.\n\n        dataIndex = dist0 < dist1 ? i - 1 : i;\n      }\n    }\n\n    if (dataIndex >= 0) {\n      var i3 = dataIndex * 3;\n      var point = new Vector3(this._points[i3], this._points[i3 + 1], this._points[i3 + 2]);\n      out.push({\n        dataIndex: dataIndex,\n        point: point,\n        pointWorld: point.clone(),\n        target: this._line3DMesh,\n        distance: this._camera.getWorldPosition().dist(point)\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/echarts-gl/lib/chart/line3D/Line3DView.js"],"names":["echarts","graphicGL","retrieve","Lines3DGeometry","Matrix4","Vector3","lineContain","glmatrix","getItemVisualColor","getItemVisualOpacity","lines3DGLSL","vec3","Shader","import","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_api","render","seriesModel","tmp","_prevLine3DMesh","_line3DMesh","Mesh","geometry","useNativeLine","sortTriangles","material","Material","shader","createShader","renderOrder","pick","_pick","bind","remove","add","coordSys","coordinateSystem","viewGL","methodName","isLinearSpace","_doRender","_data","getData","_camera","camera","updateCamera","_updateAnimation","_updateNDCPosition","data","lineMesh","resetOffset","points","getLayout","colorArr","vertexColors","Float32Array","length","colorOffset","hasTransparent","each","idx","color","opacity","parseColor","setVertexCount","getPolylineVertexCount","setTriangleCount","getPolylineTriangleCount","addPolyline","firstNotNull","get","dirty","updateBoundingBox","transparent","depthMask","debugWireframeModel","getModel","createAttribute","generateBarycentric","set","_points","_initHandler","updateVertexAnimation","lastDataIndex","seriesIndex","off","on","e","value","pointToData","point","array","dataIndex","indicesOfNearest","dispatchAction","worldViewProjection","multiply","projectionMatrix","viewMatrix","positionNDC","_positionNDC","nPoints","pos","i","i3","i2","transformMat4","x","y","renderer","renderable","out","hostModel","lineWidth","width","viewport","height","halfWidth","halfHeight","x0","y0","x1","y1","containStroke","dist0","dist1","push","pointWorld","clone","target","distance","getWorldPosition","dist","removeAll","dispose"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport * as lineContain from 'zrender/lib/contain/line';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nexport default echarts.ChartView.extend({\n  type: 'line3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var tmp = this._prevLine3DMesh;\n    this._prevLine3DMesh = this._line3DMesh;\n    this._line3DMesh = tmp;\n\n    if (!this._line3DMesh) {\n      this._line3DMesh = new graphicGL.Mesh({\n        geometry: new Lines3DGeometry({\n          useNativeLine: false,\n          sortTriangles: true\n        }),\n        material: new graphicGL.Material({\n          shader: graphicGL.createShader('ecgl.meshLines3D')\n        }),\n        // Render after axes\n        renderOrder: 10\n      });\n      this._line3DMesh.geometry.pick = this._pick.bind(this);\n    }\n\n    this.groupGL.remove(this._prevLine3DMesh);\n    this.groupGL.add(this._line3DMesh);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL); // TODO\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._doRender(seriesModel, api);\n\n    this._data = seriesModel.getData();\n    this._camera = coordSys.viewGL.camera;\n    this.updateCamera();\n\n    this._updateAnimation(seriesModel);\n  },\n  updateCamera: function () {\n    this._updateNDCPosition();\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var lineMesh = this._line3DMesh;\n    lineMesh.geometry.resetOffset();\n    var points = data.getLayout('points');\n    var colorArr = [];\n    var vertexColors = new Float32Array(points.length / 3 * 4);\n    var colorOffset = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] < 0.99) {\n        hasTransparent = true;\n      }\n    });\n    lineMesh.geometry.setVertexCount(lineMesh.geometry.getPolylineVertexCount(points));\n    lineMesh.geometry.setTriangleCount(lineMesh.geometry.getPolylineTriangleCount(points));\n    lineMesh.geometry.addPolyline(points, vertexColors, retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1));\n    lineMesh.geometry.dirty();\n    lineMesh.geometry.updateBoundingBox();\n    var material = lineMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    var debugWireframeModel = seriesModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      lineMesh.geometry.createAttribute('barycentric', 'float', 3);\n      lineMesh.geometry.generateBarycentric();\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n      lineMesh.material.set('wireframeLineColor', graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'));\n      lineMesh.material.set('wireframeLineWidth', retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1));\n    } else {\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n    }\n\n    this._points = points;\n\n    this._initHandler(seriesModel, api);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevPositionPrev', 'positionPrev'], ['prevPositionNext', 'positionNext']], this._prevLine3DMesh, this._line3DMesh, seriesModel);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var lineMesh = this._line3DMesh;\n    var lastDataIndex = -1;\n    lineMesh.seriesIndex = seriesModel.seriesIndex;\n    lineMesh.off('mousemove');\n    lineMesh.off('mouseout');\n    lineMesh.on('mousemove', function (e) {\n      var value = coordSys.pointToData(e.point.array);\n      var dataIndex = data.indicesOfNearest('x', value[0])[0];\n\n      if (dataIndex !== lastDataIndex) {\n        // this._downplay(lastDataIndex);\n        // this._highlight(dataIndex);\n        api.dispatchAction({\n          type: 'grid3DShowAxisPointer',\n          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]\n        });\n        lineMesh.dataIndex = dataIndex;\n      }\n\n      lastDataIndex = dataIndex;\n    }, this);\n    lineMesh.on('mouseout', function (e) {\n      // this._downplay(lastDataIndex);\n      lastDataIndex = -1;\n      lineMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  // _highlight: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  // _downplay: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  _updateNDCPosition: function () {\n    var worldViewProjection = new Matrix4();\n    var camera = this._camera;\n    Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);\n    var positionNDC = this._positionNDC;\n    var points = this._points;\n    var nPoints = points.length / 3;\n\n    if (!positionNDC || positionNDC.length / 2 !== nPoints) {\n      positionNDC = this._positionNDC = new Float32Array(nPoints * 2);\n    }\n\n    var pos = [];\n\n    for (var i = 0; i < nPoints; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      pos[0] = points[i3];\n      pos[1] = points[i3 + 1];\n      pos[2] = points[i3 + 2];\n      pos[3] = 1;\n      vec3.transformMat4(pos, pos, worldViewProjection.array);\n      positionNDC[i2] = pos[0] / pos[3];\n      positionNDC[i2 + 1] = pos[1] / pos[3];\n    }\n  },\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    var seriesModel = this._data.hostModel;\n    var lineWidth = seriesModel.get('lineStyle.width');\n    var dataIndex = -1;\n    var width = renderer.viewport.width;\n    var height = renderer.viewport.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    x = (x + 1) * halfWidth;\n    y = (y + 1) * halfHeight;\n\n    for (var i = 1; i < positionNDC.length / 2; i++) {\n      var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;\n      var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;\n      var x1 = (positionNDC[i * 2] + 1) * halfWidth;\n      var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;\n\n      if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {\n        var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);\n        var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y); // Nearest point.\n\n        dataIndex = dist0 < dist1 ? i - 1 : i;\n      }\n    }\n\n    if (dataIndex >= 0) {\n      var i3 = dataIndex * 3;\n      var point = new Vector3(this._points[i3], this._points[i3 + 1], this._points[i3 + 2]);\n      out.push({\n        dataIndex: dataIndex,\n        point: point,\n        pointWorld: point.clone(),\n        target: this._line3DMesh,\n        distance: this._camera.getWorldPosition().dist(point)\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});"]},"metadata":{},"sourceType":"module"}