{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.float64-array.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport { concatArray } from 'zrender/lib/core/util';\nvar LinesGLSeries = echarts.SeriesModel.extend({\n  type: 'series.linesGL',\n  dependencies: ['grid', 'geo'],\n  visualStyleAccessPath: 'lineStyle',\n  visualDrawType: 'stroke',\n  streamEnabled: true,\n  init: function init(option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'init', arguments);\n  },\n  mergeOption: function mergeOption(option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'mergeOption', arguments);\n  },\n  appendData: function appendData(params) {\n    var result = this._processFlatCoordsArray(params.data);\n\n    if (result.flatCoords) {\n      if (!this._flatCoords) {\n        this._flatCoords = result.flatCoords;\n        this._flatCoordsOffset = result.flatCoordsOffset;\n      } else {\n        this._flatCoords = concatArray(this._flatCoords, result.flatCoords);\n        this._flatCoordsOffset = concatArray(this._flatCoordsOffset, result.flatCoordsOffset);\n      }\n\n      params.data = new Float32Array(result.count);\n    }\n\n    this.getRawData().appendData(params.data);\n  },\n  _getCoordsFromItemModel: function _getCoordsFromItemModel(idx) {\n    var itemModel = this.getData().getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    return coords;\n  },\n  getLineCoordsCount: function getLineCoordsCount(idx) {\n    if (this._flatCoordsOffset) {\n      return this._flatCoordsOffset[idx * 2 + 1];\n    } else {\n      return this._getCoordsFromItemModel(idx).length;\n    }\n  },\n  getLineCoords: function getLineCoords(idx, out) {\n    if (this._flatCoordsOffset) {\n      var offset = this._flatCoordsOffset[idx * 2];\n      var len = this._flatCoordsOffset[idx * 2 + 1];\n\n      for (var i = 0; i < len; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = this._flatCoords[offset + i * 2];\n        out[i][1] = this._flatCoords[offset + i * 2 + 1];\n      }\n\n      return len;\n    } else {\n      var coords = this._getCoordsFromItemModel(idx);\n\n      for (var i = 0; i < coords.length; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = coords[i][0];\n        out[i][1] = coords[i][1];\n      }\n\n      return coords.length;\n    }\n  },\n  _processFlatCoordsArray: function _processFlatCoordsArray(data) {\n    var startOffset = 0;\n\n    if (this._flatCoords) {\n      startOffset = this._flatCoords.length;\n    } // Stored as a typed array. In format\n    // Points Count(2) | x | y | x | y | Points Count(3) | x |  y | x | y | x | y |\n\n\n    if (typeof data[0] === 'number') {\n      var len = data.length; // Store offset and len of each segment\n\n      var coordsOffsetAndLenStorage = new Uint32Array(len);\n      var coordsStorage = new Float64Array(len);\n      var coordsCursor = 0;\n      var offsetCursor = 0;\n      var dataCount = 0;\n\n      for (var i = 0; i < len;) {\n        dataCount++;\n        var count = data[i++]; // Offset\n\n        coordsOffsetAndLenStorage[offsetCursor++] = coordsCursor + startOffset; // Len\n\n        coordsOffsetAndLenStorage[offsetCursor++] = count;\n\n        for (var k = 0; k < count; k++) {\n          var x = data[i++];\n          var y = data[i++];\n          coordsStorage[coordsCursor++] = x;\n          coordsStorage[coordsCursor++] = y;\n\n          if (i > len) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error('Invalid data format.');\n            }\n          }\n        }\n      }\n\n      return {\n        flatCoordsOffset: new Uint32Array(coordsOffsetAndLenStorage.buffer, 0, offsetCursor),\n        flatCoords: coordsStorage,\n        count: dataCount\n      };\n    }\n\n    return {\n      flatCoordsOffset: null,\n      flatCoords: null,\n      count: data.length\n    };\n  },\n  getInitialData: function getInitialData(option, ecModel) {\n    var lineData = new echarts.List(['value'], this);\n    lineData.hasItemOption = false;\n    lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n      // dataItem is simply coords\n      if (dataItem instanceof Array) {\n        return NaN;\n      } else {\n        lineData.hasItemOption = true;\n        var value = dataItem.value;\n\n        if (value != null) {\n          return value instanceof Array ? value[dimIndex] : value;\n        }\n      }\n    });\n    return lineData;\n  },\n  defaultOption: {\n    coordinateSystem: 'geo',\n    zlevel: 10,\n    progressive: 1e4,\n    progressiveThreshold: 5e4,\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    lineStyle: {\n      opacity: 0.8\n    },\n    postEffect: {\n      enable: false,\n      colorCorrection: {\n        exposure: 0,\n        brightness: 0,\n        contrast: 1,\n        saturation: 1,\n        enable: true\n      }\n    }\n  }\n});\nexport default LinesGLSeries;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_echarts-gl@2.0.9@echarts-gl/lib/chart/linesGL/LinesGLSeries.js"],"names":["echarts","concatArray","LinesGLSeries","SeriesModel","extend","type","dependencies","visualStyleAccessPath","visualDrawType","streamEnabled","init","option","result","_processFlatCoordsArray","data","_flatCoords","flatCoords","_flatCoordsOffset","flatCoordsOffset","Float32Array","count","superApply","arguments","mergeOption","appendData","params","getRawData","_getCoordsFromItemModel","idx","itemModel","getData","getItemModel","coords","Array","getShallow","process","env","NODE_ENV","length","Error","JSON","stringify","getLineCoordsCount","getLineCoords","out","offset","len","i","startOffset","coordsOffsetAndLenStorage","Uint32Array","coordsStorage","Float64Array","coordsCursor","offsetCursor","dataCount","k","x","y","buffer","getInitialData","ecModel","lineData","List","hasItemOption","initData","dataItem","dimName","dataIndex","dimIndex","NaN","value","defaultOption","coordinateSystem","zlevel","progressive","progressiveThreshold","blendMode","lineStyle","opacity","postEffect","enable","colorCorrection","exposure","brightness","contrast","saturation"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport { concatArray } from 'zrender/lib/core/util';\nvar LinesGLSeries = echarts.SeriesModel.extend({\n  type: 'series.linesGL',\n  dependencies: ['grid', 'geo'],\n  visualStyleAccessPath: 'lineStyle',\n  visualDrawType: 'stroke',\n  streamEnabled: true,\n  init: function (option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'init', arguments);\n  },\n  mergeOption: function (option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'mergeOption', arguments);\n  },\n  appendData: function (params) {\n    var result = this._processFlatCoordsArray(params.data);\n\n    if (result.flatCoords) {\n      if (!this._flatCoords) {\n        this._flatCoords = result.flatCoords;\n        this._flatCoordsOffset = result.flatCoordsOffset;\n      } else {\n        this._flatCoords = concatArray(this._flatCoords, result.flatCoords);\n        this._flatCoordsOffset = concatArray(this._flatCoordsOffset, result.flatCoordsOffset);\n      }\n\n      params.data = new Float32Array(result.count);\n    }\n\n    this.getRawData().appendData(params.data);\n  },\n  _getCoordsFromItemModel: function (idx) {\n    var itemModel = this.getData().getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    return coords;\n  },\n  getLineCoordsCount: function (idx) {\n    if (this._flatCoordsOffset) {\n      return this._flatCoordsOffset[idx * 2 + 1];\n    } else {\n      return this._getCoordsFromItemModel(idx).length;\n    }\n  },\n  getLineCoords: function (idx, out) {\n    if (this._flatCoordsOffset) {\n      var offset = this._flatCoordsOffset[idx * 2];\n      var len = this._flatCoordsOffset[idx * 2 + 1];\n\n      for (var i = 0; i < len; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = this._flatCoords[offset + i * 2];\n        out[i][1] = this._flatCoords[offset + i * 2 + 1];\n      }\n\n      return len;\n    } else {\n      var coords = this._getCoordsFromItemModel(idx);\n\n      for (var i = 0; i < coords.length; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = coords[i][0];\n        out[i][1] = coords[i][1];\n      }\n\n      return coords.length;\n    }\n  },\n  _processFlatCoordsArray: function (data) {\n    var startOffset = 0;\n\n    if (this._flatCoords) {\n      startOffset = this._flatCoords.length;\n    } // Stored as a typed array. In format\n    // Points Count(2) | x | y | x | y | Points Count(3) | x |  y | x | y | x | y |\n\n\n    if (typeof data[0] === 'number') {\n      var len = data.length; // Store offset and len of each segment\n\n      var coordsOffsetAndLenStorage = new Uint32Array(len);\n      var coordsStorage = new Float64Array(len);\n      var coordsCursor = 0;\n      var offsetCursor = 0;\n      var dataCount = 0;\n\n      for (var i = 0; i < len;) {\n        dataCount++;\n        var count = data[i++]; // Offset\n\n        coordsOffsetAndLenStorage[offsetCursor++] = coordsCursor + startOffset; // Len\n\n        coordsOffsetAndLenStorage[offsetCursor++] = count;\n\n        for (var k = 0; k < count; k++) {\n          var x = data[i++];\n          var y = data[i++];\n          coordsStorage[coordsCursor++] = x;\n          coordsStorage[coordsCursor++] = y;\n\n          if (i > len) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error('Invalid data format.');\n            }\n          }\n        }\n      }\n\n      return {\n        flatCoordsOffset: new Uint32Array(coordsOffsetAndLenStorage.buffer, 0, offsetCursor),\n        flatCoords: coordsStorage,\n        count: dataCount\n      };\n    }\n\n    return {\n      flatCoordsOffset: null,\n      flatCoords: null,\n      count: data.length\n    };\n  },\n  getInitialData: function (option, ecModel) {\n    var lineData = new echarts.List(['value'], this);\n    lineData.hasItemOption = false;\n    lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n      // dataItem is simply coords\n      if (dataItem instanceof Array) {\n        return NaN;\n      } else {\n        lineData.hasItemOption = true;\n        var value = dataItem.value;\n\n        if (value != null) {\n          return value instanceof Array ? value[dimIndex] : value;\n        }\n      }\n    });\n    return lineData;\n  },\n  defaultOption: {\n    coordinateSystem: 'geo',\n    zlevel: 10,\n    progressive: 1e4,\n    progressiveThreshold: 5e4,\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    lineStyle: {\n      opacity: 0.8\n    },\n    postEffect: {\n      enable: false,\n      colorCorrection: {\n        exposure: 0,\n        brightness: 0,\n        contrast: 1,\n        saturation: 1,\n        enable: true\n      }\n    }\n  }\n});\nexport default LinesGLSeries;"]},"metadata":{},"sourceType":"module"}