{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport mat4 from '../glmatrix/mat4';\nimport vec3 from '../glmatrix/vec3';\nimport quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\nimport Vector3 from './Vector3';\n/**\n * @constructor\n * @alias clay.Matrix4\n */\n\nvar Matrix4 = function Matrix4() {\n  this._axisX = new Vector3();\n  this._axisY = new Vector3();\n  this._axisZ = new Vector3();\n  /**\n   * Storage of Matrix4\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix4#\n   */\n\n  this.array = mat4.create();\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix4#\n   */\n\n  this._dirty = true;\n};\n\nMatrix4.prototype = {\n  constructor: Matrix4,\n\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function setArray(arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate the adjugate of self, in-place\n   * @return {clay.Matrix4}\n   */\n  adjoint: function adjoint() {\n    mat4.adjoint(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Matrix4\n   * @return {clay.Matrix4}\n   */\n  clone: function clone() {\n    return new Matrix4().copy(this);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Matrix4} b\n   * @return {clay.Matrix4}\n   */\n  copy: function copy(a) {\n    mat4.copy(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function determinant() {\n    return mat4.determinant(this.array);\n  },\n\n  /**\n   * Set upper 3x3 part from quaternion\n   * @param  {clay.Quaternion} q\n   * @return {clay.Matrix4}\n   */\n  fromQuat: function fromQuat(q) {\n    mat4.fromQuat(this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set from a quaternion rotation and a vector translation\n   * @param  {clay.Quaternion} q\n   * @param  {clay.Vector3} v\n   * @return {clay.Matrix4}\n   */\n  fromRotationTranslation: function fromRotationTranslation(q, v) {\n    mat4.fromRotationTranslation(this.array, q.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set from Matrix2d, it is used when converting a 2d shape to 3d space.\n   * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis\n   * @param  {clay.Matrix2d} m2d\n   * @return {clay.Matrix4}\n   */\n  fromMat2d: function fromMat2d(m2d) {\n    Matrix4.fromMat2d(this, m2d);\n    return this;\n  },\n\n  /**\n   * Set from frustum bounds\n   * @param  {number} left\n   * @param  {number} right\n   * @param  {number} bottom\n   * @param  {number} top\n   * @param  {number} near\n   * @param  {number} far\n   * @return {clay.Matrix4}\n   */\n  frustum: function frustum(left, right, bottom, top, near, far) {\n    mat4.frustum(this.array, left, right, bottom, top, near, far);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix4}\n   */\n  identity: function identity() {\n    mat4.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Invert self\n   * @return {clay.Matrix4}\n   */\n  invert: function invert() {\n    mat4.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set as a matrix with the given eye position, focal point, and up axis\n   * @param  {clay.Vector3} eye\n   * @param  {clay.Vector3} center\n   * @param  {clay.Vector3} up\n   * @return {clay.Matrix4}\n   */\n  lookAt: function lookAt(eye, center, up) {\n    mat4.lookAt(this.array, eye.array, center.array, up.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix4} b\n   * @return {clay.Matrix4}\n   */\n  mul: function mul(b) {\n    mat4.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix4} a\n   * @return {clay.Matrix4}\n   */\n  mulLeft: function mulLeft(a) {\n    mat4.mul(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix4} b\n   * @return {clay.Matrix4}\n   */\n  multiply: function multiply(b) {\n    mat4.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix3} a\n   * @return {clay.Matrix3}\n   */\n  multiplyLeft: function multiplyLeft(a) {\n    mat4.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set as a orthographic projection matrix\n   * @param  {number} left\n   * @param  {number} right\n   * @param  {number} bottom\n   * @param  {number} top\n   * @param  {number} near\n   * @param  {number} far\n   * @return {clay.Matrix4}\n   */\n  ortho: function ortho(left, right, bottom, top, near, far) {\n    mat4.ortho(this.array, left, right, bottom, top, near, far);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Set as a perspective projection matrix\n   * @param  {number} fovy\n   * @param  {number} aspect\n   * @param  {number} near\n   * @param  {number} far\n   * @return {clay.Matrix4}\n   */\n  perspective: function perspective(fovy, aspect, near, far) {\n    mat4.perspective(this.array, fovy, aspect, near, far);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by rad about axis.\n   * Equal to right-multiply a rotaion matrix\n   * @param  {number}   rad\n   * @param  {clay.Vector3} axis\n   * @return {clay.Matrix4}\n   */\n  rotate: function rotate(rad, axis) {\n    mat4.rotate(this.array, this.array, rad, axis.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about X axis.\n   * Equal to right-multiply a rotaion matrix\n   * @param {number} rad\n   * @return {clay.Matrix4}\n   */\n  rotateX: function rotateX(rad) {\n    mat4.rotateX(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about Y axis.\n   * Equal to right-multiply a rotaion matrix\n   * @param {number} rad\n   * @return {clay.Matrix4}\n   */\n  rotateY: function rotateY(rad) {\n    mat4.rotateY(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian about Z axis.\n   * Equal to right-multiply a rotaion matrix\n   * @param {number} rad\n   * @return {clay.Matrix4}\n   */\n  rotateZ: function rotateZ(rad) {\n    mat4.rotateZ(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self by s\n   * Equal to right-multiply a scale matrix\n   * @param  {clay.Vector3}  s\n   * @return {clay.Matrix4}\n   */\n  scale: function scale(v) {\n    mat4.scale(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Translate self by v.\n   * Equal to right-multiply a translate matrix\n   * @param  {clay.Vector3}  v\n   * @return {clay.Matrix4}\n   */\n  translate: function translate(v) {\n    mat4.translate(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transpose self, in-place.\n   * @return {clay.Matrix2}\n   */\n  transpose: function transpose() {\n    mat4.transpose(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Decompose a matrix to SRT\n   * @param {clay.Vector3} [scale]\n   * @param {clay.Quaternion} rotation\n   * @param {clay.Vector} position\n   * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx\n   */\n  decomposeMatrix: function () {\n    var x = vec3.create();\n    var y = vec3.create();\n    var z = vec3.create();\n    var m3 = mat3.create();\n    return function (scale, rotation, position) {\n      var el = this.array;\n      vec3.set(x, el[0], el[1], el[2]);\n      vec3.set(y, el[4], el[5], el[6]);\n      vec3.set(z, el[8], el[9], el[10]);\n      var sx = vec3.length(x);\n      var sy = vec3.length(y);\n      var sz = vec3.length(z); // if determine is negative, we need to invert one scale\n\n      var det = this.determinant();\n\n      if (det < 0) {\n        sx = -sx;\n      }\n\n      if (scale) {\n        scale.set(sx, sy, sz);\n      }\n\n      position.set(el[12], el[13], el[14]);\n      mat3.fromMat4(m3, el); // Not like mat4, mat3 in glmatrix seems to be row-based\n      // Seems fixed in gl-matrix 2.2.2\n      // https://github.com/toji/gl-matrix/issues/114\n      // mat3.transpose(m3, m3);\n\n      m3[0] /= sx;\n      m3[1] /= sx;\n      m3[2] /= sx;\n      m3[3] /= sy;\n      m3[4] /= sy;\n      m3[5] /= sy;\n      m3[6] /= sz;\n      m3[7] /= sz;\n      m3[8] /= sz;\n      quat.fromMat3(rotation.array, m3);\n      quat.normalize(rotation.array, rotation.array);\n      rotation._dirty = true;\n      position._dirty = true;\n    };\n  }(),\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty;\n\nif (defineProperty) {\n  var proto = Matrix4.prototype;\n  /**\n   * Z Axis of local transform\n   * @name z\n   * @type {clay.Vector3}\n   * @memberOf clay.Matrix4\n   * @instance\n   */\n\n  defineProperty(proto, 'z', {\n    get: function get() {\n      var el = this.array;\n\n      this._axisZ.set(el[8], el[9], el[10]);\n\n      return this._axisZ;\n    },\n    set: function set(v) {\n      // TODO Here has a problem\n      // If only set an item of vector will not work\n      var el = this.array;\n      v = v.array;\n      el[8] = v[0];\n      el[9] = v[1];\n      el[10] = v[2];\n      this._dirty = true;\n    }\n  });\n  /**\n   * Y Axis of local transform\n   * @name y\n   * @type {clay.Vector3}\n   * @memberOf clay.Matrix4\n   * @instance\n   */\n\n  defineProperty(proto, 'y', {\n    get: function get() {\n      var el = this.array;\n\n      this._axisY.set(el[4], el[5], el[6]);\n\n      return this._axisY;\n    },\n    set: function set(v) {\n      var el = this.array;\n      v = v.array;\n      el[4] = v[0];\n      el[5] = v[1];\n      el[6] = v[2];\n      this._dirty = true;\n    }\n  });\n  /**\n   * X Axis of local transform\n   * @name x\n   * @type {clay.Vector3}\n   * @memberOf clay.Matrix4\n   * @instance\n   */\n\n  defineProperty(proto, 'x', {\n    get: function get() {\n      var el = this.array;\n\n      this._axisX.set(el[0], el[1], el[2]);\n\n      return this._axisX;\n    },\n    set: function set(v) {\n      var el = this.array;\n      v = v.array;\n      el[0] = v[0];\n      el[1] = v[1];\n      el[2] = v[2];\n      this._dirty = true;\n    }\n  });\n}\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.adjoint = function (out, a) {\n  mat4.adjoint(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.copy = function (out, a) {\n  mat4.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} a\n * @return {number}\n */\n\n\nMatrix4.determinant = function (a) {\n  return mat4.determinant(a.array);\n};\n/**\n * @param  {clay.Matrix4} out\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.identity = function (out) {\n  mat4.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {number}  left\n * @param  {number}  right\n * @param  {number}  bottom\n * @param  {number}  top\n * @param  {number}  near\n * @param  {number}  far\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.ortho = function (out, left, right, bottom, top, near, far) {\n  mat4.ortho(out.array, left, right, bottom, top, near, far);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {number}  fovy\n * @param  {number}  aspect\n * @param  {number}  near\n * @param  {number}  far\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.perspective = function (out, fovy, aspect, near, far) {\n  mat4.perspective(out.array, fovy, aspect, near, far);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Vector3} eye\n * @param  {clay.Vector3} center\n * @param  {clay.Vector3} up\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.lookAt = function (out, eye, center, up) {\n  mat4.lookAt(out.array, eye.array, center.array, up.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.invert = function (out, a) {\n  mat4.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Matrix4} b\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.mul = function (out, a, b) {\n  mat4.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Matrix4} b\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.multiply = Matrix4.mul;\n/**\n * @param  {clay.Matrix4}    out\n * @param  {clay.Quaternion} q\n * @return {clay.Matrix4}\n */\n\nMatrix4.fromQuat = function (out, q) {\n  mat4.fromQuat(out.array, q.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4}    out\n * @param  {clay.Quaternion} q\n * @param  {clay.Vector3}    v\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.fromRotationTranslation = function (out, q, v) {\n  mat4.fromRotationTranslation(out.array, q.array, v.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} m4\n * @param  {clay.Matrix2d} m2d\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.fromMat2d = function (m4, m2d) {\n  m4._dirty = true;\n  var m2d = m2d.array;\n  var m4 = m4.array;\n  m4[0] = m2d[0];\n  m4[4] = m2d[2];\n  m4[12] = m2d[4];\n  m4[1] = m2d[1];\n  m4[5] = m2d[3];\n  m4[13] = m2d[5];\n  return m4;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @param  {clay.Vector3} axis\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.rotate = function (out, a, rad, axis) {\n  mat4.rotate(out.array, a.array, rad, axis.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.rotateX = function (out, a, rad) {\n  mat4.rotateX(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.rotateY = function (out, a, rad) {\n  mat4.rotateY(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.rotateZ = function (out, a, rad) {\n  mat4.rotateZ(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Vector3} v\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.scale = function (out, a, v) {\n  mat4.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.transpose = function (out, a) {\n  mat4.transpose(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Vector3} v\n * @return {clay.Matrix4}\n */\n\n\nMatrix4.translate = function (out, a, v) {\n  mat4.translate(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Matrix4;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/claygl/src/math/Matrix4.js"],"names":["mat4","vec3","quat","mat3","Vector3","Matrix4","_axisX","_axisY","_axisZ","array","create","_dirty","prototype","constructor","setArray","arr","i","length","adjoint","clone","copy","a","determinant","fromQuat","q","fromRotationTranslation","v","fromMat2d","m2d","frustum","left","right","bottom","top","near","far","identity","invert","lookAt","eye","center","up","mul","b","mulLeft","multiply","multiplyLeft","ortho","perspective","fovy","aspect","rotate","rad","axis","rotateX","rotateY","rotateZ","scale","translate","transpose","decomposeMatrix","x","y","z","m3","rotation","position","el","set","sx","sy","sz","det","fromMat4","fromMat3","normalize","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","out","m4"],"mappings":"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","sourcesContent":["import mat4 from '../glmatrix/mat4';\nimport vec3 from '../glmatrix/vec3';\nimport quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\nimport Vector3 from './Vector3';\n\n/**\n * @constructor\n * @alias clay.Matrix4\n */\nvar Matrix4 = function() {\n\n    this._axisX = new Vector3();\n    this._axisY = new Vector3();\n    this._axisZ = new Vector3();\n\n    /**\n     * Storage of Matrix4\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix4#\n     */\n    this.array = mat4.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix4#\n     */\n    this._dirty = true;\n};\n\nMatrix4.prototype = {\n\n    constructor: Matrix4,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Calculate the adjugate of self, in-place\n     * @return {clay.Matrix4}\n     */\n    adjoint: function() {\n        mat4.adjoint(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Matrix4\n     * @return {clay.Matrix4}\n     */\n    clone: function() {\n        return (new Matrix4()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix4} b\n     * @return {clay.Matrix4}\n     */\n    copy: function(a) {\n        mat4.copy(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function() {\n        return mat4.determinant(this.array);\n    },\n\n    /**\n     * Set upper 3x3 part from quaternion\n     * @param  {clay.Quaternion} q\n     * @return {clay.Matrix4}\n     */\n    fromQuat: function(q) {\n        mat4.fromQuat(this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set from a quaternion rotation and a vector translation\n     * @param  {clay.Quaternion} q\n     * @param  {clay.Vector3} v\n     * @return {clay.Matrix4}\n     */\n    fromRotationTranslation: function(q, v) {\n        mat4.fromRotationTranslation(this.array, q.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set from Matrix2d, it is used when converting a 2d shape to 3d space.\n     * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis\n     * @param  {clay.Matrix2d} m2d\n     * @return {clay.Matrix4}\n     */\n    fromMat2d: function(m2d) {\n        Matrix4.fromMat2d(this, m2d);\n        return this;\n    },\n\n    /**\n     * Set from frustum bounds\n     * @param  {number} left\n     * @param  {number} right\n     * @param  {number} bottom\n     * @param  {number} top\n     * @param  {number} near\n     * @param  {number} far\n     * @return {clay.Matrix4}\n     */\n    frustum: function (left, right, bottom, top, near, far) {\n        mat4.frustum(this.array, left, right, bottom, top, near, far);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix4}\n     */\n    identity: function() {\n        mat4.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix4}\n     */\n    invert: function() {\n        mat4.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set as a matrix with the given eye position, focal point, and up axis\n     * @param  {clay.Vector3} eye\n     * @param  {clay.Vector3} center\n     * @param  {clay.Vector3} up\n     * @return {clay.Matrix4}\n     */\n    lookAt: function(eye, center, up) {\n        mat4.lookAt(this.array, eye.array, center.array, up.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix4} b\n     * @return {clay.Matrix4}\n     */\n    mul: function(b) {\n        mat4.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix4} a\n     * @return {clay.Matrix4}\n     */\n    mulLeft: function(a) {\n        mat4.mul(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix4} b\n     * @return {clay.Matrix4}\n     */\n    multiply: function(b) {\n        mat4.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix3} a\n     * @return {clay.Matrix3}\n     */\n    multiplyLeft: function(a) {\n        mat4.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set as a orthographic projection matrix\n     * @param  {number} left\n     * @param  {number} right\n     * @param  {number} bottom\n     * @param  {number} top\n     * @param  {number} near\n     * @param  {number} far\n     * @return {clay.Matrix4}\n     */\n    ortho: function(left, right, bottom, top, near, far) {\n        mat4.ortho(this.array, left, right, bottom, top, near, far);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Set as a perspective projection matrix\n     * @param  {number} fovy\n     * @param  {number} aspect\n     * @param  {number} near\n     * @param  {number} far\n     * @return {clay.Matrix4}\n     */\n    perspective: function(fovy, aspect, near, far) {\n        mat4.perspective(this.array, fovy, aspect, near, far);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by rad about axis.\n     * Equal to right-multiply a rotaion matrix\n     * @param  {number}   rad\n     * @param  {clay.Vector3} axis\n     * @return {clay.Matrix4}\n     */\n    rotate: function(rad, axis) {\n        mat4.rotate(this.array, this.array, rad, axis.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about X axis.\n     * Equal to right-multiply a rotaion matrix\n     * @param {number} rad\n     * @return {clay.Matrix4}\n     */\n    rotateX: function(rad) {\n        mat4.rotateX(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Y axis.\n     * Equal to right-multiply a rotaion matrix\n     * @param {number} rad\n     * @return {clay.Matrix4}\n     */\n    rotateY: function(rad) {\n        mat4.rotateY(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Z axis.\n     * Equal to right-multiply a rotaion matrix\n     * @param {number} rad\n     * @return {clay.Matrix4}\n     */\n    rotateZ: function(rad) {\n        mat4.rotateZ(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * Equal to right-multiply a scale matrix\n     * @param  {clay.Vector3}  s\n     * @return {clay.Matrix4}\n     */\n    scale: function(v) {\n        mat4.scale(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Translate self by v.\n     * Equal to right-multiply a translate matrix\n     * @param  {clay.Vector3}  v\n     * @return {clay.Matrix4}\n     */\n    translate: function(v) {\n        mat4.translate(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transpose self, in-place.\n     * @return {clay.Matrix2}\n     */\n    transpose: function() {\n        mat4.transpose(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Decompose a matrix to SRT\n     * @param {clay.Vector3} [scale]\n     * @param {clay.Quaternion} rotation\n     * @param {clay.Vector} position\n     * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx\n     */\n    decomposeMatrix: (function() {\n\n        var x = vec3.create();\n        var y = vec3.create();\n        var z = vec3.create();\n\n        var m3 = mat3.create();\n\n        return function(scale, rotation, position) {\n\n            var el = this.array;\n            vec3.set(x, el[0], el[1], el[2]);\n            vec3.set(y, el[4], el[5], el[6]);\n            vec3.set(z, el[8], el[9], el[10]);\n\n            var sx = vec3.length(x);\n            var sy = vec3.length(y);\n            var sz = vec3.length(z);\n\n            // if determine is negative, we need to invert one scale\n            var det = this.determinant();\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            if (scale) {\n                scale.set(sx, sy, sz);\n            }\n\n            position.set(el[12], el[13], el[14]);\n\n            mat3.fromMat4(m3, el);\n            // Not like mat4, mat3 in glmatrix seems to be row-based\n            // Seems fixed in gl-matrix 2.2.2\n            // https://github.com/toji/gl-matrix/issues/114\n            // mat3.transpose(m3, m3);\n\n            m3[0] /= sx;\n            m3[1] /= sx;\n            m3[2] /= sx;\n\n            m3[3] /= sy;\n            m3[4] /= sy;\n            m3[5] /= sy;\n\n            m3[6] /= sz;\n            m3[7] /= sz;\n            m3[8] /= sz;\n\n            quat.fromMat3(rotation.array, m3);\n            quat.normalize(rotation.array, rotation.array);\n\n            rotation._dirty = true;\n            position._dirty = true;\n        };\n    })(),\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n\nif (defineProperty) {\n    var proto = Matrix4.prototype;\n    /**\n     * Z Axis of local transform\n     * @name z\n     * @type {clay.Vector3}\n     * @memberOf clay.Matrix4\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            var el = this.array;\n            this._axisZ.set(el[8], el[9], el[10]);\n            return this._axisZ;\n        },\n        set: function (v) {\n            // TODO Here has a problem\n            // If only set an item of vector will not work\n            var el = this.array;\n            v = v.array;\n            el[8] = v[0];\n            el[9] = v[1];\n            el[10] = v[2];\n\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * Y Axis of local transform\n     * @name y\n     * @type {clay.Vector3}\n     * @memberOf clay.Matrix4\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            var el = this.array;\n            this._axisY.set(el[4], el[5], el[6]);\n            return this._axisY;\n        },\n        set: function (v) {\n            var el = this.array;\n            v = v.array;\n            el[4] = v[0];\n            el[5] = v[1];\n            el[6] = v[2];\n\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * X Axis of local transform\n     * @name x\n     * @type {clay.Vector3}\n     * @memberOf clay.Matrix4\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            var el = this.array;\n            this._axisX.set(el[0], el[1], el[2]);\n            return this._axisX;\n        },\n        set: function (v) {\n            var el = this.array;\n            v = v.array;\n            el[0] = v[0];\n            el[1] = v[1];\n            el[2] = v[2];\n\n            this._dirty = true;\n        }\n    })\n}\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\nMatrix4.adjoint = function(out, a) {\n    mat4.adjoint(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\nMatrix4.copy = function(out, a) {\n    mat4.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} a\n * @return {number}\n */\nMatrix4.determinant = function(a) {\n    return mat4.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @return {clay.Matrix4}\n */\nMatrix4.identity = function(out) {\n    mat4.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {number}  left\n * @param  {number}  right\n * @param  {number}  bottom\n * @param  {number}  top\n * @param  {number}  near\n * @param  {number}  far\n * @return {clay.Matrix4}\n */\nMatrix4.ortho = function(out, left, right, bottom, top, near, far) {\n    mat4.ortho(out.array, left, right, bottom, top, near, far);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {number}  fovy\n * @param  {number}  aspect\n * @param  {number}  near\n * @param  {number}  far\n * @return {clay.Matrix4}\n */\nMatrix4.perspective = function(out, fovy, aspect, near, far) {\n    mat4.perspective(out.array, fovy, aspect, near, far);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Vector3} eye\n * @param  {clay.Vector3} center\n * @param  {clay.Vector3} up\n * @return {clay.Matrix4}\n */\nMatrix4.lookAt = function(out, eye, center, up) {\n    mat4.lookAt(out.array, eye.array, center.array, up.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\nMatrix4.invert = function(out, a) {\n    mat4.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Matrix4} b\n * @return {clay.Matrix4}\n */\nMatrix4.mul = function(out, a, b) {\n    mat4.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Matrix4} b\n * @return {clay.Matrix4}\n */\nMatrix4.multiply = Matrix4.mul;\n\n/**\n * @param  {clay.Matrix4}    out\n * @param  {clay.Quaternion} q\n * @return {clay.Matrix4}\n */\nMatrix4.fromQuat = function(out, q) {\n    mat4.fromQuat(out.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4}    out\n * @param  {clay.Quaternion} q\n * @param  {clay.Vector3}    v\n * @return {clay.Matrix4}\n */\nMatrix4.fromRotationTranslation = function(out, q, v) {\n    mat4.fromRotationTranslation(out.array, q.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} m4\n * @param  {clay.Matrix2d} m2d\n * @return {clay.Matrix4}\n */\nMatrix4.fromMat2d = function(m4, m2d) {\n    m4._dirty = true;\n    var m2d = m2d.array;\n    var m4 = m4.array;\n\n    m4[0] = m2d[0];\n    m4[4] = m2d[2];\n    m4[12] = m2d[4];\n\n    m4[1] = m2d[1];\n    m4[5] = m2d[3];\n    m4[13] = m2d[5];\n\n    return m4;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @param  {clay.Vector3} axis\n * @return {clay.Matrix4}\n */\nMatrix4.rotate = function(out, a, rad, axis) {\n    mat4.rotate(out.array, a.array, rad, axis.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\nMatrix4.rotateX = function(out, a, rad) {\n    mat4.rotateX(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\nMatrix4.rotateY = function(out, a, rad) {\n    mat4.rotateY(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {number}  rad\n * @return {clay.Matrix4}\n */\nMatrix4.rotateZ = function(out, a, rad) {\n    mat4.rotateZ(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Vector3} v\n * @return {clay.Matrix4}\n */\nMatrix4.scale = function(out, a, v) {\n    mat4.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix4}\n */\nMatrix4.transpose = function(out, a) {\n    mat4.transpose(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix4} out\n * @param  {clay.Matrix4} a\n * @param  {clay.Vector3} v\n * @return {clay.Matrix4}\n */\nMatrix4.translate = function(out, a, v) {\n    mat4.translate(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix4;\n"]},"metadata":{},"sourceType":"module"}