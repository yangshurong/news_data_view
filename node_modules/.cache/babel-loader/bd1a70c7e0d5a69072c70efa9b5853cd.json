{"ast":null,"code":"import _defineProperty from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n// lib\nimport _videojs from 'video.js';\nvar videojs = window.videojs || _videojs; // pollfill\n\nif (typeof Object.assign != 'function') {\n  Object.defineProperty(Object, 'assign', {\n    value: function value(target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n} // as of videojs 6.6.0\n\n\nvar DEFAULT_EVENTS = ['loadeddata', 'canplay', 'canplaythrough', 'play', 'pause', 'waiting', 'playing', 'ended', 'error']; // export\n\nexport default {\n  name: 'video-player',\n  props: {\n    start: {\n      type: Number,\n      default: 0\n    },\n    crossOrigin: {\n      type: String,\n      default: ''\n    },\n    playsinline: {\n      type: Boolean,\n      default: false\n    },\n    customEventName: {\n      type: String,\n      default: 'statechanged'\n    },\n    options: {\n      type: Object,\n      required: true\n    },\n    events: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    globalOptions: {\n      type: Object,\n      default: function _default() {\n        return {\n          // autoplay: false,\n          controls: true,\n          // preload: 'auto',\n          // fluid: false,\n          // muted: false,\n          controlBar: {\n            remainingTimeDisplay: false,\n            playToggle: {},\n            progressControl: {},\n            fullscreenToggle: {},\n            volumeMenuButton: {\n              inline: false,\n              vertical: true\n            }\n          },\n          techOrder: ['html5'],\n          plugins: {}\n        };\n      }\n    },\n    globalEvents: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      player: null,\n      reseted: true\n    };\n  },\n  mounted: function mounted() {\n    if (!this.player) {\n      this.initialize();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.player) {\n      this.dispose();\n    }\n  },\n  methods: {\n    initialize: function initialize() {\n      var _this = this;\n\n      // videojs options\n      var videoOptions = Object.assign({}, this.globalOptions, this.options); // ios fullscreen\n\n      if (this.playsinline) {\n        this.$refs.video.setAttribute('playsinline', this.playsinline);\n        this.$refs.video.setAttribute('webkit-playsinline', this.playsinline);\n        this.$refs.video.setAttribute('x5-playsinline', this.playsinline);\n        this.$refs.video.setAttribute('x5-video-player-type', 'h5');\n        this.$refs.video.setAttribute('x5-video-player-fullscreen', false);\n      } // cross origin\n\n\n      if (this.crossOrigin !== '') {\n        this.$refs.video.crossOrigin = this.crossOrigin;\n        this.$refs.video.setAttribute('crossOrigin', this.crossOrigin);\n      } // emit event\n\n\n      var emitPlayerState = function emitPlayerState(event, value) {\n        if (event) {\n          _this.$emit(event, _this.player);\n        }\n\n        if (value) {\n          _this.$emit(_this.customEventName, _defineProperty({}, event, value));\n        }\n      }; // avoid error \"VIDEOJS: ERROR: Unable to find plugin: __ob__\"\n\n\n      if (videoOptions.plugins) {\n        delete videoOptions.plugins.__ob__;\n      } // videoOptions\n      // console.log('videoOptions', videoOptions)\n      // player\n\n\n      var self = this;\n      this.player = videojs(this.$refs.video, videoOptions, function () {\n        var _this2 = this;\n\n        // events\n        var events = DEFAULT_EVENTS.concat(self.events).concat(self.globalEvents); // watch events\n\n        var onEdEvents = {};\n\n        for (var i = 0; i < events.length; i++) {\n          if (typeof events[i] === 'string' && onEdEvents[events[i]] === undefined) {\n            (function (event) {\n              onEdEvents[event] = null;\n\n              _this2.on(event, function () {\n                emitPlayerState(event, true);\n              });\n            })(events[i]);\n          }\n        } // watch timeupdate\n\n\n        this.on('timeupdate', function () {\n          emitPlayerState('timeupdate', this.currentTime());\n        }); // player readied\n\n        self.$emit('ready', this);\n      });\n    },\n    dispose: function dispose(callback) {\n      var _this3 = this;\n\n      if (this.player && this.player.dispose) {\n        if (this.player.techName_ !== 'Flash') {\n          this.player.pause && this.player.pause();\n        }\n\n        this.player.dispose();\n        this.player = null;\n        this.$nextTick(function () {\n          _this3.reseted = false;\n\n          _this3.$nextTick(function () {\n            _this3.reseted = true;\n\n            _this3.$nextTick(function () {\n              callback && callback();\n            });\n          });\n        });\n        /*\n        if (!this.$el.children.length) {\n          const video = document.createElement('video')\n          video.className = 'video-js'\n          this.$el.appendChild(video)\n        }\n        */\n      }\n    }\n  },\n  watch: {\n    options: {\n      deep: true,\n      handler: function handler(options, oldOptions) {\n        var _this4 = this;\n\n        this.dispose(function () {\n          if (options && options.sources && options.sources.length) {\n            _this4.initialize();\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;AAOA;AACA;AACA,yC,CAEA;;AACA;AACAA;AACAC,SADA,iBACAC,MADA,EACAC,OADA,EACA;AACA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;;AACA;AACA,KAjBA;AAkBAC,kBAlBA;AAmBAC;AAnBA;AAqBA,C,CAEA;;;AACA,sBACA,YADA,EAEA,SAFA,EAGA,gBAHA,EAIA,MAJA,EAKA,OALA,EAMA,SANA,EAOA,SAPA,EAQA,OARA,EASA,OATA,E,CAYA;;AACA;AACAC,sBADA;AAEAC;AACAC;AACAC,kBADA;AAEAC;AAFA,KADA;AAKAC;AACAF,kBADA;AAEAC;AAFA,KALA;AASAE;AACAH,mBADA;AAEAC;AAFA,KATA;AAaAG;AACAJ,kBADA;AAEAC;AAFA,KAbA;AAiBAI;AACAL,kBADA;AAEAM;AAFA,KAjBA;AAqBAC;AACAP,iBADA;AAEAC;AAAA;AAAA;AAFA,KArBA;AAyBAO;AACAR,kBADA;AAEAC;AAAA;AACA;AACAQ,wBAFA;AAGA;AACA;AACA;AACAC;AACAC,uCADA;AAEAC,0BAFA;AAGAC,+BAHA;AAIAC,gCAJA;AAKAC;AACAC,2BADA;AAEAC;AAFA;AALA,WANA;AAgBAC,8BAhBA;AAiBAC;AAjBA;AAAA;AAFA,KAzBA;AA+CAC;AACApB,iBADA;AAEAC;AAAA;AAAA;AAFA;AA/CA,GAFA;AAsDAoB,MAtDA,kBAsDA;AACA;AACAC,kBADA;AAEAC;AAFA;AAIA,GA3DA;AA4DAC,SA5DA,qBA4DA;AACA;AACA;AACA;AACA,GAhEA;AAiEAC,eAjEA,2BAiEA;AACA;AACA;AACA;AACA,GArEA;AAsEAC;AACAC,cADA,wBACA;AAAA;;AAEA;AACA,6EAHA,CAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZA,CAcA;;;AACA;AACA;AACA;AACA,OAlBA,CAoBA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,OAPA,CArBA,CA8BA;;;AACA;AACA;AACA,OAjCA,CAmCA;AACA;AAEA;;;AACA;AACA;AAAA;;AAEA;AACA,kFAHA,CAKA;;AACA;;AACA;AACA;AACA;AACAC;;AACA;AACAC;AACA,eAFA;AAGA,aALA,EAKAtB,SALA;AAMA;AACA,SAhBA,CAkBA;;;AACA;AACAsB;AACA,SAFA,EAnBA,CAuBA;;AACAC;AACA,OAzBA;AA0BA,KAnEA;AAoEAC,WApEA,mBAoEAC,QApEA,EAoEA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACAA;AACA,aAFA;AAGA,WALA;AAMA,SARA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5FA,GAtEA;AAoKAC;AACA5B;AACA6B,gBADA;AAEAC,aAFA,mBAEA9B,OAFA,EAEA+B,UAFA,EAEA;AAAA;;AACA;AACA;AACA;AACA;AACA,SAJA;AAKA;AARA;AADA;AApKA","names":["Object","value","target","varArgs","to","writable","configurable","name","props","start","type","default","crossOrigin","playsinline","customEventName","options","required","events","globalOptions","controls","controlBar","remainingTimeDisplay","playToggle","progressControl","fullscreenToggle","volumeMenuButton","inline","vertical","techOrder","plugins","globalEvents","data","player","reseted","mounted","beforeDestroy","methods","initialize","onEdEvents","emitPlayerState","self","dispose","callback","watch","deep","handler","oldOptions"],"sourceRoot":"node_modules/vue-video-player/src","sources":["player.vue"],"sourcesContent":["<template>\n  <div class=\"video-player\" v-if=\"reseted\">\n    <video class=\"video-js\" ref=\"video\"></video>\n  </div>\n</template>\n\n<script>\n  // lib\n  import _videojs from 'video.js'\n  const videojs = window.videojs || _videojs\n\n  // pollfill\n  if (typeof Object.assign != 'function') {\n    Object.defineProperty(Object, 'assign', {\n      value(target, varArgs) {\n        if (target == null) {\n          throw new TypeError('Cannot convert undefined or null to object')\n        }\n        const to = Object(target)\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index]\n          if (nextSource != null) {\n            for (const nextKey in nextSource) {\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey]\n              }\n            }\n          }\n        }\n        return to\n      },\n      writable: true,\n      configurable: true\n    })\n  }\n\n  // as of videojs 6.6.0\n  const DEFAULT_EVENTS = [\n    'loadeddata',\n    'canplay',\n    'canplaythrough',\n    'play',\n    'pause',\n    'waiting',\n    'playing',\n    'ended',\n    'error'\n  ]\n\n  // export\n  export default {\n    name: 'video-player',\n    props: {\n      start: {\n        type: Number,\n        default: 0\n      },\n      crossOrigin: {\n        type: String,\n        default: ''\n      },\n      playsinline: {\n        type: Boolean,\n        default: false\n      },\n      customEventName: {\n        type: String,\n        default: 'statechanged'\n      },\n      options: {\n        type: Object,\n        required: true\n      },\n      events: {\n        type: Array,\n        default: () => []\n      },\n      globalOptions: {\n        type: Object,\n        default: () => ({\n          // autoplay: false,\n          controls: true,\n          // preload: 'auto',\n          // fluid: false,\n          // muted: false,\n          controlBar: {\n            remainingTimeDisplay: false,\n            playToggle: {},\n            progressControl: {},\n            fullscreenToggle: {},\n            volumeMenuButton: {\n              inline: false,\n              vertical: true\n            }\n          },\n          techOrder: ['html5'],\n          plugins: {}\n        })\n      },\n      globalEvents: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        player: null,\n        reseted: true\n      }\n    },\n    mounted() {\n      if (!this.player) { \n        this.initialize()\n      }\n    },\n    beforeDestroy() {\n      if (this.player) { \n        this.dispose()\n      }\n    },\n    methods: {\n      initialize() {\n\n        // videojs options\n        const videoOptions = Object.assign({}, this.globalOptions, this.options)\n\n        // ios fullscreen\n        if (this.playsinline) {\n          this.$refs.video.setAttribute('playsinline', this.playsinline)\n          this.$refs.video.setAttribute('webkit-playsinline', this.playsinline)\n          this.$refs.video.setAttribute('x5-playsinline', this.playsinline)\n          this.$refs.video.setAttribute('x5-video-player-type', 'h5')\n          this.$refs.video.setAttribute('x5-video-player-fullscreen', false)\n        }\n\n        // cross origin\n        if (this.crossOrigin !== '') {\n          this.$refs.video.crossOrigin = this.crossOrigin\n          this.$refs.video.setAttribute('crossOrigin', this.crossOrigin)\n        }\n\n        // emit event\n        const emitPlayerState = (event, value) => {\n          if (event) {\n            this.$emit(event, this.player)\n          }\n          if (value) {\n            this.$emit(this.customEventName, { [event]: value })\n          }\n        }\n\n        // avoid error \"VIDEOJS: ERROR: Unable to find plugin: __ob__\"\n        if (videoOptions.plugins) {\n          delete videoOptions.plugins.__ob__\n        }\n\n        // videoOptions\n        // console.log('videoOptions', videoOptions)\n        \n        // player\n        const self = this\n        this.player = videojs(this.$refs.video, videoOptions, function() {\n\n          // events\n          const events = DEFAULT_EVENTS.concat(self.events).concat(self.globalEvents)\n\n          // watch events\n          const onEdEvents = {}\n          for (let i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string' && onEdEvents[events[i]] === undefined) {\n              (event => {\n                onEdEvents[event] = null\n                this.on(event, () => {\n                  emitPlayerState(event, true)\n                })\n              })(events[i])\n            }\n          }\n\n          // watch timeupdate\n          this.on('timeupdate', function() {\n            emitPlayerState('timeupdate', this.currentTime())\n          })\n\n          // player readied\n          self.$emit('ready', this)\n        })\n      },\n      dispose(callback) {\n        if (this.player && this.player.dispose) {\n          if (this.player.techName_ !== 'Flash') {\n            this.player.pause && this.player.pause()\n          }\n          this.player.dispose()\n          this.player = null\n          this.$nextTick(() => {\n            this.reseted = false\n            this.$nextTick(() => {\n              this.reseted = true\n              this.$nextTick(() => {\n                callback && callback()\n              })\n            })\n          })\n          /*\n          if (!this.$el.children.length) {\n            const video = document.createElement('video')\n            video.className = 'video-js'\n            this.$el.appendChild(video)\n          }\n          */\n        }\n      }\n    },\n    watch: {\n      options: {\n        deep: true,\n        handler(options, oldOptions) {\n          this.dispose(() => {\n            if (options && options.sources && options.sources.length) {\n              this.initialize()\n            }\n          })\n        }\n      }\n    }\n  }\n</script>\n"]},"metadata":{},"sourceType":"module"}