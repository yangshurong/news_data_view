{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\n/**\n * @description: 日期格式化\n * @msg\n * 对 Date 的扩展，将 Date 转化为指定格式的 String\n * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\n * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n * eg:\n    console.log(dateFormat(new Date())) // 2021-12-07 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss.S')) // 2021-12-07 16:02:18.912\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd E HH:mm:ss')) // 2021-12-07 二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd EE hh:mm:ss')) // 2021-12-07 周二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd EEE hh:mm:ss')) // 2021-12-07 星期二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-M-d h:m:s.S')) // 2021-12-7 16:2:18.912\n * @param {String, Number} date 日期\n * @param {String} format 格式\n * @return {String}\n */\nexport function dateFormat(date, format) {\n  var iDate = null;\n\n  if (typeof date === 'number') {\n    iDate = new Date(date);\n  } else if (typeof date === 'string') {\n    date = date.replace(/-/g, '/');\n\n    if (date.indexOf('T') > -1) {\n      var dotIndex = date.indexOf('.');\n      date = date.substr(0, dotIndex);\n      date = date.replace('T', ' ');\n      date = new Date(date).getTime();\n    }\n\n    if (!isNaN(Number(date))) {\n      date = Number(date);\n    }\n\n    iDate = new Date(date);\n  } else if (date instanceof Date) {\n    iDate = date;\n  } else {\n    return false;\n  }\n\n  var o = {\n    'M+': iDate.getMonth() + 1,\n    // 月份\n    'd+': iDate.getDate(),\n    // 日\n    'h+': iDate.getHours() % 24 === 0 ? '00' : iDate.getHours() % 24,\n    // 小时\n    'H+': iDate.getHours(),\n    // 小时\n    'm+': iDate.getMinutes(),\n    // 分\n    's+': iDate.getSeconds(),\n    // 秒\n    'q+': Math.floor((iDate.getMonth() + 3) / 3),\n    // 季度\n    S: iDate.getMilliseconds() // 毫秒\n\n  };\n\n  if (!format) {\n    format = 'yyyy-MM-dd hh:mm:ss';\n  }\n\n  var week = {\n    0: \"\\u65E5\",\n    1: \"\\u4E00\",\n    2: \"\\u4E8C\",\n    3: \"\\u4E09\",\n    4: \"\\u56DB\",\n    5: \"\\u4E94\",\n    6: \"\\u516D\"\n  };\n\n  if (/(y+)/.test(format)) {\n    format = format.replace(RegExp.$1, (iDate.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n\n  if (/(E+)/.test(format)) {\n    format = format.replace(RegExp.$1, (RegExp.$1.length > 1 ? RegExp.$1.length > 2 ? \"\\u661F\\u671F\" : \"\\u5468\" : '') + week[iDate.getDay() + '']);\n  }\n\n  for (var k in o) {\n    if (new RegExp('(' + k + ')').test(format)) {\n      format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\n    }\n  }\n\n  return format;\n}\n/**\n* @description: 获取最近几天的日期\n* @msg 需要依赖 dateFormat()\n* @param {Number} count 天数\n* @param {String} type 默认（向后计算）；before（向前计算）\n* @return {Array}\n* eg:\nconsole.log(getManyDays(5)) // ['2021-12-07', '2021-12-08', '2021-12-09', '2021-12-10', '2021-12-11']\nconsole.log(getManyDays(5, 'before')) // ['2021-12-03', '2021-12-04', '2021-12-05', '2021-12-06', '2021-12-07']\n*/\n\nexport function getManyDays(count, type) {\n  if (!isNaN(Number(count))) {\n    count = Number(count);\n  }\n\n  var list = [];\n\n  if (type && type === 'before') {\n    for (var i = 0; i < count; i++) {\n      list.unshift(dateFormat(new Date(new Date().setDate(new Date().getDate() - i)).toLocaleDateString(), 'yyyy-MM-dd'));\n    }\n  } else {\n    for (var _i = 0; _i < count; _i++) {\n      list.push(dateFormat(new Date(new Date().setDate(new Date().getDate() + _i)).toLocaleDateString(), 'yyyy-MM-dd'));\n    }\n  }\n\n  return list;\n}\n/**\n * @name: 判断某年某月 1 号是星期几\n * @param {year}\n * @param {month}\n * eg:\n    console.log(judjeFirstDay(2021, 12)) // 3\n */\n\nexport function judjeFirstDay(year, month) {\n  var date = new Date(year, month - 1, 1);\n  var week = date.getDay();\n  return week;\n}\n/**\n * @name: 生成某年某月日历表\n * @msg 需要依赖 judjeFirstDay()\n * @param {*} year\n * @param {*} month\n * @param {*} startDay 从哪天开始展示（默认从周日）\n */\n\nexport function createCalendar(year, month, startDay) {\n  // 某个月一共有多少天\n  var allDay = new Date(year, month, 0).getDate(); // 某个月 1 号是星期几\n\n  var firstDay = judjeFirstDay(year, month); // 需要多少行来展示\n\n  var row = Math.ceil((allDay + firstDay) / 7);\n  var k = firstDay;\n\n  if (startDay) {\n    // 如果从周一开始展示\n    k = firstDay - 1;\n  }\n\n  var result = [];\n  var count = 1; // 生成日历二维数组\n\n  for (var i = 0; i < row; i++) {\n    result[i] = new Array(7);\n\n    do {\n      if (count <= allDay) {\n        result[i][k] = {\n          day: count,\n          date: year + '-' + month.toString().padStart(2, '0') + '-' + count.toString().padStart(2, '0')\n        };\n        k++;\n        count++;\n      } else {\n        break;\n      }\n    } while (k < 7);\n\n    k = 0;\n  }\n\n  return result;\n}\n/**\n * @name: 生成某年日历表\n * @msg 需要依赖 judjeFirstDay(), createCalendar()\n * @param {*} year\n */\n\nexport function createCalendarOfYear(year) {\n  var result = [];\n\n  for (var index = 1; index < 13; index++) {\n    var _month = index.toString().padStart(2, '0');\n\n    result.push(createCalendar(year, _month));\n  }\n\n  return result;\n}\n/**\n * @name: 把生成的日历表转换为一维数组（可以通过日期找出在这一年中的位置）\n * @msg 需要依赖 createCalendarOfYear(), createCalendar()\n * @param {*} year, month\n */\n\nexport function calendarToList(year, month) {\n  var result = [];\n  var calendarData = [];\n\n  if (year && month) {\n    calendarData = createCalendar(year, month);\n  } else if (year && !month) {\n    calendarData = createCalendarOfYear(year);\n  }\n\n  if (calendarData && calendarData.length) {\n    calendarData.map(function (month) {\n      if (month && month.length > 0) {\n        month.map(function (week) {\n          if (week && week.length > 0) {\n            week.map(function (day) {\n              result.push(day.date);\n            });\n          }\n        });\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * @description: 获取某年某月开始与结束日期\n * @msg 需要依赖 dateFormat()\n * @param {Number, String} year\n * @param {Number, String} month\n * @return {Object}\n * eg:\n    console.log(getStartAndEndDate(2021, 12)) // {startTime: '2021-12-01', endTime: '2021-12-31'}\n */\n\nexport function getStartAndEndDate(year, month) {\n  var startTime = null;\n  var endTime = null;\n  var result = {};\n\n  if (month) {\n    var date = new Date(year, month - 1, '01');\n    date.setDate(1);\n    date.setMonth(date.getMonth() + 1);\n    endTime = new Date(date.getTime() - 1000 * 60 * 60 * 24);\n\n    var _a_month = month < 10 ? '0' + month : month; // ios Date() 对象必须是两位的月份，需要补 0，否则提示 Invalid Date\n\n\n    startTime = new Date(year + '-' + _a_month + '-' + '01');\n  } else {\n    startTime = new Date(year + '-' + '01' + '-' + '01');\n    endTime = new Date(year + '-' + '12' + '-' + '31');\n  }\n\n  result = {\n    startTime: dateFormat(startTime, 'yyyy-MM-dd'),\n    endTime: dateFormat(endTime, 'yyyy-MM-dd')\n  };\n  return result;\n}\n/**\n * @description: 计算时间间隔\n * @param {String} date 日期格式 2020-01-01 18:00\n * @return {String}\n * eg:\n    console.log(getDateInterval('2020-01-01 18:00')) // 705天前\n */\n\nexport function getDateInterval(date) {\n  if (!date) return '';\n  var t;\n\n  if (date.indexOf(':') < 13) {\n    t = (new Date().getFullYear() + '-' + date).substring(0, 16);\n  } else {\n    t = date.substring(0, 16);\n  }\n\n  var now = new Date().getTime();\n  var thatTime = Date.UTC(t.substring(0, 4), parseInt(t.substring(5, 7)) - 1, t.substring(8, 10), parseInt(t.substring(11, 13)) - 8, t.substring(14, 16), 0); // 月份 -1; 小时减 8\n\n  var tSu = (thatTime - now) / 1000; // 秒\n\n  if (tSu > 0) {\n    var _d = tSu / (60 * 60 * 24); // 天\n\n\n    var _a = tSu / (60 * 60); // 小时\n\n\n    var _m = tSu / 60; // 分钟\n\n\n    if (_d > 1) {\n      return parseInt(_d) + '天后';\n    } else if (_a > 1) {\n      return parseInt(_a) + '小时后';\n    } else if (_m > 1) {\n      return parseInt(_m) + '分钟后';\n    } else {\n      return '';\n    }\n  } else {\n    var _d2 = tSu / (60 * 60 * 24); // 天\n\n\n    var _a2 = tSu / (60 * 60); // 小时\n\n\n    var _m2 = tSu / 60; // 分钟\n\n\n    if (_d2 < -1) {\n      return -parseInt(_d2) + '天前';\n    } else if (_a2 < -1) {\n      return -parseInt(_a2) + '小时前';\n    } else if (_m2 < -1) {\n      return -parseInt(_m2) + '分钟前';\n    } else {\n      return '';\n    }\n  }\n}\n/**\n * @name: 计算出一年的所有日期及位置\n * @msg\n * @param {*} year\n * @param {*} specialDate 需要标注的日期：['2022-02-28', '2022-03-01']\n */\n\nexport function createCalendarAndPosition(year, specialDate) {\n  var calendar = createCalendarOfYear(year);\n  var days = numberOfDays(year);\n  var _arr = [];\n  var result = [];\n  calendar.map(function (month, index) {\n    _arr.push({\n      index: index,\n      list: concatArrFun(month).filter(function (_) {\n        return _;\n      })\n    });\n  });\n\n  _arr.map(function (month, monthIndex) {\n    month.list.map(function (day) {\n      var _obj = {\n        date: day.date\n      };\n\n      if (day.day === 1) {\n        // 如果是首日，添加上月份\n        _obj.label = Number(monthIndex + 1) + '月';\n      }\n\n      if (specialDate && specialDate.length > 0) {\n        // 给一些特殊日期做标记\n        if (specialDate.indexOf(day.date) > -1) {\n          _obj.sign = true;\n        }\n      }\n\n      result.push(_obj);\n    });\n  });\n\n  result.map(function (day, index) {\n    day.position = getPercentage(index, days);\n  });\n  return result;\n}\n/**\n * @name: 计算一年有多少天\n * @param {year}\n */\n\nexport function numberOfDays(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n/**\n * @name: 判断平年润年\n * @param {year}\n */\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n/**\n * @name: 合并数组\n * @param {*} arr\n */\n\nexport function concatArrFun(arr) {\n  if (arr && arr.length > 0) {\n    var result = arr.reduce(function (a, b) {\n      return a.concat(b);\n    });\n    return result;\n  }\n}\n/**\n * @name: 计算百分比\n * @param {*} num\n * @param {*} total\n */\n\nexport function getPercentage(num, total) {\n  if (num === 0 || total === 0) {\n    return 0;\n  }\n\n  return Math.round(num / total * 10000) / 100.00; // 小数点后两位百分比\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_drag-timeline-vue@1.0.6@drag-timeline-vue/packages/DragTimelineVue/src/utils.js"],"names":["dateFormat","date","format","iDate","Date","replace","indexOf","dotIndex","substr","getTime","isNaN","Number","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","S","getMilliseconds","week","test","RegExp","$1","getFullYear","length","getDay","k","getManyDays","count","type","list","i","unshift","setDate","toLocaleDateString","push","judjeFirstDay","year","month","createCalendar","startDay","allDay","firstDay","row","ceil","result","Array","day","toString","padStart","createCalendarOfYear","index","_month","calendarToList","calendarData","map","getStartAndEndDate","startTime","endTime","setMonth","_a_month","getDateInterval","t","substring","now","thatTime","UTC","parseInt","tSu","_d","_a","_m","createCalendarAndPosition","specialDate","calendar","days","numberOfDays","_arr","concatArrFun","filter","_","monthIndex","_obj","label","sign","position","getPercentage","isLeapYear","arr","reduce","a","b","concat","num","total","round"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;AACxC,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC5BE,IAAAA,KAAK,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAR;AACD,GAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnCA,IAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;;AACA,QAAIJ,IAAI,CAACK,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC1B,UAAMC,QAAQ,GAAGN,IAAI,CAACK,OAAL,CAAa,GAAb,CAAjB;AACAL,MAAAA,IAAI,GAAGA,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeD,QAAf,CAAP;AACAN,MAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAP;AACAJ,MAAAA,IAAI,GAAG,IAAIG,IAAJ,CAASH,IAAT,EAAeQ,OAAf,EAAP;AACD;;AAED,QAAI,CAACC,KAAK,CAACC,MAAM,CAACV,IAAD,CAAP,CAAV,EAA0B;AACxBA,MAAAA,IAAI,GAAGU,MAAM,CAACV,IAAD,CAAb;AACD;;AAEDE,IAAAA,KAAK,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAR;AACD,GAdM,MAcA,IAAIA,IAAI,YAAYG,IAApB,EAA0B;AAC/BD,IAAAA,KAAK,GAAGF,IAAR;AACD,GAFM,MAEA;AACL,WAAO,KAAP;AACD;;AAED,MAAMW,CAAC,GAAG;AACR,UAAMT,KAAK,CAACU,QAAN,KAAmB,CADjB;AACoB;AAC5B,UAAMV,KAAK,CAACW,OAAN,EAFE;AAEe;AACvB,UAAMX,KAAK,CAACY,QAAN,KAAmB,EAAnB,KAA0B,CAA1B,GAA8B,IAA9B,GAAqCZ,KAAK,CAACY,QAAN,KAAmB,EAHtD;AAG0D;AAClE,UAAMZ,KAAK,CAACY,QAAN,EAJE;AAIgB;AACxB,UAAMZ,KAAK,CAACa,UAAN,EALE;AAKkB;AAC1B,UAAMb,KAAK,CAACc,UAAN,EANE;AAMkB;AAC1B,UAAMC,IAAI,CAACC,KAAL,CAAW,CAAChB,KAAK,CAACU,QAAN,KAAmB,CAApB,IAAyB,CAApC,CAPE;AAOsC;AAC9CO,IAAAA,CAAC,EAAEjB,KAAK,CAACkB,eAAN,EARK,CAQmB;;AARnB,GAAV;;AAWA,MAAI,CAACnB,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,qBAAT;AACD;;AACD,MAAMoB,IAAI,GAAG;AACX,OAAG,QADQ;AAEX,OAAG,QAFQ;AAGX,OAAG,QAHQ;AAIX,OAAG,QAJQ;AAKX,OAAG,QALQ;AAMX,OAAG,QANQ;AAOX,OAAG;AAPQ,GAAb;;AASA,MAAI,OAAOC,IAAP,CAAYrB,MAAZ,CAAJ,EAAyB;AACvBA,IAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAemB,MAAM,CAACC,EAAtB,EAA0B,CAACtB,KAAK,CAACuB,WAAN,KAAsB,EAAvB,EAA2BlB,MAA3B,CAAkC,IAAIgB,MAAM,CAACC,EAAP,CAAUE,MAAhD,CAA1B,CAAT;AACD;;AACD,MAAI,OAAOJ,IAAP,CAAYrB,MAAZ,CAAJ,EAAyB;AACvBA,IAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CACPmB,MAAM,CAACC,EADA,EAEP,CAACD,MAAM,CAACC,EAAP,CAAUE,MAAV,GAAmB,CAAnB,GAAwBH,MAAM,CAACC,EAAP,CAAUE,MAAV,GAAmB,CAAnB,GAAuB,cAAvB,GAAwC,QAAhE,GAA4E,EAA7E,IACAL,IAAI,CAACnB,KAAK,CAACyB,MAAN,KAAiB,EAAlB,CAHG,CAAT;AAKD;;AACD,OAAK,IAAMC,CAAX,IAAgBjB,CAAhB,EAAmB;AACjB,QAAI,IAAIY,MAAJ,CAAW,MAAMK,CAAN,GAAU,GAArB,EAA0BN,IAA1B,CAA+BrB,MAA/B,CAAJ,EAA4C;AAC1CA,MAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CACPmB,MAAM,CAACC,EADA,EAEPD,MAAM,CAACC,EAAP,CAAUE,MAAV,KAAqB,CAArB,GAAyBf,CAAC,CAACiB,CAAD,CAA1B,GAAgC,CAAC,OAAOjB,CAAC,CAACiB,CAAD,CAAT,EAAcrB,MAAd,CAAqB,CAAC,KAAKI,CAAC,CAACiB,CAAD,CAAP,EAAYF,MAAjC,CAFzB,CAAT;AAID;AACF;;AAED,SAAOzB,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4B,WAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AACxC,MAAI,CAACtB,KAAK,CAACC,MAAM,CAACoB,KAAD,CAAP,CAAV,EAA2B;AACzBA,IAAAA,KAAK,GAAGpB,MAAM,CAACoB,KAAD,CAAd;AACD;;AACD,MAAME,IAAI,GAAG,EAAb;;AACA,MAAID,IAAI,IAAIA,IAAI,KAAK,QAArB,EAA+B;AAC7B,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;AAC9BD,MAAAA,IAAI,CAACE,OAAL,CACEnC,UAAU,CACR,IAAII,IAAJ,CAAS,IAAIA,IAAJ,GAAWgC,OAAX,CAAmB,IAAIhC,IAAJ,GAAWU,OAAX,KAAuBoB,CAA1C,CAAT,EAAuDG,kBAAvD,EADQ,EAER,YAFQ,CADZ;AAMD;AACF,GATD,MASO;AACL,SAAK,IAAIH,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,KAApB,EAA2BG,EAAC,EAA5B,EAAgC;AAC9BD,MAAAA,IAAI,CAACK,IAAL,CACEtC,UAAU,CACR,IAAII,IAAJ,CAAS,IAAIA,IAAJ,GAAWgC,OAAX,CAAmB,IAAIhC,IAAJ,GAAWU,OAAX,KAAuBoB,EAA1C,CAAT,EAAuDG,kBAAvD,EADQ,EAER,YAFQ,CADZ;AAMD;AACF;;AACD,SAAOJ,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,aAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AAC1C,MAAMxC,IAAI,GAAG,IAAIG,IAAJ,CAASoC,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0B,CAA1B,CAAb;AACA,MAAMnB,IAAI,GAAGrB,IAAI,CAAC2B,MAAL,EAAb;AACA,SAAON,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoB,cAAT,CAAyBF,IAAzB,EAA+BC,KAA/B,EAAsCE,QAAtC,EAAgD;AACrD;AACA,MAAMC,MAAM,GAAG,IAAIxC,IAAJ,CAASoC,IAAT,EAAeC,KAAf,EAAsB,CAAtB,EAAyB3B,OAAzB,EAAf,CAFqD,CAGrD;;AACA,MAAM+B,QAAQ,GAAGN,aAAa,CAACC,IAAD,EAAOC,KAAP,CAA9B,CAJqD,CAKrD;;AACA,MAAMK,GAAG,GAAG5B,IAAI,CAAC6B,IAAL,CAAU,CAACH,MAAM,GAAGC,QAAV,IAAsB,CAAhC,CAAZ;AACA,MAAIhB,CAAC,GAAGgB,QAAR;;AACA,MAAIF,QAAJ,EAAc;AACZ;AACAd,IAAAA,CAAC,GAAGgB,QAAQ,GAAG,CAAf;AACD;;AACD,MAAMG,MAAM,GAAG,EAAf;AACA,MAAIjB,KAAK,GAAG,CAAZ,CAbqD,CAcrD;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,GAApB,EAAyBZ,CAAC,EAA1B,EAA8B;AAC5Bc,IAAAA,MAAM,CAACd,CAAD,CAAN,GAAY,IAAIe,KAAJ,CAAU,CAAV,CAAZ;;AACA,OAAG;AACD,UAAIlB,KAAK,IAAIa,MAAb,EAAqB;AACnBI,QAAAA,MAAM,CAACd,CAAD,CAAN,CAAUL,CAAV,IAAe;AACbqB,UAAAA,GAAG,EAAEnB,KADQ;AAEb9B,UAAAA,IAAI,EAAEuC,IAAI,GAAG,GAAP,GAAaC,KAAK,CAACU,QAAN,GAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAAb,GAAiD,GAAjD,GAAuDrB,KAAK,CAACoB,QAAN,GAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B;AAFhD,SAAf;AAIAvB,QAAAA,CAAC;AACDE,QAAAA,KAAK;AACN,OAPD,MAOO;AACL;AACD;AACF,KAXD,QAWSF,CAAC,GAAG,CAXb;;AAYAA,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,SAAOmB,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,oBAAT,CAA+Bb,IAA/B,EAAqC;AAC1C,MAAMQ,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,EAA5B,EAAgCA,KAAK,EAArC,EAAyC;AACvC,QAAMC,MAAM,GAAGD,KAAK,CAACH,QAAN,GAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAAf;;AACAJ,IAAAA,MAAM,CAACV,IAAP,CAAYI,cAAc,CAACF,IAAD,EAAOe,MAAP,CAA1B;AACD;;AACD,SAAOP,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,cAAT,CAAyBhB,IAAzB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAMO,MAAM,GAAG,EAAf;AACA,MAAIS,YAAY,GAAG,EAAnB;;AACA,MAAIjB,IAAI,IAAIC,KAAZ,EAAmB;AACjBgB,IAAAA,YAAY,GAAGf,cAAc,CAACF,IAAD,EAAOC,KAAP,CAA7B;AACD,GAFD,MAEO,IAAID,IAAI,IAAI,CAACC,KAAb,EAAoB;AACzBgB,IAAAA,YAAY,GAAGJ,oBAAoB,CAACb,IAAD,CAAnC;AACD;;AACD,MAAIiB,YAAY,IAAIA,YAAY,CAAC9B,MAAjC,EAAyC;AACvC8B,IAAAA,YAAY,CAACC,GAAb,CAAiB,UAACjB,KAAD,EAAW;AAC1B,UAAIA,KAAK,IAAIA,KAAK,CAACd,MAAN,GAAe,CAA5B,EAA+B;AAC7Bc,QAAAA,KAAK,CAACiB,GAAN,CAAU,UAACpC,IAAD,EAAU;AAClB,cAAIA,IAAI,IAAIA,IAAI,CAACK,MAAL,GAAc,CAA1B,EAA6B;AAC3BL,YAAAA,IAAI,CAACoC,GAAL,CAAS,UAACR,GAAD,EAAS;AAChBF,cAAAA,MAAM,CAACV,IAAP,CAAYY,GAAG,CAACjD,IAAhB;AACD,aAFD;AAGD;AACF,SAND;AAOD;AACF,KAVD;AAWD;;AACD,SAAO+C,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,kBAAT,CAA6BnB,IAA7B,EAAmCC,KAAnC,EAA0C;AAC/C,MAAImB,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIb,MAAM,GAAG,EAAb;;AACA,MAAIP,KAAJ,EAAW;AACT,QAAMxC,IAAI,GAAG,IAAIG,IAAJ,CAASoC,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0B,IAA1B,CAAb;AACAxC,IAAAA,IAAI,CAACmC,OAAL,CAAa,CAAb;AACAnC,IAAAA,IAAI,CAAC6D,QAAL,CAAc7D,IAAI,CAACY,QAAL,KAAkB,CAAhC;AACAgD,IAAAA,OAAO,GAAG,IAAIzD,IAAJ,CAASH,IAAI,CAACQ,OAAL,KAAiB,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA3C,CAAV;;AACA,QAAMsD,QAAQ,GAAGtB,KAAK,GAAG,EAAR,GAAa,MAAMA,KAAnB,GAA2BA,KAA5C,CALS,CAKyC;;;AAClDmB,IAAAA,SAAS,GAAG,IAAIxD,IAAJ,CAASoC,IAAI,GAAG,GAAP,GAAauB,QAAb,GAAwB,GAAxB,GAA8B,IAAvC,CAAZ;AACD,GAPD,MAOO;AACLH,IAAAA,SAAS,GAAG,IAAIxD,IAAJ,CAASoC,IAAI,GAAG,GAAP,GAAa,IAAb,GAAoB,GAApB,GAA0B,IAAnC,CAAZ;AACAqB,IAAAA,OAAO,GAAG,IAAIzD,IAAJ,CAASoC,IAAI,GAAG,GAAP,GAAa,IAAb,GAAoB,GAApB,GAA0B,IAAnC,CAAV;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACPY,IAAAA,SAAS,EAAE5D,UAAU,CAAC4D,SAAD,EAAY,YAAZ,CADd;AAEPC,IAAAA,OAAO,EAAE7D,UAAU,CAAC6D,OAAD,EAAU,YAAV;AAFZ,GAAT;AAIA,SAAOb,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,eAAT,CAA0B/D,IAA1B,EAAgC;AACrC,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;AACX,MAAIgE,CAAJ;;AACA,MAAIhE,IAAI,CAACK,OAAL,CAAa,GAAb,IAAoB,EAAxB,EAA4B;AAC1B2D,IAAAA,CAAC,GAAG,CAAC,IAAI7D,IAAJ,GAAWsB,WAAX,KAA2B,GAA3B,GAAiCzB,IAAlC,EAAwCiE,SAAxC,CAAkD,CAAlD,EAAqD,EAArD,CAAJ;AACD,GAFD,MAEO;AACLD,IAAAA,CAAC,GAAGhE,IAAI,CAACiE,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAJ;AACD;;AACD,MAAMC,GAAG,GAAG,IAAI/D,IAAJ,GAAWK,OAAX,EAAZ;AACA,MAAM2D,QAAQ,GAAGhE,IAAI,CAACiE,GAAL,CACfJ,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAe,CAAf,CADe,EAEfI,QAAQ,CAACL,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAe,CAAf,CAAD,CAAR,GAA8B,CAFf,EAGfD,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAe,EAAf,CAHe,EAIfI,QAAQ,CAACL,CAAC,CAACC,SAAF,CAAY,EAAZ,EAAgB,EAAhB,CAAD,CAAR,GAAgC,CAJjB,EAKfD,CAAC,CAACC,SAAF,CAAY,EAAZ,EAAgB,EAAhB,CALe,EAMf,CANe,CAAjB,CATqC,CAgBnC;;AACF,MAAMK,GAAG,GAAG,CAACH,QAAQ,GAAGD,GAAZ,IAAmB,IAA/B,CAjBqC,CAiBD;;AACpC,MAAII,GAAG,GAAG,CAAV,EAAa;AACX,QAAMC,EAAE,GAAGD,GAAG,IAAI,KAAK,EAAL,GAAU,EAAd,CAAd,CADW,CACqB;;;AAChC,QAAME,EAAE,GAAGF,GAAG,IAAI,KAAK,EAAT,CAAd,CAFW,CAEgB;;;AAC3B,QAAMG,EAAE,GAAGH,GAAG,GAAG,EAAjB,CAHW,CAGS;;;AACpB,QAAIC,EAAE,GAAG,CAAT,EAAY;AACV,aAAOF,QAAQ,CAACE,EAAD,CAAR,GAAe,IAAtB;AACD,KAFD,MAEO,IAAIC,EAAE,GAAG,CAAT,EAAY;AACjB,aAAOH,QAAQ,CAACG,EAAD,CAAR,GAAe,KAAtB;AACD,KAFM,MAEA,IAAIC,EAAE,GAAG,CAAT,EAAY;AACjB,aAAOJ,QAAQ,CAACI,EAAD,CAAR,GAAe,KAAtB;AACD,KAFM,MAEA;AACL,aAAO,EAAP;AACD;AACF,GAbD,MAaO;AACL,QAAMF,GAAE,GAAGD,GAAG,IAAI,KAAK,EAAL,GAAU,EAAd,CAAd,CADK,CAC2B;;;AAChC,QAAME,GAAE,GAAGF,GAAG,IAAI,KAAK,EAAT,CAAd,CAFK,CAEsB;;;AAC3B,QAAMG,GAAE,GAAGH,GAAG,GAAG,EAAjB,CAHK,CAGe;;;AACpB,QAAIC,GAAE,GAAG,CAAC,CAAV,EAAa;AACX,aAAO,CAACF,QAAQ,CAACE,GAAD,CAAT,GAAgB,IAAvB;AACD,KAFD,MAEO,IAAIC,GAAE,GAAG,CAAC,CAAV,EAAa;AAClB,aAAO,CAACH,QAAQ,CAACG,GAAD,CAAT,GAAgB,KAAvB;AACD,KAFM,MAEA,IAAIC,GAAE,GAAG,CAAC,CAAV,EAAa;AAClB,aAAO,CAACJ,QAAQ,CAACI,GAAD,CAAT,GAAgB,KAAvB;AACD,KAFM,MAEA;AACL,aAAO,EAAP;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoCnC,IAApC,EAA0CoC,WAA1C,EAAuD;AAC5D,MAAMC,QAAQ,GAAGxB,oBAAoB,CAACb,IAAD,CAArC;AACA,MAAMsC,IAAI,GAAGC,YAAY,CAACvC,IAAD,CAAzB;AACA,MAAMwC,IAAI,GAAG,EAAb;AACA,MAAMhC,MAAM,GAAG,EAAf;AACA6B,EAAAA,QAAQ,CAACnB,GAAT,CAAa,UAACjB,KAAD,EAAQa,KAAR,EAAkB;AAC7B0B,IAAAA,IAAI,CAAC1C,IAAL,CAAU;AACRgB,MAAAA,KAAK,EAALA,KADQ;AAERrB,MAAAA,IAAI,EAAEgD,YAAY,CAACxC,KAAD,CAAZ,CAAoByC,MAApB,CAA2B,UAAAC,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAA5B;AAFE,KAAV;AAID,GALD;;AAMAH,EAAAA,IAAI,CAACtB,GAAL,CAAS,UAACjB,KAAD,EAAQ2C,UAAR,EAAuB;AAC9B3C,IAAAA,KAAK,CAACR,IAAN,CAAWyB,GAAX,CAAe,UAACR,GAAD,EAAS;AACtB,UAAMmC,IAAI,GAAG;AACXpF,QAAAA,IAAI,EAAEiD,GAAG,CAACjD;AADC,OAAb;;AAGA,UAAIiD,GAAG,CAACA,GAAJ,KAAY,CAAhB,EAAmB;AACjB;AACAmC,QAAAA,IAAI,CAACC,KAAL,GAAa3E,MAAM,CAACyE,UAAU,GAAG,CAAd,CAAN,GAAyB,GAAtC;AACD;;AACD,UAAIR,WAAW,IAAIA,WAAW,CAACjD,MAAZ,GAAqB,CAAxC,EAA2C;AACzC;AACA,YAAIiD,WAAW,CAACtE,OAAZ,CAAoB4C,GAAG,CAACjD,IAAxB,IAAgC,CAAC,CAArC,EAAwC;AAAEoF,UAAAA,IAAI,CAACE,IAAL,GAAY,IAAZ;AAAkB;AAC7D;;AACDvC,MAAAA,MAAM,CAACV,IAAP,CAAY+C,IAAZ;AACD,KAbD;AAcD,GAfD;;AAgBArC,EAAAA,MAAM,CAACU,GAAP,CAAW,UAACR,GAAD,EAAMI,KAAN,EAAgB;AACzBJ,IAAAA,GAAG,CAACsC,QAAJ,GAAeC,aAAa,CAACnC,KAAD,EAAQwB,IAAR,CAA5B;AACD,GAFD;AAGA,SAAO9B,MAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,YAAT,CAAuBvC,IAAvB,EAA6B;AAClC,SAAOkD,UAAU,CAAClD,IAAD,CAAV,GAAmB,GAAnB,GAAyB,GAAhC;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASkD,UAAT,CAAqBlD,IAArB,EAA2B;AAChC,SAAQA,IAAI,GAAG,CAAP,KAAa,CAAd,KAAqBA,IAAI,GAAG,GAAP,KAAe,CAAf,IAAoBA,IAAI,GAAG,GAAP,KAAe,CAAxD,CAAP;AACD;AAGD;AACA;AACA;AACA;;AACA,OAAO,SAASyC,YAAT,CAAuBU,GAAvB,EAA4B;AACjC,MAAIA,GAAG,IAAIA,GAAG,CAAChE,MAAJ,GAAa,CAAxB,EAA2B;AACzB,QAAMqB,MAAM,GAAG2C,GAAG,CAACC,MAAJ,CAAW,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAClC,aAAOD,CAAC,CAACE,MAAF,CAASD,CAAT,CAAP;AACD,KAFc,CAAf;AAGA,WAAO9C,MAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyC,aAAT,CAAwBO,GAAxB,EAA6BC,KAA7B,EAAoC;AACzC,MAAID,GAAG,KAAK,CAAR,IAAaC,KAAK,KAAK,CAA3B,EAA8B;AAC5B,WAAO,CAAP;AACD;;AACD,SAAQ/E,IAAI,CAACgF,KAAL,CAAWF,GAAG,GAAGC,KAAN,GAAc,KAAzB,IAAkC,MAA1C,CAJyC,CAIS;AACnD","sourcesContent":["/**\n * @description: 日期格式化\n * @msg\n * 对 Date 的扩展，将 Date 转化为指定格式的 String\n * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\n * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n * eg:\n    console.log(dateFormat(new Date())) // 2021-12-07 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss.S')) // 2021-12-07 16:02:18.912\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd E HH:mm:ss')) // 2021-12-07 二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd EE hh:mm:ss')) // 2021-12-07 周二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-MM-dd EEE hh:mm:ss')) // 2021-12-07 星期二 16:02:18\n    console.log(dateFormat(new Date(), 'yyyy-M-d h:m:s.S')) // 2021-12-7 16:2:18.912\n * @param {String, Number} date 日期\n * @param {String} format 格式\n * @return {String}\n */\nexport function dateFormat (date, format) {\n  let iDate = null\n  if (typeof date === 'number') {\n    iDate = new Date(date)\n  } else if (typeof date === 'string') {\n    date = date.replace(/-/g, '/')\n    if (date.indexOf('T') > -1) {\n      const dotIndex = date.indexOf('.')\n      date = date.substr(0, dotIndex)\n      date = date.replace('T', ' ')\n      date = new Date(date).getTime()\n    }\n\n    if (!isNaN(Number(date))) {\n      date = Number(date)\n    }\n\n    iDate = new Date(date)\n  } else if (date instanceof Date) {\n    iDate = date\n  } else {\n    return false\n  }\n\n  const o = {\n    'M+': iDate.getMonth() + 1, // 月份\n    'd+': iDate.getDate(), // 日\n    'h+': iDate.getHours() % 24 === 0 ? '00' : iDate.getHours() % 24, // 小时\n    'H+': iDate.getHours(), // 小时\n    'm+': iDate.getMinutes(), // 分\n    's+': iDate.getSeconds(), // 秒\n    'q+': Math.floor((iDate.getMonth() + 3) / 3), // 季度\n    S: iDate.getMilliseconds() // 毫秒\n  }\n\n  if (!format) {\n    format = 'yyyy-MM-dd hh:mm:ss'\n  }\n  const week = {\n    0: '\\u65e5',\n    1: '\\u4e00',\n    2: '\\u4e8c',\n    3: '\\u4e09',\n    4: '\\u56db',\n    5: '\\u4e94',\n    6: '\\u516d'\n  }\n  if (/(y+)/.test(format)) {\n    format = format.replace(RegExp.$1, (iDate.getFullYear() + '').substr(4 - RegExp.$1.length))\n  }\n  if (/(E+)/.test(format)) {\n    format = format.replace(\n      RegExp.$1,\n      (RegExp.$1.length > 1 ? (RegExp.$1.length > 2 ? '\\u661f\\u671f' : '\\u5468') : '') +\n      week[iDate.getDay() + '']\n    )\n  }\n  for (const k in o) {\n    if (new RegExp('(' + k + ')').test(format)) {\n      format = format.replace(\n        RegExp.$1,\n        RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)\n      )\n    }\n  }\n\n  return format\n}\n\n/**\n* @description: 获取最近几天的日期\n* @msg 需要依赖 dateFormat()\n* @param {Number} count 天数\n* @param {String} type 默认（向后计算）；before（向前计算）\n* @return {Array}\n* eg:\nconsole.log(getManyDays(5)) // ['2021-12-07', '2021-12-08', '2021-12-09', '2021-12-10', '2021-12-11']\nconsole.log(getManyDays(5, 'before')) // ['2021-12-03', '2021-12-04', '2021-12-05', '2021-12-06', '2021-12-07']\n*/\nexport function getManyDays (count, type) {\n  if (!isNaN(Number(count))) {\n    count = Number(count)\n  }\n  const list = []\n  if (type && type === 'before') {\n    for (let i = 0; i < count; i++) {\n      list.unshift(\n        dateFormat(\n          new Date(new Date().setDate(new Date().getDate() - i)).toLocaleDateString(),\n          'yyyy-MM-dd'\n        )\n      )\n    }\n  } else {\n    for (let i = 0; i < count; i++) {\n      list.push(\n        dateFormat(\n          new Date(new Date().setDate(new Date().getDate() + i)).toLocaleDateString(),\n          'yyyy-MM-dd'\n        )\n      )\n    }\n  }\n  return list\n}\n\n/**\n * @name: 判断某年某月 1 号是星期几\n * @param {year}\n * @param {month}\n * eg:\n    console.log(judjeFirstDay(2021, 12)) // 3\n */\nexport function judjeFirstDay (year, month) {\n  const date = new Date(year, month - 1, 1)\n  const week = date.getDay()\n  return week\n}\n\n/**\n * @name: 生成某年某月日历表\n * @msg 需要依赖 judjeFirstDay()\n * @param {*} year\n * @param {*} month\n * @param {*} startDay 从哪天开始展示（默认从周日）\n */\nexport function createCalendar (year, month, startDay) {\n  // 某个月一共有多少天\n  const allDay = new Date(year, month, 0).getDate()\n  // 某个月 1 号是星期几\n  const firstDay = judjeFirstDay(year, month)\n  // 需要多少行来展示\n  const row = Math.ceil((allDay + firstDay) / 7)\n  let k = firstDay\n  if (startDay) {\n    // 如果从周一开始展示\n    k = firstDay - 1\n  }\n  const result = []\n  let count = 1\n  // 生成日历二维数组\n  for (let i = 0; i < row; i++) {\n    result[i] = new Array(7)\n    do {\n      if (count <= allDay) {\n        result[i][k] = {\n          day: count,\n          date: year + '-' + month.toString().padStart(2, '0') + '-' + count.toString().padStart(2, '0')\n        }\n        k++\n        count++\n      } else {\n        break\n      }\n    } while (k < 7)\n    k = 0\n  }\n  return result\n}\n\n/**\n * @name: 生成某年日历表\n * @msg 需要依赖 judjeFirstDay(), createCalendar()\n * @param {*} year\n */\nexport function createCalendarOfYear (year) {\n  const result = []\n  for (let index = 1; index < 13; index++) {\n    const _month = index.toString().padStart(2, '0')\n    result.push(createCalendar(year, _month))\n  }\n  return result\n}\n\n/**\n * @name: 把生成的日历表转换为一维数组（可以通过日期找出在这一年中的位置）\n * @msg 需要依赖 createCalendarOfYear(), createCalendar()\n * @param {*} year, month\n */\nexport function calendarToList (year, month) {\n  const result = []\n  let calendarData = []\n  if (year && month) {\n    calendarData = createCalendar(year, month)\n  } else if (year && !month) {\n    calendarData = createCalendarOfYear(year)\n  }\n  if (calendarData && calendarData.length) {\n    calendarData.map((month) => {\n      if (month && month.length > 0) {\n        month.map((week) => {\n          if (week && week.length > 0) {\n            week.map((day) => {\n              result.push(day.date)\n            })\n          }\n        })\n      }\n    })\n  }\n  return result\n}\n\n/**\n * @description: 获取某年某月开始与结束日期\n * @msg 需要依赖 dateFormat()\n * @param {Number, String} year\n * @param {Number, String} month\n * @return {Object}\n * eg:\n    console.log(getStartAndEndDate(2021, 12)) // {startTime: '2021-12-01', endTime: '2021-12-31'}\n */\nexport function getStartAndEndDate (year, month) {\n  let startTime = null\n  let endTime = null\n  let result = {}\n  if (month) {\n    const date = new Date(year, month - 1, '01')\n    date.setDate(1)\n    date.setMonth(date.getMonth() + 1)\n    endTime = new Date(date.getTime() - 1000 * 60 * 60 * 24)\n    const _a_month = month < 10 ? '0' + month : month // ios Date() 对象必须是两位的月份，需要补 0，否则提示 Invalid Date\n    startTime = new Date(year + '-' + _a_month + '-' + '01')\n  } else {\n    startTime = new Date(year + '-' + '01' + '-' + '01')\n    endTime = new Date(year + '-' + '12' + '-' + '31')\n  }\n  result = {\n    startTime: dateFormat(startTime, 'yyyy-MM-dd'),\n    endTime: dateFormat(endTime, 'yyyy-MM-dd'),\n  }\n  return result\n}\n\n/**\n * @description: 计算时间间隔\n * @param {String} date 日期格式 2020-01-01 18:00\n * @return {String}\n * eg:\n    console.log(getDateInterval('2020-01-01 18:00')) // 705天前\n */\nexport function getDateInterval (date) {\n  if (!date) return ''\n  let t\n  if (date.indexOf(':') < 13) {\n    t = (new Date().getFullYear() + '-' + date).substring(0, 16)\n  } else {\n    t = date.substring(0, 16)\n  }\n  const now = new Date().getTime()\n  const thatTime = Date.UTC(\n    t.substring(0, 4),\n    parseInt(t.substring(5, 7)) - 1,\n    t.substring(8, 10),\n    parseInt(t.substring(11, 13)) - 8,\n    t.substring(14, 16),\n    0\n  ) // 月份 -1; 小时减 8\n  const tSu = (thatTime - now) / 1000 // 秒\n  if (tSu > 0) {\n    const _d = tSu / (60 * 60 * 24) // 天\n    const _a = tSu / (60 * 60) // 小时\n    const _m = tSu / 60 // 分钟\n    if (_d > 1) {\n      return parseInt(_d) + '天后'\n    } else if (_a > 1) {\n      return parseInt(_a) + '小时后'\n    } else if (_m > 1) {\n      return parseInt(_m) + '分钟后'\n    } else {\n      return ''\n    }\n  } else {\n    const _d = tSu / (60 * 60 * 24) // 天\n    const _a = tSu / (60 * 60) // 小时\n    const _m = tSu / 60 // 分钟\n    if (_d < -1) {\n      return -parseInt(_d) + '天前'\n    } else if (_a < -1) {\n      return -parseInt(_a) + '小时前'\n    } else if (_m < -1) {\n      return -parseInt(_m) + '分钟前'\n    } else {\n      return ''\n    }\n  }\n}\n\n/**\n * @name: 计算出一年的所有日期及位置\n * @msg\n * @param {*} year\n * @param {*} specialDate 需要标注的日期：['2022-02-28', '2022-03-01']\n */\nexport function createCalendarAndPosition (year, specialDate) {\n  const calendar = createCalendarOfYear(year)\n  const days = numberOfDays(year)\n  const _arr = []\n  const result = []\n  calendar.map((month, index) => {\n    _arr.push({\n      index,\n      list: concatArrFun(month).filter(_ => _)\n    })\n  })\n  _arr.map((month, monthIndex) => {\n    month.list.map((day) => {\n      const _obj = {\n        date: day.date\n      }\n      if (day.day === 1) {\n        // 如果是首日，添加上月份\n        _obj.label = Number(monthIndex + 1) + '月'\n      }\n      if (specialDate && specialDate.length > 0) {\n        // 给一些特殊日期做标记\n        if (specialDate.indexOf(day.date) > -1) { _obj.sign = true }\n      }\n      result.push(_obj)\n    })\n  })\n  result.map((day, index) => {\n    day.position = getPercentage(index, days)\n  })\n  return result\n}\n\n/**\n * @name: 计算一年有多少天\n * @param {year}\n */\nexport function numberOfDays (year) {\n  return isLeapYear(year) ? 366 : 365\n}\n\n/**\n * @name: 判断平年润年\n * @param {year}\n */\nexport function isLeapYear (year) {\n  return (year % 4 === 0) && (year % 100 !== 0 || year % 400 === 0)\n}\n\n\n/**\n * @name: 合并数组\n * @param {*} arr\n */\nexport function concatArrFun (arr) {\n  if (arr && arr.length > 0) {\n    const result = arr.reduce((a, b) => {\n      return a.concat(b)\n    })\n    return result\n  }\n}\n\n/**\n * @name: 计算百分比\n * @param {*} num\n * @param {*} total\n */\nexport function getPercentage (num, total) {\n  if (num === 0 || total === 0) {\n    return 0\n  }\n  return (Math.round(num / total * 10000) / 100.00) // 小数点后两位百分比\n}"]},"metadata":{},"sourceType":"module"}