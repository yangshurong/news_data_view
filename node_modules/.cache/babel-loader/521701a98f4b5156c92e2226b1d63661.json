{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport china from \"../assets/map/china.json\";\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\nexport default {\n  props: {\n    title_change: {\n      type: String,\n      default: \"政治\"\n    }\n  },\n  watch: {\n    title_change: function title_change(new_val, old_val) {\n      this.cur_info.title = new_val;\n      this.set_china_map();\n    },\n    hookTooltip: {\n      handler: function handler(new_val, old_val) {\n        //console.log(new_val, old_val, \"---------watch\");\n        var tooltipButton = document.querySelectorAll(\"#main_tooltip_click\"); // 通过addEventListener注册事件\n\n        for (var i = 0; i < tooltipButton.length; i++) {\n          tooltipButton[i].addEventListener(\"click\", this.go_next_page);\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      cur_info: {\n        year: \"2017\",\n        title: \"政治\",\n        max: 0,\n        region: \"\"\n      },\n      list: [{\n        clicked: true,\n        standard: \"2017\"\n      }, {\n        clicked: false,\n        standard: \"2018\"\n      }, {\n        clicked: false,\n        standard: \"2019\"\n      }, {\n        clicked: false,\n        standard: \"2020\"\n      }, {\n        clicked: false,\n        standard: \"2021\"\n      }],\n      hookTooltip: {}\n    };\n  },\n  methods: {\n    // 随机函数\n    randomValue: function randomValue() {\n      return Math.round(Math.random() * 1000);\n    },\n    time_change: function time_change(x, id) {\n      this.cur_info.year = x.standard;\n\n      for (var i in this.list) {\n        this.list[i].clicked = false;\n      }\n\n      this.list[id].clicked = true;\n      this.set_china_map();\n    },\n    go_next_page: function go_next_page() {\n      console.log(this.cur_info.region);\n      this.$router.push({\n        name: \"ShengView\",\n        params: {\n          region: this.cur_info.region\n        }\n      });\n    },\n    set_china_map: function set_china_map() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var that, _data, scar_data, i, x, y, z, name_l, cur, t, options;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this.myChart) {\n                  _this.myChart.dispose();\n\n                  _this.myChart = null;\n                }\n\n                _this.layoutSize = \"150%\";\n                that = _this;\n                _data = china.features, scar_data = [];\n\n                for (i in _data) {\n                  x = _data[i].properties.cp[0], y = _data[i].properties.cp[1], z = _data[i].properties.name;\n                  scar_data.push([x, y, z]);\n                }\n\n                _context.t0 = regeneratorRuntime.keys(speed_average_data[\"scar\"]);\n\n              case 6:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 17;\n                  break;\n                }\n\n                name_l = _context.t1.value;\n                cur = speed_average_data[\"scar\"][name_l];\n\n                if (!(_this.cur_info.title in cur == false)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 6);\n\n              case 11:\n                t = parseInt(_this.cur_info.year) - 2017;\n\n                if (!(t in cur[_this.cur_info.title] == false)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 6);\n\n              case 14:\n                _this.cur_info.max = Math.max(_this.cur_info.max, cur[_this.cur_info.title][t][1]);\n                _context.next = 6;\n                break;\n\n              case 17:\n                if (_this.cur_info.max == 0) _this.cur_info.max = 1;\n                options = {\n                  tooltip: {\n                    triggerOn: \"click\",\n                    enterable: true,\n                    confine: true,\n                    backgroundColor: \"rgba(255,255,255,0)\",\n                    borderColor: \"rgba(0,0,0,0)\",\n                    formatter: function formatter(params) {\n                      that.hookTooltip = params;\n                      var default_style = \"\\n            <div\\n            style=\\\"\\n            width: 1.6667rem;\\n            height:.5rem;\\n            font-size:.4667rem;            \\n            color:rgba(255,255,255)\\\">\\n            \\u8FD8\\u6CA1\\u62FF\\u5230\\u8BE5\\u7701\\u6B64\\u5E74\\u4EFD\\u7684\\u6570\\u636E\\u5462</div>\\n            \";\n                      if (params.name in main_tooltip == false) return default_style;\n                      if (that.cur_info.year in main_tooltip[params.name] == false) return default_style;\n                      var regionName = \"\";\n                      if (that.cur_region_info) clearInterval(that.cur_region_info);\n                      that.cur_region_info = setInterval(function () {\n                        if (document.getElementById(\"main_page_map_tooltip\")) {\n                          if (params.name !== regionName) {\n                            regionName = params.name;\n                            that.cur_info.region = regionName;\n\n                            if (that.toolChart) {\n                              that.toolChart.dispose();\n                              that.toolChart = null;\n                            }\n\n                            that.toolChart = that.$echarts.init(document.getElementById(\"main_page_map_tooltip\"));\n                            var nowClientWidth = document.documentElement.clientWidth; //换算方法;\n\n                            var nowSize = function nowSize(val) {\n                              var initWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1920;\n                              return val * (nowClientWidth / initWidth);\n                            };\n\n                            var treemapOption = {\n                              series: [{\n                                type: \"treemap\",\n                                id: \"echarts-package-size\",\n                                animationDurationUpdate: 1000,\n                                roam: false,\n                                nodeClick: undefined,\n                                data: main_tooltip[regionName][that.cur_info.year],\n                                universalTransition: true,\n                                label: {\n                                  show: true,\n                                  fontSize: nowSize(24)\n                                },\n                                breadcrumb: {\n                                  show: false\n                                }\n                              }]\n                            };\n                            var sunburstOption = {\n                              series: [{\n                                type: \"sunburst\",\n                                id: \"echarts-package-size\",\n                                radius: [\"10%\", \"90%\"],\n                                animationDurationUpdate: 1000,\n                                nodeClick: undefined,\n                                data: main_tooltip[regionName][that.cur_info.year],\n                                universalTransition: true,\n                                itemStyle: {\n                                  borderWidth: nowSize(1),\n                                  borderColor: \"rgba(255,255,255,.5)\"\n                                },\n                                label: {\n                                  show: true,\n                                  fontSize: nowSize(20),\n                                  color: \"rgba(255,255,255)\"\n                                }\n                              }]\n                            };\n                            var currentOption = treemapOption;\n                            that.toolChart.setOption(currentOption);\n                            clearInterval(that.cur_region_Chart);\n                            that.cur_region_Chart = setInterval(function () {\n                              currentOption = currentOption === treemapOption ? sunburstOption : treemapOption;\n                              that.toolChart.setOption(currentOption);\n                            }, 3000);\n                          }\n                        }\n                      }, 500);\n                      return \"\\n            <div class=\\\"main_tooltip\\\">\\n              <div class=\\\"up_span\\\">\\n\\n              </div>\\n              <div id=\\\"main_page_map_tooltip\\\" class=\\\"chart\\\">\\n\\n              </div>\\n              \\n              <div class=\\\"bottom_route\\\">\\n                <div class=\\\"text\\\">\\n                \\u67E5\\u770B\\u8BE5\\u7701\\u8BE6\\u7EC6\\u4FE1\\u606F\\n                </div>\\n                <div id=\\\"main_tooltip_click\\\" class=\\\"icon\\\">\\n\\n                </div>\\n              </div>\\n            </div>\\n            \";\n                    } //数据格式化\n\n                  },\n                  geo: {\n                    map: \"china\",\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    layoutSize: _this.layoutSize,\n                    label: {\n                      normal: {\n                        show: false\n                      },\n                      emphasis: {\n                        show: false\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        shadowColor: \"#276fce\",\n                        shadowOffsetX: 0,\n                        shadowOffsetY: 15,\n                        opacity: 0.5\n                      },\n                      emphasis: {\n                        areaColor: \"#276fce\"\n                      }\n                    }\n                  },\n                  series: [// 常规地图\n                  {\n                    type: \"map\",\n                    mapType: \"china\",\n                    aspectScale: 1,\n                    layoutCenter: [\"50%\", \"50%\"],\n                    //地图位置\n                    layoutSize: _this.layoutSize,\n                    zoom: 1,\n                    //当前视角的缩放比例\n                    // roam: true, //是否开启平游或缩放\n                    scaleLimit: {\n                      //滚轮缩放的极限控制\n                      min: 1,\n                      max: 2\n                    },\n                    label: {\n                      normal: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        },\n                        offset: [0, -20]\n                      },\n                      emphasis: {\n                        show: true,\n                        textStyle: {\n                          color: \"#FFFFFF\",\n                          fontSize: 18\n                        },\n                        offset: [0, -20]\n                      }\n                    },\n                    itemStyle: {\n                      normal: {\n                        areaColor: \"#0c274b\",\n                        borderColor: \"#1cccff\",\n                        borderWidth: 1.5\n                      },\n                      emphasis: {\n                        areaColor: \"#02102b\"\n                      }\n                    }\n                  }, {\n                    show: true,\n                    type: \"effectScatter\",\n                    symbolSize: function symbolSize(params) {\n                      //\n                      var t = parseInt(that.cur_info.year) - 2017;\n                      if (params[2] in speed_average_data[\"scar\"] == false) return 0;\n                      if (that.cur_info.title in speed_average_data[\"scar\"][params[2]] == false) return 0;\n                      if (t in speed_average_data[\"scar\"][params[2]][that.cur_info.title] == false) return 0;\n                      var x = speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\n                      var cur_v = x[1] / that.cur_info.max * 5 + 1; //设置每个点的大小\n\n                      return 30 / cur_v;\n                    },\n                    rippleEffect: {\n                      // 涟漪特效相关配置。\n                      scale: 4 // 控制涟漪大小\n\n                    },\n                    coordinateSystem: \"geo\",\n                    // series坐标系类型\n                    data: scar_data\n                  }]\n                };\n                that.myChart = _this.$echarts.init(_this.$refs.myEchart);\n                that.myChart.setOption(options);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    screenAdapter: function screenAdapter() {\n      //当前视口宽度\n      var nowClientWidth = document.documentElement.clientWidth;\n\n      var nowSize = function nowSize(val) {\n        var initWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1920;\n        return val * (nowClientWidth / initWidth);\n      };\n\n      var that = this;\n      var options = {\n        geo: {\n          itemStyle: {\n            normal: {\n              shadowOffsetY: nowSize(15)\n            }\n          }\n        },\n        series: [// 常规地图\n        {\n          label: {\n            normal: {\n              textStyle: {\n                fontSize: nowSize(18)\n              },\n              offset: [0, nowSize(-20)]\n            },\n            emphasis: {\n              textStyle: {\n                fontSize: nowSize(18)\n              },\n              offset: [0, nowSize(-20)]\n            }\n          },\n          itemStyle: {\n            normal: {\n              borderWidth: nowSize(1.5)\n            }\n          }\n        }, {\n          show: true,\n          type: \"effectScatter\",\n          symbolSize: function symbolSize(params) {\n            //\n            var t = parseInt(that.cur_info.year) - 2017;\n            if (params[2] in speed_average_data[\"scar\"] == false) return 0;\n            if (that.cur_info.title in speed_average_data[\"scar\"][params[2]] == false) return 0;\n            if (t in speed_average_data[\"scar\"][params[2]][that.cur_info.title] == false) return 0;\n            var x = speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\n            var cur_v = x[1] / that.cur_info.max * 5 + 1;\n            var nowClientWidth = document.documentElement.clientWidth;\n\n            var nowSize = function nowSize(val) {\n              var initWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1920;\n              return val * (nowClientWidth / initWidth);\n            }; //设置每个点的大小\n\n\n            return nowSize(30) / cur_v;\n          },\n          rippleEffect: {\n            // 涟漪特效相关配置。\n            scale: nowSize(4) // 控制涟漪大小\n\n          },\n          coordinateSystem: \"geo\",\n          // series坐标系类型\n          data: scar_data\n        }]\n      };\n      this.myChart.setOption(options);\n      this.myChart.resize();\n    }\n  },\n  mounted: function mounted() {\n    this.$echarts.registerMap(\"china\", china);\n    this.set_china_map();\n    window.addEventListener(\"resize\", this.screenAdapter);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.myChart) {\n      this.myChart.dispose();\n      this.myChart = null;\n    }\n\n    if (this.cur_region_Chart) {\n      this.cur_region_Chart.dispose();\n      this.cur_region_Chart = null;\n    }\n\n    if (this.cur_region_info) clearInterval(this.cur_region_info);\n    if (this.cur_region_Chart) clearInterval(this.cur_region_Chart);\n    window.removeEventListener(\"resize\", this.screenAdapter);\n  }\n}; // 基于准备好的dom，初始化echarts实例","map":{"version":3,"mappings":"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","names":["props","title_change","type","default","watch","new_val","old_val","hookTooltip","handler","tooltipButton","data","cur_info","year","title","max","region","list","clicked","standard","methods","randomValue","time_change","x","id","go_next_page","console","name","params","set_china_map","that","_data","china","scar_data","y","z","speed_average_data","name_l","cur","t","parseInt","options","tooltip","triggerOn","enterable","confine","backgroundColor","borderColor","formatter","regionName","document","series","animationDurationUpdate","roam","nodeClick","universalTransition","label","show","fontSize","breadcrumb","radius","itemStyle","borderWidth","color","clearInterval","currentOption","sunburstOption","treemapOption","geo","map","aspectScale","layoutCenter","layoutSize","normal","emphasis","shadowColor","shadowOffsetX","shadowOffsetY","opacity","areaColor","mapType","zoom","scaleLimit","min","textStyle","offset","symbolSize","rippleEffect","scale","coordinateSystem","screenAdapter","mounted","window","beforeDestroy"],"sourceRoot":"src/components","sources":["MainPageRightMap.vue"],"sourcesContent":["<template>\r\n  <div class=\"h-3\">\r\n    <div ref=\"myEchart\" style=\"width: 20.5167rem; height: 13.4667rem\"></div>\r\n    <div class=\"time_content\">\r\n      <div class=\"Timeline\">\r\n        <div class=\"timeaxis\">\r\n          <div v-for=\"(item, i) in list\" :key=\"i\">\r\n            <div class=\"timeaxis-box\">\r\n              <div\r\n                class=\"timeaxis-topText\"\r\n                :class=\"{ 'bd-empty': i == list.length - 1 }\"\r\n              ></div>\r\n              <div\r\n                class=\"circular\"\r\n                @click=\"time_change(item, i)\"\r\n                :class=\"{ circular_click: item.clicked }\"\r\n              ></div>\r\n              <div class=\"timeaxis-bootomText\">\r\n                <div class=\"text\">{{ item.standard }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport china from \"../assets/map/china.json\";\r\nimport speed_average_data from \"../assets/Sheng/item_data/speed_average.json\";\r\nimport main_tooltip from \"../assets/main_time/main_tooltip.json\";\r\nexport default {\r\n  props: {\r\n    title_change: {\r\n      type: String,\r\n      default: \"政治\",\r\n    },\r\n  },\r\n  watch: {\r\n    title_change(new_val, old_val) {\r\n      this.cur_info.title = new_val;\r\n      this.set_china_map();\r\n    },\r\n    hookTooltip: {\r\n      handler(new_val, old_val) {\r\n        //console.log(new_val, old_val, \"---------watch\");\r\n        let tooltipButton = document.querySelectorAll(\"#main_tooltip_click\");\r\n        // 通过addEventListener注册事件\r\n        for (let i = 0; i < tooltipButton.length; i++) {\r\n          tooltipButton[i].addEventListener(\"click\", this.go_next_page);\r\n        }\r\n      },\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      cur_info: {\r\n        year: \"2017\",\r\n        title: \"政治\",\r\n        max: 0,\r\n        region: \"\",\r\n      },\r\n      list: [\r\n        {\r\n          clicked: true,\r\n          standard: \"2017\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2018\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2019\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2020\",\r\n        },\r\n        {\r\n          clicked: false,\r\n          standard: \"2021\",\r\n        },\r\n      ],\r\n      hookTooltip: {},\r\n    };\r\n  },\r\n  methods: {\r\n    // 随机函数\r\n    randomValue() {\r\n      return Math.round(Math.random() * 1000);\r\n    },\r\n    time_change(x, id) {\r\n      this.cur_info.year = x.standard;\r\n      for (let i in this.list) {\r\n        this.list[i].clicked = false;\r\n      }\r\n      this.list[id].clicked = true;\r\n      this.set_china_map();\r\n    },\r\n    go_next_page() {\r\n      console.log(this.cur_info.region);\r\n      this.$router.push({\r\n        name: \"ShengView\",\r\n        params: {\r\n          region: this.cur_info.region,\r\n        },\r\n      });\r\n    },\r\n    async set_china_map() {\r\n      if (this.myChart) {\r\n        this.myChart.dispose();\r\n        this.myChart = null;\r\n      }\r\n      this.layoutSize = \"150%\";\r\n      let that = this;\r\n      let _data = china.features,\r\n        scar_data = [];\r\n      for (let i in _data) {\r\n        let x = _data[i].properties.cp[0],\r\n          y = _data[i].properties.cp[1],\r\n          z = _data[i].properties.name;\r\n        scar_data.push([x, y, z]);\r\n      }\r\n      for (let name_l in speed_average_data[\"scar\"]) {\r\n        let cur = speed_average_data[\"scar\"][name_l];\r\n        if (this.cur_info.title in cur == false) continue;\r\n\r\n        let t = parseInt(this.cur_info.year) - 2017;\r\n        if (t in cur[this.cur_info.title] == false) continue;\r\n        this.cur_info.max = Math.max(\r\n          this.cur_info.max,\r\n          cur[this.cur_info.title][t][1]\r\n        );\r\n      }\r\n      if (this.cur_info.max == 0) this.cur_info.max = 1;\r\n      let options = {\r\n        tooltip: {\r\n          triggerOn: \"click\",\r\n          enterable: true,\r\n          confine: true,\r\n          backgroundColor: \"rgba(255,255,255,0)\",\r\n          borderColor: \"rgba(0,0,0,0)\",\r\n          formatter: function (params) {\r\n            that.hookTooltip = params;\r\n            const default_style = `\r\n            <div\r\n            style=\"\r\n            width: 1.6667rem;\r\n            height:.5rem;\r\n            font-size:.4667rem;            \r\n            color:rgba(255,255,255)\">\r\n            还没拿到该省此年份的数据呢</div>\r\n            `;\r\n            if (params.name in main_tooltip == false) return default_style;\r\n            if (that.cur_info.year in main_tooltip[params.name] == false)\r\n              return default_style;\r\n            let regionName = \"\";\r\n\r\n            if (that.cur_region_info) clearInterval(that.cur_region_info);\r\n            that.cur_region_info = setInterval(function () {\r\n              if (document.getElementById(\"main_page_map_tooltip\")) {\r\n                if (params.name !== regionName) {\r\n                  regionName = params.name;\r\n                  that.cur_info.region = regionName;\r\n                  if (that.toolChart) {\r\n                    that.toolChart.dispose();\r\n                    that.toolChart = null;\r\n                  }\r\n                  that.toolChart = that.$echarts.init(\r\n                    document.getElementById(\"main_page_map_tooltip\")\r\n                  );\r\n                  let nowClientWidth = document.documentElement.clientWidth;\r\n                  //换算方法;\r\n                  let nowSize = function nowSize(val, initWidth = 1920) {\r\n                    return val * (nowClientWidth / initWidth);\r\n                  };\r\n                  const treemapOption = {\r\n                    series: [\r\n                      {\r\n                        type: \"treemap\",\r\n                        id: \"echarts-package-size\",\r\n                        animationDurationUpdate: 1000,\r\n                        roam: false,\r\n                        nodeClick: undefined,\r\n                        data: main_tooltip[regionName][that.cur_info.year],\r\n                        universalTransition: true,\r\n                        label: {\r\n                          show: true,\r\n                          fontSize: nowSize(24),\r\n                        },\r\n                        breadcrumb: {\r\n                          show: false,\r\n                        },\r\n                      },\r\n                    ],\r\n                  };\r\n                  const sunburstOption = {\r\n                    series: [\r\n                      {\r\n                        type: \"sunburst\",\r\n                        id: \"echarts-package-size\",\r\n                        radius: [\"10%\", \"90%\"],\r\n                        animationDurationUpdate: 1000,\r\n                        nodeClick: undefined,\r\n                        data: main_tooltip[regionName][that.cur_info.year],\r\n                        universalTransition: true,\r\n                        itemStyle: {\r\n                          borderWidth: nowSize(1),\r\n                          borderColor: \"rgba(255,255,255,.5)\",\r\n                        },\r\n                        label: {\r\n                          show: true,\r\n                          fontSize: nowSize(20),\r\n                          color: \"rgba(255,255,255)\",\r\n                        },\r\n                      },\r\n                    ],\r\n                  };\r\n                  let currentOption = treemapOption;\r\n                  that.toolChart.setOption(currentOption);\r\n                  clearInterval(that.cur_region_Chart);\r\n                  that.cur_region_Chart = setInterval(function () {\r\n                    currentOption =\r\n                      currentOption === treemapOption\r\n                        ? sunburstOption\r\n                        : treemapOption;\r\n                    that.toolChart.setOption(currentOption);\r\n                  }, 3000);\r\n                }\r\n              }\r\n            }, 500);\r\n            return `\r\n            <div class=\"main_tooltip\">\r\n              <div class=\"up_span\">\r\n\r\n              </div>\r\n              <div id=\"main_page_map_tooltip\" class=\"chart\">\r\n\r\n              </div>\r\n              \r\n              <div class=\"bottom_route\">\r\n                <div class=\"text\">\r\n                查看该省详细信息\r\n                </div>\r\n                <div id=\"main_tooltip_click\" class=\"icon\">\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            `;\r\n          }, //数据格式化\r\n        },\r\n\r\n        geo: {\r\n          map: \"china\",\r\n          aspectScale: 1,\r\n          layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n          layoutSize: this.layoutSize,\r\n          label: {\r\n            normal: {\r\n              show: false,\r\n            },\r\n            emphasis: {\r\n              show: false,\r\n            },\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              shadowColor: \"#276fce\",\r\n              shadowOffsetX: 0,\r\n              shadowOffsetY: 15,\r\n              opacity: 0.5,\r\n            },\r\n            emphasis: {\r\n              areaColor: \"#276fce\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          // 常规地图\r\n          {\r\n            type: \"map\",\r\n            mapType: \"china\",\r\n            aspectScale: 1,\r\n            layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            layoutSize: this.layoutSize,\r\n            zoom: 1, //当前视角的缩放比例\r\n            // roam: true, //是否开启平游或缩放\r\n            scaleLimit: {\r\n              //滚轮缩放的极限控制\r\n              min: 1,\r\n              max: 2,\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n              emphasis: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: 18,\r\n                },\r\n                offset: [0, -20],\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: \"#0c274b\",\r\n                borderColor: \"#1cccff\",\r\n                borderWidth: 1.5,\r\n              },\r\n\r\n              emphasis: {\r\n                areaColor: \"#02102b\",\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            symbolSize: function (params) {\r\n              //\r\n              let t = parseInt(that.cur_info.year) - 2017;\r\n              if (params[2] in speed_average_data[\"scar\"] == false) return 0;\r\n              if (\r\n                that.cur_info.title in speed_average_data[\"scar\"][params[2]] ==\r\n                false\r\n              )\r\n                return 0;\r\n              if (\r\n                t in\r\n                  speed_average_data[\"scar\"][params[2]][that.cur_info.title] ==\r\n                false\r\n              )\r\n                return 0;\r\n              let x =\r\n                speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\r\n              let cur_v = (x[1] / that.cur_info.max) * 5 + 1;\r\n              //设置每个点的大小\r\n              return 30 / cur_v;\r\n            },\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: 4, // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n\r\n      that.myChart = this.$echarts.init(this.$refs.myEchart);\r\n      that.myChart.setOption(options);\r\n    },\r\n    screenAdapter() {\r\n      //当前视口宽度\r\n      let nowClientWidth = document.documentElement.clientWidth;\r\n      let nowSize = function nowSize(val, initWidth = 1920) {\r\n        return val * (nowClientWidth / initWidth);\r\n      };\r\n      let that=this\r\n      let options = {\r\n        geo: {\r\n          itemStyle: {\r\n            normal: {\r\n              shadowOffsetY: nowSize(15),\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          // 常规地图\r\n          {\r\n            label: {\r\n              normal: {\r\n                textStyle: {\r\n                  fontSize: nowSize(18),\r\n                },\r\n                offset: [0, nowSize(-20)],\r\n              },\r\n              emphasis: {\r\n                textStyle: {\r\n                  fontSize: nowSize(18),\r\n                },\r\n                offset: [0, nowSize(-20)],\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                borderWidth: nowSize(1.5),\r\n              },\r\n            },\r\n          },\r\n          {\r\n            show: true,\r\n            type: \"effectScatter\",\r\n            symbolSize: function (params) {\r\n              //\r\n              let t = parseInt(that.cur_info.year) - 2017;\r\n              if (params[2] in speed_average_data[\"scar\"] == false) return 0;\r\n              if (\r\n                that.cur_info.title in speed_average_data[\"scar\"][params[2]] ==\r\n                false\r\n              )\r\n                return 0;\r\n              if (\r\n                t in\r\n                  speed_average_data[\"scar\"][params[2]][that.cur_info.title] ==\r\n                false\r\n              )\r\n                return 0;\r\n              let x =\r\n                speed_average_data[\"scar\"][params[2]][that.cur_info.title][t];\r\n              let cur_v = (x[1] / that.cur_info.max) * 5 + 1;\r\n              let nowClientWidth = document.documentElement.clientWidth;\r\n              let nowSize = function nowSize(val, initWidth = 1920) {\r\n                return val * (nowClientWidth / initWidth);\r\n              };\r\n              //设置每个点的大小\r\n              return nowSize(30) / cur_v;\r\n            },\r\n            rippleEffect: {\r\n              // 涟漪特效相关配置。\r\n              scale: nowSize(4), // 控制涟漪大小\r\n            },\r\n            coordinateSystem: \"geo\", // series坐标系类型\r\n            data: scar_data,\r\n          },\r\n        ],\r\n      };\r\n      this.myChart.setOption(options)\r\n      this.myChart.resize()\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$echarts.registerMap(\"china\", china);\r\n    this.set_china_map();\r\n    window.addEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n  beforeDestroy() {\r\n    if (this.myChart) {\r\n      this.myChart.dispose();\r\n      this.myChart = null;\r\n    }\r\n    if (this.cur_region_Chart) {\r\n      this.cur_region_Chart.dispose();\r\n      this.cur_region_Chart = null;\r\n    }\r\n    if (this.cur_region_info) clearInterval(this.cur_region_info);\r\n    if (this.cur_region_Chart) clearInterval(this.cur_region_Chart);\r\n    window.removeEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n};\r\n// 基于准备好的dom，初始化echarts实例\r\n</script>\r\n<style lang=\"less\">\r\n/*懒加载图标动画*/\r\n.main_tooltip {\r\n  width: 16.8rem;\r\n  height: 10.9333rem;\r\n  background: url(../assets/main_time/main_tooltip.png) no-repeat;\r\n  background-size: 100% 100%;\r\n  // background-position: center top;\r\n  // display: flex;\r\n  // flex-flow: column;\r\n  .up_span {\r\n    padding-top: 1.1667rem;\r\n    padding-right: 0.3333rem;\r\n    font-size: 0.5rem;\r\n  }\r\n  .bottom_route {\r\n    display: flex;\r\n    margin-left: 10.8333rem;\r\n    margin-top: -0.8333rem;\r\n    float: right;\r\n    .icon {\r\n      background: url(../assets/main_time/ze-arrow.png) no-repeat;\r\n      background-size: 100% 100%;\r\n      width: 0.4rem;\r\n      height: 0.4rem;\r\n      z-index: 999999;\r\n    }\r\n    .text {\r\n      //margin-top: -1.6667rem;\r\n      padding-right: 0.3333rem;\r\n      font-size: 0.5rem;\r\n      color: white;\r\n      text-align: right;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n\r\n  .chart {\r\n    width: 100%;\r\n    height: 9.7666rem;\r\n    justify-content: center;\r\n  }\r\n}\r\n.h-3 {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-flow: column;\r\n  .time_content {\r\n    width: 20.5167rem;\r\n    height: 0rem;\r\n    font-size: 0.3333rem;\r\n    z-index: 999999;\r\n    .Timeline {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin-top: 0.6667rem;\r\n      .timeaxis {\r\n        height: 0.8333rem;\r\n        margin-top: 1.3333rem;\r\n        margin-left: 4em;\r\n        display: flex;\r\n        .timeaxis-box {\r\n          width: 5.5rem;\r\n          .circular {\r\n            width: 0.3333rem;\r\n            height: 0.3333rem;\r\n            border-radius: 50%;\r\n            background: #165dff;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.1667rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .circular:hover {\r\n            width: 0.5rem;\r\n            height: 0.5rem;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.25rem;\r\n            left: -0.0833rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .circular_click {\r\n            width: 0.5rem;\r\n            height: 0.5rem;\r\n            border-radius: 50%;\r\n            background: #ff1616;\r\n            //margin-bottom: -0.1667rem;\r\n            position: relative;\r\n            top: -0.25rem;\r\n            left: -0.0833rem;\r\n            box-shadow: 0rem 0rem 0.0833rem 0.0833rem #fff;\r\n          }\r\n          .timeaxis-topText {\r\n            border-bottom: 0.0833rem solid #c9cdd4; //时间轴线的宽度和颜色\r\n            position: relative;\r\n          }\r\n          .bd-empty {\r\n            // border: 0;\r\n            //margin-top: .0833rem;\r\n            border-bottom: 0.0833rem solid #c9cdd4; //时间轴线的宽度和颜色\r\n            opacity: 0;\r\n            position: relative;\r\n          }\r\n          .timeaxis-bootomText {\r\n            position: relative;\r\n            .text {\r\n              position: absolute;\r\n              top: 0.1667rem;\r\n              font-size: 0.4667rem;\r\n              left: -0.3333rem;\r\n              color: #fff;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}