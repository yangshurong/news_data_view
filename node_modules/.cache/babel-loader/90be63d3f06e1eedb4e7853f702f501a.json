{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport mat2 from '../glmatrix/mat2';\n/**\n * @constructor\n * @alias clay.Matrix2\n */\n\nvar Matrix2 = function Matrix2() {\n  /**\n   * Storage of Matrix2\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix2#\n   */\n  this.array = mat2.create();\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix2#\n   */\n\n  this._dirty = true;\n};\n\nMatrix2.prototype = {\n  constructor: Matrix2,\n\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function setArray(arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Clone a new Matrix2\n   * @return {clay.Matrix2}\n   */\n  clone: function clone() {\n    return new Matrix2().copy(this);\n  },\n\n  /**\n   * Copy from b\n   * @param  {clay.Matrix2} b\n   * @return {clay.Matrix2}\n   */\n  copy: function copy(b) {\n    mat2.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate the adjugate of self, in-place\n   * @return {clay.Matrix2}\n   */\n  adjoint: function adjoint() {\n    mat2.adjoint(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function determinant() {\n    return mat2.determinant(this.array);\n  },\n\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix2}\n   */\n  identity: function identity() {\n    mat2.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Invert self\n   * @return {clay.Matrix2}\n   */\n  invert: function invert() {\n    mat2.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix2} b\n   * @return {clay.Matrix2}\n   */\n  mul: function mul(b) {\n    mat2.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix2} a\n   * @return {clay.Matrix2}\n   */\n  mulLeft: function mulLeft(a) {\n    mat2.mul(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix2} b\n   * @return {clay.Matrix2}\n   */\n  multiply: function multiply(b) {\n    mat2.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix2} a\n   * @return {clay.Matrix2}\n   */\n  multiplyLeft: function multiplyLeft(a) {\n    mat2.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Rotate self by a given radian\n   * @param  {number}   rad\n   * @return {clay.Matrix2}\n   */\n  rotate: function rotate(rad) {\n    mat2.rotate(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Scale self by s\n   * @param  {clay.Vector2}  s\n   * @return {clay.Matrix2}\n   */\n  scale: function scale(v) {\n    mat2.scale(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n\n  /**\n   * Transpose self, in-place.\n   * @return {clay.Matrix2}\n   */\n  transpose: function transpose() {\n    mat2.transpose(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function toString() {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function toArray() {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n/**\n * @param  {Matrix2} out\n * @param  {Matrix2} a\n * @return {Matrix2}\n */\n\nMatrix2.adjoint = function (out, a) {\n  mat2.adjoint(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.copy = function (out, a) {\n  mat2.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2} a\n * @return {number}\n */\n\n\nMatrix2.determinant = function (a) {\n  return mat2.determinant(a.array);\n};\n/**\n * @param  {clay.Matrix2} out\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.identity = function (out) {\n  mat2.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.invert = function (out, a) {\n  mat2.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Matrix2} b\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.mul = function (out, a, b) {\n  mat2.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Matrix2} b\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.multiply = Matrix2.mul;\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {number}   rad\n * @return {clay.Matrix2}\n */\n\nMatrix2.rotate = function (out, a, rad) {\n  mat2.rotate(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2}\n */\n\n\nMatrix2.scale = function (out, a, v) {\n  mat2.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {Matrix2} out\n * @param  {Matrix2} a\n * @return {Matrix2}\n */\n\n\nMatrix2.transpose = function (out, a) {\n  mat2.transpose(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\nexport default Matrix2;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/data_view/my_project/vue2_app/myapp/node_modules/_claygl@1.3.0@claygl/src/math/Matrix2.js"],"names":["mat2","Matrix2","array","create","_dirty","prototype","constructor","setArray","arr","i","length","clone","copy","b","adjoint","determinant","identity","invert","mul","mulLeft","a","multiply","multiplyLeft","rotate","rad","scale","v","transpose","toString","Array","join","call","toArray","slice","out"],"mappings":"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","sourcesContent":["import mat2 from '../glmatrix/mat2';\n\n/**\n * @constructor\n * @alias clay.Matrix2\n */\nvar Matrix2 = function() {\n\n    /**\n     * Storage of Matrix2\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix2#\n     */\n    this.array = mat2.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix2#\n     */\n    this._dirty = true;\n};\n\nMatrix2.prototype = {\n\n    constructor: Matrix2,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Clone a new Matrix2\n     * @return {clay.Matrix2}\n     */\n    clone: function() {\n        return (new Matrix2()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix2} b\n     * @return {clay.Matrix2}\n     */\n    copy: function(b) {\n        mat2.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate the adjugate of self, in-place\n     * @return {clay.Matrix2}\n     */\n    adjoint: function() {\n        mat2.adjoint(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function() {\n        return mat2.determinant(this.array);\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix2}\n     */\n    identity: function() {\n        mat2.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix2}\n     */\n    invert: function() {\n        mat2.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix2} b\n     * @return {clay.Matrix2}\n     */\n    mul: function(b) {\n        mat2.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix2} a\n     * @return {clay.Matrix2}\n     */\n    mulLeft: function(a) {\n        mat2.mul(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix2} b\n     * @return {clay.Matrix2}\n     */\n    multiply: function(b) {\n        mat2.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix2} a\n     * @return {clay.Matrix2}\n     */\n    multiplyLeft: function(a) {\n        mat2.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian\n     * @param  {number}   rad\n     * @return {clay.Matrix2}\n     */\n    rotate: function(rad) {\n        mat2.rotate(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * @param  {clay.Vector2}  s\n     * @return {clay.Matrix2}\n     */\n    scale: function(v) {\n        mat2.scale(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Transpose self, in-place.\n     * @return {clay.Matrix2}\n     */\n    transpose: function() {\n        mat2.transpose(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\n/**\n * @param  {Matrix2} out\n * @param  {Matrix2} a\n * @return {Matrix2}\n */\nMatrix2.adjoint = function(out, a) {\n    mat2.adjoint(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @return {clay.Matrix2}\n */\nMatrix2.copy = function(out, a) {\n    mat2.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2} a\n * @return {number}\n */\nMatrix2.determinant = function(a) {\n    return mat2.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix2} out\n * @return {clay.Matrix2}\n */\nMatrix2.identity = function(out) {\n    mat2.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @return {clay.Matrix2}\n */\nMatrix2.invert = function(out, a) {\n    mat2.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Matrix2} b\n * @return {clay.Matrix2}\n */\nMatrix2.mul = function(out, a, b) {\n    mat2.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Matrix2} b\n * @return {clay.Matrix2}\n */\nMatrix2.multiply = Matrix2.mul;\n\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {number}   rad\n * @return {clay.Matrix2}\n */\nMatrix2.rotate = function(out, a, rad) {\n    mat2.rotate(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2} out\n * @param  {clay.Matrix2} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2}\n */\nMatrix2.scale = function(out, a, v) {\n    mat2.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {Matrix2} out\n * @param  {Matrix2} a\n * @return {Matrix2}\n */\nMatrix2.transpose = function(out, a) {\n    mat2.transpose(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix2;\n"]},"metadata":{},"sourceType":"module"}